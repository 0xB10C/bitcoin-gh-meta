[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16476](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16476.html) (Use ArgsManager::ALLOW_STRING flag explicitly by hebasto)\n* [#16411](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16411.html) (Signet support by kallewoof)\n* [#16097](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16097.html) (Add Flags enum to ArgsManager class by hebasto)\n* [#14045](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14045.html) (refactor: Fix the chainparamsbase -> util circular dependency by Empact)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-05-02T00:43:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-488521831",
      "id" : 488521831,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4ODUyMTgzMQ==",
      "updated_at" : "2019-07-27T23:50:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/488521831",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280411609"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280411609"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, `IsValidArgStr`?",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-02T13:13:56Z",
      "diff_hunk" : "@@ -163,103 +164,34 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static bool ValidArgStr(const std::string& arg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280411609",
      "id" : 280411609,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDQxMTYwOQ==",
      "original_commit_id" : "7fcb87bcc76a62770a73685314babd32631e173e",
      "original_position" : 12,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 232997353,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280411609",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280412183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280412183"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe `arg.size() > 1 && arg[0] == '-'` or do we need `-`?",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-02T13:15:33Z",
      "diff_hunk" : "@@ -163,103 +164,34 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static bool ValidArgStr(const std::string& arg)\n+{\n+    return !arg.empty() && arg[0] == '-';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280412183",
      "id" : 280412183,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDQxMjE4Mw==",
      "original_commit_id" : "7fcb87bcc76a62770a73685314babd32631e173e",
      "original_position" : 14,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 232997353,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280412183",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-232997353 from promag\r\n\r\n> I had a refactor (which I did't submit) that supported chaining ArgsManager. The idea was to support changing some args when calling some RPC, so a ArgsManager is created with the \"overridden\" args and passed thru. Is this something you are considering supporting or do you see a different approach?\r\n\r\nThis change does make it easier to add new settings sources (with consistent handling of negated args and things), so it should be compatible with your idea and maybe helpful.\r\n\r\nDepending on the situation, I think having chained or scoped settings could be a good idea or not. I do think that in wallet code and application code generally it's good to get away from using key-value storage classes like `ArgsManager` or `UniValue` as quickly as possible, and switch to more direct representations like `CCoinControl` that are type safe and can be accessed more simply.",
      "created_at" : "2019-05-08T20:45:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-490644550",
      "id" : 490644550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MDY0NDU1MA==",
      "updated_at" : "2019-05-08T20:45:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/490644550",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-05-24T13:58:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-495641177",
      "id" : 495641177,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5NTY0MTE3Nw==",
      "updated_at" : "2019-05-24T13:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/495641177",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288149094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288149094"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Digging this chainable `return *this;` interface.",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T14:55:53Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288149094",
      "id" : 288149094,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE0OTA5NA==",
      "original_commit_id" : "05820024fe6821849d0c659e16ef328c8f08415a",
      "original_position" : 20,
      "path" : "src/util/settings.cpp",
      "position" : 20,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288149094",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288155825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288155825"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm slightly confused about why `source.forced` will cause a negation to have occurred, but I guess the rationale here is that if we've forced a value, we effectively want to ignore prev/subsequent values in favor of the forced one.",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T15:09:09Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(value)).SetForced());\n+    }\n+    if (auto* value = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*value)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* value = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*value)).SetConfigFile(false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* value = FindKey(*map, name)) {\n+            span = SettingsSpan(*value);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool skip_negated_command_line)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed.\n+        const bool reverse_precedence = source.config_file;\n+\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        //! Stick with highest priority value, if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetListSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool prev_negated = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        if (!source.span.empty()) {\n+            // Weird behavior preserved for backwards compatibility: Apply\n+            // config file settings even if negated on command line. Negating a\n+            // setting on command line will discard earlier settings on the\n+            // command line and settings in the config file, unless the negated\n+            // command line value is followed by non-negated value, in which\n+            // case config file settings will be brought back from the dead (but\n+            // earlier command line settings will still be discarded).\n+            const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+            if (!prev_negated || add_zombie_config_values) {\n+                for (const auto& value : source.span) {\n+                    if (value.isArray()) {\n+                        result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                    } else {\n+                        result.push_back(value);\n+                    }\n+                }\n+            }\n+        }\n+\n+        prev_negated |= source.span.negated() > 0 || source.forced;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288155825",
      "id" : 288155825,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE1NTgyNQ==",
      "original_commit_id" : "05820024fe6821849d0c659e16ef328c8f08415a",
      "original_position" : 120,
      "path" : "src/util/settings.cpp",
      "position" : null,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288155825",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288166922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288166922"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Long lines like this are hard to review. Consider breaking to 100col?",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T15:30:55Z",
      "diff_hunk" : "@@ -163,103 +164,33 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static std::string SettingName(const std::string& arg)\n+{\n+    return arg.empty() || arg[0] != '-' ? arg : arg.substr(1);\n+}\n+\n /** Internal helper functions for ArgsManager */\n class ArgsManagerHelper {\n public:\n-    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n-\n     /** Determine whether to use config settings in the default section,\n      *  See also comments around ArgsManager::ArgsManager() below. */\n     static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n     {\n         return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n     }\n \n-    /** Convert regular argument into the network-specific setting */\n-    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n-    {\n-        assert(arg.length() > 1 && arg[0] == '-');\n-        return \"-\" + am.m_network + \".\" + arg.substr(1);\n-    }\n-\n-    /** Find arguments in a map and add them to a vector */\n-    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n-    {\n-        auto it = map_args.find(arg);\n-        if (it != map_args.end()) {\n-            res.insert(res.end(), it->second.begin(), it->second.end());\n-        }\n-    }\n-\n-    /** Return true/false if an argument is set in a map, and also\n-     *  return the first (or last) of the possibly multiple values it has\n-     */\n-    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n-    {\n-        auto it = map_args.find(arg);\n-\n-        if (it == map_args.end() || it->second.empty()) {\n-            return std::make_pair(false, std::string());\n-        }\n-\n-        if (getLast) {\n-            return std::make_pair(true, it->second.back());\n-        } else {\n-            return std::make_pair(true, it->second.front());\n-        }\n-    }\n-\n-    /* Get the string value of an argument, returning a pair of a boolean\n-     * indicating the argument was found, and the value for the argument\n-     * if it was found (or the empty string if not found).\n-     */\n-    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    static util::SettingsValue Get(const ArgsManager& am, const std::string& arg, bool no_network = false)\n     {\n         LOCK(am.cs_args);\n-        std::pair<bool,std::string> found_result(false, std::string());\n-\n-        // We pass \"true\" to GetArgHelper in order to return the last\n-        // argument value seen from the command line (so \"bitcoind -foo=bar\n-        // -foo=baz\" gives GetArg(am,\"foo\")=={true,\"baz\"}\n-        found_result = GetArgHelper(am.m_override_args, arg, true);\n-        if (found_result.first) {\n-            return found_result;\n-        }\n \n-        // But in contrast we return the first argument seen in a config file,\n-        // so \"foo=bar \\n foo=baz\" in the config file gives\n-        // GetArg(am,\"foo\")={true,\"bar\"}\n-        if (!am.m_network.empty()) {\n-            found_result = GetArgHelper(am.m_config_args, NetworkArg(am, arg));\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = no_network;\n \n-        if (UseDefaultSection(am, arg)) {\n-            found_result = GetArgHelper(am.m_config_args, arg);\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n-\n-        return found_result;\n-    }\n-\n-    /* Special test for -testnet and -regtest args, because we\n-     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n-     */\n-    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n-    {\n-        std::pair<bool,std::string> found_result(false,std::string());\n-        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n-        if (!found_result.first) {\n-            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n-            if (!found_result.first) {\n-                return false; // not set\n-            }\n-        }\n-        return InterpretBool(found_result.second); // is set, so evaluate\n+        return GetSetting(am.m_settings, no_network ? \"\" : am.m_network, SettingName(arg), !UseDefaultSection(am, arg), skip_negated_command_line);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288166922",
      "id" : 288166922,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE2NjkyMg==",
      "original_commit_id" : "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "original_position" : 121,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288166922",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288173284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288173284"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for the nice comment. Potentially out of scope: could we log warnings for this instead of silently ignoring?",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T15:44:35Z",
      "diff_hunk" : "@@ -405,116 +320,91 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n             key.erase(0, 1);\n \n         // Check for -nofoo\n-        if (InterpretNegatedOption(key, val)) {\n-            m_override_args[key].clear();\n-        } else {\n-            m_override_args[key].push_back(val);\n+        key.erase(0, 1);\n+        std::string section;\n+        bool negated = InterpretNegatedOption(section, key, val);\n+        // Weird behavior preserved for backwards compatibility: command line\n+        // options with section prefixes are allowed but ignored. It would be\n+        // better if these options triggered the IsArgKnown error below, or were\n+        // actually used instead of silently ignored.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288173284",
      "id" : 288173284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE3MzI4NA==",
      "original_commit_id" : "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "original_position" : 202,
      "path" : "src/util/system.cpp",
      "position" : 206,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288173284",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288244735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288244735"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Cool test! The formatted output is really helpful. Encourage other reviewers to run and inspect with\r\n```sh\r\nSETTINGS_MERGE_TEST_OUT=results.txt ./src/test/test_bitcoin --run_test=settings_tests/Merge\r\n```",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T18:32:51Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue list_value(util::SettingsValue::VARR);\n+    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\n+        list_value.push_back(item);\n+    }\n+    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\n+    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&]{\n+                for (bool force_set : {false, true}) {\n+                    for (bool ignore_default_section_config : {false, true}) {\n+                        fn(arg_actions, conf_actions, force_set, ignore_default_section_config);\n+                    }\n+                }\n+            });\n+        });\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see comments below).\n+BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288244735",
      "id" : 288244735,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI0NDczNQ==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 64,
      "path" : "src/test/settings_tests.cpp",
      "position" : 79,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288244735",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288245372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288245372"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note to other reviewers: the code in this file is already in master (as of 1d543adae593bdbfd954e80ed61ac907db0c5a7b) and its appearance here is only due to this branch not being based on a more recent version of master.",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T18:34:26Z",
      "diff_hunk" : "@@ -34,5 +34,37 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288245372",
      "id" : 288245372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI0NTM3Mg==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 35,
      "path" : "src/test/util.h",
      "position" : null,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288245372",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288250769"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288250769"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could test precedence difference between commandline and config file with the following diff (if you end up needing to rebase for some other reason):\r\n```diff\r\ndiff --git a/src/test/settings_tests.cpp b/src/test/settings_tests.cpp\r\nindex 36188f8471..c82ecaea8c 100644\r\n--- a/src/test/settings_tests.cpp\r\n+++ b/src/test/settings_tests.cpp\r\n@@ -18,14 +18,28 @@ BOOST_AUTO_TEST_CASE(Simple)\r\n {\r\n     util::Settings settings;\r\n     settings.command_line_options[\"name\"].push_back(\"val1\");\r\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\r\n     settings.ro_config[\"section\"][\"name\"].push_back(2);\r\n-    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\r\n-    util::SettingsValue list_value(util::SettingsValue::VARR);\r\n-    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\r\n-        list_value.push_back(item);\r\n-    }\r\n-    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\r\n-    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\r\n+\r\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\r\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\r\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\r\n+        for (const auto& item : GetListSetting(s, \"section\", \"name\", false)) {\r\n+            list_value.push_back(item);\r\n+        }\r\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\r\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\r\n+    };\r\n+\r\n+    // The last given arg takes precedence when specified via commandline.\r\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\r\n+\r\n+    util::Settings settings2;\r\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\r\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\r\n+\r\n+    // The first given arg takes precedence when specified via config file.\r\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\r\n }\r\n \r\n // Test different ways settings can be merged, and verify results. This test can\r\n```",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T18:48:13Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue list_value(util::SettingsValue::VARR);\n+    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\n+        list_value.push_back(item);\n+    }\n+    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\n+    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288250769",
      "id" : 288250769,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI1MDc2OQ==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 29,
      "path" : "src/test/settings_tests.cpp",
      "position" : 44,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288250769",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288262559"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288262559"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288250769\r\n\r\nThanks! Added test.",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T19:19:46Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue list_value(util::SettingsValue::VARR);\n+    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\n+        list_value.push_back(item);\n+    }\n+    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\n+    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288262559",
      "id" : 288262559,
      "in_reply_to_id" : 288250769,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI2MjU1OQ==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 29,
      "path" : "src/test/settings_tests.cpp",
      "position" : 44,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288262559",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288264332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288264332"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288149094\r\n\r\nThese can be nice sometimes. They are also called fluent interfaces (https://en.wikipedia.org/wiki/Fluent_interface)",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T19:24:37Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288264332",
      "id" : 288264332,
      "in_reply_to_id" : 288149094,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI2NDMzMg==",
      "original_commit_id" : "05820024fe6821849d0c659e16ef328c8f08415a",
      "original_position" : 20,
      "path" : "src/util/settings.cpp",
      "position" : 20,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288264332",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288266961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288266961"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288155825\r\n\r\nI guess it doesn't cause a real negation, more of an effective negation like you described. I renamed the variable `result_complete` to avoid mentioning negation.",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T19:31:50Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(value)).SetForced());\n+    }\n+    if (auto* value = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*value)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* value = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*value)).SetConfigFile(false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* value = FindKey(*map, name)) {\n+            span = SettingsSpan(*value);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool skip_negated_command_line)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed.\n+        const bool reverse_precedence = source.config_file;\n+\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        //! Stick with highest priority value, if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetListSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool prev_negated = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        if (!source.span.empty()) {\n+            // Weird behavior preserved for backwards compatibility: Apply\n+            // config file settings even if negated on command line. Negating a\n+            // setting on command line will discard earlier settings on the\n+            // command line and settings in the config file, unless the negated\n+            // command line value is followed by non-negated value, in which\n+            // case config file settings will be brought back from the dead (but\n+            // earlier command line settings will still be discarded).\n+            const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+            if (!prev_negated || add_zombie_config_values) {\n+                for (const auto& value : source.span) {\n+                    if (value.isArray()) {\n+                        result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                    } else {\n+                        result.push_back(value);\n+                    }\n+                }\n+            }\n+        }\n+\n+        prev_negated |= source.span.negated() > 0 || source.forced;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288266961",
      "id" : 288266961,
      "in_reply_to_id" : 288155825,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI2Njk2MQ==",
      "original_commit_id" : "05820024fe6821849d0c659e16ef328c8f08415a",
      "original_position" : 120,
      "path" : "src/util/settings.cpp",
      "position" : null,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288266961",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288307354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288307354"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So it should be rebased, imo. Otherwise `git blame` will return different results for the same lines depending on what commit is currently checked out.",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-28T21:20:37Z",
      "diff_hunk" : "@@ -34,5 +34,37 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288307354",
      "id" : 288307354,
      "in_reply_to_id" : 288245372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODMwNzM1NA==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 35,
      "path" : "src/test/util.h",
      "position" : null,
      "pull_request_review_id" : 242928533,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288307354",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288628719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288628719"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288166922\r\n\r\nLooks like github diffs are 120 columns wide. I wrapped this line and put `ColumnLimit: 119` in my clang-format",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-29T15:28:40Z",
      "diff_hunk" : "@@ -163,103 +164,33 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static std::string SettingName(const std::string& arg)\n+{\n+    return arg.empty() || arg[0] != '-' ? arg : arg.substr(1);\n+}\n+\n /** Internal helper functions for ArgsManager */\n class ArgsManagerHelper {\n public:\n-    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n-\n     /** Determine whether to use config settings in the default section,\n      *  See also comments around ArgsManager::ArgsManager() below. */\n     static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n     {\n         return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n     }\n \n-    /** Convert regular argument into the network-specific setting */\n-    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n-    {\n-        assert(arg.length() > 1 && arg[0] == '-');\n-        return \"-\" + am.m_network + \".\" + arg.substr(1);\n-    }\n-\n-    /** Find arguments in a map and add them to a vector */\n-    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n-    {\n-        auto it = map_args.find(arg);\n-        if (it != map_args.end()) {\n-            res.insert(res.end(), it->second.begin(), it->second.end());\n-        }\n-    }\n-\n-    /** Return true/false if an argument is set in a map, and also\n-     *  return the first (or last) of the possibly multiple values it has\n-     */\n-    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n-    {\n-        auto it = map_args.find(arg);\n-\n-        if (it == map_args.end() || it->second.empty()) {\n-            return std::make_pair(false, std::string());\n-        }\n-\n-        if (getLast) {\n-            return std::make_pair(true, it->second.back());\n-        } else {\n-            return std::make_pair(true, it->second.front());\n-        }\n-    }\n-\n-    /* Get the string value of an argument, returning a pair of a boolean\n-     * indicating the argument was found, and the value for the argument\n-     * if it was found (or the empty string if not found).\n-     */\n-    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    static util::SettingsValue Get(const ArgsManager& am, const std::string& arg, bool no_network = false)\n     {\n         LOCK(am.cs_args);\n-        std::pair<bool,std::string> found_result(false, std::string());\n-\n-        // We pass \"true\" to GetArgHelper in order to return the last\n-        // argument value seen from the command line (so \"bitcoind -foo=bar\n-        // -foo=baz\" gives GetArg(am,\"foo\")=={true,\"baz\"}\n-        found_result = GetArgHelper(am.m_override_args, arg, true);\n-        if (found_result.first) {\n-            return found_result;\n-        }\n \n-        // But in contrast we return the first argument seen in a config file,\n-        // so \"foo=bar \\n foo=baz\" in the config file gives\n-        // GetArg(am,\"foo\")={true,\"bar\"}\n-        if (!am.m_network.empty()) {\n-            found_result = GetArgHelper(am.m_config_args, NetworkArg(am, arg));\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = no_network;\n \n-        if (UseDefaultSection(am, arg)) {\n-            found_result = GetArgHelper(am.m_config_args, arg);\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n-\n-        return found_result;\n-    }\n-\n-    /* Special test for -testnet and -regtest args, because we\n-     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n-     */\n-    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n-    {\n-        std::pair<bool,std::string> found_result(false,std::string());\n-        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n-        if (!found_result.first) {\n-            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n-            if (!found_result.first) {\n-                return false; // not set\n-            }\n-        }\n-        return InterpretBool(found_result.second); // is set, so evaluate\n+        return GetSetting(am.m_settings, no_network ? \"\" : am.m_network, SettingName(arg), !UseDefaultSection(am, arg), skip_negated_command_line);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288628719",
      "id" : 288628719,
      "in_reply_to_id" : 288166922,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODYyODcxOQ==",
      "original_commit_id" : "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "original_position" : 121,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288628719",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639295"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288173284\r\n\r\n> Potentially out of scope: could we log warnings for this instead of silently ignoring?\r\n\r\nI'm planning on making followup PRs that simplify and clean up all these \"Weird behavior preserved for backwards compatibility\" instances. I'd rather not add warnings in this PR partly because I'm disinclined to mix up behavior changes and refactoring changes in the same PR, but also because having some invalid options result in warnings and other invalid options result in errors seems even more strange and complicated than what the code does now.",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-29T15:49:15Z",
      "diff_hunk" : "@@ -405,116 +320,91 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n             key.erase(0, 1);\n \n         // Check for -nofoo\n-        if (InterpretNegatedOption(key, val)) {\n-            m_override_args[key].clear();\n-        } else {\n-            m_override_args[key].push_back(val);\n+        key.erase(0, 1);\n+        std::string section;\n+        bool negated = InterpretNegatedOption(section, key, val);\n+        // Weird behavior preserved for backwards compatibility: command line\n+        // options with section prefixes are allowed but ignored. It would be\n+        // better if these options triggered the IsArgKnown error below, or were\n+        // actually used instead of silently ignored.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639295",
      "id" : 288639295,
      "in_reply_to_id" : 288173284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODYzOTI5NQ==",
      "original_commit_id" : "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "original_position" : 202,
      "path" : "src/util/system.cpp",
      "position" : 206,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639295",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639762"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288245372\r\n\r\nRebased!",
      "commit_id" : "d074e431b76f156e94eb7ed2601d5af4fb65c6cb",
      "created_at" : "2019-05-29T15:50:08Z",
      "diff_hunk" : "@@ -34,5 +34,37 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639762",
      "id" : 288639762,
      "in_reply_to_id" : 288245372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODYzOTc2Mg==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 35,
      "path" : "src/test/util.h",
      "position" : null,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-06-28T14:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639762",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-tACK https://github.com/bitcoin/bitcoin/pull/15934/commits/955c782eb776669576a798122da6557fcca8ee39 based on [the interdiff]( https://gist.github.com/jamesob/d8a458334386ab67082956e404fb704d) and running an abbreviated version of the testing above.",
      "created_at" : "2019-05-29T18:25:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-497054493",
      "id" : 497054493,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5NzA1NDQ5Mw==",
      "updated_at" : "2019-05-29T18:25:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/497054493",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 955c782eb776669576a798122da6557fcca8ee39 -> 14a6dfcb929d2313577788765f7dc47dd98afbe9 ([pr/mergeset.8](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.8) -> [pr/mergeset.9](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.9)) due to conflict with #16278\r\n",
      "created_at" : "2019-06-27T20:49:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506505636",
      "id" : 506505636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNjUwNTYzNg==",
      "updated_at" : "2019-06-27T20:49:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506505636",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "reACK https://github.com/bitcoin/bitcoin/pull/15934/commits/14a6dfcb929d2313577788765f7dc47dd98afbe9 based on [interdiff](https://gist.github.com/jamesob/0b4adf37c627e6171c2599dfa95f0901). Only change since `pr/mergeset.8` is a [trivial `LogPrintf` fix](https://gist.github.com/jamesob/0b4adf37c627e6171c2599dfa95f0901#file-8-to-9-diff-L72-L73). ",
      "created_at" : "2019-06-27T21:29:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506518739",
      "id" : 506518739,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNjUxODczOQ==",
      "updated_at" : "2019-06-27T21:29:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506518739",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 14a6dfcb929d2313577788765f7dc47dd98afbe9 -> d074e431b76f156e94eb7ed2601d5af4fb65c6cb ([pr/mergeset.9](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.9) -> [pr/mergeset.10](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.10)) due to conflict with #16300\r\n",
      "created_at" : "2019-06-28T16:34:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506797780",
      "id" : 506797780,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNjc5Nzc4MA==",
      "updated_at" : "2019-06-28T16:34:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506797780",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "reACK d074e431b76f156e94eb7ed2601d5af4fb65c6cb based on [an empty interdiff](https://gist.github.com/jamesob/fea5597b189e899154e1e9a9bdca0d94).",
      "created_at" : "2019-06-28T17:34:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506816948",
      "id" : 506816948,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNjgxNjk0OA==",
      "updated_at" : "2019-06-28T17:34:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506816948",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
