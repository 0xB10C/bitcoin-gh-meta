[
   {
      "body" : "This badly needs testing, but I'm not sure how to simulate crashes in the middle of flushing (I've manually verified this patch can recover from failure by introducing an `exit(0)` in the middle of the flush code).",
      "created_at" : "2017-04-04T09:55:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-291452125",
      "id" : 291452125,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10148",
      "updated_at" : "2017-04-04T10:02:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291452125",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Cool!\r\n\r\n> but I'm not sure how to simulate crashes in the middle of flushing \r\n\r\nI'll get to that :)",
      "created_at" : "2017-04-04T10:43:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-291463322",
      "id" : 291463322,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10148",
      "updated_at" : "2017-04-04T10:43:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291463322",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Rebased, fixed a bug, and added a commit to allows simulating crashes after partial flushes.",
      "created_at" : "2017-04-05T09:38:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-291808418",
      "id" : 291808418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10148",
      "updated_at" : "2017-04-05T09:38:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291808418",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r109871704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109871704"
         }
      },
      "body" : "This sync should be optional at least (not a realistic crash otherwise)",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-05T09:41:08Z",
      "diff_hunk" : "@@ -74,6 +76,15 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n             LogPrint(BCLog::COINDB, \"Writing partial batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n             db.WriteBatch(batch);\n             batch.Clear();\n+            int crash_simulate = GetArg(\"-dbcrashratio\", 0);\n+            if (crash_simulate) {\n+                static FastRandomContext rng;\n+                if (rng.rand32() % crash_simulate == 0) {\n+                    LogPrintf(\"Simulating a crash. Goodbye.\");\n+                    sync();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r109871704",
      "id" : 109871704,
      "original_commit_id" : "aa249d732f065826ebdd6fb376f79f863e6d9212",
      "original_position" : 20,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 31000441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109871704",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r109901577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109901577"
         }
      },
      "body" : "I've just removed the sync. It seems not needed for testing (I've done reindexes with hundreds of crashes in between).",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-05T12:29:09Z",
      "diff_hunk" : "@@ -74,6 +76,15 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n             LogPrint(BCLog::COINDB, \"Writing partial batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n             db.WriteBatch(batch);\n             batch.Clear();\n+            int crash_simulate = GetArg(\"-dbcrashratio\", 0);\n+            if (crash_simulate) {\n+                static FastRandomContext rng;\n+                if (rng.rand32() % crash_simulate == 0) {\n+                    LogPrintf(\"Simulating a crash. Goodbye.\");\n+                    sync();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r109901577",
      "id" : 109901577,
      "original_commit_id" : "aa249d732f065826ebdd6fb376f79f863e6d9212",
      "original_position" : 20,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 31033083,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109901577",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : " contrib/devtools/check-doc.py is unhappy that you added new arguments without asking for permission from the argument gods.",
      "created_at" : "2017-04-05T16:28:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-291918026",
      "id" : 291918026,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10148",
      "updated_at" : "2017-04-05T16:28:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291918026",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r109964790"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109964790"
         }
      },
      "body" : "If we have memory usage that is some multiple of this, perhaps the argument should be in the form of the actual usage rather than the batch size?",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-05T16:31:53Z",
      "diff_hunk" : "@@ -44,10 +45,21 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n+uint256 CCoinsViewDB::GetUptoBlock() const {\n+    uint256 hashBestChain;\n+    if (!db.Read(DB_BEST_BLOCK_UPTO, hashBestChain))\n+        return uint256();\n+    return hashBestChain;\n+}\n+\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n+    size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize) << 20;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r109964790",
      "id" : 109964790,
      "original_commit_id" : "7c2459d0e323c22250f527a5da6d618b69b69c07",
      "original_position" : 23,
      "path" : "src/txdb.cpp",
      "position" : 34,
      "pull_request_review_id" : 31101736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109964790",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110097256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110097256"
         }
      },
      "body" : "Well the relevant constraint is the memory usage peak from allocating the batch, which depends on the batch memory usage, not dbcache memory usage. Also, I don't think anyone will need to change this property (except for tests, where it's very useful to get much more frequent partial flushes).",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-06T07:47:23Z",
      "diff_hunk" : "@@ -44,10 +45,21 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n+uint256 CCoinsViewDB::GetUptoBlock() const {\n+    uint256 hashBestChain;\n+    if (!db.Read(DB_BEST_BLOCK_UPTO, hashBestChain))\n+        return uint256();\n+    return hashBestChain;\n+}\n+\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n+    size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize) << 20;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110097256",
      "id" : 110097256,
      "original_commit_id" : "7c2459d0e323c22250f527a5da6d618b69b69c07",
      "original_position" : 23,
      "path" : "src/txdb.cpp",
      "position" : 34,
      "pull_request_review_id" : 31243122,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110097256",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110909763"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110909763"
         }
      },
      "body" : "Can you add comments as to why 3 (and, below, 2) bytes are overhead here?",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T14:01:18Z",
      "diff_hunk" : "@@ -75,6 +83,7 @@ class CDBBatch\n         leveldb::Slice slValue(ssValue.data(), ssValue.size());\n \n         batch.Put(slKey, slValue);\n+        size_estimate += 3 + slKey.size() + slValue.size();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110909763",
      "id" : 110909763,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 25,
      "path" : "src/dbwrapper.h",
      "position" : null,
      "pull_request_review_id" : 32114181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110909763",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110974712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110974712"
         }
      },
      "body" : "Hmm, yes. Were you intending to do this after this PR? Can you just delete it and re-create it here? I feel like it may make sense to move the chainActive.Tip-setting from LoadBlockIndexDB to after this point.\r\n\r\nSpeaking of which, did you mean to add a PruneBlockIndexCandidates() to ReplayBlocks ala LoadBlockIndexDB?",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T18:10:16Z",
      "diff_hunk" : "@@ -1476,6 +1479,12 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n+                if (!ReplayBlocks(chainparams, pcoinsdbview)) {\n+                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the databse using -reindex.\");\n+                    break;\n+                }\n+                pcoinsTip->SetBestBlock(pcoinsdbview->GetBestBlock()); // TODO: only initialize pcoinsTip after ReplayBlocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110974712",
      "id" : 110974712,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 18,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 32114181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110974712",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110981608"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110981608"
         }
      },
      "body" : "Should we also fail here if hashBest has been written (ie is non-IsNull) but isnt in mapBlockIndex?",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T18:37:57Z",
      "diff_hunk" : "@@ -3681,6 +3694,51 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    uint256 hashUpto = view->GetUptoBlock();\n+\n+    if (hashUpto.IsNull() || hashBest == hashUpto) return true;\n+\n+    if (mapBlockIndex.count(hashUpto) == 0) {\n+        return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+    }\n+    auto pindexUpto = mapBlockIndex[hashUpto];\n+\n+    int nHeight = 1; // Skip the genesis block\n+    if (mapBlockIndex.count(hashBest)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110981608",
      "id" : 110981608,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 50,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 32114181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110981608",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110985291"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110985291"
         }
      },
      "body" : "Based on the comment above ModifyNewCoins I do not believe this works, we may need something new to capture the \"maybe not fresh, but definitely fully overwrite in any case\" case.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T18:53:29Z",
      "diff_hunk" : "@@ -1296,6 +1296,19 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n     }\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static void ReplayBlock(const CBlock& block, CCoinsViewCache& inputs, int nHeight)\n+{\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        inputs.ModifyNewCoins(tx->GetHash(), tx->IsCoinBase())->FromTx(*tx, nHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110985291",
      "id" : 110985291,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 13,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 32114181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110985291",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110985717"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110985717"
         }
      },
      "body" : "It seems super weird to be acting entirely on non-globals, and then suddenly set a global here.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T18:55:23Z",
      "diff_hunk" : "@@ -3681,6 +3694,51 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    uint256 hashUpto = view->GetUptoBlock();\n+\n+    if (hashUpto.IsNull() || hashBest == hashUpto) return true;\n+\n+    if (mapBlockIndex.count(hashUpto) == 0) {\n+        return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+    }\n+    auto pindexUpto = mapBlockIndex[hashUpto];\n+\n+    int nHeight = 1; // Skip the genesis block\n+    if (mapBlockIndex.count(hashBest)) {\n+        auto pindexBest = mapBlockIndex[hashBest];\n+        if (pindexUpto->GetAncestor(pindexBest->nHeight) != pindexBest) {\n+            return error(\"ReplayBlocks(): chainstate tip does not derive from final boundary\");\n+        }\n+        nHeight = std::max(nHeight, pindexBest->nHeight);\n+    }\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying %i blocks\\n\", pindexUpto->nHeight - nHeight);\n+\n+    while (nHeight < pindexUpto->nHeight) {\n+        ++nHeight;\n+        auto pindex = pindexUpto->GetAncestor(nHeight);\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+            return error(\"ReplayBlocks(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+        }\n+        ReplayBlock(block, cache, pindex->nHeight);\n+    }\n+    cache.SetBestBlock(hashUpto);\n+    chainActive.SetTip(pindexUpto);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r110985717",
      "id" : 110985717,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 71,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 32114181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110985717",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111017596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111017596"
         }
      },
      "body" : "Done",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T21:27:04Z",
      "diff_hunk" : "@@ -75,6 +83,7 @@ class CDBBatch\n         leveldb::Slice slValue(ssValue.data(), ssValue.size());\n \n         batch.Put(slKey, slValue);\n+        size_estimate += 3 + slKey.size() + slValue.size();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111017596",
      "id" : 111017596,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 25,
      "path" : "src/dbwrapper.h",
      "position" : null,
      "pull_request_review_id" : 32232318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111017596",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111017968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111017968"
         }
      },
      "body" : "> Were you intending to do this after this PR?\r\n\r\nYes, I tried doing it inside the PR, but doing it properly requires a bit more shuffling around and refactoring, which I'd prefer to keep for later.\r\n\r\n> Speaking of which, did you mean to add a PruneBlockIndexCandidates() to ReplayBlocks ala LoadBlockIndexDB?\r\n\r\nReplayBlocks doesn't touch the block index, so I don't think that would have any effect.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T21:28:43Z",
      "diff_hunk" : "@@ -1476,6 +1479,12 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n+                if (!ReplayBlocks(chainparams, pcoinsdbview)) {\n+                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the databse using -reindex.\");\n+                    break;\n+                }\n+                pcoinsTip->SetBestBlock(pcoinsdbview->GetBestBlock()); // TODO: only initialize pcoinsTip after ReplayBlocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111017968",
      "id" : 111017968,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 18,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 32232318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111017968",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111018536"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111018536"
         }
      },
      "body" : "Nice catch, fixed.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T21:31:36Z",
      "diff_hunk" : "@@ -1296,6 +1296,19 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n     }\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static void ReplayBlock(const CBlock& block, CCoinsViewCache& inputs, int nHeight)\n+{\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        inputs.ModifyNewCoins(tx->GetHash(), tx->IsCoinBase())->FromTx(*tx, nHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111018536",
      "id" : 111018536,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 13,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 32232318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111018536",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111019092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111019092"
         }
      },
      "body" : "I think that would be caught by other code we already have, but I've added it here.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T21:34:07Z",
      "diff_hunk" : "@@ -3681,6 +3694,51 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    uint256 hashUpto = view->GetUptoBlock();\n+\n+    if (hashUpto.IsNull() || hashBest == hashUpto) return true;\n+\n+    if (mapBlockIndex.count(hashUpto) == 0) {\n+        return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+    }\n+    auto pindexUpto = mapBlockIndex[hashUpto];\n+\n+    int nHeight = 1; // Skip the genesis block\n+    if (mapBlockIndex.count(hashBest)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111019092",
      "id" : 111019092,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 50,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 32232318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111019092",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111019745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111019745"
         }
      },
      "body" : "Good point, fixed.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T21:37:20Z",
      "diff_hunk" : "@@ -3681,6 +3694,51 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    uint256 hashUpto = view->GetUptoBlock();\n+\n+    if (hashUpto.IsNull() || hashBest == hashUpto) return true;\n+\n+    if (mapBlockIndex.count(hashUpto) == 0) {\n+        return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+    }\n+    auto pindexUpto = mapBlockIndex[hashUpto];\n+\n+    int nHeight = 1; // Skip the genesis block\n+    if (mapBlockIndex.count(hashBest)) {\n+        auto pindexBest = mapBlockIndex[hashBest];\n+        if (pindexUpto->GetAncestor(pindexBest->nHeight) != pindexBest) {\n+            return error(\"ReplayBlocks(): chainstate tip does not derive from final boundary\");\n+        }\n+        nHeight = std::max(nHeight, pindexBest->nHeight);\n+    }\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying %i blocks\\n\", pindexUpto->nHeight - nHeight);\n+\n+    while (nHeight < pindexUpto->nHeight) {\n+        ++nHeight;\n+        auto pindex = pindexUpto->GetAncestor(nHeight);\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+            return error(\"ReplayBlocks(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+        }\n+        ReplayBlock(block, cache, pindex->nHeight);\n+    }\n+    cache.SetBestBlock(hashUpto);\n+    chainActive.SetTip(pindexUpto);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111019745",
      "id" : 111019745,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 71,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 32232318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111019745",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111026186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111026186"
         }
      },
      "body" : "The PruneBlockIndexCandidates in LoadBlockIndexDB uses chainActive.Tip(), so I assumed it may need to be re-run with the new tip (though likely not a bug without it, just a should-do). I'm ok with cleaning this stuff up in a followup PR, but it seems less than ideal as-is right now.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-11T22:12:10Z",
      "diff_hunk" : "@@ -1476,6 +1479,12 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n+                if (!ReplayBlocks(chainparams, pcoinsdbview)) {\n+                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the databse using -reindex.\");\n+                    break;\n+                }\n+                pcoinsTip->SetBestBlock(pcoinsdbview->GetBestBlock()); // TODO: only initialize pcoinsTip after ReplayBlocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111026186",
      "id" : 111026186,
      "original_commit_id" : "a4ddc70da212715d4182fc6991cafc5befa4b350",
      "original_position" : 18,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 32241433,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111026186",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "Addressed some of @TheBlueMatt's comments.",
      "created_at" : "2017-04-12T10:42:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-293540226",
      "id" : 293540226,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10148",
      "updated_at" : "2017-04-12T10:42:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/293540226",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111158923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111158923"
         }
      },
      "body" : "s/which changes/which some changes/?",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-12T14:04:48Z",
      "diff_hunk" : "@@ -315,6 +315,9 @@ class CCoinsView\n     //! Retrieve the block hash whose state this CCoinsView currently represents\n     virtual uint256 GetBestBlock() const;\n \n+    //! Retrieve the block hash up to which changes are included",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111158923",
      "id" : 111158923,
      "original_commit_id" : "16fc01343c1b7b9245847b11d5c61864b4b7cf1a",
      "original_position" : 4,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 32383712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111158923",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111161611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111161611"
         }
      },
      "body" : "I believe we'll hit this if we ever crash during a disconnect? Seems kinda annoying to not support disconnect.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-12T14:14:22Z",
      "diff_hunk" : "@@ -3681,6 +3702,51 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    uint256 hashUpto = view->GetUptoBlock();\n+\n+    if (hashUpto.IsNull() || hashBest == hashUpto) return true;\n+\n+    if (mapBlockIndex.count(hashUpto) == 0 ||\n+        (!hashBest.IsNull() && mapBlockIndex.count(hashBest) == 0)) {\n+        return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+    }\n+    auto pindexUpto = mapBlockIndex[hashUpto];\n+\n+    int nHeight = 1; // Skip the genesis block\n+    if (mapBlockIndex.count(hashBest)) {\n+        auto pindexBest = mapBlockIndex[hashBest];\n+        if (pindexUpto->GetAncestor(pindexBest->nHeight) != pindexBest) {\n+            return error(\"ReplayBlocks(): chainstate tip does not derive from final boundary\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111161611",
      "id" : 111161611,
      "original_commit_id" : "16fc01343c1b7b9245847b11d5c61864b4b7cf1a",
      "original_position" : 87,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 32383712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111161611",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111163455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111163455"
         }
      },
      "body" : "It seems to me this API ties us to only doing batches per-block, and never across long chains of actions (or at least not across multiple reorgs). Consider the case where you disconnect A to get to B, then disconnect B to get to C then connect D. There is no way to encode that you need to ensure everything from disconnecting B must be replayed to ensure there are no leftover entries from that, I believe. This is likely OK, but should likely be documented somewhere to ensure we dont end up adding a multi-reorg-flush bug later on.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-12T14:21:03Z",
      "diff_hunk" : "@@ -44,10 +47,21 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n+uint256 CCoinsViewDB::GetUptoBlock() const {\n+    uint256 hashBestChain;\n+    if (!db.Read(DB_BEST_BLOCK_UPTO, hashBestChain))\n+        return uint256();\n+    return hashBestChain;\n+}\n+\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n+    size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize) << 20;\n+    if (!hashBlock.IsNull()) {\n+        batch.Write(DB_BEST_BLOCK_UPTO, hashBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111163455",
      "id" : 111163455,
      "original_commit_id" : "16fc01343c1b7b9245847b11d5c61864b4b7cf1a",
      "original_position" : 36,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 32383712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111163455",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111192437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111192437"
         }
      },
      "body" : "\r\n\r\nThat's a great point. I hadn't considered that in the case of a reorg the set of partially written changes may include things from multiple branches. It seems solvable by allowing the 'upto' blocks to be a list of tip hashes, and then at start time choose which ones to undo and which ones to replay. I think that's a problem for later, but it makes sense to have a comment about it.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-12T16:05:42Z",
      "diff_hunk" : "@@ -44,10 +47,21 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n+uint256 CCoinsViewDB::GetUptoBlock() const {\n+    uint256 hashBestChain;\n+    if (!db.Read(DB_BEST_BLOCK_UPTO, hashBestChain))\n+        return uint256();\n+    return hashBestChain;\n+}\n+\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n+    size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize) << 20;\n+    if (!hashBlock.IsNull()) {\n+        batch.Write(DB_BEST_BLOCK_UPTO, hashBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111192437",
      "id" : 111192437,
      "original_commit_id" : "16fc01343c1b7b9245847b11d5c61864b4b7cf1a",
      "original_position" : 36,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 32420715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111192437",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111192566"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111192566"
         }
      },
      "body" : "Good catch. ReplayBlocks should learn to deal with a reorg.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-12T16:06:10Z",
      "diff_hunk" : "@@ -3681,6 +3702,51 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    uint256 hashUpto = view->GetUptoBlock();\n+\n+    if (hashUpto.IsNull() || hashBest == hashUpto) return true;\n+\n+    if (mapBlockIndex.count(hashUpto) == 0 ||\n+        (!hashBest.IsNull() && mapBlockIndex.count(hashBest) == 0)) {\n+        return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+    }\n+    auto pindexUpto = mapBlockIndex[hashUpto];\n+\n+    int nHeight = 1; // Skip the genesis block\n+    if (mapBlockIndex.count(hashBest)) {\n+        auto pindexBest = mapBlockIndex[hashBest];\n+        if (pindexUpto->GetAncestor(pindexBest->nHeight) != pindexBest) {\n+            return error(\"ReplayBlocks(): chainstate tip does not derive from final boundary\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111192566",
      "id" : 111192566,
      "original_commit_id" : "16fc01343c1b7b9245847b11d5c61864b4b7cf1a",
      "original_position" : 87,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 32420857,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111192566",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Updated to deal with reorganizations. The disk format and recovery code can now also deal with multiple partially written branches. That functionality is not needed yet, but means we can switch to different partial flushing strategies later without breaking compatibility with older versions.",
      "created_at" : "2017-04-16T14:18:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-294354066",
      "id" : 294354066,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10148",
      "updated_at" : "2017-04-16T14:18:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294354066",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111764166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111764166"
         }
      },
      "body" : "I think you can do this for (almost) free now. See https://github.com/TheBlueMatt/bitcoin/commit/747b766a02c32a47a5f0018ed352991b55aaab19, though if you dont want to take it here I'll just PR it afterwards.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T16:01:59Z",
      "diff_hunk" : "@@ -1476,6 +1479,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n+                if (!ReplayBlocks(chainparams, pcoinsdbview)) {\n+                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                    break;\n+                }\n+                pcoinsTip->SetBestBlock(pcoinsdbview->GetBestBlock()); // TODO: only initialize pcoinsTip after ReplayBlocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111764166",
      "id" : 111764166,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 18,
      "path" : "src/init.cpp",
      "position" : 18,
      "pull_request_review_id" : 33027962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111764166",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111771238"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111771238"
         }
      },
      "body" : "Doesn't this need to be in reverse order (like in DisconnectBlock, maybe you should just go ahead and add an option to DisconnectBlock to ignore errors in a pervious commit to make it easier to review?)?",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T16:44:53Z",
      "diff_hunk" : "@@ -3690,6 +3693,124 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        // We cannot use ModifyNewCoins here, as the entry may exist in the cache already.\n+        inputs.ModifyCoins(tx->GetHash())->FromTx(*tx, pindex->nHeight);\n+    }\n+    return true;\n+}\n+\n+/** Unapply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollbackBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: Merge with DisconnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"RollbackBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"RollbackBlock(): no undo data available\");\n+    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n+        return error(\"RollbackBlock(): failure reading undo data\");\n+\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n+        return error(\"RollbackBlock(): block and undo data inconsistent\");\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111771238",
      "id" : 111771238,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 115,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33027962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111771238",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111773328"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111773328"
         }
      },
      "body" : "Would be nice to not lose the error messages by adding a flag for printing errors. I think you need the flag either way for the next line, as I dont think you can run the Clear() if we're re-undoing a tx.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T16:56:43Z",
      "diff_hunk" : "@@ -1505,18 +1505,15 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n     CCoinsModifier coins = view.ModifyCoins(out.hash);\n     if (undo.nHeight != 0) {\n         // undo data contains height: this is the last output of the prevout tx being spent\n-        if (!coins->IsPruned())\n-            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        if (!coins->IsPruned()) fClean = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111773328",
      "id" : 111773328,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 15,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33027962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111773328",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111794633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111794633"
         }
      },
      "body" : "I'm not convinced this is right. What if you connect both A and B, in the simple case? Now you'll disconnect B before you re-connect A and then re-connect B? Is that neccessary?",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T18:44:54Z",
      "diff_hunk" : "@@ -3690,6 +3693,124 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        // We cannot use ModifyNewCoins here, as the entry may exist in the cache already.\n+        inputs.ModifyCoins(tx->GetHash())->FromTx(*tx, pindex->nHeight);\n+    }\n+    return true;\n+}\n+\n+/** Unapply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollbackBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: Merge with DisconnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"RollbackBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"RollbackBlock(): no undo data available\");\n+    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n+        return error(\"RollbackBlock(): failure reading undo data\");\n+\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n+        return error(\"RollbackBlock(): block and undo data inconsistent\");\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransaction& tx = *block.vtx[i];\n+        inputs.ModifyCoins(tx.GetHash())->Clear();\n+        if (i != 0) {\n+            CTxUndo &txundo = blockUndo.vtxundo[i - 1];\n+            if (txundo.vprevout.size() != tx.vin.size()) {\n+                return error(\"RollbackBlock(): block and undo data inconsistent\");\n+            }\n+            for (size_t n = 0; n < txundo.vprevout.size(); ++n) {\n+                ApplyTxInUndo(txundo.vprevout[n], inputs, COutPoint(tx.GetHash(), n)); // Ignore return value\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    if (!hashBest.IsNull()) return true;\n+    std::vector<uint256> hashHeads = view->GetHeadBlocks();\n+    if (hashHeads.empty()) return true;\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying blocks\\n\");\n+\n+    std::vector<const CBlockIndex*> pindexHeads;\n+    const CBlockIndex* pindexFork = nullptr;\n+    bool fGenesis = false;\n+\n+    // Find last common ancestor of all heads.\n+    for (const uint256& hash : hashHeads) {\n+        if (hash.IsNull()) {\n+            fGenesis = true;\n+            continue;\n+        }\n+        auto it = mapBlockIndex.find(hash);\n+        if (it == mapBlockIndex.end()) {\n+            return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+        }\n+        pindexHeads.push_back(it->second);\n+        pindexFork = pindexFork ? LastCommonAncestor(pindexFork, it->second) : it->second;\n+    }\n+\n+    // Build a set of all blocks to rollback.\n+    std::set<const CBlockIndex*, CBlockIndexWorkComparator> vpindexRollback;\n+    for (size_t i = 1; i < pindexHeads.size(); ++i) {\n+        const CBlockIndex *pindexHead = pindexHeads[i];\n+        while (fGenesis ? pindexHead != nullptr : pindexHead != pindexFork) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111794633",
      "id" : 111794633,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 168,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33060942,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111794633",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111797390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111797390"
         }
      },
      "body" : "There is no change in behavior here; the error case doesn't cause a return from the function. I believe the new (and existing) code is fine: if a failure is detected, the caller (`VerifyDB` or `DisconnectBlock`) won't flush the changes view to the level below, ignoring the resulting inconsistent state.\r\n\r\nIf you insist, I'll add a flag to ignore the error messages, but (perhaps in a separate PR) I think we should rid of these `error()` calls and instead perhaps return some return code. Reporting of these things doesn't belong here.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T18:57:46Z",
      "diff_hunk" : "@@ -1505,18 +1505,15 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n     CCoinsModifier coins = view.ModifyCoins(out.hash);\n     if (undo.nHeight != 0) {\n         // undo data contains height: this is the last output of the prevout tx being spent\n-        if (!coins->IsPruned())\n-            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        if (!coins->IsPruned()) fClean = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111797390",
      "id" : 111797390,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 15,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33063828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111797390",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111799121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111799121"
         }
      },
      "body" : "Good catch, fixed.\r\n\r\nI'll try to do the merging in a extra commit.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T19:07:02Z",
      "diff_hunk" : "@@ -3690,6 +3693,124 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        // We cannot use ModifyNewCoins here, as the entry may exist in the cache already.\n+        inputs.ModifyCoins(tx->GetHash())->FromTx(*tx, pindex->nHeight);\n+    }\n+    return true;\n+}\n+\n+/** Unapply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollbackBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: Merge with DisconnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"RollbackBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"RollbackBlock(): no undo data available\");\n+    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n+        return error(\"RollbackBlock(): failure reading undo data\");\n+\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n+        return error(\"RollbackBlock(): block and undo data inconsistent\");\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111799121",
      "id" : 111799121,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 115,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33063828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111799121",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111799239"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111799239"
         }
      },
      "body" : "Note that i starts at 1 in the loop, skipping the branch that leads to the new tip. I've added a comment to clarify.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T19:07:43Z",
      "diff_hunk" : "@@ -3690,6 +3693,124 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        // We cannot use ModifyNewCoins here, as the entry may exist in the cache already.\n+        inputs.ModifyCoins(tx->GetHash())->FromTx(*tx, pindex->nHeight);\n+    }\n+    return true;\n+}\n+\n+/** Unapply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollbackBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: Merge with DisconnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"RollbackBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"RollbackBlock(): no undo data available\");\n+    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n+        return error(\"RollbackBlock(): failure reading undo data\");\n+\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n+        return error(\"RollbackBlock(): block and undo data inconsistent\");\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransaction& tx = *block.vtx[i];\n+        inputs.ModifyCoins(tx.GetHash())->Clear();\n+        if (i != 0) {\n+            CTxUndo &txundo = blockUndo.vtxundo[i - 1];\n+            if (txundo.vprevout.size() != tx.vin.size()) {\n+                return error(\"RollbackBlock(): block and undo data inconsistent\");\n+            }\n+            for (size_t n = 0; n < txundo.vprevout.size(); ++n) {\n+                ApplyTxInUndo(txundo.vprevout[n], inputs, COutPoint(tx.GetHash(), n)); // Ignore return value\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    if (!hashBest.IsNull()) return true;\n+    std::vector<uint256> hashHeads = view->GetHeadBlocks();\n+    if (hashHeads.empty()) return true;\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying blocks\\n\");\n+\n+    std::vector<const CBlockIndex*> pindexHeads;\n+    const CBlockIndex* pindexFork = nullptr;\n+    bool fGenesis = false;\n+\n+    // Find last common ancestor of all heads.\n+    for (const uint256& hash : hashHeads) {\n+        if (hash.IsNull()) {\n+            fGenesis = true;\n+            continue;\n+        }\n+        auto it = mapBlockIndex.find(hash);\n+        if (it == mapBlockIndex.end()) {\n+            return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+        }\n+        pindexHeads.push_back(it->second);\n+        pindexFork = pindexFork ? LastCommonAncestor(pindexFork, it->second) : it->second;\n+    }\n+\n+    // Build a set of all blocks to rollback.\n+    std::set<const CBlockIndex*, CBlockIndexWorkComparator> vpindexRollback;\n+    for (size_t i = 1; i < pindexHeads.size(); ++i) {\n+        const CBlockIndex *pindexHead = pindexHeads[i];\n+        while (fGenesis ? pindexHead != nullptr : pindexHead != pindexFork) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111799239",
      "id" : 111799239,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 168,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33063828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111799239",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111801012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111801012"
         }
      },
      "body" : "Indeed, but that only means you wont do the disconnect-then-reconnect thing for one block (which I suppose may be fine for this PR), but you will do it if you have two back-to-back blocks in the list (or am I confused?).",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T19:17:40Z",
      "diff_hunk" : "@@ -3690,6 +3693,124 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        // We cannot use ModifyNewCoins here, as the entry may exist in the cache already.\n+        inputs.ModifyCoins(tx->GetHash())->FromTx(*tx, pindex->nHeight);\n+    }\n+    return true;\n+}\n+\n+/** Unapply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollbackBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: Merge with DisconnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"RollbackBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"RollbackBlock(): no undo data available\");\n+    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n+        return error(\"RollbackBlock(): failure reading undo data\");\n+\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n+        return error(\"RollbackBlock(): block and undo data inconsistent\");\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransaction& tx = *block.vtx[i];\n+        inputs.ModifyCoins(tx.GetHash())->Clear();\n+        if (i != 0) {\n+            CTxUndo &txundo = blockUndo.vtxundo[i - 1];\n+            if (txundo.vprevout.size() != tx.vin.size()) {\n+                return error(\"RollbackBlock(): block and undo data inconsistent\");\n+            }\n+            for (size_t n = 0; n < txundo.vprevout.size(); ++n) {\n+                ApplyTxInUndo(txundo.vprevout[n], inputs, COutPoint(tx.GetHash(), n)); // Ignore return value\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    if (!hashBest.IsNull()) return true;\n+    std::vector<uint256> hashHeads = view->GetHeadBlocks();\n+    if (hashHeads.empty()) return true;\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying blocks\\n\");\n+\n+    std::vector<const CBlockIndex*> pindexHeads;\n+    const CBlockIndex* pindexFork = nullptr;\n+    bool fGenesis = false;\n+\n+    // Find last common ancestor of all heads.\n+    for (const uint256& hash : hashHeads) {\n+        if (hash.IsNull()) {\n+            fGenesis = true;\n+            continue;\n+        }\n+        auto it = mapBlockIndex.find(hash);\n+        if (it == mapBlockIndex.end()) {\n+            return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+        }\n+        pindexHeads.push_back(it->second);\n+        pindexFork = pindexFork ? LastCommonAncestor(pindexFork, it->second) : it->second;\n+    }\n+\n+    // Build a set of all blocks to rollback.\n+    std::set<const CBlockIndex*, CBlockIndexWorkComparator> vpindexRollback;\n+    for (size_t i = 1; i < pindexHeads.size(); ++i) {\n+        const CBlockIndex *pindexHead = pindexHeads[i];\n+        while (fGenesis ? pindexHead != nullptr : pindexHead != pindexFork) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111801012",
      "id" : 111801012,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 168,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33067852,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111801012",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111801337"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111801337"
         }
      },
      "body" : "I just find the errors useful to keep around, my real concern is the Clear() one line down, which I believe is an actual bug for the new usage in RollbackBlock.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T19:19:38Z",
      "diff_hunk" : "@@ -1505,18 +1505,15 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n     CCoinsModifier coins = view.ModifyCoins(out.hash);\n     if (undo.nHeight != 0) {\n         // undo data contains height: this is the last output of the prevout tx being spent\n-        if (!coins->IsPruned())\n-            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        if (!coins->IsPruned()) fClean = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111801337",
      "id" : 111801337,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 15,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33068200,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111801337",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111808637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111808637"
         }
      },
      "body" : "No. Let's say you have a chain A<-B<-C that was being flushed (meaning the old tip was A, you crashed in the middle of writing the changes for B and C, with C the intended new tip). In this case, at recovery time, GetBlockHeads() will return `[C,A]`. `pindexFork` will be A. The loop above will only process A, but because A is already the fork point, nothing is added to the disconnect set.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T19:59:46Z",
      "diff_hunk" : "@@ -3690,6 +3693,124 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        // We cannot use ModifyNewCoins here, as the entry may exist in the cache already.\n+        inputs.ModifyCoins(tx->GetHash())->FromTx(*tx, pindex->nHeight);\n+    }\n+    return true;\n+}\n+\n+/** Unapply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollbackBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: Merge with DisconnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"RollbackBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"RollbackBlock(): no undo data available\");\n+    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n+        return error(\"RollbackBlock(): failure reading undo data\");\n+\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n+        return error(\"RollbackBlock(): block and undo data inconsistent\");\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransaction& tx = *block.vtx[i];\n+        inputs.ModifyCoins(tx.GetHash())->Clear();\n+        if (i != 0) {\n+            CTxUndo &txundo = blockUndo.vtxundo[i - 1];\n+            if (txundo.vprevout.size() != tx.vin.size()) {\n+                return error(\"RollbackBlock(): block and undo data inconsistent\");\n+            }\n+            for (size_t n = 0; n < txundo.vprevout.size(); ++n) {\n+                ApplyTxInUndo(txundo.vprevout[n], inputs, COutPoint(tx.GetHash(), n)); // Ignore return value\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    if (!hashBest.IsNull()) return true;\n+    std::vector<uint256> hashHeads = view->GetHeadBlocks();\n+    if (hashHeads.empty()) return true;\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying blocks\\n\");\n+\n+    std::vector<const CBlockIndex*> pindexHeads;\n+    const CBlockIndex* pindexFork = nullptr;\n+    bool fGenesis = false;\n+\n+    // Find last common ancestor of all heads.\n+    for (const uint256& hash : hashHeads) {\n+        if (hash.IsNull()) {\n+            fGenesis = true;\n+            continue;\n+        }\n+        auto it = mapBlockIndex.find(hash);\n+        if (it == mapBlockIndex.end()) {\n+            return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+        }\n+        pindexHeads.push_back(it->second);\n+        pindexFork = pindexFork ? LastCommonAncestor(pindexFork, it->second) : it->second;\n+    }\n+\n+    // Build a set of all blocks to rollback.\n+    std::set<const CBlockIndex*, CBlockIndexWorkComparator> vpindexRollback;\n+    for (size_t i = 1; i < pindexHeads.size(); ++i) {\n+        const CBlockIndex *pindexHead = pindexHeads[i];\n+        while (fGenesis ? pindexHead != nullptr : pindexHead != pindexFork) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111808637",
      "id" : 111808637,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 168,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33076420,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111808637",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111809355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111809355"
         }
      },
      "body" : "I'm not convinced the Clear() is wrong - it does mean we're passing over a state where the outputs for that TX were all full spent. However, this is hard to reason about, and you may well be right. Furthermore, it seems that Clear() has no purpose. In the 'clean' case, the output is already pruned, to the Clear() is a no-op. In the other case it doesn't matter. I'm removing it.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T20:03:24Z",
      "diff_hunk" : "@@ -1505,18 +1505,15 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n     CCoinsModifier coins = view.ModifyCoins(out.hash);\n     if (undo.nHeight != 0) {\n         // undo data contains height: this is the last output of the prevout tx being spent\n-        if (!coins->IsPruned())\n-            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        if (!coins->IsPruned()) fClean = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111809355",
      "id" : 111809355,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 15,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33077223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111809355",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111812222"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111812222"
         }
      },
      "body" : "Yes, OK, it wasnt clear to me what GetBlockHeads() should be returning there, Flush seemed to indicate something different.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T20:18:37Z",
      "diff_hunk" : "@@ -3690,6 +3693,124 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        // We cannot use ModifyNewCoins here, as the entry may exist in the cache already.\n+        inputs.ModifyCoins(tx->GetHash())->FromTx(*tx, pindex->nHeight);\n+    }\n+    return true;\n+}\n+\n+/** Unapply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollbackBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: Merge with DisconnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"RollbackBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"RollbackBlock(): no undo data available\");\n+    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n+        return error(\"RollbackBlock(): failure reading undo data\");\n+\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n+        return error(\"RollbackBlock(): block and undo data inconsistent\");\n+\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const CTransaction& tx = *block.vtx[i];\n+        inputs.ModifyCoins(tx.GetHash())->Clear();\n+        if (i != 0) {\n+            CTxUndo &txundo = blockUndo.vtxundo[i - 1];\n+            if (txundo.vprevout.size() != tx.vin.size()) {\n+                return error(\"RollbackBlock(): block and undo data inconsistent\");\n+            }\n+            for (size_t n = 0; n < txundo.vprevout.size(); ++n) {\n+                ApplyTxInUndo(txundo.vprevout[n], inputs, COutPoint(tx.GetHash(), n)); // Ignore return value\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    if (!hashBest.IsNull()) return true;\n+    std::vector<uint256> hashHeads = view->GetHeadBlocks();\n+    if (hashHeads.empty()) return true;\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying blocks\\n\");\n+\n+    std::vector<const CBlockIndex*> pindexHeads;\n+    const CBlockIndex* pindexFork = nullptr;\n+    bool fGenesis = false;\n+\n+    // Find last common ancestor of all heads.\n+    for (const uint256& hash : hashHeads) {\n+        if (hash.IsNull()) {\n+            fGenesis = true;\n+            continue;\n+        }\n+        auto it = mapBlockIndex.find(hash);\n+        if (it == mapBlockIndex.end()) {\n+            return error(\"ReplayBlocks(): chainstate boundaries not in block index\");\n+        }\n+        pindexHeads.push_back(it->second);\n+        pindexFork = pindexFork ? LastCommonAncestor(pindexFork, it->second) : it->second;\n+    }\n+\n+    // Build a set of all blocks to rollback.\n+    std::set<const CBlockIndex*, CBlockIndexWorkComparator> vpindexRollback;\n+    for (size_t i = 1; i < pindexHeads.size(); ++i) {\n+        const CBlockIndex *pindexHead = pindexHeads[i];\n+        while (fGenesis ? pindexHead != nullptr : pindexHead != pindexFork) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111812222",
      "id" : 111812222,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 168,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33080363,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111812222",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111813266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111813266"
         }
      },
      "body" : "Hmm, you may be right. Indeed, however, hard to reason about.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-17T20:23:10Z",
      "diff_hunk" : "@@ -1505,18 +1505,15 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n     CCoinsModifier coins = view.ModifyCoins(out.hash);\n     if (undo.nHeight != 0) {\n         // undo data contains height: this is the last output of the prevout tx being spent\n-        if (!coins->IsPruned())\n-            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        if (!coins->IsPruned()) fClean = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111813266",
      "id" : 111813266,
      "original_commit_id" : "c9066bcf3653445ce7fa943f19ad397de4236945",
      "original_position" : 15,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33081499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111813266",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111875593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111875593"
         }
      },
      "body" : "can `tip` be null ? I would have expected it is at least genesis.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-18T05:52:01Z",
      "diff_hunk" : "@@ -44,10 +45,33 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n+std::vector<uint256> CCoinsViewDB::GetHeadBlocks() const {\n+    std::vector<uint256> vhashHeadBlocks;\n+    if (!db.Read(DB_HEAD_BLOCKS, vhashHeadBlocks))\n+        return std::vector<uint256>();\n+    return vhashHeadBlocks;\n+}\n+\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n+    size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize) << 20;\n+    if (!hashBlock.IsNull()) {\n+        // Read existing heads from database.\n+        uint256 tip = GetBestBlock();\n+        std::vector<uint256> heads = GetHeadBlocks();\n+        // Construct a set with all existing heads, excluding the new tip.\n+        std::set<uint256> setHeads(heads.begin(), heads.end());\n+        if (setHeads.empty() || !tip.IsNull()) setHeads.insert(tip);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111875593",
      "id" : 111875593,
      "original_commit_id" : "02dfa4a54da44e40b1d29687cc68885f3a306ef3",
      "original_position" : 30,
      "path" : "src/txdb.cpp",
      "position" : 41,
      "pull_request_review_id" : 33147318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111875593",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111876751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111876751"
         }
      },
      "body" : "I am confused about all this `fGenesis` variable. I guess this is related to my other comment on https://github.com/bitcoin/bitcoin/pull/10148/commits/02dfa4a54da44e40b1d29687cc68885f3a306ef3#r111875593\r\n\r\nI would not expect, pindexFork to be null, as the work fork point should be the genesis block.\r\n",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-18T06:05:15Z",
      "diff_hunk" : "@@ -3686,6 +3691,124 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        // We cannot use ModifyNewCoins here, as the entry may exist in the cache already.\n+        inputs.ModifyCoins(tx->GetHash())->FromTx(*tx, pindex->nHeight);\n+    }\n+    return true;\n+}\n+\n+/** Unapply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollbackBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: Merge with DisconnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"RollbackBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"RollbackBlock(): no undo data available\");\n+    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n+        return error(\"RollbackBlock(): failure reading undo data\");\n+\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n+        return error(\"RollbackBlock(): block and undo data inconsistent\");\n+\n+    for (int i = block.vtx.size() - 1; i >= 0; --i) {\n+        const CTransaction& tx = *block.vtx[i];\n+        inputs.ModifyCoins(tx.GetHash())->Clear();\n+        if (i != 0) {\n+            CTxUndo &txundo = blockUndo.vtxundo[i - 1];\n+            if (txundo.vprevout.size() != tx.vin.size()) {\n+                return error(\"RollbackBlock(): block and undo data inconsistent\");\n+            }\n+            for (size_t n = 0; n < txundo.vprevout.size(); ++n) {\n+                ApplyTxInUndo(txundo.vprevout[n], inputs, COutPoint(tx.GetHash(), n)); // Ignore return value\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    if (!hashBest.IsNull()) return true;\n+    std::vector<uint256> hashHeads = view->GetHeadBlocks();\n+    if (hashHeads.empty()) return true;\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying blocks\\n\");\n+\n+    std::vector<const CBlockIndex*> pindexHeads;\n+    const CBlockIndex* pindexFork = nullptr;\n+    bool fGenesis = false;\n+\n+    // Find last common ancestor of all heads.\n+    for (const uint256& hash : hashHeads) {\n+        if (hash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111876751",
      "id" : 111876751,
      "original_commit_id" : "02dfa4a54da44e40b1d29687cc68885f3a306ef3",
      "original_position" : 138,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33148559,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111876751",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "> contrib/devtools/check-doc.py is unhappy that you added new arguments without asking for permission from the argument gods.\r\n\r\nNot sure if you were being sarcastic here, but to be clear: that script checks whether options are documented (either as debug option or as normal option), not whether you have a signed permission on a stone tablet from $PANTHEON.\r\n\r\nGoing to test this on a node.",
      "created_at" : "2017-04-18T06:46:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#issuecomment-294704380",
      "id" : 294704380,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10148",
      "updated_at" : "2017-04-18T06:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294704380",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111934057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111934057"
         }
      },
      "body" : "Tip can be null when it's the first write ever to the database.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-18T11:53:09Z",
      "diff_hunk" : "@@ -44,10 +45,33 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n+std::vector<uint256> CCoinsViewDB::GetHeadBlocks() const {\n+    std::vector<uint256> vhashHeadBlocks;\n+    if (!db.Read(DB_HEAD_BLOCKS, vhashHeadBlocks))\n+        return std::vector<uint256>();\n+    return vhashHeadBlocks;\n+}\n+\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n+    size_t batch_size = (size_t)GetArg(\"-dbbatchsize\", nDefaultDbBatchSize) << 20;\n+    if (!hashBlock.IsNull()) {\n+        // Read existing heads from database.\n+        uint256 tip = GetBestBlock();\n+        std::vector<uint256> heads = GetHeadBlocks();\n+        // Construct a set with all existing heads, excluding the new tip.\n+        std::set<uint256> setHeads(heads.begin(), heads.end());\n+        if (setHeads.empty() || !tip.IsNull()) setHeads.insert(tip);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111934057",
      "id" : 111934057,
      "original_commit_id" : "02dfa4a54da44e40b1d29687cc68885f3a306ef3",
      "original_position" : 30,
      "path" : "src/txdb.cpp",
      "position" : 41,
      "pull_request_review_id" : 33209206,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:53:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111934057",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111934090"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111934090"
         }
      },
      "body" : "I've added a lengthy comment to clarify.",
      "commit_id" : "c57a5a541f30e538736c3dcb4b7d7fbc24c22c5e",
      "created_at" : "2017-04-18T11:53:25Z",
      "diff_hunk" : "@@ -3686,6 +3691,124 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     return true;\n }\n \n+/** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: merge with ConnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"ReplayBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    for (const CTransactionRef& tx : block.vtx) {\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn &txin : tx->vin) {\n+                inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout.n);\n+            }\n+        }\n+        // We cannot use ModifyNewCoins here, as the entry may exist in the cache already.\n+        inputs.ModifyCoins(tx->GetHash())->FromTx(*tx, pindex->nHeight);\n+    }\n+    return true;\n+}\n+\n+/** Unapply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n+static bool RollbackBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+{\n+    // TODO: Merge with DisconnectBlock\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, pindex, params.GetConsensus())) {\n+        return error(\"RollbackBlock(): ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"RollbackBlock(): no undo data available\");\n+    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n+        return error(\"RollbackBlock(): failure reading undo data\");\n+\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n+        return error(\"RollbackBlock(): block and undo data inconsistent\");\n+\n+    for (int i = block.vtx.size() - 1; i >= 0; --i) {\n+        const CTransaction& tx = *block.vtx[i];\n+        inputs.ModifyCoins(tx.GetHash())->Clear();\n+        if (i != 0) {\n+            CTxUndo &txundo = blockUndo.vtxundo[i - 1];\n+            if (txundo.vprevout.size() != tx.vin.size()) {\n+                return error(\"RollbackBlock(): block and undo data inconsistent\");\n+            }\n+            for (size_t n = 0; n < txundo.vprevout.size(); ++n) {\n+                ApplyTxInUndo(txundo.vprevout[n], inputs, COutPoint(tx.GetHash(), n)); // Ignore return value\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+\n+bool ReplayBlocks(const CChainParams& params, CCoinsView* view)\n+{\n+    LOCK(cs_main);\n+\n+    CCoinsViewCache cache(view);\n+\n+    uint256 hashBest = view->GetBestBlock();\n+    if (!hashBest.IsNull()) return true;\n+    std::vector<uint256> hashHeads = view->GetHeadBlocks();\n+    if (hashHeads.empty()) return true;\n+\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0);\n+    LogPrintf(\"Replaying blocks\\n\");\n+\n+    std::vector<const CBlockIndex*> pindexHeads;\n+    const CBlockIndex* pindexFork = nullptr;\n+    bool fGenesis = false;\n+\n+    // Find last common ancestor of all heads.\n+    for (const uint256& hash : hashHeads) {\n+        if (hash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10148#discussion_r111934090",
      "id" : 111934090,
      "original_commit_id" : "02dfa4a54da44e40b1d29687cc68885f3a306ef3",
      "original_position" : 138,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 33209244,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10148",
      "updated_at" : "2017-04-18T11:53:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111934090",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
