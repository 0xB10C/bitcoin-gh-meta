[
   {
      "body" : "I don't get the bitfield stuff here. Why?  It adds a lot of code with indirect effects, and means that we cannot use a perfect hash to set the enum value (e.g. stuck with a map of strings at best, though this code doesn't do that). ",
      "created_at" : "2017-04-03T22:23:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291291673",
      "id" : 291291673,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145",
      "updated_at" : "2017-04-03T22:23:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291291673",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@gmaxwell I agree. I asked @JeremyRubin to check my logic in https://github.com/theuni/bitcoin/commit/f1e4e281e3f1eb884f8010ac941c82752174bdbe, and after reviewing, he wanted to take a stab at a more direct mapping for the initial filter.\r\n\r\nThis is an interesting approach, but I think this is much less clear than f1e4e281e3f1eb884f8010ac941c82752174bdbe, and it tangles the rules up with the enum values.",
      "created_at" : "2017-04-03T22:39:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291294719",
      "id" : 291294719,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145",
      "updated_at" : "2017-04-03T22:39:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291294719",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "It's actually trivial to make this work very well with a perfect hash and\r\nthis implementation doesn't add any network dependency on the order. If you\r\nhave a perfect hash available I could demonstrate :)\r\n\r\nThe bitwise stuff is the set of current policies. It's much more explicit\r\nabout which operations are allowed in which contexts compared to a list of\r\nconditionals. There might be a better way to aggregate those rules\r\ntogether, but those are the rules. Blacklists would be shorter (I used one\r\nfor the bloom stuff, now that I think of it), but it's generally easier to\r\naudit what is permitted rather than what is not.\r\n",
      "created_at" : "2017-04-03T22:41:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291295072",
      "id" : 291295072,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145",
      "updated_at" : "2017-04-04T00:51:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291295072",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "body" : "> If you have a perfect hash available \r\n\r\ngperf works in a pinch\r\n\r\ncat protocol.cpp | grep '^const char *' | cut -d'\"' -f2 | sort | gperf -lCcE\r\n\r\n> . It's much more explicit about which operations are allowed in which contexts compared to a list of conditionals.\r\n\r\n/Generally/ moving function preconditions far away from their code results in defects. When its something that applies basically universally (like the check for the version handshake finishing), then it can make sense... but I think having if (importing) return; at the top of a message handling function is a lot more maintainable than what is effectively an additional state machine.",
      "created_at" : "2017-04-03T23:16:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291309935",
      "id" : 291309935,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145",
      "updated_at" : "2017-04-03T23:17:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291309935",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "> cat protocol.cpp | grep '^const char *' | cut -d'\"' -f2 | sort | gperf -lCcE\r\n\r\nAs promised, perfect hashing patch in https://github.com/JeremyRubin/bitcoin/tree/perfect_hashing (a little bit less clean than it could be, because I didn't want to modify protocol.h, but you get the idea). \r\n\r\nIt's like 8 lines of code. At initialize you just fill up a translation table to map the perfect hashes. Note that I slightly tweaked the API of the gperf hash to return the hash key and max+1 on fail to make this design easier.\r\n\r\nWhat's nice about the translation table is it could be modified to store the function pointers to the handlers directly as well, skipping the jump table/switch.\r\n\r\n> /Generally/ moving function preconditions far away from their code results in defects. When its something that applies basically universally (like the check for the version handshake finishing), then it can make sense... but I think having if (importing) return; at the top of a message handling function is a lot more maintainable than what is effectively an additional state machine.\r\n\r\nI'm mixed on this one. I agree that having preconditions closer to the code can be good; but it's also good to have a non-exposed function which only takes sanitized inputs, and do the sanitizing elsewhere. I agree with the state machine comment, but that was the existing state of the code: there is currently an implicit state machine on what order messages were allowed to come in. This PR makes it more explicit; if you want to make it even more explicit (e.g., ProtocolStateMachine class I think that would be great :)). This at least makes it really easy to do whatever you want with the actual dispatch as it is state independent.\r\n\r\nI don't think it's more maintainable to have repeated preconditions throughout the code, because then it is easier to forget to check a precondition in a handler and you repeat precondition checking code, leading to more opportunity for error. It's a trade off.\r\n\r\nIt is possible to re-check these preconditions if critical, which would maybe be \"the best/worst\" of both worlds.",
      "created_at" : "2017-04-04T02:12:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291374007",
      "id" : 291374007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145",
      "updated_at" : "2017-04-04T02:12:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291374007",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "body" : "A serious drawback of perfect hashing is that it makes it hard to add message types, especially in PRs or third-party patches. It reduces flexibility.\r\n\r\nUnless it can be clearly shown from performance results that matching a small string in e.g. a sorted table or run-time constructed hash is really a performance sink, and given the small number of small messages I would be really surprised (12 bytes isn't even two 64-bit words!), I'd prefer if adding a message type was just adding a line. \r\n\r\n> ProtocolStateMachine \r\n\r\nIf you go this way, I don't think there should be one protocol state machine. Different concerns (e.g. initial negotiation, handling pings, handling transactions, handling blocks, handling filters) could be separate state machines that handle groups of messages (this was @sipa's idea). Creating a separate handler class for every message type would be typical OOP overkill, but for separate concerns I think it'd make sense and would help untangle the current labyrinth.",
      "created_at" : "2017-04-04T06:27:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291405594",
      "id" : 291405594,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145",
      "updated_at" : "2017-04-04T06:40:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291405594",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "I think using a perfect hash is unnecessary overkill here.",
      "created_at" : "2017-04-04T07:07:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291413416",
      "id" : 291413416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145",
      "updated_at" : "2017-04-04T07:07:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/291413416",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
