[
   {
      "body" : "Oh. Nice.\r\nI expected much more code to achieve this.\r\n\r\nConceptually I think this goes into the right direction, though, I'm not sure if this could end up being only a temporary in-between step that may end up being replaced.\r\nBecause, it may be more effective to split the Qt/d part completely and let them communicate over the p2p protocol (SPV and eventually RPC). More effective because it would also allow to run Qt independent from a trusted full node (if not trusted, use mechanism like full block SPV, etc.).\r\n\r\nThough, I'm aware that capnp has an RPC layer. But this would introduce another API (RPC / ZMQ / REST and then capnp RPC).\r\n\r\nI'm not saying this is the wrong direction, but we should be careful about adding another API.\r\n\r\nThree questions:\r\n- Would the performance be impractical if we would try to use the existing RPC API?\r\n- Could the capnp approach (or lets say IPC approach) be designed as a (or the) new API (\"JSON RPC v2\" and replacement for ZMQ)?\r\n- Does capnp provide a basic form of authentication? Would that even be required?",
      "created_at" : "2017-03-28T07:38:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289688689",
      "id" : 289688689,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-03-28T07:38:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289688689",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> Would the performance be impractical if we would try to use the existing RPC API?\r\n\r\nReason this is currently using capnp is not performance but convenience. Capnp provides a high level API that supports bidirectional, synchronous, and asynchronous calls out of the box and allows me to easily explore implementation choices in bitcoin-qt without having to worry about low level protocol details, write a lot of parameter packing/unpacking boilerplate, and implement things like long polling.\r\n\r\nCapnp could definitely be replaced by JSON-RPC, though, and I've gone out of my way to support this by not calling capnp functions or using capnp types or headers anywhere except the `ipc/server.cpp` and `ipc/client.cpp` files. No code outside of these two files has to change in order to move to a different protocol.\r\n\r\n> Could the capnp approach (or lets say IPC approach) be designed as a (or the) new API (\"JSON RPC v2\" and replacement for ZMQ)?\r\n\r\nIt could, but I'm going out of my way right now specifically NOT to add yet another bitcoind public API that could add to the JSON-RPC/REST/ZMQ/-blocknotify/-walletnotify confusion. The IPC here doesn't happen over a TCP port or even a unix socket path but over an anonymous [socketpair](http://man7.org/linux/man-pages/man2/socketpair.2.html) using an inherited file descriptor. (I haven't done a windows implementation yet but [similar things](https://msdn.microsoft.com/en-us/library/ms683463(v=VS.85).aspx) are possible there).\r\n\r\nI'm trying to make the change completely internal for now and transparent to users. Bitcoin-qt should still be invoked the same way and behave the same way as before, starting its own node and wallet. It just will happen to do this internally now by forking a bitcoind executable rather than calling in-process functions. \r\n\r\nThis change will not add any new command line or GUI options allowing bitcoin-qt to connect to bitcoinds other than the one it spawns internally. Adding these features and supporting new public APIs might be things we want to do in the future, but they would involve downsides and complications that I'm trying to avoid here.\r\n\r\n> Does capnp provide a basic form of authentication? Would that even be required?\r\n\r\nIt's not required here because this change doesn't expose any new socket or endpoint, but it could be supported. Capnp's security model is based on [capabilities](https://capnproto.org/rpc.html#security), so to add authentication, you would just define a factory function that takes credentials as parameters and returns a reference to an object exposing the appropriate functionality.\r\n\r\n",
      "created_at" : "2017-03-28T09:58:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289721777",
      "id" : 289721777,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-03-28T09:58:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289721777",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "I'm really uncomfortable with using capn proto, but fine enough for some example testing stuff!\r\n\r\nI'm a fan of this general approach (ignoring the use of capn proto) and I think we should have done something like it a long time ago.",
      "created_at" : "2017-03-28T17:23:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289842646",
      "id" : 289842646,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-03-28T17:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289842646",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "strong concept ACK, but if is feasible, would prefer usage of the existing RPC instead of capn'proto",
      "created_at" : "2017-03-28T22:39:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289927205",
      "id" : 289927205,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-03-28T22:39:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289927205",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "Concept ACK, nice.\r\n\r\n> I'm really uncomfortable with using capn proto, but fine enough for some example testing stuff!\r\n\r\nPlease, let's not turn this into a discussion of serialization and RPC frameworks. To be honest that's been one of the things that's putting me off of doing work like this. If you want to suggest what framework to use, please make a thorough investigation of what method would be best to use for our specific use case, and propose that, but let's not start throwing random \"I'm not comfortable with X\" comments.\r\n\r\nWe already use google protocol buffers in the GUI for payment requests to in a way that would be the straightforward choice. I'm also happy you didn't choose some XML-based abomonation or ASN.1. But anyhow, not here. For this pull it's fine to use whatever RPC mechanism you're comfortable with. \r\n\r\n> This change will not add any new command line or GUI options allowing bitcoin-qt to connect to bitcoinds other than the one it spawns internally. \r\n\r\nI'm also perfectly fine with keeping the scope here to \"communication between GUI and bitcoind\". This is not the place for introducing another external interface. Might be an option at some point in the future, but for now process isolation is enough motivation.",
      "created_at" : "2017-03-29T06:53:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289999980",
      "id" : 289999980,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-03-29T07:24:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289999980",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108618386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108618386"
         }
      },
      "body" : "Yep I guess most of these calls should be turned into async calls and not wait on a response synchronously blocking the GUI. Not necessarily in the first iteration of this, of course.",
      "commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "created_at" : "2017-03-29T08:29:01Z",
      "diff_hunk" : "@@ -704,10 +704,10 @@ bool WalletModel::hdEnabled() const\n \n int WalletModel::getDefaultConfirmTarget() const\n {\n-    return nTxConfirmTarget;\n+    return FIXME_IMPLEMENT_IPC_VALUE(nTxConfirmTarget);\n }\n \n bool WalletModel::getDefaultWalletRbf() const\n {\n-    return fWalletRbf;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108618386",
      "id" : 108618386,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 273,
      "path" : "src/qt/walletmodel.cpp",
      "position" : 273,
      "pull_request_review_id" : 29659509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-03-29T08:29:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108618386",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108618794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108618794"
         }
      },
      "body" : "Pretty nice. So the IPC endpoint exposes multiple \"objects\". It can also expose multiple instances of one class? (e.g. for multiwallet?).",
      "commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "created_at" : "2017-03-29T08:31:06Z",
      "diff_hunk" : "@@ -0,0 +1,22 @@\n+@0xa4478fe5ad6d80f5;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::messages\");\n+\n+interface Node {\n+    helpMessage @0 (mode :Int32) -> (value :Text);\n+    handleInitMessage @1 (callback: InitMessageCallback) -> (handler :Handler);\n+    wallet @2 () -> (wallet :Wallet);\n+}\n+\n+interface Wallet {\n+    getBalance @0 () -> (value :Int64);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108618794",
      "id" : 108618794,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 13,
      "path" : "src/ipc/messages.capnp",
      "position" : 13,
      "pull_request_review_id" : 29659918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-03-29T08:31:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108618794",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108620012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108620012"
         }
      },
      "body" : "Should it pass through parameters? Most of the parameters to `bitcoin-qt` will actually be for the daemon.",
      "commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "created_at" : "2017-03-29T08:37:27Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+#include \"ipc/client.h\"\n+\n+#include \"bitcoin-config.h\"\n+\n+#pragma GCC diagnostic ignored \"-Wshadow\"\n+#include \"ipc/messages.capnp.h\"\n+#pragma GCC diagnostic pop\n+\n+#include <capnp/rpc-twoparty.h>\n+#include <kj/debug.h>\n+\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace ipc\n+{\n+\n+namespace\n+{\n+\n+//! VatId for server side of IPC connection.\n+struct ServerVatId {\n+    capnp::word scratch[4]{};\n+    capnp::MallocMessageBuilder message{scratch};\n+    capnp::rpc::twoparty::VatId::Builder vatId{message.getRoot<capnp::rpc::twoparty::VatId>()};\n+    ServerVatId() { vatId.setSide(capnp::rpc::twoparty::Side::SERVER); }\n+};\n+\n+//! Return highest possible file descriptor.\n+size_t MaxFd()\n+{\n+    struct rlimit nofile;\n+    if (getrlimit(RLIMIT_NOFILE, &nofile) == 0) {\n+        return nofile.rlim_cur - 1;\n+    } else {\n+        return 1023;\n+    }\n+}\n+\n+//! Forwarder for handleInitMessage callback.\n+class InitMessageCallbackServer final : public messages::InitMessageCallback::Server\n+{\n+public:\n+    InitMessageCallbackServer(std::function<void(const std::string&)> callback_) : callback(std::move(callback_)) {}\n+\n+    kj::Promise<void> call(CallContext context) override\n+    {\n+        callback(context.getParams().getMessage());\n+        return kj::READY_NOW;\n+    }\n+\n+    std::function<void(const std::string&)> callback;\n+};\n+\n+} // namespace\n+\n+//! Friend factory class able to call private constructors of IPC objects.\n+class Factory\n+{\n+public:\n+    template <typename T, typename... Args>\n+    static std::unique_ptr<T> MakeUnique(Args&&... args)\n+    {\n+        return std::unique_ptr<T>(new T(std::forward<Args>(args)...));\n+    }\n+\n+    template <typename T, typename... Args>\n+    static std::unique_ptr<T> MakeImpl(Args&&... args)\n+    {\n+        return MakeUnique<T>(MakeUnique<typename T::Impl>(std::forward<Args>(args)...));\n+    }\n+};\n+\n+//! Handler private member struct.\n+struct Handler::Impl {\n+    kj::AsyncIoContext& ioContext;\n+    messages::Handler::Client handlerClient;\n+    Impl(kj::AsyncIoContext& ioContext_, messages::Handler::Client handlerClient_) : ioContext(ioContext_), handlerClient(std::move(handlerClient_)) {}\n+};\n+\n+Handler::Handler(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Handler::~Handler() {}\n+\n+void Handler::disconnect() const\n+{\n+    auto request = impl->handlerClient.disconnectRequest();\n+    auto promise = request.send();\n+    promise.wait(impl->ioContext.waitScope);\n+}\n+\n+//! Wallet private member struct.\n+struct Wallet::Impl {\n+    kj::AsyncIoContext& ioContext;\n+    messages::Wallet::Client walletClient;\n+    Impl(kj::AsyncIoContext& ioContext_, messages::Wallet::Client walletClient_) : ioContext(ioContext_), walletClient(std::move(walletClient_)) {}\n+};\n+\n+Wallet::Wallet(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Wallet::~Wallet() {}\n+\n+CAmount Wallet::getBalance() const\n+{\n+    auto request = impl->walletClient.getBalanceRequest();\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return response.getValue();\n+}\n+\n+//! Node private member struct.\n+struct Node::Impl {\n+    kj::AsyncIoContext ioContext{kj::setupAsyncIo()};\n+    kj::Own<kj::AsyncIoStream> clientStream;\n+    capnp::TwoPartyVatNetwork clientNetwork{*clientStream, capnp::rpc::twoparty::Side::CLIENT, capnp::ReaderOptions()};\n+    capnp::RpcSystem<capnp::rpc::twoparty::VatId> rpcClient{capnp::makeRpcClient(clientNetwork)};\n+    messages::Node::Client nodeClient{rpcClient.bootstrap(ServerVatId().vatId).castAs<messages::Node>()};\n+\n+    Impl(int fd) : clientStream(ioContext.lowLevelProvider->wrapSocketFd(fd, kj::LowLevelAsyncIoProvider::TAKE_OWNERSHIP)) {}\n+};\n+\n+Node::Node(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Node::~Node() {}\n+\n+std::string Node::helpMessage(HelpMessageMode mode) const\n+{\n+    auto request = impl->nodeClient.helpMessageRequest();\n+    request.setMode(mode);\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return response.getValue();\n+}\n+\n+std::unique_ptr<Handler> Node::handleInitMessage(std::function<void(const std::string&)> callback) const\n+{\n+    auto request = impl->nodeClient.handleInitMessageRequest();\n+    request.setCallback(kj::heap<InitMessageCallbackServer>(std::move(callback)));\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return Factory::MakeImpl<Handler>(impl->ioContext, response.getHandler());\n+}\n+\n+std::unique_ptr<Wallet> Node::wallet() const\n+{\n+    auto request = impl->nodeClient.walletRequest();\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return Factory::MakeImpl<Wallet>(impl->ioContext, response.getWallet());\n+}\n+\n+std::unique_ptr<Node> StartClient()\n+{\n+    int fds[2];\n+    KJ_SYSCALL(socketpair(AF_UNIX, SOCK_STREAM, 0, fds));\n+\n+    if (fork() == 0) {\n+        int maxFd = MaxFd();\n+        for (int fd = 3; fd < maxFd; ++fd) {\n+            if (fd != fds[0]) {\n+                close(fd);\n+            }\n+        }\n+        if (execlp(BITCOIN_DAEMON_NAME, BITCOIN_DAEMON_NAME, \"-ipcfd\", std::to_string(fds[0]).c_str(), nullptr) != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108620012",
      "id" : 108620012,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 166,
      "path" : "src/ipc/client.cpp",
      "position" : 166,
      "pull_request_review_id" : 29661133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-03-29T08:37:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108620012",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
