[
   {
      "body" : "Great!\r\nConcept ACK.\r\n\r\n> The GUI needs to be updated to access the new range of estimates. I would suggest providing options for targets of: 2,4,6,12,24,48,144,504,1008\r\n\r\nI'll have a look at this soon.",
      "created_at" : "2017-04-13T11:58:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-293871720",
      "id" : 293871720,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10199",
      "updated_at" : "2017-04-13T11:58:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/293871720",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "ping @crwatkins (he presented some fee estimation overview at the wallet standards group meeting in Berlin this month).",
      "created_at" : "2017-04-19T17:03:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295346654",
      "id" : 295346654,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10199",
      "updated_at" : "2017-04-19T17:03:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295346654",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112291804"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112291804"
         }
      },
      "body" : "Nit: implementation",
      "commit_id" : "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "created_at" : "2017-04-19T19:22:04Z",
      "diff_hunk" : "@@ -853,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = mempool.estimateSmartFee(nBlocks, &answerFound);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112291804",
      "id" : 112291804,
      "original_commit_id" : "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "original_position" : 72,
      "path" : "src/rpc/mining.cpp",
      "position" : 72,
      "pull_request_review_id" : 33595467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199",
      "updated_at" : "2017-04-19T19:22:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112291804",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/288011?v=3",
         "events_url" : "https://api.github.com/users/jlopp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jlopp/followers",
         "following_url" : "https://api.github.com/users/jlopp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jlopp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jlopp",
         "id" : 288011,
         "login" : "jlopp",
         "organizations_url" : "https://api.github.com/users/jlopp/orgs",
         "received_events_url" : "https://api.github.com/users/jlopp/received_events",
         "repos_url" : "https://api.github.com/users/jlopp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jlopp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jlopp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jlopp"
      }
   },
   {
      "body" : "I'm not sure if this is a problem specific to your code, though requiring a leading 0 seems like a bug:\r\n\r\n```\r\nbitcoin-cli estimaterawfee 10 .85 0\r\nerror: Error parsing JSON:.85\r\n```",
      "created_at" : "2017-04-19T19:23:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295401425",
      "id" : 295401425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10199",
      "updated_at" : "2017-04-19T19:23:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295401425",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/288011?v=3",
         "events_url" : "https://api.github.com/users/jlopp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jlopp/followers",
         "following_url" : "https://api.github.com/users/jlopp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jlopp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jlopp",
         "id" : 288011,
         "login" : "jlopp",
         "organizations_url" : "https://api.github.com/users/jlopp/orgs",
         "received_events_url" : "https://api.github.com/users/jlopp/received_events",
         "repos_url" : "https://api.github.com/users/jlopp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jlopp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jlopp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jlopp"
      }
   },
   {
      "body" : "@jlopp .85 is not valid JSON.",
      "created_at" : "2017-04-19T19:49:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295411118",
      "id" : 295411118,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10199",
      "updated_at" : "2017-04-19T19:49:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295411118",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112303336"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112303336"
         }
      },
      "body" : "Would prefer more explicit range bounding on the threshold with an \"Invalid threshold\" error response; it currently allows numbers < 0 and > 1 and just returns a -1 feerate.",
      "commit_id" : "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "created_at" : "2017-04-19T20:18:07Z",
      "diff_hunk" : "@@ -853,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = mempool.estimateSmartFee(nBlocks, &answerFound);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay for historical moving average of confirmation data\\n\"\n+            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"  \\\"pass.\\\"                 information about the last range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the first range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range total\\n\"\n+            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"  \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if no answer can be given.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VNUM), true);\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nBlocks = request.params[0].get_int();\n+    double threshold = 0.95;\n+    if (!request.params[1].isNull())\n+        threshold = request.params[1].get_real();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112303336",
      "id" : 112303336,
      "original_commit_id" : "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "original_position" : 108,
      "path" : "src/rpc/mining.cpp",
      "position" : 108,
      "pull_request_review_id" : 33608339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199",
      "updated_at" : "2017-04-19T20:18:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112303336",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/288011?v=3",
         "events_url" : "https://api.github.com/users/jlopp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jlopp/followers",
         "following_url" : "https://api.github.com/users/jlopp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jlopp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jlopp",
         "id" : 288011,
         "login" : "jlopp",
         "organizations_url" : "https://api.github.com/users/jlopp/orgs",
         "received_events_url" : "https://api.github.com/users/jlopp/received_events",
         "repos_url" : "https://api.github.com/users/jlopp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jlopp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jlopp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jlopp"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112344863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112344863"
         }
      },
      "body" : "The reason I didn't bother with that is I felt estimaterawfee should be a very low level feature that doesn't need all the user friendly bells and whistles..   But it could certainly be cleaned up to add that either in this PR or a follow on..",
      "commit_id" : "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "created_at" : "2017-04-20T00:42:57Z",
      "diff_hunk" : "@@ -853,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = mempool.estimateSmartFee(nBlocks, &answerFound);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay for historical moving average of confirmation data\\n\"\n+            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"  \\\"pass.\\\"                 information about the last range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the first range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range total\\n\"\n+            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"  \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if no answer can be given.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VNUM), true);\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nBlocks = request.params[0].get_int();\n+    double threshold = 0.95;\n+    if (!request.params[1].isNull())\n+        threshold = request.params[1].get_real();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112344863",
      "id" : 112344863,
      "original_commit_id" : "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "original_position" : 108,
      "path" : "src/rpc/mining.cpp",
      "position" : 108,
      "pull_request_review_id" : 33652771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199",
      "updated_at" : "2017-04-20T00:42:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112344863",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "clean rebase after #9942 was merged",
      "created_at" : "2017-04-20T20:10:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295887250",
      "id" : 295887250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10199",
      "updated_at" : "2017-04-20T20:10:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295887250",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Thanks @jonasschnelli.  In Berlin, I noted that at least 50% of the wallets listed on bitcoin.org use Core as a fee estimation source directly or through other servers based on Core and any statistical or algorithmic biases might compound over time because of the large number of clients using the single source.   I presented some anecdotal, non-scientific observations about fees and some reasons that they might be artificially high.  Some of my concerns about the current esitmatefee were\r\n\r\n* Slow to respond (2.5 day half life)\r\n* Too high confidence (95%)\r\n* No long term estimates (only 25 blocks)\r\n\r\nI believe that the changes in this PR mitigate some of those concerns, and thus I am in favor of these changes.  Nice work!  \r\n\r\nI'm still a little concerned about so many wallets \"competing\" using the same identical algorithm.  @morcos do you envision some devs (wallets) would use estimaterawfee to tweak the algorithm for their users?",
      "created_at" : "2017-04-24T23:13:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-296847440",
      "id" : 296847440,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10199",
      "updated_at" : "2017-04-24T23:13:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296847440",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/11914193?v=3",
         "events_url" : "https://api.github.com/users/crwatkins/events{/privacy}",
         "followers_url" : "https://api.github.com/users/crwatkins/followers",
         "following_url" : "https://api.github.com/users/crwatkins/following{/other_user}",
         "gists_url" : "https://api.github.com/users/crwatkins/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/crwatkins",
         "id" : 11914193,
         "login" : "crwatkins",
         "organizations_url" : "https://api.github.com/users/crwatkins/orgs",
         "received_events_url" : "https://api.github.com/users/crwatkins/received_events",
         "repos_url" : "https://api.github.com/users/crwatkins/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/crwatkins/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/crwatkins/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/crwatkins"
      }
   },
   {
      "body" : "@crwatkins I can only speak for BitGo, but we run custom compiled versions of Core with our own half life and confidence values. We then use the output as a baseline for a more complex fee algorithm that we adjust upward and downward based upon other data sources. I'm already working on transitioning us to using the estimaterawfee functionality.",
      "created_at" : "2017-04-25T00:33:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-296858336",
      "id" : 296858336,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10199",
      "updated_at" : "2017-04-25T00:33:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296858336",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/288011?v=3",
         "events_url" : "https://api.github.com/users/jlopp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jlopp/followers",
         "following_url" : "https://api.github.com/users/jlopp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jlopp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jlopp",
         "id" : 288011,
         "login" : "jlopp",
         "organizations_url" : "https://api.github.com/users/jlopp/orgs",
         "received_events_url" : "https://api.github.com/users/jlopp/received_events",
         "repos_url" : "https://api.github.com/users/jlopp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jlopp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jlopp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jlopp"
      }
   },
   {
      "body" : "@crwatkins Yes that was the basic idea of including estimaterawfee (that and it's useful for debugging).  The exact strategy you use for determining what fee you want to put on a transaction depends on so many factors that its hard to have a one size fits all solution, but thats exactly what Bitcoin Core has to try to ship.  So rather than attempt to defend why the algorithm I picked is the one algorithm to rule them all, I thought it would also make sense to expose a way to examine all the collected data and let people build their own algorithms if they'd like to.\r\n  ",
      "created_at" : "2017-04-25T17:05:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-297097692",
      "id" : 297097692,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10199",
      "updated_at" : "2017-04-25T17:05:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297097692",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "@morcos Exclellent. Thanks!",
      "created_at" : "2017-04-25T17:08:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-297099164",
      "id" : 297099164,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10199",
      "updated_at" : "2017-04-25T17:08:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297099164",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/11914193?v=3",
         "events_url" : "https://api.github.com/users/crwatkins/events{/privacy}",
         "followers_url" : "https://api.github.com/users/crwatkins/followers",
         "following_url" : "https://api.github.com/users/crwatkins/following{/other_user}",
         "gists_url" : "https://api.github.com/users/crwatkins/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/crwatkins",
         "id" : 11914193,
         "login" : "crwatkins",
         "organizations_url" : "https://api.github.com/users/crwatkins/orgs",
         "received_events_url" : "https://api.github.com/users/crwatkins/received_events",
         "repos_url" : "https://api.github.com/users/crwatkins/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/crwatkins/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/crwatkins/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/crwatkins"
      }
   }
]
