[
   {
      "body" : "Rebased after ##10178 merge.",
      "created_at" : "2017-04-17T13:54:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-294489631",
      "id" : 294489631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "updated_at" : "2017-04-17T13:54:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294489631",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113017345"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113017345"
         }
      },
      "body" : "nit: i'm the last person who should comment on coding style, but isn't this easier to read:\r\n`std::atomic<bool> fCallbacksRunning(false)`",
      "commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "created_at" : "2017-04-24T18:10:57Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113017345",
      "id" : 113017345,
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_position" : 32,
      "path" : "src/validationinterface.cpp",
      "position" : 33,
      "pull_request_review_id" : 34375067,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "updated_at" : "2017-04-25T14:42:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113017345",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "fast review utACK\r\n",
      "created_at" : "2017-04-24T18:11:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-296775885",
      "id" : 296775885,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "updated_at" : "2017-04-24T18:11:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296775885",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113068753"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113068753"
         }
      },
      "body" : "My C++-fu is not good enough to get that to compile. Not actually sure why, though, frankly.",
      "commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "created_at" : "2017-04-24T22:08:36Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113068753",
      "id" : 113068753,
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_position" : 32,
      "path" : "src/validationinterface.cpp",
      "position" : 33,
      "pull_request_review_id" : 34430293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "updated_at" : "2017-04-25T14:42:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113068753",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113071523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113071523"
         }
      },
      "body" : "Could you try\r\n```c++\r\nstd::atomic<bool> fCallbacksRunning = std::atomic<bool>(false);\r\n```\r\n?",
      "commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "created_at" : "2017-04-24T22:25:55Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113071523",
      "id" : 113071523,
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_position" : 32,
      "path" : "src/validationinterface.cpp",
      "position" : 33,
      "pull_request_review_id" : 34433090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "updated_at" : "2017-04-25T14:42:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113071523",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113073136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113073136"
         }
      },
      "body" : "Yes, that works, but I think thats worse than using the init wrapper, which is what that wrapper exists for.",
      "commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "created_at" : "2017-04-24T22:37:00Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113073136",
      "id" : 113073136,
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_position" : 32,
      "path" : "src/validationinterface.cpp",
      "position" : 33,
      "pull_request_review_id" : 34434822,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "updated_at" : "2017-04-25T14:42:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113073136",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "utACK e5d0c66 - are you planning on adding tests for this functionality later?",
      "created_at" : "2017-04-25T12:55:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-297020818",
      "id" : 297020818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "updated_at" : "2017-04-25T12:55:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297020818",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "I don't currently have tests written, but given nearly everything passes through I've found its pretty well-excersized by existing wallet functional tests. I'll add unit tests for this to my to-do list.\n\nOn April 25, 2017 8:55:34 AM EDT, \"Wladimir J. van der Laan\" <notifications@github.com> wrote:\n>utACK e5d0c66 - are you planning on adding tests for this functionality\n>later?\n",
      "created_at" : "2017-04-25T12:58:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-297021602",
      "id" : 297021602,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "updated_at" : "2017-04-25T12:58:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297021602",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113189098"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113189098"
         }
      },
      "body" : "This doesn't seem exception-safe. If an exception is raised inside here, `fCallbacksRunning` will stay set forever.\r\n",
      "commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "created_at" : "2017-04-25T13:06:35Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            callback();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113189098",
      "id" : 113189098,
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_position" : 56,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34556471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "updated_at" : "2017-04-25T14:42:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113189098",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113214676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113214676"
         }
      },
      "body" : "Indeed. Put a generic try {} catch(...) {Log} around it, not sure what else to do there.",
      "commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "created_at" : "2017-04-25T14:42:48Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            callback();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113214676",
      "id" : 113214676,
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_position" : 56,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34584836,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "updated_at" : "2017-04-25T14:42:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113214676",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
