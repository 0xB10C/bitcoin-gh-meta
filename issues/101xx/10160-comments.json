[
   {
      "body" : "I'm not sure I like the idea of adding a command that changes the implied state of a peer via its attributes, rather than performing actions explicitly. The whitelist side-effects are especially hazy, see the brief discussion here: https://github.com/bitcoin/bitcoin/pull/10051#issuecomment-290622674.",
      "created_at" : "2017-04-06T18:05:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292258826",
      "id" : 292258826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-04-06T18:05:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292258826",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "@jnewbery:\r\nCan you elaborate the use-case for `disconnect`? IMO `setban` provides a similar interface, with disconnecting & banning for a specific timespan (`1h`, etc.) because, a pure `disconnect` does not prevent the peer from a direct re-connect.",
      "created_at" : "2017-04-06T18:26:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292265018",
      "id" : 292265018,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-04-06T18:26:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292265018",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Ah... an there is already the `disconnectnode` RPC call.",
      "created_at" : "2017-04-06T18:27:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292265363",
      "id" : 292265363,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-04-06T18:27:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292265363",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@jonasschnelli see #2729 and #6271 for history of the `disconnectnode` RPC. It's also useful in testing to be able to control the topology of the test nodes.\r\n\r\n@theuni - I agree that whitelisting is a mess and should be broken out into bits for controlling individual behaviours. Hence my original comment: \"I have a feeling we may want to make the whitelisting behaviour more granular and I don't want to commit us to a public API that we can't then change.\" I was thinking of your comment in #10051 but couldn't find the reference.\r\n\r\n> the idea of adding a command that changes the implied state of a peer via its attributes, rather than performing actions explicitly\r\n\r\nI don't understand what this means in the context of whitelisting. The idea is to update the peer's whitelist behaviour. What would performing actions explicitly entail?",
      "created_at" : "2017-04-06T20:22:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292305200",
      "id" : 292305200,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-04-06T20:22:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292305200",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Closing in favour of #10143 for the immediate need (disconnect node by id), but I think this could still be a useful RPC in the future.",
      "created_at" : "2017-04-07T20:57:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292649747",
      "id" : 292649747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-04-07T20:57:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292649747",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Reopening with just the ability to update:\r\n\r\n- `fWhitelisted`\r\n- `m_manual_connection`\r\n\r\nThe net_processing functionality for the v0.15.0.2 PRs is disabled for manual connections, so this PR could be helpful for testing those changes.\r\n\r\n@sdaftuar ",
      "created_at" : "2017-10-26T22:19:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339817507",
      "id" : 339817507,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-10-26T22:19:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/339817507",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147375941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147375941"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is null instead.",
      "commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "created_at" : "2017-10-27T10:25:49Z",
      "diff_hunk" : "@@ -121,73 +182,79 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (request.params.size() >= 1 && request.params[0].isNum()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        if (g_connman->GetNodeStats(request.params[0].get_int(), stats)) {\n+            NodeStatsToJSON(stats, obj);\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n+\n+            ret.push_back(obj);\n+        }\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 3 || request.params.size() == 0)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network node (debug method).\\n\"\n+            \"\\nReturns updated information about the node. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"              (string, required) The node id (see getpeerinfo for a list of nodes with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the node is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the node was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if(!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    LOCK(cs_main);\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nodeid = request.params[0].get_int();\n+\n+    if (request.params.size() >= 2) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        if (!g_connman->SetWhitelisted(nodeid, request.params[1].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update node whitelisting\");\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if (request.params.size() >= 3) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147375941",
      "id" : 147375941,
      "original_commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "original_position" : 190,
      "path" : "src/rpc/net.cpp",
      "position" : 190,
      "pull_request_review_id" : 72463355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2017-10-27T10:32:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147375941",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147376503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147376503"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If not then raise invalid parameter?",
      "commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "created_at" : "2017-10-27T10:29:03Z",
      "diff_hunk" : "@@ -121,73 +182,79 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (request.params.size() >= 1 && request.params[0].isNum()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        if (g_connman->GetNodeStats(request.params[0].get_int(), stats)) {\n+            NodeStatsToJSON(stats, obj);\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n+\n+            ret.push_back(obj);\n+        }\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 3 || request.params.size() == 0)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network node (debug method).\\n\"\n+            \"\\nReturns updated information about the node. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"              (string, required) The node id (see getpeerinfo for a list of nodes with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the node is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the node was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if(!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    LOCK(cs_main);\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nodeid = request.params[0].get_int();\n+\n+    if (request.params.size() >= 2) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        if (!g_connman->SetWhitelisted(nodeid, request.params[1].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update node whitelisting\");\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if (request.params.size() >= 3) {\n+        RPCTypeCheckArgument(request.params[2], UniValue::VBOOL);\n+        if (!g_connman->SetManualConnection(nodeid, request.params[2].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update node manual\");\n         }\n-        obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+    }\n \n-        ret.push_back(obj);\n+    UniValue entry(UniValue::VOBJ);\n+    CNodeStats stats;\n+\n+    if (g_connman->GetNodeStats(nodeid, stats)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147376503",
      "id" : 147376503,
      "original_commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "original_position" : 202,
      "path" : "src/rpc/net.cpp",
      "position" : 202,
      "pull_request_review_id" : 72463355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2017-10-27T10:32:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147376503",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147376560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147376560"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing test for invalid node.",
      "commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "created_at" : "2017-10-27T10:29:26Z",
      "diff_hunk" : "@@ -121,73 +182,79 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (request.params.size() >= 1 && request.params[0].isNum()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        if (g_connman->GetNodeStats(request.params[0].get_int(), stats)) {\n+            NodeStatsToJSON(stats, obj);\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n+\n+            ret.push_back(obj);\n+        }\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 3 || request.params.size() == 0)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network node (debug method).\\n\"\n+            \"\\nReturns updated information about the node. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"              (string, required) The node id (see getpeerinfo for a list of nodes with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the node is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the node was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if(!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    LOCK(cs_main);\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nodeid = request.params[0].get_int();\n+\n+    if (request.params.size() >= 2) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        if (!g_connman->SetWhitelisted(nodeid, request.params[1].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update node whitelisting\");\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if (request.params.size() >= 3) {\n+        RPCTypeCheckArgument(request.params[2], UniValue::VBOOL);\n+        if (!g_connman->SetManualConnection(nodeid, request.params[2].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update node manual\");\n         }\n-        obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+    }\n \n-        ret.push_back(obj);\n+    UniValue entry(UniValue::VOBJ);\n+    CNodeStats stats;\n+\n+    if (g_connman->GetNodeStats(nodeid, stats)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147376560",
      "id" : 147376560,
      "in_reply_to_id" : 147376503,
      "original_commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "original_position" : 202,
      "path" : "src/rpc/net.cpp",
      "position" : 202,
      "pull_request_review_id" : 72463355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2017-10-27T10:32:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147376560",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147377023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147377023"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not null instead.",
      "commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "created_at" : "2017-10-27T10:31:55Z",
      "diff_hunk" : "@@ -121,73 +182,79 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (request.params.size() >= 1 && request.params[0].isNum()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147377023",
      "id" : 147377023,
      "original_commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "original_position" : 86,
      "path" : "src/rpc/net.cpp",
      "position" : 86,
      "pull_request_review_id" : 72463355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2017-10-27T10:32:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147377023",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review @promag . I've addressed all your comments.",
      "created_at" : "2017-10-27T14:06:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339981381",
      "id" : 339981381,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-10-27T14:06:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/339981381",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
