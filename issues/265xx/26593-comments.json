[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [jb55](https://github.com/bitcoin/bitcoin/pull/26593#issuecomment-1331016229), [vasild](https://github.com/bitcoin/bitcoin/pull/26593#issuecomment-1334856799) |\n| Approach ACK | [virtu](https://github.com/bitcoin/bitcoin/pull/26593#issuecomment-1346186050) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26661](https://github.com/bitcoin/bitcoin/pull/26661) (wallet: Coin Selection, return accurate error messages by furszy)\n* [#26032](https://github.com/bitcoin/bitcoin/pull/26032) (wallet: skip R-value signature grinding for external signers by Sjors)\n* [#25541](https://github.com/bitcoin/bitcoin/pull/25541) (tracing: macOS USDT support by kouloumos)\n* [#9384](https://github.com/bitcoin/bitcoin/pull/9384) (CCoinsViewCache code cleanup & deduplication by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2022-11-28T20:50:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593#issuecomment-1329746317",
      "id" : 1329746317,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593",
      "node_id" : "IC_kwDOABII585PQlGN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1329746317/reactions"
      },
      "updated_at" : "2022-12-12T09:52:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1329746317",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26593#discussion_r1034160141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26593"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034160141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Aren't variadic macros (at least in this form) an extension, not standard C++?",
      "commit_id" : "94331ba3cc8e5b2a3453e796a6988b668fd34668",
      "created_at" : "2022-11-28T23:39:04Z",
      "diff_hunk" : "@@ -7,39 +7,58 @@\n \n #ifdef ENABLE_TRACING\n \n+// Setting SDT_USE_VARIADIC let's systemtap (sys/sdt.h) know that we want to use\n+// the optional variadic macros to define tracepoints.\n+#define SDT_USE_VARIADIC 1\n+\n+// Setting _SDT_HAS_SEMAPHORES let's systemtap (sys/sdt.h) know that we want to\n+// use the optional semaphore feature for our tracepoints. This feature allows\n+// us to check if something is attached to a tracepoint. We only want to prepare\n+// some potentially expensive tracepoint arguments, if the tracepoint is being\n+// used. Here, an expensive argument preparation could, for example, be\n+// calculating a hash or serialization of a data structure.\n+#define _SDT_HAS_SEMAPHORES 1\n+\n #include <sys/sdt.h>\n \n-#define TRACE(context, event) DTRACE_PROBE(context, event)\n-#define TRACE1(context, event, a) DTRACE_PROBE1(context, event, a)\n-#define TRACE2(context, event, a, b) DTRACE_PROBE2(context, event, a, b)\n-#define TRACE3(context, event, a, b, c) DTRACE_PROBE3(context, event, a, b, c)\n-#define TRACE4(context, event, a, b, c, d) DTRACE_PROBE4(context, event, a, b, c, d)\n-#define TRACE5(context, event, a, b, c, d, e) DTRACE_PROBE5(context, event, a, b, c, d, e)\n-#define TRACE6(context, event, a, b, c, d, e, f) DTRACE_PROBE6(context, event, a, b, c, d, e, f)\n-#define TRACE7(context, event, a, b, c, d, e, f, g) DTRACE_PROBE7(context, event, a, b, c, d, e, f, g)\n-#define TRACE8(context, event, a, b, c, d, e, f, g, h) DTRACE_PROBE8(context, event, a, b, c, d, e, f, g, h)\n-#define TRACE9(context, event, a, b, c, d, e, f, g, h, i) DTRACE_PROBE9(context, event, a, b, c, d, e, f, g, h, i)\n-#define TRACE10(context, event, a, b, c, d, e, f, g, h, i, j) DTRACE_PROBE10(context, event, a, b, c, d, e, f, g, h, i, j)\n-#define TRACE11(context, event, a, b, c, d, e, f, g, h, i, j, k) DTRACE_PROBE11(context, event, a, b, c, d, e, f, g, h, i, j, k)\n-#define TRACE12(context, event, a, b, c, d, e, f, g, h, i, j, k, l) DTRACE_PROBE12(context, event, a, b, c, d, e, f, g, h, i, j, k, l)\n+// Used to define a counting semaphore for a tracepoint. This semaphore is\n+// automatically incremented by tracing frameworks (bpftrace, bcc, libbpf, ...)\n+// upon attaching to the tracepoint and decremented when detaching. This needs\n+// to be a global variable. It's placed in the '.probes' ELF section.\n+#define TRACEPOINT_SEMAPHORE(context, event) \\\n+    unsigned short context##_##event##_semaphore __attribute__((section (\".probes\")))\n+\n+// Returns true if something is attached to the tracepoint.\n+#define TRACEPOINT_ACTIVE(context, event) context##_##event##_semaphore > 0\n+\n+// A USDT tracepoint with zero to twelve arguments. Here, it **IS** checked that\n+// the tracepoint is active before preparing its arguments. Use the\n+// TRACEPOINT_UNCHECKED macro if you want to manually check that the tracepoint\n+// is active.\n+#define TRACEPOINT(context, event, args...) \\\n+    if (TRACEPOINT_ACTIVE(context, event)) \\\n+        STAP_PROBEV(context, event, args)\n+\n+// A USDT tracepoint with zero to twelve arguments. Here, it is **NOT** checked\n+// that the tracepoint is active before preparing its arguments. Use this macro\n+// if you want to, for example, prepare expensive tracepoint arguments over\n+// multiple lines. Example usage:\n+//\n+//  if (TRACEPOINT_ACTIVE(context, event)) {\n+//      result = slightly_expensive_calulation();\n+//      TRACEPOINT_UNCHECKED(context, event, result);\n+//  }\n+//\n+#define TRACEPOINT_UNCHECKED(context, event, args...) \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593#discussion_r1034160141",
      "id" : 1034160141,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII5849pAgN",
      "original_commit_id" : "94331ba3cc8e5b2a3453e796a6988b668fd34668",
      "original_line" : 52,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/util/trace.h",
      "position" : 59,
      "pull_request_review_id" : 1196700835,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26593",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034160141/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-28T23:39:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034160141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26593#discussion_r1034419006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26593"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034419006"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "TIL, could change to `...` and `__VA_ARGS__` if needed",
      "commit_id" : "94331ba3cc8e5b2a3453e796a6988b668fd34668",
      "created_at" : "2022-11-29T08:11:15Z",
      "diff_hunk" : "@@ -7,39 +7,58 @@\n \n #ifdef ENABLE_TRACING\n \n+// Setting SDT_USE_VARIADIC let's systemtap (sys/sdt.h) know that we want to use\n+// the optional variadic macros to define tracepoints.\n+#define SDT_USE_VARIADIC 1\n+\n+// Setting _SDT_HAS_SEMAPHORES let's systemtap (sys/sdt.h) know that we want to\n+// use the optional semaphore feature for our tracepoints. This feature allows\n+// us to check if something is attached to a tracepoint. We only want to prepare\n+// some potentially expensive tracepoint arguments, if the tracepoint is being\n+// used. Here, an expensive argument preparation could, for example, be\n+// calculating a hash or serialization of a data structure.\n+#define _SDT_HAS_SEMAPHORES 1\n+\n #include <sys/sdt.h>\n \n-#define TRACE(context, event) DTRACE_PROBE(context, event)\n-#define TRACE1(context, event, a) DTRACE_PROBE1(context, event, a)\n-#define TRACE2(context, event, a, b) DTRACE_PROBE2(context, event, a, b)\n-#define TRACE3(context, event, a, b, c) DTRACE_PROBE3(context, event, a, b, c)\n-#define TRACE4(context, event, a, b, c, d) DTRACE_PROBE4(context, event, a, b, c, d)\n-#define TRACE5(context, event, a, b, c, d, e) DTRACE_PROBE5(context, event, a, b, c, d, e)\n-#define TRACE6(context, event, a, b, c, d, e, f) DTRACE_PROBE6(context, event, a, b, c, d, e, f)\n-#define TRACE7(context, event, a, b, c, d, e, f, g) DTRACE_PROBE7(context, event, a, b, c, d, e, f, g)\n-#define TRACE8(context, event, a, b, c, d, e, f, g, h) DTRACE_PROBE8(context, event, a, b, c, d, e, f, g, h)\n-#define TRACE9(context, event, a, b, c, d, e, f, g, h, i) DTRACE_PROBE9(context, event, a, b, c, d, e, f, g, h, i)\n-#define TRACE10(context, event, a, b, c, d, e, f, g, h, i, j) DTRACE_PROBE10(context, event, a, b, c, d, e, f, g, h, i, j)\n-#define TRACE11(context, event, a, b, c, d, e, f, g, h, i, j, k) DTRACE_PROBE11(context, event, a, b, c, d, e, f, g, h, i, j, k)\n-#define TRACE12(context, event, a, b, c, d, e, f, g, h, i, j, k, l) DTRACE_PROBE12(context, event, a, b, c, d, e, f, g, h, i, j, k, l)\n+// Used to define a counting semaphore for a tracepoint. This semaphore is\n+// automatically incremented by tracing frameworks (bpftrace, bcc, libbpf, ...)\n+// upon attaching to the tracepoint and decremented when detaching. This needs\n+// to be a global variable. It's placed in the '.probes' ELF section.\n+#define TRACEPOINT_SEMAPHORE(context, event) \\\n+    unsigned short context##_##event##_semaphore __attribute__((section (\".probes\")))\n+\n+// Returns true if something is attached to the tracepoint.\n+#define TRACEPOINT_ACTIVE(context, event) context##_##event##_semaphore > 0\n+\n+// A USDT tracepoint with zero to twelve arguments. Here, it **IS** checked that\n+// the tracepoint is active before preparing its arguments. Use the\n+// TRACEPOINT_UNCHECKED macro if you want to manually check that the tracepoint\n+// is active.\n+#define TRACEPOINT(context, event, args...) \\\n+    if (TRACEPOINT_ACTIVE(context, event)) \\\n+        STAP_PROBEV(context, event, args)\n+\n+// A USDT tracepoint with zero to twelve arguments. Here, it is **NOT** checked\n+// that the tracepoint is active before preparing its arguments. Use this macro\n+// if you want to, for example, prepare expensive tracepoint arguments over\n+// multiple lines. Example usage:\n+//\n+//  if (TRACEPOINT_ACTIVE(context, event)) {\n+//      result = slightly_expensive_calulation();\n+//      TRACEPOINT_UNCHECKED(context, event, result);\n+//  }\n+//\n+#define TRACEPOINT_UNCHECKED(context, event, args...) \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593#discussion_r1034419006",
      "id" : 1034419006,
      "in_reply_to_id" : 1034160141,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII5849p_s-",
      "original_commit_id" : "94331ba3cc8e5b2a3453e796a6988b668fd34668",
      "original_line" : 52,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/util/trace.h",
      "position" : 59,
      "pull_request_review_id" : 1197057845,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26593",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034419006/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-29T08:11:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034419006",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26593#discussion_r1034548969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26593"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034548969"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thinking about it: We might not need an extra `TRACEPOINT_UNCHECKED` macro. We can also use the `TRACEPOINT` in all places where we'd use the unchecked one. This would mean would do two `TRACEPOINT_ACTIVE` checks, but these are extremely cheap and might even be optimized to one by the compiler. \r\n\r\nDropping the unchecked version results in is a smaller, better internal tracepoint API and removes the possibility that someone uses the unchecked version but doesn't gate it.",
      "commit_id" : "94331ba3cc8e5b2a3453e796a6988b668fd34668",
      "created_at" : "2022-11-29T10:08:06Z",
      "diff_hunk" : "@@ -11,16 +11,54 @@\n // the optional variadic macros to define tracepoints.\n #define SDT_USE_VARIADIC 1\n \n+// Setting _SDT_HAS_SEMAPHORES let's systemtap (sys/sdt.h) know that we want to\n+// use the optional semaphore feature for our tracepoints. This feature allows\n+// us to check if something is attached to a tracepoint. We only want to prepare\n+// some potentially expensive tracepoint arguments, if the tracepoint is being\n+// used. Here, an expensive argument preparation could, for example, be\n+// calculating a hash or serialization of a data structure.\n+#define _SDT_HAS_SEMAPHORES 1\n+\n #include <sys/sdt.h>\n \n-// A USDT tracepoint with zero to twelve arguments.\n-#define TRACEPOINT(context, event, args...) STAP_PROBEV(context, event, args)\n+// Used to define a counting semaphore for a tracepoint. This semaphore is\n+// automatically incremented by tracing frameworks (bpftrace, bcc, libbpf, ...)\n+// upon attaching to the tracepoint and decremented when detaching. This needs\n+// to be a global variable. It's placed in the '.probes' ELF section.\n+#define TRACEPOINT_SEMAPHORE(context, event) \\\n+    unsigned short context##_##event##_semaphore __attribute__((section (\".probes\")))\n+\n+// Returns true if something is attached to the tracepoint.\n+#define TRACEPOINT_ACTIVE(context, event) context##_##event##_semaphore > 0\n+\n+// A USDT tracepoint with zero to twelve arguments. Here, it **IS** checked that\n+// the tracepoint is active before preparing its arguments. Use the\n+// TRACEPOINT_UNCHECKED macro if you want to manually check that the tracepoint\n+// is active.\n+#define TRACEPOINT(context, event, args...) \\\n+    if (TRACEPOINT_ACTIVE(context, event)) \\\n+        STAP_PROBEV(context, event, args)\n+\n+// A USDT tracepoint with zero to twelve arguments. Here, it is **NOT** checked\n+// that the tracepoint is active before preparing its arguments. Use this macro\n+// if you want to, for example, prepare expensive tracepoint arguments over\n+// multiple lines. Example usage:\n+//\n+//  if (TRACEPOINT_ACTIVE(context, event)) {\n+//      result = slightly_expensive_calulation();\n+//      TRACEPOINT_UNCHECKED(context, event, result);\n+//  }\n+//\n+#define TRACEPOINT_UNCHECKED(context, event, args...) \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593#discussion_r1034548969",
      "id" : 1034548969,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII5849qfbp",
      "original_commit_id" : "94331ba3cc8e5b2a3453e796a6988b668fd34668",
      "original_line" : 52,
      "original_position" : 44,
      "original_start_line" : 42,
      "path" : "src/util/trace.h",
      "position" : 44,
      "pull_request_review_id" : 1197254044,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26593",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034548969/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 42,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-29T10:21:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034548969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26593#discussion_r1034564335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26593"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034564335"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We want to avoid extensions where possible: https://github.com/bitcoin/bitcoin/blob/d415b7261c05dafbc3e65eea72d270b2bed0958b/configure.ac#L94",
      "commit_id" : "94331ba3cc8e5b2a3453e796a6988b668fd34668",
      "created_at" : "2022-11-29T10:22:21Z",
      "diff_hunk" : "@@ -7,39 +7,58 @@\n \n #ifdef ENABLE_TRACING\n \n+// Setting SDT_USE_VARIADIC let's systemtap (sys/sdt.h) know that we want to use\n+// the optional variadic macros to define tracepoints.\n+#define SDT_USE_VARIADIC 1\n+\n+// Setting _SDT_HAS_SEMAPHORES let's systemtap (sys/sdt.h) know that we want to\n+// use the optional semaphore feature for our tracepoints. This feature allows\n+// us to check if something is attached to a tracepoint. We only want to prepare\n+// some potentially expensive tracepoint arguments, if the tracepoint is being\n+// used. Here, an expensive argument preparation could, for example, be\n+// calculating a hash or serialization of a data structure.\n+#define _SDT_HAS_SEMAPHORES 1\n+\n #include <sys/sdt.h>\n \n-#define TRACE(context, event) DTRACE_PROBE(context, event)\n-#define TRACE1(context, event, a) DTRACE_PROBE1(context, event, a)\n-#define TRACE2(context, event, a, b) DTRACE_PROBE2(context, event, a, b)\n-#define TRACE3(context, event, a, b, c) DTRACE_PROBE3(context, event, a, b, c)\n-#define TRACE4(context, event, a, b, c, d) DTRACE_PROBE4(context, event, a, b, c, d)\n-#define TRACE5(context, event, a, b, c, d, e) DTRACE_PROBE5(context, event, a, b, c, d, e)\n-#define TRACE6(context, event, a, b, c, d, e, f) DTRACE_PROBE6(context, event, a, b, c, d, e, f)\n-#define TRACE7(context, event, a, b, c, d, e, f, g) DTRACE_PROBE7(context, event, a, b, c, d, e, f, g)\n-#define TRACE8(context, event, a, b, c, d, e, f, g, h) DTRACE_PROBE8(context, event, a, b, c, d, e, f, g, h)\n-#define TRACE9(context, event, a, b, c, d, e, f, g, h, i) DTRACE_PROBE9(context, event, a, b, c, d, e, f, g, h, i)\n-#define TRACE10(context, event, a, b, c, d, e, f, g, h, i, j) DTRACE_PROBE10(context, event, a, b, c, d, e, f, g, h, i, j)\n-#define TRACE11(context, event, a, b, c, d, e, f, g, h, i, j, k) DTRACE_PROBE11(context, event, a, b, c, d, e, f, g, h, i, j, k)\n-#define TRACE12(context, event, a, b, c, d, e, f, g, h, i, j, k, l) DTRACE_PROBE12(context, event, a, b, c, d, e, f, g, h, i, j, k, l)\n+// Used to define a counting semaphore for a tracepoint. This semaphore is\n+// automatically incremented by tracing frameworks (bpftrace, bcc, libbpf, ...)\n+// upon attaching to the tracepoint and decremented when detaching. This needs\n+// to be a global variable. It's placed in the '.probes' ELF section.\n+#define TRACEPOINT_SEMAPHORE(context, event) \\\n+    unsigned short context##_##event##_semaphore __attribute__((section (\".probes\")))\n+\n+// Returns true if something is attached to the tracepoint.\n+#define TRACEPOINT_ACTIVE(context, event) context##_##event##_semaphore > 0\n+\n+// A USDT tracepoint with zero to twelve arguments. Here, it **IS** checked that\n+// the tracepoint is active before preparing its arguments. Use the\n+// TRACEPOINT_UNCHECKED macro if you want to manually check that the tracepoint\n+// is active.\n+#define TRACEPOINT(context, event, args...) \\\n+    if (TRACEPOINT_ACTIVE(context, event)) \\\n+        STAP_PROBEV(context, event, args)\n+\n+// A USDT tracepoint with zero to twelve arguments. Here, it is **NOT** checked\n+// that the tracepoint is active before preparing its arguments. Use this macro\n+// if you want to, for example, prepare expensive tracepoint arguments over\n+// multiple lines. Example usage:\n+//\n+//  if (TRACEPOINT_ACTIVE(context, event)) {\n+//      result = slightly_expensive_calulation();\n+//      TRACEPOINT_UNCHECKED(context, event, result);\n+//  }\n+//\n+#define TRACEPOINT_UNCHECKED(context, event, args...) \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593#discussion_r1034564335",
      "id" : 1034564335,
      "in_reply_to_id" : 1034160141,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII5849qjLv",
      "original_commit_id" : "94331ba3cc8e5b2a3453e796a6988b668fd34668",
      "original_line" : 52,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/util/trace.h",
      "position" : 59,
      "pull_request_review_id" : 1197276566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26593",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034564335/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-29T10:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034564335",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "- Addressed https://github.com/bitcoin/bitcoin/pull/26593#discussion_r1034160141 by using `__VA_ARGS__`. Also using a separate TRACEPOINT0 macro for tracepoints without arguments, as using the TRACEPOINT macro without arguments is only be possible with GCC (clang warns that we are using gcc extensions). Tested with both clang and gcc.\r\n- Adressed https://github.com/bitcoin/bitcoin/pull/26593#discussion_r1034548969 by dropping the `TRACEPOINT_UNCHECKED` macro.\r\n- Added unit tests for the TRACEPOINT macros. The tracepoints in the unit tests don't do anything in particular, but the tests show that the macros work. Through the CI we cover `ENABLE_TRACING` being defined and undefined. The test case `test_tracepoint_check_if_attached` also shows that the `TRACEPOINT_ACTIVE` macro is not broken (it's tested that it's working in the functional tests).",
      "created_at" : "2022-11-29T16:28:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593#issuecomment-1330914436",
      "id" : 1330914436,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593",
      "node_id" : "IC_kwDOABII585PVCSE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1330914436/reactions"
      },
      "updated_at" : "2022-11-29T17:27:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1330914436",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "genius. Concept ACK",
      "created_at" : "2022-11-29T17:25:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593#issuecomment-1331016229",
      "id" : 1331016229,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593",
      "node_id" : "IC_kwDOABII585PVbIl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1331016229/reactions"
      },
      "updated_at" : "2022-11-29T17:25:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1331016229",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2022-12-02T07:30:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593#issuecomment-1334856799",
      "id" : 1334856799,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593",
      "node_id" : "IC_kwDOABII585PkExf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1334856799/reactions"
      },
      "updated_at" : "2022-12-02T07:30:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1334856799",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Approach ACK\r\n\r\nSuper cool stuff. This effectively removes **any** runtime overhead of tracepoints on modern processors with branch prediction and speculative execution when no probes are attached .\r\n\r\nSome feedback on testing with [61ca0f9](https://github.com/bitcoin/bitcoin/commit/61ca0f99dbbe7c83495c4f346bc91eceaf07e7ea):\r\n\r\n- functional tests executed successfully on x86_64 and arm64\r\n- demo scripts in `contrib/tracing`: right now, `bpftrace` scripts work, `bcc` scripts don't\r\n- generated assembly looks as expected:\r\n    - tracing code is semaphore-gated using compare and branch instructions:\r\n \r\n        ```\r\n        # x86_64\r\n       cmp    WORD PTR [rip+0x8f816b],0x0        # 0x55d32c25d6c0 <net_outbound_message_semaphore>\r\n       jne    0x55d32b965800 <_ZN8CConnman11PushMessageEP5CNodeO17CSerializedNetMsg+1488>\r\n\r\n       # arm64\r\n       ldrh    w1, [x0, #1776]\r\n       cbnz    w1, 0xaaaab2413fa4 <_ZN8CConnman11PushMessageEP5CNodeO17CSerializedNetMsg+1228>\r\n       ```\r\n    - tracing code uses `nop` when no probe is attached vs. `int3` (x86_64) / `brk` (arm64) to trap when probe is attached\r\n\r\n- used `gdb` to inspect semaphores: they are correctly initialized to zero and set to one if one or more(!) probes are attached. The documentation I read stated semaphores act as probe reference counters, so I was expecting semaphore values to reflect the number of probes. However, it looks like semaphores and counters were separated. This does not impact correct behavior though:\r\n\r\n  ```\r\n  (gdb) # no probe attached\r\n  (gdb) x/hx &net_outbound_message_semaphore\r\n  0xaaaacc8506f0 <net_outbound_message_semaphore>:        0x0000\r\n  (gdb) # started one instance of contrib/tracing/log_p2p_traffic.bt\r\n  (gdb) x/hx &net_outbound_message_semaphore\r\n  0xaaaacc8506f0 <net_outbound_message_semaphore>:        0x0001\r\n  (gdb) # started another instance of contrib/tracing/log_p2p_traffic.bt\r\n  (gdb) x/hx &net_outbound_message_semaphore\r\n  0xaaaacc8506f0 <net_outbound_message_semaphore>:        0x0001\r\n  (gdb) # stopped first instance\r\n  (gdb) x/hx &net_outbound_message_semaphore\r\n  0xaaaacc8506f0 <net_outbound_message_semaphore>:        0x0001\r\n  (gdb) # stopped second instance\r\n  (gdb) x/hx &net_outbound_message_semaphore\r\n  0xaaaacc8506f0 <net_outbound_message_semaphore>:        0x0000\r\n  ```",
      "created_at" : "2022-12-12T09:52:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593#issuecomment-1346186050",
      "id" : 1346186050,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593",
      "node_id" : "IC_kwDOABII585QPStC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1346186050/reactions"
      },
      "updated_at" : "2022-12-12T09:52:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1346186050",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/72414353?v=4",
         "events_url" : "https://api.github.com/users/virtu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/virtu/followers",
         "following_url" : "https://api.github.com/users/virtu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/virtu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/virtu",
         "id" : 72414353,
         "login" : "virtu",
         "node_id" : "MDQ6VXNlcjcyNDE0MzUz",
         "organizations_url" : "https://api.github.com/users/virtu/orgs",
         "received_events_url" : "https://api.github.com/users/virtu/received_events",
         "repos_url" : "https://api.github.com/users/virtu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/virtu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/virtu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/virtu"
      }
   }
]
