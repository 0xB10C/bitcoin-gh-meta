[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nNice improvements!",
      "created_at" : "2020-12-28T21:11:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-751865486",
      "id" : 751865486,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20789",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTg2NTQ4Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-28T21:11:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751865486",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20729 (p2p: standardize on outbound-{full, block}-relay connection type naming by jonatack)\n* #20721 (Net: Move ping data to net_processing by jnewbery)\n* #20649 (refactor: Remove nMyStartingHeight from CNode/Connman by MarcoFalke)\n* #20370 (DRAFT fuzz: Permission flags in net_processing fuzzers by MarcoFalke)\n* #20228 (addrman: Make addrman a top-level component by jnewbery)\n* #20210 (net: assert CNode::m_inbound_onion is inbound in ctor, add getter, unit tests by jonatack)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-12-29T00:24:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-751904213",
      "id" : 751904213,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20789",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTkwNDIxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-31T15:56:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751904213",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550212069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550212069"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I wonder if it is possible to get a warning if a new enum value is added, but this array is forgotten to be updated? I think not :/",
      "commit_id" : "fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb",
      "created_at" : "2020-12-30T14:25:53Z",
      "diff_hunk" : "@@ -30,4 +30,35 @@ struct ConnmanTestMsg : public CConnman {\n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n };\n \n+constexpr ServiceFlags ALL_SERVICE_FLAGS[]{\n+    NODE_NONE,\n+    NODE_NETWORK,\n+    NODE_BLOOM,\n+    NODE_WITNESS,\n+    NODE_COMPACT_FILTERS,\n+    NODE_NETWORK_LIMITED,\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550212069",
      "id" : 550212069,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxMjA2OQ==",
      "original_commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "original_line" : 40,
      "original_position" : 11,
      "original_start_line" : 33,
      "path" : "src/test/util/net.h",
      "position" : 11,
      "pull_request_review_id" : 560068445,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789",
      "side" : "RIGHT",
      "start_line" : 33,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-31T13:11:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550212069",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550433436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550433436"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It is ok as it is, and I am just wondering if this can be improved wrt minimizing the chance of the actual enum and the \"all\" arrays going out of sync over time. Maybe one of the below would help:\r\n\r\no Add a comment next to the enum definition \"don't forget to update `ALL_...` in `src/test/util/net.h` if you change this enum\".\r\n\r\no Define the array immediately below the enum itself.\r\n\r\n<details>\r\n<summary>o Define both in one struct</summary>\r\n\r\n```cpp\r\nstruct Color\r\n{\r\n    enum E : uint8_t {\r\n        RED,\r\n        GREEN,\r\n        BLUE,\r\n    };\r\n\r\n    static constexpr E all[]{\r\n        RED,\r\n        GREEN,\r\n        BLUE,\r\n    };\r\n};\r\n\r\n...\r\n    std::cout << Color::BLUE << std::endl;\r\n\r\n    for (auto& c : Color::all) {\r\n        std::cout << c << std::endl;\r\n    }\r\n```\r\n</details>",
      "commit_id" : "fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb",
      "created_at" : "2020-12-31T08:58:35Z",
      "diff_hunk" : "@@ -30,4 +30,35 @@ struct ConnmanTestMsg : public CConnman {\n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n };\n \n+constexpr ServiceFlags ALL_SERVICE_FLAGS[]{\n+    NODE_NONE,\n+    NODE_NETWORK,\n+    NODE_BLOOM,\n+    NODE_WITNESS,\n+    NODE_COMPACT_FILTERS,\n+    NODE_NETWORK_LIMITED,\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550433436",
      "id" : 550433436,
      "in_reply_to_id" : 550212069,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMzQzNg==",
      "original_commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "original_line" : 40,
      "original_position" : 11,
      "original_start_line" : 33,
      "path" : "src/test/util/net.h",
      "position" : 11,
      "pull_request_review_id" : 560298518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789",
      "side" : "RIGHT",
      "start_line" : 33,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-31T13:11:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550433436",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550438456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550438456"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps we could start using [`kMaxValue` as in the Chromium project](https://www.chromium.org/developers/coding-style/chromium-style-checker-errors). That way we could âassert that the last element of the `ALL_*` array is equal to the `enum`'s `kMaxValue`.\r\n\r\nAnother benefit from using `kMaxValue` is that we could start using `FuzzedDataProvider::ConsumeEnum` when fuzzing.",
      "commit_id" : "fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb",
      "created_at" : "2020-12-31T09:23:44Z",
      "diff_hunk" : "@@ -30,4 +30,35 @@ struct ConnmanTestMsg : public CConnman {\n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n };\n \n+constexpr ServiceFlags ALL_SERVICE_FLAGS[]{\n+    NODE_NONE,\n+    NODE_NETWORK,\n+    NODE_BLOOM,\n+    NODE_WITNESS,\n+    NODE_COMPACT_FILTERS,\n+    NODE_NETWORK_LIMITED,\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550438456",
      "id" : 550438456,
      "in_reply_to_id" : 550212069,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzODQ1Ng==",
      "original_commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "original_line" : 40,
      "original_position" : 11,
      "original_start_line" : 33,
      "path" : "src/test/util/net.h",
      "position" : 11,
      "pull_request_review_id" : 560304307,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789",
      "side" : "RIGHT",
      "start_line" : 33,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-31T13:11:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550438456",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550475166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550475166"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, that is another way. `enum Network` uses this. It only works as long as enum values are left at their defaults:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/f1f26b8d5baec4a45a3a9ba0440cd4eff7af8407/src/netaddress.h#L38\r\n\r\nand also the dummy \"max\" value has to be explicitly handled in `switch` without `default:`\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/f1f26b8d5baec4a45a3a9ba0440cd4eff7af8407/src/netaddress.cpp#L145-L146",
      "commit_id" : "fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb",
      "created_at" : "2020-12-31T12:39:51Z",
      "diff_hunk" : "@@ -30,4 +30,35 @@ struct ConnmanTestMsg : public CConnman {\n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n };\n \n+constexpr ServiceFlags ALL_SERVICE_FLAGS[]{\n+    NODE_NONE,\n+    NODE_NETWORK,\n+    NODE_BLOOM,\n+    NODE_WITNESS,\n+    NODE_COMPACT_FILTERS,\n+    NODE_NETWORK_LIMITED,\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550475166",
      "id" : 550475166,
      "in_reply_to_id" : 550212069,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ3NTE2Ng==",
      "original_commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "original_line" : 40,
      "original_position" : 11,
      "original_start_line" : 33,
      "path" : "src/test/util/net.h",
      "position" : 11,
      "pull_request_review_id" : 560342078,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789",
      "side" : "RIGHT",
      "start_line" : 33,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-31T13:11:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550475166",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Force pushed to fix a bug. Should be trivial to re-ACK",
      "created_at" : "2020-12-31T13:11:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-752955379",
      "id" : 752955379,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20789",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Mjk1NTM3OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-31T13:11:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752955379",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550484056"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550484056"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What happens if we attempt to consume more bytes after `ConsumeRemainingBytes()`? Apparently CI was green. Should we `abort()` if that happens?",
      "commit_id" : "fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb",
      "created_at" : "2020-12-31T13:32:38Z",
      "diff_hunk" : "@@ -63,13 +64,15 @@ void fuzz_target(const std::vector<uint8_t>& buffer, const std::string& LIMIT_TO\n     }\n     const bool jump_out_of_ibd{fuzzed_data_provider.ConsumeBool()};\n     if (jump_out_of_ibd) chainstate.JumpOutOfIbd();\n-    CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n-    CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND_FULL_RELAY).release();\n+    CNode& p2p_node = *ConsumeNodeAsUniquePtr(fuzzed_data_provider).release();\n     p2p_node.fSuccessfullyConnected = true;\n     p2p_node.nVersion = PROTOCOL_VERSION;\n     p2p_node.SetCommonVersion(PROTOCOL_VERSION);\n     connman.AddTestNode(p2p_node);\n     g_setup->m_node.peerman->InitializeNode(&p2p_node);\n+\n+    // fuzzed_data_provider is fully consumed after this call, don't use it",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550484056",
      "id" : 550484056,
      "line" : 74,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NDA1Ng==",
      "original_commit_id" : "fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb",
      "original_line" : 74,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : 21,
      "pull_request_review_id" : 560351181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T13:33:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550484056",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550484742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550484742"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This happens in normal operation when the fuzz engine starts with an empty byte vector or when existing inputs are trimmed, so it can't be detected by CI.",
      "commit_id" : "fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb",
      "created_at" : "2020-12-31T13:36:35Z",
      "diff_hunk" : "@@ -63,13 +64,15 @@ void fuzz_target(const std::vector<uint8_t>& buffer, const std::string& LIMIT_TO\n     }\n     const bool jump_out_of_ibd{fuzzed_data_provider.ConsumeBool()};\n     if (jump_out_of_ibd) chainstate.JumpOutOfIbd();\n-    CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n-    CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND_FULL_RELAY).release();\n+    CNode& p2p_node = *ConsumeNodeAsUniquePtr(fuzzed_data_provider).release();\n     p2p_node.fSuccessfullyConnected = true;\n     p2p_node.nVersion = PROTOCOL_VERSION;\n     p2p_node.SetCommonVersion(PROTOCOL_VERSION);\n     connman.AddTestNode(p2p_node);\n     g_setup->m_node.peerman->InitializeNode(&p2p_node);\n+\n+    // fuzzed_data_provider is fully consumed after this call, don't use it",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550484742",
      "id" : 550484742,
      "in_reply_to_id" : 550484056,
      "line" : 74,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NDc0Mg==",
      "original_commit_id" : "fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb",
      "original_line" : 74,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : 21,
      "pull_request_review_id" : 560351881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T13:36:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550484742",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "\r\n## Benchmarks\r\n\r\nThe goal is to benchmark the complexity of finding a strong and weak match of an enum type.\r\nStrong match means the fuzz engine finds an exact value match. (built-in `operator==` for integers)\r\nWeak match means the fuzz engine finds a matching flag. (built-in `operator&` for integers)\r\n\r\nTo reproduce:\r\n\r\n* For all benchmarks `clang version 11.0.0` without sanitizers is used.\r\n* Only the fuzz target `process_message_inv` is used.\r\n* `-use_value_profile=1` is set at runtime.\r\n* All patches are on top of this pull request.\r\n\r\n### Strong (scoped) enum class\r\n\r\nWhile C++ doesn't restrict how scoped enum classes are used, in our code base, scoped enum classes avoid `operator&`, so this benchmark only considers an exact match.\r\n\r\n\r\n<details><summary>diffs</summary>\r\n\r\n\r\n\r\n\r\nThe following diff was used for \"kMaxValue\":\r\n\r\n```diff\r\ndiff --git a/src/net.h b/src/net.h\r\nindex 6316c73eee..a4930b229c 100644\r\n--- a/src/net.h\r\n+++ b/src/net.h\r\n@@ -178,6 +178,7 @@ enum class ConnectionType {\r\n      * AddrMan is empty.\r\n      */\r\n     ADDR_FETCH,\r\n+    kMaxValue=ADDR_FETCH,\r\n };\r\n \r\n class NetEventsInterface;\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex c5ea2dc85f..964d4e1899 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2702,6 +2702,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n                     return;\r\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n                     AddTxAnnouncement(pfrom, gtxid, current_time);\r\n+                    assert(!pfrom.IsFeelerConn());\r\n                 }\r\n             } else {\r\n                 LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\r\ndiff --git a/src/test/fuzz/util.h b/src/test/fuzz/util.h\r\nindex 465452c394..9e345d0c73 100644\r\n--- a/src/test/fuzz/util.h\r\n+++ b/src/test/fuzz/util.h\r\n@@ -307,7 +307,7 @@ auto ConsumeNode(FuzzedDataProvider& fuzzed_data_provider, const std::optional<N\r\n     const uint64_t local_host_nonce = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\r\n     const CAddress addr_bind = ConsumeAddress(fuzzed_data_provider);\r\n     const std::string addr_name = fuzzed_data_provider.ConsumeRandomLengthString(64);\r\n-    const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray(ALL_CONNECTION_TYPES);\r\n+    const ConnectionType conn_type = fuzzed_data_provider.ConsumeEnum<ConnectionType>();\r\n     const bool inbound_onion = fuzzed_data_provider.ConsumeBool();\r\n     if constexpr (ReturnUniquePtr) {\r\n         return std::make_unique<CNode>(node_id, local_services, my_starting_height, socket, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion);\r\n```\r\n\r\nThe following diff was used for \"ArrayEnum\":\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex c5ea2dc85f..964d4e1899 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2702,6 +2702,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n                     return;\r\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n                     AddTxAnnouncement(pfrom, gtxid, current_time);\r\n+                    assert(!pfrom.IsFeelerConn());\r\n                 }\r\n             } else {\r\n                 LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\r\n```\r\n\r\n\r\n</details>\r\n\r\n\r\n\r\n| kMaxValue (`ConsumeEnum`) | ArrayEnum (`PickValueInArray`) |\r\n|-----------------------------------------------|-----------------------------------------------------|\r\n|                 ![fdp_enum](https://user-images.githubusercontent.com/6399679/103412565-05c5b800-4b76-11eb-9149-e347d8b4b6bc.png)                              |                        ![fdp_arr](https://user-images.githubusercontent.com/6399679/103412563-03635e00-4b76-11eb-9333-37056f7215a5.png)                             |\r\n\r\nNo difference should be observed because both calls to the fuzz engine are compiled down to the same `ConsumeIntegralInRange`. Given the limited experimental data, this seems to hold in practice.\r\n\r\n### Weak enum\r\n\r\n#### Weak match (`operator&`)\r\n\r\n<details><summary>diffs</summary>\r\n\r\nDiff for \"kMaxValue\":\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex c5ea2dc85f..2acd336c1b 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2702,6 +2702,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n                     return;\r\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n                     AddTxAnnouncement(pfrom, gtxid, current_time);\r\n+                    assert(!(pfrom.GetLocalServices() & NODE_NETWORK_LIMITED));\r\n                 }\r\n             } else {\r\n                 LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\r\ndiff --git a/src/protocol.h b/src/protocol.h\r\nindex 8af34f58bd..ae863b13d0 100644\r\n--- a/src/protocol.h\r\n+++ b/src/protocol.h\r\n@@ -287,6 +287,7 @@ enum ServiceFlags : uint64_t {\r\n     // serving the last 288 (2 day) blocks\r\n     // See BIP159 for details on how this is implemented.\r\n     NODE_NETWORK_LIMITED = (1 << 10),\r\n+    kMaxValue=NODE_NETWORK_LIMITED,\r\n \r\n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\r\n     // isn't getting used, or one not being used much, and notify the\r\ndiff --git a/src/test/fuzz/util.h b/src/test/fuzz/util.h\r\nindex 465452c394..7f9a72b585 100644\r\n--- a/src/test/fuzz/util.h\r\n+++ b/src/test/fuzz/util.h\r\n@@ -299,7 +299,7 @@ template <bool ReturnUniquePtr = false>\r\n auto ConsumeNode(FuzzedDataProvider& fuzzed_data_provider, const std::optional<NodeId>& node_id_in = nullopt) noexcept\r\n {\r\n     const NodeId node_id = node_id_in.value_or(fuzzed_data_provider.ConsumeIntegral<NodeId>());\r\n-    const ServiceFlags local_services = ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS);\r\n+    const ServiceFlags local_services = fuzzed_data_provider.ConsumeEnum<ServiceFlags>();\r\n     const int my_starting_height = fuzzed_data_provider.ConsumeIntegral<int>();\r\n     const SOCKET socket = INVALID_SOCKET;\r\n     const CAddress address = ConsumeAddress(fuzzed_data_provider);\r\n```\r\n\r\n\r\nDiff for \"ArrayEnum\":\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex c5ea2dc85f..2acd336c1b 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2702,6 +2702,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n                     return;\r\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n                     AddTxAnnouncement(pfrom, gtxid, current_time);\r\n+                    assert(!(pfrom.GetLocalServices() & NODE_NETWORK_LIMITED));\r\n                 }\r\n             } else {\r\n                 LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n| kMaxValue (`ConsumeEnum`) | ArrayEnum (`ConsumeWeakEnum`) |\r\n|-----------------------------------------------|-----------------------------------------------------|\r\n|                  ![fdp_enum_weak_match](https://user-images.githubusercontent.com/6399679/103414412-21cd5780-4b7e-11eb-91a5-ae2fde40d14a.png)                         |                    ![our_weak_weak_match](https://user-images.githubusercontent.com/6399679/103414414-242fb180-4b7e-11eb-9812-d5fa890a87bf.png)                      |\r\n\r\n#### Exact match (`operator==`)\r\n\r\n\r\n<details><summary>diffs</summary>\r\n\r\nDiff used for \"kMaxValue\":\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex c5ea2dc85f..be2a9fac3d 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2702,6 +2702,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n                     return;\r\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n                     AddTxAnnouncement(pfrom, gtxid, current_time);\r\n+                    assert(!(pfrom.GetLocalServices() == NODE_NETWORK_LIMITED));\r\n                 }\r\n             } else {\r\n                 LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\r\ndiff --git a/src/protocol.h b/src/protocol.h\r\nindex 8af34f58bd..ae863b13d0 100644\r\n--- a/src/protocol.h\r\n+++ b/src/protocol.h\r\n@@ -287,6 +287,7 @@ enum ServiceFlags : uint64_t {\r\n     // serving the last 288 (2 day) blocks\r\n     // See BIP159 for details on how this is implemented.\r\n     NODE_NETWORK_LIMITED = (1 << 10),\r\n+    kMaxValue=NODE_NETWORK_LIMITED,\r\n \r\n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\r\n     // isn't getting used, or one not being used much, and notify the\r\ndiff --git a/src/test/fuzz/util.h b/src/test/fuzz/util.h\r\nindex 465452c394..7f9a72b585 100644\r\n--- a/src/test/fuzz/util.h\r\n+++ b/src/test/fuzz/util.h\r\n@@ -299,7 +299,7 @@ template <bool ReturnUniquePtr = false>\r\n auto ConsumeNode(FuzzedDataProvider& fuzzed_data_provider, const std::optional<NodeId>& node_id_in = nullopt) noexcept\r\n {\r\n     const NodeId node_id = node_id_in.value_or(fuzzed_data_provider.ConsumeIntegral<NodeId>());\r\n-    const ServiceFlags local_services = ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS);\r\n+    const ServiceFlags local_services = fuzzed_data_provider.ConsumeEnum<ServiceFlags>();\r\n     const int my_starting_height = fuzzed_data_provider.ConsumeIntegral<int>();\r\n     const SOCKET socket = INVALID_SOCKET;\r\n     const CAddress address = ConsumeAddress(fuzzed_data_provider);\r\n```\r\n\r\n\r\nDiff used for \"ArrayEnum\":\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex c5ea2dc85f..be2a9fac3d 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2702,6 +2702,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n                     return;\r\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n                     AddTxAnnouncement(pfrom, gtxid, current_time);\r\n+                    assert(!(pfrom.GetLocalServices() == NODE_NETWORK_LIMITED));\r\n                 }\r\n             } else {\r\n                 LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n| kMaxValue (`ConsumeEnum`) | ArrayEnum (`ConsumeWeakEnum`) |\r\n|-----------------------------------------------|-----------------------------------------------------|\r\n|               ![fdp_enum_exact_match](https://user-images.githubusercontent.com/6399679/103416486-4c6fde00-4b87-11eb-898f-5020d32ce7cb.png)                      |              ![our_weak_exact_match](https://user-images.githubusercontent.com/6399679/103416483-48dc5700-4b87-11eb-97bb-0fd9f692fdf1.png)                 |\r\n\r\n\r\n\r\n### Double weak match (low bits)\r\n\r\n<details><summary>diffs</summary>\r\n\r\nDiff for \"kMaxValue\":\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex c5ea2dc85f..8946a750a8 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2702,6 +2702,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n                     return;\r\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n                     AddTxAnnouncement(pfrom, gtxid, current_time);\r\n+                    assert(!HasAllDesirableServiceFlags(pfrom.GetLocalServices()));\r\n                 }\r\n             } else {\r\n                 LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\r\ndiff --git a/src/protocol.h b/src/protocol.h\r\nindex 8af34f58bd..ae863b13d0 100644\r\n--- a/src/protocol.h\r\n+++ b/src/protocol.h\r\n@@ -287,6 +287,7 @@ enum ServiceFlags : uint64_t {\r\n     // serving the last 288 (2 day) blocks\r\n     // See BIP159 for details on how this is implemented.\r\n     NODE_NETWORK_LIMITED = (1 << 10),\r\n+    kMaxValue=NODE_NETWORK_LIMITED,\r\n \r\n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\r\n     // isn't getting used, or one not being used much, and notify the\r\ndiff --git a/src/test/fuzz/util.h b/src/test/fuzz/util.h\r\nindex 465452c394..7f9a72b585 100644\r\n--- a/src/test/fuzz/util.h\r\n+++ b/src/test/fuzz/util.h\r\n@@ -299,7 +299,7 @@ template <bool ReturnUniquePtr = false>\r\n auto ConsumeNode(FuzzedDataProvider& fuzzed_data_provider, const std::optional<NodeId>& node_id_in = nullopt) noexcept\r\n {\r\n     const NodeId node_id = node_id_in.value_or(fuzzed_data_provider.ConsumeIntegral<NodeId>());\r\n-    const ServiceFlags local_services = ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS);\r\n+    const ServiceFlags local_services = fuzzed_data_provider.ConsumeEnum<ServiceFlags>();\r\n     const int my_starting_height = fuzzed_data_provider.ConsumeIntegral<int>();\r\n     const SOCKET socket = INVALID_SOCKET;\r\n     const CAddress address = ConsumeAddress(fuzzed_data_provider);\r\n```\r\n\r\nDiff for ArrayEnum:\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex c5ea2dc85f..8946a750a8 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2702,6 +2702,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n                     return;\r\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n                     AddTxAnnouncement(pfrom, gtxid, current_time);\r\n+                    assert(!HasAllDesirableServiceFlags(pfrom.GetLocalServices()));\r\n                 }\r\n             } else {\r\n                 LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n| kMaxValue (`ConsumeEnum`) | ArrayEnum (`ConsumeWeakEnum`) |\r\n|-----------------------------------------------|-----------------------------------------------------|\r\n|                   ![fdp_enum_double](https://user-images.githubusercontent.com/6399679/103417023-57c40900-4b89-11eb-860a-c4e27e5133a3.png)                                      |                    ![our_enum_double](https://user-images.githubusercontent.com/6399679/103417020-55fa4580-4b89-11eb-8df9-69344d5209a0.png)                                                       |\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Double weak match (high bits)\r\n\r\n<details><summary>diffs</summary>\r\n\r\nDiff for \"kMaxValue\":\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex c5ea2dc85f..d0e0167746 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2702,6 +2702,8 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n                     return;\r\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n                     AddTxAnnouncement(pfrom, gtxid, current_time);\r\n+                    constexpr auto crash_target = NODE_NETWORK_LIMITED | NODE_WITNESS;\r\n+                    assert(!((pfrom.GetLocalServices() & crash_target) == crash_target));\r\n                 }\r\n             } else {\r\n                 LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\r\ndiff --git a/src/protocol.h b/src/protocol.h\r\nindex 8af34f58bd..ae863b13d0 100644\r\n--- a/src/protocol.h\r\n+++ b/src/protocol.h\r\n@@ -287,6 +287,7 @@ enum ServiceFlags : uint64_t {\r\n     // serving the last 288 (2 day) blocks\r\n     // See BIP159 for details on how this is implemented.\r\n     NODE_NETWORK_LIMITED = (1 << 10),\r\n+    kMaxValue=NODE_NETWORK_LIMITED,\r\n \r\n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\r\n     // isn't getting used, or one not being used much, and notify the\r\ndiff --git a/src/test/fuzz/util.h b/src/test/fuzz/util.h\r\nindex 465452c394..7f9a72b585 100644\r\n--- a/src/test/fuzz/util.h\r\n+++ b/src/test/fuzz/util.h\r\n@@ -299,7 +299,7 @@ template <bool ReturnUniquePtr = false>\r\n auto ConsumeNode(FuzzedDataProvider& fuzzed_data_provider, const std::optional<NodeId>& node_id_in = nullopt) noexcept\r\n {\r\n     const NodeId node_id = node_id_in.value_or(fuzzed_data_provider.ConsumeIntegral<NodeId>());\r\n-    const ServiceFlags local_services = ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS);\r\n+    const ServiceFlags local_services = fuzzed_data_provider.ConsumeEnum<ServiceFlags>();\r\n     const int my_starting_height = fuzzed_data_provider.ConsumeIntegral<int>();\r\n     const SOCKET socket = INVALID_SOCKET;\r\n     const CAddress address = ConsumeAddress(fuzzed_data_provider);\r\n```\r\n\r\nDiff for ArrayEnum:\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex c5ea2dc85f..e8c6b00ad7 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2702,6 +2702,8 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n                     return;\r\n                 } else if (!fAlreadyHave && !m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n                     AddTxAnnouncement(pfrom, gtxid, current_time);\r\n+                    constexpr auto crash_target = NODE_NETWORK_LIMITED | NODE_WITNESS;\r\n+                    assert(!(pfrom.GetLocalServices()&crash_target==crash_target));\r\n                 }\r\n             } else {\r\n                 LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom.GetId());\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n| kMaxValue (`ConsumeEnum`) | ArrayEnum (`ConsumeWeakEnum`) |\r\n|-----------------------------------------------|-----------------------------------------------------|\r\n|      n/a  (aborted without any crash after 5.2*10^6 iterations)                                  |          ![our_enum_double_high](https://user-images.githubusercontent.com/6399679/103420479-ba240600-4b97-11eb-818a-975c354d5966.png)                                                  |\r\n\r\n\r\n",
      "created_at" : "2020-12-31T13:43:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-752961937",
      "id" : 752961937,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20789",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Mjk2MTkzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-31T17:41:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752961937",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "cr ACK fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb\r\n\r\nThanks for providing benchmarks!",
      "created_at" : "2020-12-31T16:12:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-752996682",
      "id" : 752996682,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20789",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Mjk5NjY4Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-31T16:12:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752996682",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550592732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550592732"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For strong enums, I was thinking about a macro `ENUM_CLASS_ALL` that writes the `enum class` and `std::array` that holds all enum types of that class. Thus, we could keep using `PickValueInArray` for strong enums. `FuzzedDataProvider::ConsumeEnum` is an alternative for strong enums that does exactly the same from the perspective of the fuzz engine.\r\n\r\nFor weak enums, `ConsumeWeakEnum` is probably the best bet. I tried `kMaxValue` and it performed strictly worse in all scenarios, in one it was unable to find a crash at all. And it can't possibly work for 64-bit enums. Someone should report those bugs to google. See also the benchmark: https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-752961937",
      "commit_id" : "fadbf6a83040b7a8b9f91e27b61adfaf4c5df3fb",
      "created_at" : "2020-12-31T17:43:38Z",
      "diff_hunk" : "@@ -30,4 +30,35 @@ struct ConnmanTestMsg : public CConnman {\n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n };\n \n+constexpr ServiceFlags ALL_SERVICE_FLAGS[]{\n+    NODE_NONE,\n+    NODE_NETWORK,\n+    NODE_BLOOM,\n+    NODE_WITNESS,\n+    NODE_COMPACT_FILTERS,\n+    NODE_NETWORK_LIMITED,\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550592732",
      "id" : 550592732,
      "in_reply_to_id" : 550212069,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU5MjczMg==",
      "original_commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "original_line" : 40,
      "original_position" : 11,
      "original_start_line" : 33,
      "path" : "src/test/util/net.h",
      "position" : 11,
      "pull_request_review_id" : 560525075,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789",
      "side" : "RIGHT",
      "start_line" : 33,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-31T17:43:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550592732",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@vasild btw for the merge script to pick up your ack, you'll have to provide at least the first 6 chars of the git hash ;)",
      "created_at" : "2020-12-31T17:44:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-753014492",
      "id" : 753014492,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20789",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzAxNDQ5Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-31T17:44:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753014492",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
