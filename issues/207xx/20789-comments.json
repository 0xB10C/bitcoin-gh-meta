[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nNice improvements!",
      "created_at" : "2020-12-28T21:11:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-751865486",
      "id" : 751865486,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20789",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTg2NTQ4Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-28T21:11:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751865486",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20729 (p2p: standardize on outbound-{full, block}-relay connection type naming by jonatack)\n* #20649 (refactor: Remove nMyStartingHeight from CNode/Connman by MarcoFalke)\n* #20370 (DRAFT fuzz: Permission flags in net_processing fuzzers by MarcoFalke)\n* #20228 (addrman: Make addrman a top-level component by jnewbery)\n* #20210 (net: assert CNode::m_inbound_onion is inbound in ctor, add getter, unit tests by jonatack)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-12-29T00:24:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-751904213",
      "id" : 751904213,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20789",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTkwNDIxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-29T00:24:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751904213",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550212069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550212069"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I wonder if it is possible to get a warning if a new enum value is added, but this array is forgotten to be updated? I think not :/",
      "commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "created_at" : "2020-12-30T14:25:53Z",
      "diff_hunk" : "@@ -30,4 +30,35 @@ struct ConnmanTestMsg : public CConnman {\n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n };\n \n+constexpr ServiceFlags ALL_SERVICE_FLAGS[]{\n+    NODE_NONE,\n+    NODE_NETWORK,\n+    NODE_BLOOM,\n+    NODE_WITNESS,\n+    NODE_COMPACT_FILTERS,\n+    NODE_NETWORK_LIMITED,\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550212069",
      "id" : 550212069,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxMjA2OQ==",
      "original_commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "original_line" : 40,
      "original_position" : 11,
      "original_start_line" : 33,
      "path" : "src/test/util/net.h",
      "position" : 11,
      "pull_request_review_id" : 560068445,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789",
      "side" : "RIGHT",
      "start_line" : 33,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-30T14:40:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550212069",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550433436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550433436"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It is ok as it is, and I am just wondering if this can be improved wrt minimizing the chance of the actual enum and the \"all\" arrays going out of sync over time. Maybe one of the below would help:\r\n\r\no Add a comment next to the enum definition \"don't forget to update `ALL_...` in `src/test/util/net.h` if you change this enum\".\r\n\r\no Define the array immediately below the enum itself.\r\n\r\n<details>\r\n<summary>o Define both in one struct</summary>\r\n\r\n```cpp\r\nstruct Color\r\n{\r\n    enum E : uint8_t {\r\n        RED,\r\n        GREEN,\r\n        BLUE,\r\n    };\r\n\r\n    static constexpr E all[]{\r\n        RED,\r\n        GREEN,\r\n        BLUE,\r\n    };\r\n};\r\n\r\n...\r\n    std::cout << Color::BLUE << std::endl;\r\n\r\n    for (auto& c : Color::all) {\r\n        std::cout << c << std::endl;\r\n    }\r\n```\r\n</details>",
      "commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "created_at" : "2020-12-31T08:58:35Z",
      "diff_hunk" : "@@ -30,4 +30,35 @@ struct ConnmanTestMsg : public CConnman {\n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n };\n \n+constexpr ServiceFlags ALL_SERVICE_FLAGS[]{\n+    NODE_NONE,\n+    NODE_NETWORK,\n+    NODE_BLOOM,\n+    NODE_WITNESS,\n+    NODE_COMPACT_FILTERS,\n+    NODE_NETWORK_LIMITED,\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550433436",
      "id" : 550433436,
      "in_reply_to_id" : 550212069,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMzQzNg==",
      "original_commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "original_line" : 40,
      "original_position" : 11,
      "original_start_line" : 33,
      "path" : "src/test/util/net.h",
      "position" : 11,
      "pull_request_review_id" : 560298518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789",
      "side" : "RIGHT",
      "start_line" : 33,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-31T08:58:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550433436",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550438456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550438456"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps we could start using [`kMaxValue` as in the Chromium project](https://www.chromium.org/developers/coding-style/chromium-style-checker-errors). That way we could âassert that the last element of the `ALL_*` array is equal to the `enum`'s `kMaxValue`.\r\n\r\nAnother benefit from using `kMaxValue` is that we could start using `FuzzedDataProvider::ConsumeEnum` when fuzzing.",
      "commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "created_at" : "2020-12-31T09:23:44Z",
      "diff_hunk" : "@@ -30,4 +30,35 @@ struct ConnmanTestMsg : public CConnman {\n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n };\n \n+constexpr ServiceFlags ALL_SERVICE_FLAGS[]{\n+    NODE_NONE,\n+    NODE_NETWORK,\n+    NODE_BLOOM,\n+    NODE_WITNESS,\n+    NODE_COMPACT_FILTERS,\n+    NODE_NETWORK_LIMITED,\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20789#discussion_r550438456",
      "id" : 550438456,
      "in_reply_to_id" : 550212069,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzODQ1Ng==",
      "original_commit_id" : "fa9ab9a8c8aef98cbddf5efd7dd49d940db00275",
      "original_line" : 40,
      "original_position" : 11,
      "original_start_line" : 33,
      "path" : "src/test/util/net.h",
      "position" : 11,
      "pull_request_review_id" : 560304307,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20789",
      "side" : "RIGHT",
      "start_line" : 33,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-31T09:23:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550438456",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
