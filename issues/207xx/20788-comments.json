[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The following two PRs would benefit from this:\r\n\r\n* https://github.com/bitcoin/bitcoin/pull/19203 would only need to add the fuzzing test and the mocked/fuzzed `Sock` implementation (last commit from that PR).\r\n* https://github.com/bitcoin/bitcoin/pull/20685 would become smaller. `Sock` originated there and that PR contains a copy of it. So if this PR gets merged, then the size of #20685 will be reduced.",
      "created_at" : "2020-12-28T16:18:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-751770419",
      "id" : 751770419,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20788",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTc3MDQxOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-28T16:18:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751770419",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549406398"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549406398"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n#include <netbase.h> // For CloseSocket\r\n```\r\n\r\nIt seems this is the only Bitcoin Core related dependency. Are the other includes needed at all? If not, it would be good to move this module to `util`, which is the place for general utility stuff (not bitcoin related).",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-28T16:26:39Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2012-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat.h>\n+#include <netaddress.h>\n+#include <netbase.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549406398",
      "id" : 549406398,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQwNjM5OA==",
      "original_commit_id" : "99b8e88a15cb12483f28079d0f91fe8cf361da56",
      "original_line" : 7,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/sock.cpp",
      "position" : null,
      "pull_request_review_id" : 559212963,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T14:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549406398",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19935 (Move SaltedHashers to separate file and add some new ones by achow101)\n* #19602 (wallet: Migrate legacy wallets to descriptor wallets by achow101)\n* #19415 (net: Make DNS lookup mockable, add fuzzing harness by practicalswift)\n* #19203 (net: Add regression fuzz harness for CVE-2017-18350. Add FuzzedSocket. Add thin SOCKET wrapper. by practicalswift)\n* #19064 (refactor: Cleanup thread ctor calls by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-12-28T17:07:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-751790123",
      "id" : 751790123,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20788",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTc5MDEyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T14:32:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751790123",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549461016"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549461016"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Q: would it make sense to have this method as part of the `Sock`? (Something similar to `Sock::recv` but with a timeout parameter)",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-28T19:26:26Z",
      "diff_hunk" : "@@ -347,15 +349,15 @@ enum class IntrRecvError {\n  *      Sockets can be made non-blocking with SetSocketNonBlocking(const\n  *      SOCKET&, bool).\n  */\n-static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)\n+static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const Sock& sock)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549461016",
      "id" : 549461016,
      "line" : 351,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ2MTAxNg==",
      "original_commit_id" : "99b8e88a15cb12483f28079d0f91fe8cf361da56",
      "original_line" : 351,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/netbase.cpp",
      "position" : 25,
      "pull_request_review_id" : 559273398,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T14:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549461016",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/127973?v=4",
         "events_url" : "https://api.github.com/users/lontivero/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lontivero/followers",
         "following_url" : "https://api.github.com/users/lontivero/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lontivero/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lontivero",
         "id" : 127973,
         "login" : "lontivero",
         "node_id" : "MDQ6VXNlcjEyNzk3Mw==",
         "organizations_url" : "https://api.github.com/users/lontivero/orgs",
         "received_events_url" : "https://api.github.com/users/lontivero/received_events",
         "repos_url" : "https://api.github.com/users/lontivero/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lontivero/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lontivero"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Strong concept ACK\r\n\r\nThis abstraction would be extremely useful to have when fuzzing low-level networking code.",
      "created_at" : "2020-12-28T20:57:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-751861963",
      "id" : 751861963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20788",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTg2MTk2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-28T20:57:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751861963",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549718454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549718454"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, indeed. That would be convenient together with a `send` method that retries upon temporary failures (see below).\r\n\r\nI did not include such methods in this PR because it is self-sufficient as it is and achieves the initial purpose to introduce a mockable socket that can be used for fuzzing in https://github.com/bitcoin/bitcoin/pull/19203.\r\n\r\nPossible future improvements (which I resisted adding in this PR):\r\n* Add robust receiving method, like `InterruptibleRecv()` (or change that function to a method of the `Sock` class)\r\n* Add robust sending method, like [`SendComplete()`](https://github.com/bitcoin/bitcoin/blob/2ae504c4b96013c87cc97909bdb00866fc4ab8a0/src/netbase.cpp#L1085) from https://github.com/bitcoin/bitcoin/pull/20685\r\n* Use `Sock` in more places instead of the bare `SOCKET` - chase all places where `Sock::Release()` or `Sock::Get()` is called and see if the consumer can be changed to use `Sock` instead. E.g. in `CNode` constructor.",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-29T14:10:40Z",
      "diff_hunk" : "@@ -347,15 +349,15 @@ enum class IntrRecvError {\n  *      Sockets can be made non-blocking with SetSocketNonBlocking(const\n  *      SOCKET&, bool).\n  */\n-static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)\n+static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const Sock& sock)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549718454",
      "id" : 549718454,
      "in_reply_to_id" : 549461016,
      "line" : 351,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcxODQ1NA==",
      "original_commit_id" : "99b8e88a15cb12483f28079d0f91fe8cf361da56",
      "original_line" : 351,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/netbase.cpp",
      "position" : 25,
      "pull_request_review_id" : 559548844,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T14:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549718454",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549799438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549799438"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No, the other includes are not needed (and I removed them). However there is a circular dependency now:\r\n\r\n* netbase -> sock (`netbase.cpp` uses the `Sock` class, of course)\r\n* sock -> netbase (`sock.cpp` uses `MillisToTimeval()` and `CloseSocket()` which are defined in `netbase.cpp`)\r\n\r\nOne way to resolve that is to put the `Sock` class in `netbase.{h,cpp}` and ditch `sock.{h,cpp}`.\r\n\r\nAnother one would be to move `MillisToTimeval()` and `CloseSocket()` outside of `netbase.cpp`, somewhere in `src/util/` and use them from both `netbase.cpp` and from `sock.cpp`.\r\n\r\nHmm...",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-29T18:09:50Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2012-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat.h>\n+#include <netaddress.h>\n+#include <netbase.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549799438",
      "id" : 549799438,
      "in_reply_to_id" : 549406398,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc5OTQzOA==",
      "original_commit_id" : "99b8e88a15cb12483f28079d0f91fe8cf361da56",
      "original_line" : 7,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/sock.cpp",
      "position" : null,
      "pull_request_review_id" : 559645147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T14:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549799438",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "99b8e88a1...408a9473b: moved the `Sock` class inside `netbase.cpp` to resolve a [circular dependency](https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549799438).\r\n\r\nAnother option would be to keep the `Sock` class in its own file `src/sock.cpp` or `src/util/sock.cpp`. Since it uses `MillisToTimeval()` and `CloseSocket()` they would have to be moved out of `netbase.cpp`.",
      "created_at" : "2020-12-30T11:37:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-752448197",
      "id" : 752448197,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20788",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MjQ0ODE5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-30T11:37:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752448197",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550164602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550164602"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> One way to resolve that is to put the `Sock` class in `netbase.{h,cpp}`...\r\n\r\nDid that.",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-30T11:38:39Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2012-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat.h>\n+#include <netaddress.h>\n+#include <netbase.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550164602",
      "id" : 550164602,
      "in_reply_to_id" : 549406398,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2NDYwMg==",
      "original_commit_id" : "99b8e88a15cb12483f28079d0f91fe8cf361da56",
      "original_line" : 7,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/sock.cpp",
      "position" : null,
      "pull_request_review_id" : 560013690,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T14:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550164602",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550243581"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550243581"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit here and L120, s/overriden/overridden/",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-30T16:02:50Z",
      "diff_hunk" : "@@ -51,9 +54,130 @@ bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllo\n bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n CService LookupNumeric(const std::string& name, int portDefault = 0);\n bool LookupSubNet(const std::string& strSubnet, CSubNet& subnet);\n-SOCKET CreateSocket(const CService &addrConnect);\n+\n+/**\n+ * RAII helper class that manages a socket. Mimics `std::unique_ptr`, but instead of a pointer it\n+ * contains a socket and closes it automatically when it goes out of scope.\n+ */\n+class Sock\n+{\n+public:\n+    /**\n+     * Default constructor, creates an empty object that does nothing when destroyed.\n+     */\n+    Sock();\n+\n+    /**\n+     * Take ownership of an existent socket.\n+     */\n+    explicit Sock(SOCKET s);\n+\n+    /**\n+     * Copy constructor, disabled because closing the same socket twice is undesirable.\n+     */\n+    Sock(const Sock&) = delete;\n+\n+    /**\n+     * Move constructor, grab the socket from another object and close ours (if set).\n+     */\n+    Sock(Sock&& other);\n+\n+    /**\n+     * Destructor, close the socket or do nothing if empty.\n+     */\n+    virtual ~Sock();\n+\n+    /**\n+     * Copy assignment operator, disabled because closing the same socket twice is undesirable.\n+     */\n+    Sock& operator=(const Sock&) = delete;\n+\n+    /**\n+     * Move assignment operator, grab the socket from another object and close ours (if set).\n+     */\n+    virtual Sock& operator=(Sock&& other);\n+\n+    /**\n+     * Get the value of the contained socket.\n+     * @return socket or INVALID_SOCKET if empty\n+     */\n+    virtual SOCKET Get() const;\n+\n+    /**\n+     * Get the value of the contained socket and drop ownership. It will not be closed by the\n+     * destructor after this call.\n+     * @return socket or INVALID_SOCKET if empty\n+     */\n+    virtual SOCKET Release();\n+\n+    /**\n+     * Close if non-empty.\n+     */\n+    virtual void Reset();\n+\n+    /**\n+     * send(2) wrapper. Equivalent to `send(this->Get(), data, len, flags);`. Code that uses this\n+     * wrapper can be unit-tested if this method is overriden by a mock Sock implementation.\n+     */\n+    virtual ssize_t Send(const void* data, size_t len, int flags) const;\n+\n+    /**\n+     * recv(2) wrapper. Equivalent to `recv(this->Get(), buf, len, flags);`. Code that uses this\n+     * wrapper can be unit-tested if this method is overriden by a mock Sock implementation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550243581",
      "id" : 550243581,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0MzU4MQ==",
      "original_commit_id" : "408a9473bed6b3be82b124c171435247100b9d34",
      "original_line" : 126,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/netbase.h",
      "position" : null,
      "pull_request_review_id" : 560106469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T14:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550243581",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550248416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550248416"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: i would like to suggest rename `Sock::Release` as `Sock::GetAndRelease`. IMO it makes it just a tiny bit  more readable. Feel free to ignore this comment.\r\n```c++\r\n    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), sock->GetAndRelease(), addrConnect,\r\n                             CalculateKeyedNetGroup(addrConnect), nonce, addr_bind,\r\n                             pszDest ? pszDest : \"\", conn_type);\r\n```",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-30T16:17:47Z",
      "diff_hunk" : "@@ -437,51 +437,55 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     // Connect\n     bool connected = false;\n-    SOCKET hSocket = INVALID_SOCKET;\n+    std::unique_ptr<Sock> sock;\n     proxyType proxy;\n     if (addrConnect.IsValid()) {\n         bool proxyConnectionFailed = false;\n \n         if (GetProxy(addrConnect.GetNetwork(), proxy)) {\n-            hSocket = CreateSocket(proxy.proxy);\n-            if (hSocket == INVALID_SOCKET) {\n+            sock = CreateSock(proxy.proxy);\n+            if (!sock) {\n                 return nullptr;\n             }\n-            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, proxyConnectionFailed);\n+            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(),\n+                                            *sock, nConnectTimeout, proxyConnectionFailed);\n         } else {\n             // no proxy needed (none set for target network)\n-            hSocket = CreateSocket(addrConnect);\n-            if (hSocket == INVALID_SOCKET) {\n+            sock = CreateSock(addrConnect);\n+            if (!sock) {\n                 return nullptr;\n             }\n-            connected = ConnectSocketDirectly(addrConnect, hSocket, nConnectTimeout, conn_type == ConnectionType::MANUAL);\n+            connected = ConnectSocketDirectly(addrConnect, sock->Get(), nConnectTimeout,\n+                                              conn_type == ConnectionType::MANUAL);\n         }\n         if (!proxyConnectionFailed) {\n             // If a connection to the node was attempted, and failure (if any) is not caused by a problem connecting to\n             // the proxy, mark this as an attempt.\n             addrman.Attempt(addrConnect, fCountFailure);\n         }\n     } else if (pszDest && GetNameProxy(proxy)) {\n-        hSocket = CreateSocket(proxy.proxy);\n-        if (hSocket == INVALID_SOCKET) {\n+        sock = CreateSock(proxy.proxy);\n+        if (!sock) {\n             return nullptr;\n         }\n         std::string host;\n         int port = default_port;\n         SplitHostPort(std::string(pszDest), port, host);\n         bool proxyConnectionFailed;\n-        connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, proxyConnectionFailed);\n+        connected =\n+            ConnectThroughProxy(proxy, host, port, *sock, nConnectTimeout, proxyConnectionFailed);\n     }\n     if (!connected) {\n-        CloseSocket(hSocket);\n         return nullptr;\n     }\n \n     // Add node\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-    CAddress addr_bind = GetBindAddress(hSocket);\n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type);\n+    CAddress addr_bind = GetBindAddress(sock->Get());\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), sock->Release(), addrConnect,\n+                             CalculateKeyedNetGroup(addrConnect), nonce, addr_bind,\n+                             pszDest ? pszDest : \"\", conn_type);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550248416",
      "id" : 550248416,
      "line" : 488,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0ODQxNg==",
      "original_commit_id" : "408a9473bed6b3be82b124c171435247100b9d34",
      "original_line" : 488,
      "original_position" : 65,
      "original_start_line" : 486,
      "path" : "src/net.cpp",
      "position" : 65,
      "pull_request_review_id" : 560112136,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : 486,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-31T14:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550248416",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/127973?v=4",
         "events_url" : "https://api.github.com/users/lontivero/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lontivero/followers",
         "following_url" : "https://api.github.com/users/lontivero/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lontivero/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lontivero",
         "id" : 127973,
         "login" : "lontivero",
         "node_id" : "MDQ6VXNlcjEyNzk3Mw==",
         "organizations_url" : "https://api.github.com/users/lontivero/orgs",
         "received_events_url" : "https://api.github.com/users/lontivero/received_events",
         "repos_url" : "https://api.github.com/users/lontivero/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lontivero/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lontivero"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550250637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550250637"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The `returned` parameter is never used by any caller. It seems this is something that was added for future usage maybe. Does it make sense to have it at this point in time, I mean, if tomorrow it is needed then it could be added in a future PR. ",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-30T16:24:06Z",
      "diff_hunk" : "@@ -541,58 +530,170 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     uint8_t pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, sock); break;\n+        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, sock); break;\n         case SOCKS5Atyp::DOMAINNAME:\n         {\n-            recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n+            recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, sock);\n             if (recvr != IntrRecvError::OK) {\n                 return error(\"Error reading from proxy\");\n             }\n             int nRecv = pchRet3[0];\n-            recvr = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, hSocket);\n+            recvr = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, sock);\n             break;\n         }\n         default: return error(\"Error: malformed proxy response\");\n     }\n     if (recvr != IntrRecvError::OK) {\n         return error(\"Error reading from proxy\");\n     }\n-    if ((recvr = InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n+    if ((recvr = InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, sock)) != IntrRecvError::OK) {\n         return error(\"Error reading from proxy\");\n     }\n     LogPrint(BCLog::NET, \"SOCKS5 connected %s\\n\", strDest);\n     return true;\n }\n \n-/**\n- * Try to create a socket file descriptor with specific properties in the\n- * communications domain (address family) of the specified service.\n- *\n- * For details on the desired properties, see the inline comments in the source\n- * code.\n- */\n-SOCKET CreateSocket(const CService &addrConnect)\n+Sock::Sock() : m_socket(INVALID_SOCKET) {}\n+\n+Sock::Sock(SOCKET s) : m_socket(s) {}\n+\n+Sock::Sock(Sock&& other)\n+{\n+    Reset();\n+    m_socket = other.m_socket;\n+    other.m_socket = INVALID_SOCKET;\n+}\n+\n+Sock::~Sock() { Reset(); }\n+\n+Sock& Sock::operator=(Sock&& other)\n+{\n+    Reset();\n+    m_socket = other.m_socket;\n+    other.m_socket = INVALID_SOCKET;\n+    return *this;\n+}\n+\n+SOCKET Sock::Get() const { return m_socket; }\n+\n+SOCKET Sock::Release()\n+{\n+    const SOCKET s = m_socket;\n+    m_socket = INVALID_SOCKET;\n+    return s;\n+}\n+\n+void Sock::Reset() { CloseSocket(m_socket); }\n+\n+ssize_t Sock::Send(const void* data, size_t len, int flags) const\n+{\n+    return send(m_socket, static_cast<const char*>(data), len, flags);\n+}\n+\n+ssize_t Sock::Recv(void* buf, size_t len, int flags) const\n+{\n+    return recv(m_socket, static_cast<char*>(buf), len, flags);\n+}\n+\n+bool Sock::Wait(const std::chrono::milliseconds& timeout, Event requested, Event* returned) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550250637",
      "id" : 550250637,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI1MDYzNw==",
      "original_commit_id" : "408a9473bed6b3be82b124c171435247100b9d34",
      "original_line" : 599,
      "original_position" : 215,
      "original_start_line" : null,
      "path" : "src/netbase.cpp",
      "position" : null,
      "pull_request_review_id" : 560112136,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T14:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550250637",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/127973?v=4",
         "events_url" : "https://api.github.com/users/lontivero/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lontivero/followers",
         "following_url" : "https://api.github.com/users/lontivero/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lontivero/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lontivero",
         "id" : 127973,
         "login" : "lontivero",
         "node_id" : "MDQ6VXNlcjEyNzk3Mw==",
         "organizations_url" : "https://api.github.com/users/lontivero/orgs",
         "received_events_url" : "https://api.github.com/users/lontivero/received_events",
         "repos_url" : "https://api.github.com/users/lontivero/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lontivero/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lontivero"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550487660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550487660"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree `GetAndRelease()` is more descriptive, but I am trying to mimic `std::unique_ptr` and its [method which is called release()](https://en.cppreference.com/w/cpp/memory/unique_ptr/release).",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-31T13:53:08Z",
      "diff_hunk" : "@@ -437,51 +437,55 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     // Connect\n     bool connected = false;\n-    SOCKET hSocket = INVALID_SOCKET;\n+    std::unique_ptr<Sock> sock;\n     proxyType proxy;\n     if (addrConnect.IsValid()) {\n         bool proxyConnectionFailed = false;\n \n         if (GetProxy(addrConnect.GetNetwork(), proxy)) {\n-            hSocket = CreateSocket(proxy.proxy);\n-            if (hSocket == INVALID_SOCKET) {\n+            sock = CreateSock(proxy.proxy);\n+            if (!sock) {\n                 return nullptr;\n             }\n-            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, proxyConnectionFailed);\n+            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(),\n+                                            *sock, nConnectTimeout, proxyConnectionFailed);\n         } else {\n             // no proxy needed (none set for target network)\n-            hSocket = CreateSocket(addrConnect);\n-            if (hSocket == INVALID_SOCKET) {\n+            sock = CreateSock(addrConnect);\n+            if (!sock) {\n                 return nullptr;\n             }\n-            connected = ConnectSocketDirectly(addrConnect, hSocket, nConnectTimeout, conn_type == ConnectionType::MANUAL);\n+            connected = ConnectSocketDirectly(addrConnect, sock->Get(), nConnectTimeout,\n+                                              conn_type == ConnectionType::MANUAL);\n         }\n         if (!proxyConnectionFailed) {\n             // If a connection to the node was attempted, and failure (if any) is not caused by a problem connecting to\n             // the proxy, mark this as an attempt.\n             addrman.Attempt(addrConnect, fCountFailure);\n         }\n     } else if (pszDest && GetNameProxy(proxy)) {\n-        hSocket = CreateSocket(proxy.proxy);\n-        if (hSocket == INVALID_SOCKET) {\n+        sock = CreateSock(proxy.proxy);\n+        if (!sock) {\n             return nullptr;\n         }\n         std::string host;\n         int port = default_port;\n         SplitHostPort(std::string(pszDest), port, host);\n         bool proxyConnectionFailed;\n-        connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, proxyConnectionFailed);\n+        connected =\n+            ConnectThroughProxy(proxy, host, port, *sock, nConnectTimeout, proxyConnectionFailed);\n     }\n     if (!connected) {\n-        CloseSocket(hSocket);\n         return nullptr;\n     }\n \n     // Add node\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-    CAddress addr_bind = GetBindAddress(hSocket);\n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type);\n+    CAddress addr_bind = GetBindAddress(sock->Get());\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), sock->Release(), addrConnect,\n+                             CalculateKeyedNetGroup(addrConnect), nonce, addr_bind,\n+                             pszDest ? pszDest : \"\", conn_type);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550487660",
      "id" : 550487660,
      "in_reply_to_id" : 550248416,
      "line" : 488,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NzY2MA==",
      "original_commit_id" : "408a9473bed6b3be82b124c171435247100b9d34",
      "original_line" : 488,
      "original_position" : 65,
      "original_start_line" : 486,
      "path" : "src/net.cpp",
      "position" : 65,
      "pull_request_review_id" : 560354806,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : 486,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-31T14:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550487660",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Is there any reason not to use the `Sock` object in `CNode`?",
      "created_at" : "2020-12-31T14:08:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-752967726",
      "id" : 752967726,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20788",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Mjk2NzcyNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-31T14:08:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752967726",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "408a9473b...8fc63e344: fixed a typo and removed unused parameter",
      "created_at" : "2020-12-31T14:14:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-752969218",
      "id" : 752969218,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20788",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Mjk2OTIxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-31T14:14:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752969218",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550491541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550491541"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-31T14:14:51Z",
      "diff_hunk" : "@@ -51,9 +54,130 @@ bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllo\n bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n CService LookupNumeric(const std::string& name, int portDefault = 0);\n bool LookupSubNet(const std::string& strSubnet, CSubNet& subnet);\n-SOCKET CreateSocket(const CService &addrConnect);\n+\n+/**\n+ * RAII helper class that manages a socket. Mimics `std::unique_ptr`, but instead of a pointer it\n+ * contains a socket and closes it automatically when it goes out of scope.\n+ */\n+class Sock\n+{\n+public:\n+    /**\n+     * Default constructor, creates an empty object that does nothing when destroyed.\n+     */\n+    Sock();\n+\n+    /**\n+     * Take ownership of an existent socket.\n+     */\n+    explicit Sock(SOCKET s);\n+\n+    /**\n+     * Copy constructor, disabled because closing the same socket twice is undesirable.\n+     */\n+    Sock(const Sock&) = delete;\n+\n+    /**\n+     * Move constructor, grab the socket from another object and close ours (if set).\n+     */\n+    Sock(Sock&& other);\n+\n+    /**\n+     * Destructor, close the socket or do nothing if empty.\n+     */\n+    virtual ~Sock();\n+\n+    /**\n+     * Copy assignment operator, disabled because closing the same socket twice is undesirable.\n+     */\n+    Sock& operator=(const Sock&) = delete;\n+\n+    /**\n+     * Move assignment operator, grab the socket from another object and close ours (if set).\n+     */\n+    virtual Sock& operator=(Sock&& other);\n+\n+    /**\n+     * Get the value of the contained socket.\n+     * @return socket or INVALID_SOCKET if empty\n+     */\n+    virtual SOCKET Get() const;\n+\n+    /**\n+     * Get the value of the contained socket and drop ownership. It will not be closed by the\n+     * destructor after this call.\n+     * @return socket or INVALID_SOCKET if empty\n+     */\n+    virtual SOCKET Release();\n+\n+    /**\n+     * Close if non-empty.\n+     */\n+    virtual void Reset();\n+\n+    /**\n+     * send(2) wrapper. Equivalent to `send(this->Get(), data, len, flags);`. Code that uses this\n+     * wrapper can be unit-tested if this method is overriden by a mock Sock implementation.\n+     */\n+    virtual ssize_t Send(const void* data, size_t len, int flags) const;\n+\n+    /**\n+     * recv(2) wrapper. Equivalent to `recv(this->Get(), buf, len, flags);`. Code that uses this\n+     * wrapper can be unit-tested if this method is overriden by a mock Sock implementation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550491541",
      "id" : 550491541,
      "in_reply_to_id" : 550243581,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5MTU0MQ==",
      "original_commit_id" : "408a9473bed6b3be82b124c171435247100b9d34",
      "original_line" : 126,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/netbase.h",
      "position" : null,
      "pull_request_review_id" : 560358779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T14:14:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550491541",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550491623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550491623"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed, the less code - the better.",
      "commit_id" : "8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-31T14:15:16Z",
      "diff_hunk" : "@@ -541,58 +530,170 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     uint8_t pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, sock); break;\n+        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, sock); break;\n         case SOCKS5Atyp::DOMAINNAME:\n         {\n-            recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n+            recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, sock);\n             if (recvr != IntrRecvError::OK) {\n                 return error(\"Error reading from proxy\");\n             }\n             int nRecv = pchRet3[0];\n-            recvr = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, hSocket);\n+            recvr = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, sock);\n             break;\n         }\n         default: return error(\"Error: malformed proxy response\");\n     }\n     if (recvr != IntrRecvError::OK) {\n         return error(\"Error reading from proxy\");\n     }\n-    if ((recvr = InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n+    if ((recvr = InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, sock)) != IntrRecvError::OK) {\n         return error(\"Error reading from proxy\");\n     }\n     LogPrint(BCLog::NET, \"SOCKS5 connected %s\\n\", strDest);\n     return true;\n }\n \n-/**\n- * Try to create a socket file descriptor with specific properties in the\n- * communications domain (address family) of the specified service.\n- *\n- * For details on the desired properties, see the inline comments in the source\n- * code.\n- */\n-SOCKET CreateSocket(const CService &addrConnect)\n+Sock::Sock() : m_socket(INVALID_SOCKET) {}\n+\n+Sock::Sock(SOCKET s) : m_socket(s) {}\n+\n+Sock::Sock(Sock&& other)\n+{\n+    Reset();\n+    m_socket = other.m_socket;\n+    other.m_socket = INVALID_SOCKET;\n+}\n+\n+Sock::~Sock() { Reset(); }\n+\n+Sock& Sock::operator=(Sock&& other)\n+{\n+    Reset();\n+    m_socket = other.m_socket;\n+    other.m_socket = INVALID_SOCKET;\n+    return *this;\n+}\n+\n+SOCKET Sock::Get() const { return m_socket; }\n+\n+SOCKET Sock::Release()\n+{\n+    const SOCKET s = m_socket;\n+    m_socket = INVALID_SOCKET;\n+    return s;\n+}\n+\n+void Sock::Reset() { CloseSocket(m_socket); }\n+\n+ssize_t Sock::Send(const void* data, size_t len, int flags) const\n+{\n+    return send(m_socket, static_cast<const char*>(data), len, flags);\n+}\n+\n+ssize_t Sock::Recv(void* buf, size_t len, int flags) const\n+{\n+    return recv(m_socket, static_cast<char*>(buf), len, flags);\n+}\n+\n+bool Sock::Wait(const std::chrono::milliseconds& timeout, Event requested, Event* returned) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550491623",
      "id" : 550491623,
      "in_reply_to_id" : 550250637,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5MTYyMw==",
      "original_commit_id" : "408a9473bed6b3be82b124c171435247100b9d34",
      "original_line" : 599,
      "original_position" : 215,
      "original_start_line" : null,
      "path" : "src/netbase.cpp",
      "position" : null,
      "pull_request_review_id" : 560358852,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20788",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-31T14:15:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550491623",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonatack \r\n\r\n> moving the Sock class to its own file and the common deps to a utility seems appealing\r\n\r\nI will try this. Opinions, anybody? That would mean:\r\n* Move `Sock` from `netbase.cpp` to `util/sock.cpp`\r\n* Move `MillisToTimeval()` from `netbase.cpp` to `util/where?`\r\n* Move `CloseSocket()` from `netbase.cpp` to `util/where?` (it uses `LogPrintf()`)\r\n\r\n> do you plan to add unit tests for the Sock class?\r\n\r\nI did not but any ideas are welcome. I think it may be required to create a TCP server and client and do some communication between them to check that `send()` is indeed being called by the `Send()` method. May be an overkill, given that the `Send()` method is 1 line.\r\n\r\nI don't know how to reliably check if the socket was closed by the destructor, given that the same file descriptor number could be assigned to a newly created socket (or opened file) after we close it.\r\n\r\n@jnewbery \r\n\r\n> Is there any reason not to use the `Sock` object in `CNode`?\r\n\r\nNo, other than minimizing the size of this PR. See also https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549718454 :-)",
      "created_at" : "2020-12-31T14:35:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-752975368",
      "id" : 752975368,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20788",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Mjk3NTM2OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-31T14:35:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752975368",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree with moving it to its own file and with adding UTs for it. I am not sure a real socket is necessary for testing this abstraction, could it be enough to simply mock `send`, `recv` and `select`? Something it could be useful is to make sure the ownership of the `SOCKET` is always correct (`copy ctor`, `Release`, `operator =`)\r\n\r\nbtw, utACK 8fc63e344660f52a35bd97c1f881afdb1643b52a",
      "created_at" : "2020-12-31T16:23:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-752998925",
      "id" : 752998925,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20788",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Mjk5ODkyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-31T16:23:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752998925",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/127973?v=4",
         "events_url" : "https://api.github.com/users/lontivero/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lontivero/followers",
         "following_url" : "https://api.github.com/users/lontivero/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lontivero/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lontivero",
         "id" : 127973,
         "login" : "lontivero",
         "node_id" : "MDQ6VXNlcjEyNzk3Mw==",
         "organizations_url" : "https://api.github.com/users/lontivero/orgs",
         "received_events_url" : "https://api.github.com/users/lontivero/received_events",
         "repos_url" : "https://api.github.com/users/lontivero/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lontivero/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lontivero"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "8fc63e3...3fa2a11:\r\n* rebased due to conflicts\r\n* moved `Sock` to its dedicated `src/util/sock.{cpp,h}`\r\n* added unit tests",
      "created_at" : "2021-01-08T13:24:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-756754017",
      "id" : 756754017,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20788",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Njc1NDAxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T13:24:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756754017",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
