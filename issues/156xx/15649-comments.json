[
   {
      "author_association" : "MEMBER",
      "body" : "Benchmark compared with dbl-SHA256 (Intel x86 and ARM64 both **with enabled and supported SHA256 asm**)\r\n\r\nEDIT: **Attention**, those benchmark test a decryption that fails the MAC test (that's why its faster).\r\n```\r\ni7-8700 CPU @ 3.20GHz\r\n# Benchmark, evals, iterations, total, min, max, median\r\nCHACHA20_POLY1305_AEAD_1MB_DECRYPT, 5, 340, 0.974806, 0.000571213, 0.000575483, 0.000573147\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT, 5, 340, 3.45589, 0.00200816, 0.00206032, 0.00203075\r\nCHACHA20_POLY1305_AEAD_256BYTES_DECRYPT, 5, 250000, 0.353133, 2.7904e-07, 2.87463e-07, 2.81879e-07\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT, 5, 250000, 0.844029, 6.69314e-07, 6.84823e-07, 6.73278e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_DECRYPT, 5, 500000, 0.445114, 1.74585e-07, 1.79382e-07, 1.79109e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT, 5, 500000, 0.756779, 3.02316e-07, 3.03721e-07, 3.02433e-07\r\nHASH_1MB, 5, 340, 4.05031, 0.00234962, 0.00239718, 0.00238811\r\nHASH_256BYTES, 5, 250000, 1.13878, 9.01793e-07, 9.20163e-07, 9.1145e-07\r\nHASH_64BYTES, 5, 500000, 1.19347, 4.71828e-07, 4.8229e-07, 4.76693e-07\r\n```\r\n\r\n```\r\nRK3399 64-bit Hexa Core A72/A53 CPU (aarch64)\r\nCPU Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32\r\nCHACHA20_POLY1305_AEAD_1MB_DECRYPT, 5, 340, 4.77829, 0.00277495, 0.00295277, 0.00277533\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT, 5, 340, 12.8776, 0.00757471, 0.00757529, 0.00757509\r\nCHACHA20_POLY1305_AEAD_256BYTES_DECRYPT, 5, 250000, 1.45431, 1.159e-06, 1.16777e-06, 1.16348e-06\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT, 5, 250000, 3.15133, 2.51743e-06, 2.5251e-06, 2.52047e-06\r\nCHACHA20_POLY1305_AEAD_64BYTES_DECRYPT, 5, 500000, 1.64303, 6.5714e-07, 6.57362e-07, 6.57166e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT, 5, 500000, 2.84952, 1.13826e-06, 1.14302e-06, 1.13909e-06\r\nHASH_1MB, 5, 340, 11.9929, 0.00705427, 0.00705483, 0.00705473\r\nHASH_256BYTES, 5, 250000, 3.44999, 2.75893e-06, 2.76146e-06, 2.75963e-06\r\nHASH_64BYTES, 5, 500000, 3.68293, 1.47287e-06, 1.47352e-06, 1.4732e-06",
      "created_at" : "2019-03-22T21:04:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-475782376",
      "id" : 475782376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NTc4MjM3Ng==",
      "updated_at" : "2019-03-26T21:19:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475782376",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15512](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15512.html) (Add ChaCha20 encryption option (XOR) by jonasschnelli)\n* [#14047](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14047.html) (Add HKDF_HMAC256_L32 and method to negate a private key by jonasschnelli)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-03-22T22:35:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-475804607",
      "id" : 475804607,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NTgwNDYwNw==",
      "updated_at" : "2019-03-27T17:24:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475804607",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r268407005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268407005"
         }
      },
      "author_association" : "NONE",
      "body" : "not sure if these magic numbers are supposed to be obvious, but some named constants might be nice for people who are new to this stuff",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-23T19:40:08Z",
      "diff_hunk" : "@@ -0,0 +1,91 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <limits>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool encrypt)\n+{\n+    std::vector<unsigned char> in(buffersize + 3 + 16, 0);\n+    std::vector<unsigned char> out(buffersize + 3 + 16, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r268407005",
      "id" : 268407005,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODQwNzAwNQ==",
      "original_commit_id" : "8dd9f11261194967e98e3991fd470fb9c7cc3016",
      "original_position" : 25,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 218053072,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268407005",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1731?v=4",
         "events_url" : "https://api.github.com/users/skwp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skwp/followers",
         "following_url" : "https://api.github.com/users/skwp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skwp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skwp",
         "id" : 1731,
         "login" : "skwp",
         "node_id" : "MDQ6VXNlcjE3MzE=",
         "organizations_url" : "https://api.github.com/users/skwp/orgs",
         "received_events_url" : "https://api.github.com/users/skwp/received_events",
         "repos_url" : "https://api.github.com/users/skwp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skwp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skwp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skwp"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006034"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006034"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit:\r\n\r\nShadows existing `len_cmp` and also redundant initialization to zero?\r\n\r\nCould be just `uint64_t len_cmp_inner = XOR(ciphertext_buf[0], Ã¢ÂÂ¦`?",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-26T09:24:00Z",
      "diff_hunk" : "@@ -621,6 +623,134 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"13000000000000000000000000000000\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the opperation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Output(nullptr, cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;\n+    len_cmp = XOR(ciphertext_buf[0], cmp_ctx_buffer[aad_pos + 0]) |\n+              XOR(ciphertext_buf[1], cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              XOR(ciphertext_buf[2], cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    len_cmp = le32toh(len_cmp);\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+        BOOST_CHECK(aead.GetLength(&out_len, seqnr_aad, aad_pos, ciphertext_buf.data()));\n+        BOOST_CHECK_EQUAL(out_len, expected_aad_length);\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, plaintext_buf_new.data(), plaintext_buf_new.size(), ciphertext_buf.data(), ciphertext_buf.size(), false);\n+        BOOST_CHECK_EQUAL(res, true);\n+\n+        // make sure we repetitive get the same plaintext\n+        BOOST_CHECK(memcmp(plaintext_buf.data(), plaintext_buf_new.data(), plaintext_buf.size()) == 0);\n+\n+        // compare sequence number 999 against the test vector\n+        if (seqnr_payload == 999) {\n+            BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac_sequence999.data(), expected_ciphertext_and_mac_sequence999.size()) == 0);\n+        }\n+        // set nonce and block counter, output the keystream\n+        cmp_ctx.SetIV(htole64(seqnr_aad));\n+        cmp_ctx.Seek(0);\n+        cmp_ctx.Output(nullptr, cmp_ctx_buffer.data(), 64);\n+\n+        // crypt the 3 length bytes and compare the length\n+        uint64_t len_cmp = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006034",
      "id" : 269006034,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAwNjAzNA==",
      "original_commit_id" : "3f5a4c745d18977626ceff0e3719464d51e9dfc2",
      "original_position" : 95,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 218770335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006034",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This `res` is never used. Should be checked?",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-26T09:25:11Z",
      "diff_hunk" : "@@ -621,6 +623,134 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"13000000000000000000000000000000\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the opperation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Output(nullptr, cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;\n+    len_cmp = XOR(ciphertext_buf[0], cmp_ctx_buffer[aad_pos + 0]) |\n+              XOR(ciphertext_buf[1], cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              XOR(ciphertext_buf[2], cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    len_cmp = le32toh(len_cmp);\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006541",
      "id" : 269006541,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAwNjU0MQ==",
      "original_commit_id" : "3f5a4c745d18977626ceff0e3719464d51e9dfc2",
      "original_position" : 76,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 155,
      "pull_request_review_id" : 218770335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006541",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006819"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006819"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Scope can be reduced?",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-26T09:25:48Z",
      "diff_hunk" : "@@ -0,0 +1,131 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#define XOR(v, w) ((v) ^ (w))\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006819",
      "id" : 269006819,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAwNjgxOQ==",
      "original_commit_id" : "68617154ecc0c0eb8634651e4e14f1c90975352b",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 56,
      "pull_request_review_id" : 218770335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006819",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269007161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269007161"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be \"operation\" :-)",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-26T09:26:42Z",
      "diff_hunk" : "@@ -621,6 +623,134 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"13000000000000000000000000000000\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the opperation succeeded if expected to succeed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269007161",
      "id" : 269007161,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAwNzE2MQ==",
      "original_commit_id" : "3f5a4c745d18977626ceff0e3719464d51e9dfc2",
      "original_position" : 53,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 218771700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269007161",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Why is encrypting ~3 times slower than decrypting?",
      "created_at" : "2019-03-26T19:48:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-476819283",
      "id" : 476819283,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NjgxOTI4Mw==",
      "updated_at" : "2019-03-26T19:49:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/476819283",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Why is encrypting ~3 times slower than decrypting?\r\n\r\nBecause the decryption in the benchmark always fails the MAC check... *facepalm*. Currently fixing.",
      "created_at" : "2019-03-26T20:34:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-476838884",
      "id" : 476838884,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NjgzODg4NA==",
      "updated_at" : "2019-03-26T20:34:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/476838884",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269318910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269318910"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You mean of `expected_tag`? Not sure it this makes things cleaner or more optimized.",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-26T21:15:53Z",
      "diff_hunk" : "@@ -0,0 +1,131 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#define XOR(v, w) ((v) ^ (w))\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269318910",
      "id" : 269318910,
      "in_reply_to_id" : 269006819,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTMxODkxMA==",
      "original_commit_id" : "68617154ecc0c0eb8634651e4e14f1c90975352b",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 56,
      "pull_request_review_id" : 219164907,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269318910",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319397"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319397"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-26T21:17:18Z",
      "diff_hunk" : "@@ -621,6 +623,134 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"13000000000000000000000000000000\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the opperation succeeded if expected to succeed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319397",
      "id" : 269319397,
      "in_reply_to_id" : 269007161,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTMxOTM5Nw==",
      "original_commit_id" : "3f5a4c745d18977626ceff0e3719464d51e9dfc2",
      "original_position" : 53,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 219165530,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319397",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319459"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Fixed.",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-26T21:17:28Z",
      "diff_hunk" : "@@ -621,6 +623,134 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"13000000000000000000000000000000\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the opperation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Output(nullptr, cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;\n+    len_cmp = XOR(ciphertext_buf[0], cmp_ctx_buffer[aad_pos + 0]) |\n+              XOR(ciphertext_buf[1], cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              XOR(ciphertext_buf[2], cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    len_cmp = le32toh(len_cmp);\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319459",
      "id" : 269319459,
      "in_reply_to_id" : 269006541,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTMxOTQ1OQ==",
      "original_commit_id" : "3f5a4c745d18977626ceff0e3719464d51e9dfc2",
      "original_position" : 76,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 155,
      "pull_request_review_id" : 219165609,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319459",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319725"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Using the available constantes now.",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-26T21:18:17Z",
      "diff_hunk" : "@@ -0,0 +1,91 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <limits>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool encrypt)\n+{\n+    std::vector<unsigned char> in(buffersize + 3 + 16, 0);\n+    std::vector<unsigned char> out(buffersize + 3 + 16, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319725",
      "id" : 269319725,
      "in_reply_to_id" : 268407005,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTMxOTcyNQ==",
      "original_commit_id" : "8dd9f11261194967e98e3991fd470fb9c7cc3016",
      "original_position" : 25,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 219165973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319725",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Overhauled the AEAD benchmark, now it measures:\r\n* only encryption of 64, 256 and 1MB\r\n* encryption and decryption (also including the previous-to-decryption `GetLength()` call)",
      "created_at" : "2019-03-26T21:23:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-476858336",
      "id" : 476858336,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3Njg1ODMzNg==",
      "updated_at" : "2019-03-26T21:23:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/476858336",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Feel like posting new numbers?",
      "created_at" : "2019-03-26T22:01:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-476870170",
      "id" : 476870170,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3Njg3MDE3MA==",
      "updated_at" : "2019-03-26T22:01:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/476870170",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\ni7-8700 CPU @ 3.20GHz\r\n# Benchmark, evals, iterations, total, min, max, median\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT, 5, 340, 6.89749, 0.00401996, 0.004089, 0.00405691\r\nCHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT, 5, 340, 3.42802, 0.00199702, 0.00206066, 0.00200356\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT, 5, 250000, 1.73244, 1.38097e-06, 1.39262e-06, 1.38631e-06\r\nCHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT, 5, 250000, 0.866814, 6.89058e-07, 6.98332e-07, 6.92555e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT, 5, 500000, 1.61924, 6.33995e-07, 6.61294e-07, 6.45421e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT, 5, 500000, 0.794098, 3.15846e-07, 3.22632e-07, 3.16612e-07\r\nHASH_1MB, 5, 340, 4.02255, 0.00233675, 0.00239431, 0.00236953\r\nHASH_256BYTES, 5, 250000, 1.14968, 9.16826e-07, 9.2569e-07, 9.17793e-07\r\nHASH_64BYTES, 5, 500000, 1.20545, 4.78177e-07, 4.87008e-07, 4.80163e-07\r\n```\r\n\r\n```\r\nRK3399 64-bit Hexa Core A72/A53 CPU (aarch64)\r\nCPU Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT, 5, 340, 25.8159, 0.0151542, 0.015309, 0.0151552\r\nCHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT, 5, 340, 12.8818, 0.00757678, 0.00757883, 0.00757744\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT, 5, 250000, 6.28925, 5.02614e-06, 5.0389e-06, 5.0307e-06\r\nCHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT, 5, 250000, 3.1574, 2.5177e-06, 2.53455e-06, 2.52181e-06\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT, 5, 500000, 5.67636, 2.26775e-06, 2.27397e-06, 2.26921e-06\r\nCHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT, 5, 500000, 2.85557, 1.13888e-06, 1.14831e-06, 1.14157e-06\r\nHASH_1MB, 5, 340, 11.9764, 0.00704443, 0.0070454, 0.00704505\r\nHASH_256BYTES, 5, 250000, 3.43234, 2.74542e-06, 2.74639e-06, 2.74585e-06\r\nHASH_64BYTES, 5, 500000, 3.6589, 1.4629e-06, 1.46428e-06, 1.46323e-06\r\n```",
      "created_at" : "2019-03-26T22:09:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-476872498",
      "id" : 476872498,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3Njg3MjQ5OA==",
      "updated_at" : "2019-03-26T22:09:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/476872498",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269469109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269469109"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be `bool ok = aead.Crypt(Ã¢ÂÂ¦); assert(ok);` to guarantee side-effect free use of `assert(...);`?",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-27T09:28:12Z",
      "diff_hunk" : "@@ -0,0 +1,94 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+#include <crypto/poly1305.h> // for the POLY1305_TAGLEN constant\n+\n+#include <limits>\n+#include <assert.h>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool include_decryption)\n+{\n+    std::vector<unsigned char> in(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> out(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    uint64_t seqnr_payload = 0;\n+    uint64_t seqnr_aad = 0;\n+    int aad_pos = 0;\n+    uint32_t len = 0;\n+    while (state.KeepRunning()) {\n+        // encrypt or decrypt the buffer with a static key\n+        assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269469109",
      "id" : 269469109,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTQ2OTEwOQ==",
      "original_commit_id" : "a07f18c62c3d681bb4c64d567fccce15f53b95eb",
      "original_position" : 34,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : 34,
      "pull_request_review_id" : 219346467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269469109",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269469947"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269469947"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here :-)",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-03-27T09:30:26Z",
      "diff_hunk" : "@@ -0,0 +1,94 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+#include <crypto/poly1305.h> // for the POLY1305_TAGLEN constant\n+\n+#include <limits>\n+#include <assert.h>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool include_decryption)\n+{\n+    std::vector<unsigned char> in(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> out(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    uint64_t seqnr_payload = 0;\n+    uint64_t seqnr_aad = 0;\n+    int aad_pos = 0;\n+    uint32_t len = 0;\n+    while (state.KeepRunning()) {\n+        // encrypt or decrypt the buffer with a static key\n+        assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));\n+\n+        if (include_decryption) {\n+            // if we decrypt, include the GetLength\n+            assert(aead.GetLength(&len, seqnr_aad, aad_pos, in.data()));\n+            assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269469947",
      "id" : 269469947,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTQ2OTk0Nw==",
      "original_commit_id" : "a07f18c62c3d681bb4c64d567fccce15f53b95eb",
      "original_position" : 39,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : 39,
      "pull_request_review_id" : 219347591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-03-27T16:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269469947",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-03-27T11:34:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-477109803",
      "id" : 477109803,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NzEwOTgwMw==",
      "updated_at" : "2019-03-27T11:34:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/477109803",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased",
      "created_at" : "2019-03-27T16:40:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-477244965",
      "id" : 477244965,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NzI0NDk2NQ==",
      "updated_at" : "2019-03-27T16:40:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/477244965",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r271168248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/271168248"
         }
      },
      "author_association" : "MEMBER",
      "body" : "` *len24_out = 0;` here serves no purpose AFAICT since assigned on the next line?",
      "commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "created_at" : "2019-04-02T07:40:52Z",
      "diff_hunk" : "@@ -0,0 +1,131 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#define XOR(v, w) ((v) ^ (w))\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Output(poly_key, poly_key, sizeof(poly_key));\n+\n+    // if decrypting, verify the tag prior to decryption\n+    if (!is_encrypt) {\n+        const unsigned char* tag = src + src_len - POLY1305_TAGLEN;\n+        poly1305_auth(expected_tag, src, src_len - POLY1305_TAGLEN, poly_key);\n+\n+        // constant time compare the calculated MAC with the provided MAC\n+        if (timingsafe_bcmp(expected_tag, tag, POLY1305_TAGLEN) != 0) {\n+            memory_cleanse(expected_tag, sizeof(expected_tag));\n+            memory_cleanse(poly_key, sizeof(poly_key));\n+            return false;\n+        }\n+        memory_cleanse(expected_tag, sizeof(expected_tag));\n+        // MAC has been successfully verified, make sure we don't covert it in decryption\n+        src_len -= POLY1305_TAGLEN;\n+    }\n+\n+    // calculate and cache the next 64byte keystream block if requested sequence number is not yet the cache\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(htole64(seqnr_aad));\n+        m_chacha_header.Seek(0);\n+        m_chacha_header.Output(nullptr, m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT);\n+    }\n+    // crypt the AAD (3 bytes message length) with given position in AAD cipher instance keystream\n+    dest[0] = XOR(src[0], m_aad_keystream_buffer[aad_pos]);\n+    dest[1] = XOR(src[1], m_aad_keystream_buffer[aad_pos + 1]);\n+    dest[2] = XOR(src[2], m_aad_keystream_buffer[aad_pos + 2]);\n+\n+    // Set the playload ChaCha instance block counter to 1 and crypt the payload\n+    m_chacha_main.Seek(htole64(1));\n+    m_chacha_main.Output(src + CHACHA20_POLY1305_AEAD_AAD_LEN, dest + CHACHA20_POLY1305_AEAD_AAD_LEN, src_len - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+\n+    // If encrypting, calculate and append tag\n+    if (is_encrypt) {\n+        // the poly1305 tag expands over the AAD (3 bytes length) & encrypted payload\n+        poly1305_auth(dest + src_len, dest, src_len, poly_key);\n+    }\n+\n+    // cleanse no longer required MAC and polykey\n+    memory_cleanse(poly_key, sizeof(poly_key));\n+    return true;\n+}\n+\n+bool ChaCha20Poly1305AEAD::GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext)\n+{\n+    // enforce valid aad position to avoid accessing outside of the 64byte keystream cache\n+    // (there is space for 21 times 3 bytes)\n+    assert(aad_pos >= 0 && aad_pos < CHACHA20_ROUND_OUTPUT - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        // we need to calculate the 64 keystream bytes since we reached a new aad sequence number\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(htole64(seqnr_aad));                                      // use LE for the nonce\n+        m_chacha_header.Seek(0);                                                        // block counter 0\n+        m_chacha_header.Output(nullptr, m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT); // write keystream to the cache\n+    }\n+\n+    // decrypt the ciphertext length by XORing the right position of the 64byte keystream cache with the ciphertext\n+    *len24_out = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r271168248",
      "id" : 271168248,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTE2ODI0OA==",
      "original_commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "original_position" : 123,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 123,
      "pull_request_review_id" : 221491666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-04-02T07:40:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/271168248",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
