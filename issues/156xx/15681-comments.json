[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2019-03-28T05:51:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-477458316",
      "id" : 477458316,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15681",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NzQ1ODMxNg==",
      "updated_at" : "2019-04-10T15:21:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/477458316",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270087859"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270087859"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm still chewing on the comment above, but doesn't this line let transactions >40k weight through no matter what?",
      "commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "created_at" : "2019-03-28T16:23:20Z",
      "diff_hunk" : "@@ -761,7 +761,14 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n         std::string errString;\n         if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n+            setAncestors.clear();\n+            // If the new transaction is relatively small (up to 40k weight)\n+            // and has at most one ancestor (ie ancestor limit of 2, including\n+            // the new transaction), allow it if its parent has exactly the\n+            // descendant limit descendants.\n+            if (nSize <= 10000 && !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, 1000000, nLimitDescendants + 1, nLimitDescendantSize + 10000, errString)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270087859",
      "id" : 270087859,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDA4Nzg1OQ==",
      "original_commit_id" : "e7e46b3001c10cffa0edcf959fa894d9e6caa56f",
      "original_position" : 10,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 220131280,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681",
      "updated_at" : "2019-03-28T18:29:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270087859",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270106458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270106458"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Lol, oops, one of these days I'll learn to code.",
      "commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "created_at" : "2019-03-28T17:04:55Z",
      "diff_hunk" : "@@ -761,7 +761,14 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n         std::string errString;\n         if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n+            setAncestors.clear();\n+            // If the new transaction is relatively small (up to 40k weight)\n+            // and has at most one ancestor (ie ancestor limit of 2, including\n+            // the new transaction), allow it if its parent has exactly the\n+            // descendant limit descendants.\n+            if (nSize <= 10000 && !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, 1000000, nLimitDescendants + 1, nLimitDescendantSize + 10000, errString)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270106458",
      "id" : 270106458,
      "in_reply_to_id" : 270087859,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDEwNjQ1OA==",
      "original_commit_id" : "e7e46b3001c10cffa0edcf959fa894d9e6caa56f",
      "original_position" : 10,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 220155486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681",
      "updated_at" : "2019-03-28T18:29:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270106458",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270107357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270107357"
         }
      },
      "author_association" : "MEMBER",
      "body" : "did the tests work? ;D",
      "commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "created_at" : "2019-03-28T17:07:04Z",
      "diff_hunk" : "@@ -761,7 +761,14 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n         std::string errString;\n         if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n-            return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n+            setAncestors.clear();\n+            // If the new transaction is relatively small (up to 40k weight)\n+            // and has at most one ancestor (ie ancestor limit of 2, including\n+            // the new transaction), allow it if its parent has exactly the\n+            // descendant limit descendants.\n+            if (nSize <= 10000 && !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, 1000000, nLimitDescendants + 1, nLimitDescendantSize + 10000, errString)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270107357",
      "id" : 270107357,
      "in_reply_to_id" : 270087859,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDEwNzM1Nw==",
      "original_commit_id" : "e7e46b3001c10cffa0edcf959fa894d9e6caa56f",
      "original_position" : 10,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 220156680,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681",
      "updated_at" : "2019-03-28T18:29:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270107357",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270107733"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270107733"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add a test that blowing the 40k weight makes it fail?",
      "commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "created_at" : "2019-03-28T17:07:53Z",
      "diff_hunk" : "@@ -0,0 +1,85 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descendant package tracking carge-out allowing one final transaction in\n+   an otherwise-full package as long as it has only one parent and is <= 10k in\n+   size.\n+\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n+\n+MAX_ANCESTORS = 25\n+MAX_DESCENDANTS = 25\n+\n+class MempoolPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    # Build a transaction that spends parent_txid:vout\n+    # Return amount sent\n+    def chain_transaction(self, node, parent_txids, vouts, value, fee, num_outputs):\n+        send_value = satoshi_round((value - fee)/num_outputs)\n+        inputs = []\n+        for (txid, vout) in zip(parent_txids, vouts):\n+            inputs.append({'txid' : txid, 'vout' : vout})\n+        outputs = {}\n+        for i in range(num_outputs):\n+            outputs[node.getnewaddress()] = send_value\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signedtx = node.signrawtransactionwithwallet(rawtx)\n+        txid = node.sendrawtransaction(signedtx['hex'])\n+        fulltx = node.getrawtransaction(txid, 1)\n+        assert len(fulltx['vout']) == num_outputs  # make sure we didn't generate a change output\n+        return (txid, send_value)\n+\n+    def run_test(self):\n+        # Mine some blocks and have them mature.\n+        self.nodes[0].generate(101)\n+        utxo = self.nodes[0].listunspent(10)\n+        txid = utxo[0]['txid']\n+        vout = utxo[0]['vout']\n+        value = utxo[0]['amount']\n+\n+        fee = Decimal(\"0.0001\")\n+        # MAX_ANCESTORS transactions off a confirmed tx should be fine\n+        chain = []\n+        for i in range(4):\n+            (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [vout], value, fee, 2)\n+            vout = 0\n+            value = sent_value\n+            chain.append([txid, value])\n+        for i in range(MAX_ANCESTORS - 4):\n+            (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [0], value, fee, 1)\n+            value = sent_value\n+            chain.append([txid, value])\n+        (second_chain, second_chain_value) = self.chain_transaction(self.nodes[0], [utxo[1]['txid']], [utxo[1]['vout']], utxo[1]['amount'], fee, 1)\n+\n+        # Check mempool has MAX_ANCESTORS transactions in it, and descendant and ancestor\n+        # count and fees should look correct\n+        assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 1)\n+\n+        # Adding one more transaction on to the chain should fail.\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [txid], [0], value, fee, 1)\n+        # ...even if it chains on from some point in the middle of the chain.\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[2][0]], [1], chain[2][1], fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[1][0]], [1], chain[1][1], fee, 1)\n+        # ...even if it chains on to two parent transactions with one in the chain.\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[0][0], second_chain], [1, 0], chain[0][1] + second_chain_value, fee, 1)\n+        # But not if it chains directly off the first transaction\n+        self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n+        # and the second chain should work just fine\n+        self.chain_transaction(self.nodes[0], [second_chain], [0], second_chain_value, fee, 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270107733",
      "id" : 270107733,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDEwNzczMw==",
      "original_commit_id" : "a3053fd871a857fe3394554ea4d48a7d845193c6",
      "original_position" : 79,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 81,
      "pull_request_review_id" : 220157140,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681",
      "updated_at" : "2019-03-28T18:29:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270107733",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270130965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270130965"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done!",
      "commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "created_at" : "2019-03-28T17:59:36Z",
      "diff_hunk" : "@@ -0,0 +1,85 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descendant package tracking carge-out allowing one final transaction in\n+   an otherwise-full package as long as it has only one parent and is <= 10k in\n+   size.\n+\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n+\n+MAX_ANCESTORS = 25\n+MAX_DESCENDANTS = 25\n+\n+class MempoolPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    # Build a transaction that spends parent_txid:vout\n+    # Return amount sent\n+    def chain_transaction(self, node, parent_txids, vouts, value, fee, num_outputs):\n+        send_value = satoshi_round((value - fee)/num_outputs)\n+        inputs = []\n+        for (txid, vout) in zip(parent_txids, vouts):\n+            inputs.append({'txid' : txid, 'vout' : vout})\n+        outputs = {}\n+        for i in range(num_outputs):\n+            outputs[node.getnewaddress()] = send_value\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signedtx = node.signrawtransactionwithwallet(rawtx)\n+        txid = node.sendrawtransaction(signedtx['hex'])\n+        fulltx = node.getrawtransaction(txid, 1)\n+        assert len(fulltx['vout']) == num_outputs  # make sure we didn't generate a change output\n+        return (txid, send_value)\n+\n+    def run_test(self):\n+        # Mine some blocks and have them mature.\n+        self.nodes[0].generate(101)\n+        utxo = self.nodes[0].listunspent(10)\n+        txid = utxo[0]['txid']\n+        vout = utxo[0]['vout']\n+        value = utxo[0]['amount']\n+\n+        fee = Decimal(\"0.0001\")\n+        # MAX_ANCESTORS transactions off a confirmed tx should be fine\n+        chain = []\n+        for i in range(4):\n+            (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [vout], value, fee, 2)\n+            vout = 0\n+            value = sent_value\n+            chain.append([txid, value])\n+        for i in range(MAX_ANCESTORS - 4):\n+            (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [0], value, fee, 1)\n+            value = sent_value\n+            chain.append([txid, value])\n+        (second_chain, second_chain_value) = self.chain_transaction(self.nodes[0], [utxo[1]['txid']], [utxo[1]['vout']], utxo[1]['amount'], fee, 1)\n+\n+        # Check mempool has MAX_ANCESTORS transactions in it, and descendant and ancestor\n+        # count and fees should look correct\n+        assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 1)\n+\n+        # Adding one more transaction on to the chain should fail.\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [txid], [0], value, fee, 1)\n+        # ...even if it chains on from some point in the middle of the chain.\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[2][0]], [1], chain[2][1], fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[1][0]], [1], chain[1][1], fee, 1)\n+        # ...even if it chains on to two parent transactions with one in the chain.\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[0][0], second_chain], [1, 0], chain[0][1] + second_chain_value, fee, 1)\n+        # But not if it chains directly off the first transaction\n+        self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n+        # and the second chain should work just fine\n+        self.chain_transaction(self.nodes[0], [second_chain], [0], second_chain_value, fee, 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270130965",
      "id" : 270130965,
      "in_reply_to_id" : 270107733,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDEzMDk2NQ==",
      "original_commit_id" : "a3053fd871a857fe3394554ea4d48a7d845193c6",
      "original_position" : 79,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 81,
      "pull_request_review_id" : 220186213,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681",
      "updated_at" : "2019-03-28T18:29:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270130965",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "CC @rustyrussell.",
      "created_at" : "2019-03-28T18:20:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-477715211",
      "id" : 477715211,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15681",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NzcxNTIxMQ==",
      "updated_at" : "2019-03-28T18:20:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/477715211",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r271166377"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/271166377"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be \"carve\" :-)",
      "commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "created_at" : "2019-04-02T07:35:12Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descendant package tracking carge-out allowing one final transaction in",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r271166377",
      "id" : 271166377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTE2NjM3Nw==",
      "original_commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "original_position" : 5,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 5,
      "pull_request_review_id" : 221489381,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681",
      "updated_at" : "2019-04-02T07:35:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/271166377",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r271167067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/271167067"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: This method doesn't use `self`: could be made a function?",
      "commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "created_at" : "2019-04-02T07:37:21Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descendant package tracking carge-out allowing one final transaction in\n+   an otherwise-full package as long as it has only one parent and is <= 10k in\n+   size.\n+\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n+\n+MAX_ANCESTORS = 25\n+MAX_DESCENDANTS = 25\n+\n+class MempoolPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    # Build a transaction that spends parent_txid:vout\n+    # Return amount sent\n+    def chain_transaction(self, node, parent_txids, vouts, value, fee, num_outputs):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r271167067",
      "id" : 271167067,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTE2NzA2Nw==",
      "original_commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "original_position" : 28,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 28,
      "pull_request_review_id" : 221490257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681",
      "updated_at" : "2019-04-02T07:37:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/271167067",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r271167375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/271167375"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: `for _` is more idiomatic when `_` is unused :-)  Applies also for the other `for i`:s below :-)",
      "commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "created_at" : "2019-04-02T07:38:19Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descendant package tracking carge-out allowing one final transaction in\n+   an otherwise-full package as long as it has only one parent and is <= 10k in\n+   size.\n+\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n+\n+MAX_ANCESTORS = 25\n+MAX_DESCENDANTS = 25\n+\n+class MempoolPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    # Build a transaction that spends parent_txid:vout\n+    # Return amount sent\n+    def chain_transaction(self, node, parent_txids, vouts, value, fee, num_outputs):\n+        send_value = satoshi_round((value - fee)/num_outputs)\n+        inputs = []\n+        for (txid, vout) in zip(parent_txids, vouts):\n+            inputs.append({'txid' : txid, 'vout' : vout})\n+        outputs = {}\n+        for i in range(num_outputs):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15681#discussion_r271167375",
      "id" : 271167375,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTE2NzM3NQ==",
      "original_commit_id" : "891ae7b1c4d8f42bdf27baeedb516104bf04519b",
      "original_position" : 34,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 34,
      "pull_request_review_id" : 221490640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15681",
      "updated_at" : "2019-04-02T07:38:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/271167375",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
