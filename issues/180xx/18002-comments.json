[
   {
      "author_association" : "MEMBER",
      "body" : "A change like this was originally suggested by @JeremyRubin here: https://github.com/sipa/bitcoin/pull/116",
      "created_at" : "2020-01-25T21:10:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-578443335",
      "id" : 578443335,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18002",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODQ0MzMzNQ==",
      "updated_at" : "2020-01-25T21:10:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578443335",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17977](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17977.html) ([WIP] Implement BIP 340-342 validation (Schnorr/taproot/tapscript) by sipa)\n* [#16653](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16653.html) (script: add simple signature support (checker/creator) by kallewoof)\n* [#16440](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16440.html) (BIP-322: Generic signed message format by kallewoof)\n* [#16411](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16411.html) (BIP-325: Signet support by kallewoof)\n* [#13062](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13062.html) (Make script interpreter independent from storage type CScript by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-01-26T01:11:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-578458898",
      "id" : 578458898,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18002",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODQ1ODg5OA==",
      "updated_at" : "2020-01-26T01:11:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578458898",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm generally a big fan of cleaning up this consensus logic such that the code is  \"tree-like\" and terminates at leaf branches, rather than having interleaved \"dag-like\" branches that merge into a common exit point. One of the key advantages of code structured in this way is it's much easier to see, at a glance, exactly how many \"versions\" (i.e., combinations of flags) we support. Otherwise, with N things that could either be on or off you get something like 2**N potential execution traces which makes it really hard to write tests for all flows (coverage is not enough).\r\n\r\nIt's a code style that I think we should strive to use when possible, and it makes me a bit extreme in that I go as far as to think we should re-write some other consensus logic (see https://github.com/bitcoin/bitcoin/pull/15969) to be more in line with this style.\r\n\r\nI say the above here not to advocate for more expansive changes at this time, but more so that other reviewers can appropriately discount my ACKs here if you disagree with this viewpoint.\r\n\r\nThat this makes Taproot simpler to review and implement is a plus, but I think these changes stand on their own.\r\n\r\nConcept ACK + lite CR-ack, untested.",
      "created_at" : "2020-01-26T02:27:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-578462602",
      "id" : 578462602,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18002",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODQ2MjYwMg==",
      "updated_at" : "2020-01-26T02:27:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578462602",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r370979869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370979869"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~Before this PR `SCRIPT_ERR_CLEANSTACK` would be enforced even on non version 0 witnessed. This change only enforce it on version 0 witnesses, this is probably a hardfork case?~ (not the case, I missed the `else` clause in the original code)",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-01-26T07:51:23Z",
      "diff_hunk" : "@@ -1428,45 +1445,31 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n             scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n-            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n             if (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n+            return ExecuteWitnessProgram({witness.stack.begin(), witness.stack.end() - 1}, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n         } else if (program.size() == WITNESS_V0_KEYHASH_SIZE) {\n             // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n             if (witness.stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n             scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n-            stack = witness.stack;\n+            return ExecuteWitnessProgram(witness.stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n-    } else if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n-        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n-    } else {\n-        // Higher version witness scripts return true for future softfork compatibility\n-        return set_success(serror);\n-    }\n-\n-    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n-    for (unsigned int i = 0; i < stack.size(); i++) {\n-        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\n-            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+        assert(false); // Unreachable code\n     }\n \n-    if (!EvalScript(stack, scriptPubKey, flags, checker, SigVersion::WITNESS_V0, serror)) {\n-        return false;\n+    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n+        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n     }\n \n-    // Scripts inside witness implicitly require cleanstack behaviour\n-    if (stack.size() != 1)\n-        return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n-    if (!CastToBool(stack.back()))\n-        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n-    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r370979869",
      "id" : 370979869,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3OTg2OQ==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 75,
      "path" : "src/script/interpreter.cpp",
      "position" : 75,
      "pull_request_review_id" : 348363504,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-01-26T08:04:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370979869",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r370980200"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370980200"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~EDIT: Actually right now, all non witness 0 script would be rejected by consensus? Because the stack of a non version 0 witness is always empty and this would violate `SCRIPT_ERR_CLEANSTACK`?~  (not the case, I missed the `else` clause in the original code)",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-01-26T07:58:28Z",
      "diff_hunk" : "@@ -1428,45 +1445,31 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n             scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n-            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n             if (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n+            return ExecuteWitnessProgram({witness.stack.begin(), witness.stack.end() - 1}, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n         } else if (program.size() == WITNESS_V0_KEYHASH_SIZE) {\n             // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n             if (witness.stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n             scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n-            stack = witness.stack;\n+            return ExecuteWitnessProgram(witness.stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n-    } else if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n-        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n-    } else {\n-        // Higher version witness scripts return true for future softfork compatibility\n-        return set_success(serror);\n-    }\n-\n-    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n-    for (unsigned int i = 0; i < stack.size(); i++) {\n-        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\n-            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+        assert(false); // Unreachable code\n     }\n \n-    if (!EvalScript(stack, scriptPubKey, flags, checker, SigVersion::WITNESS_V0, serror)) {\n-        return false;\n+    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n+        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n     }\n \n-    // Scripts inside witness implicitly require cleanstack behaviour\n-    if (stack.size() != 1)\n-        return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n-    if (!CastToBool(stack.back()))\n-        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n-    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r370980200",
      "id" : 370980200,
      "in_reply_to_id" : 370979869,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4MDIwMA==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 75,
      "path" : "src/script/interpreter.cpp",
      "position" : 75,
      "pull_request_review_id" : 348363771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-01-26T08:05:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370980200",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK.\r\n\r\nI like the approach of trying to get small refactors onto the codebase that can be independently reviewed to make the taproot PR more reviewable.",
      "created_at" : "2020-01-26T08:04:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-578478085",
      "id" : 578478085,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18002",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODQ3ODA4NQ==",
      "updated_at" : "2020-01-26T08:06:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578478085",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372697829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372697829"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Maybe `stack` passing could be clarified by passing as const reference and instantiating the local within? Or a doc commenting that it's an in var.",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-01-30T00:03:43Z",
      "diff_hunk" : "@@ -1416,9 +1416,26 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>> stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372697829",
      "id" : 372697829,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5NzgyOQ==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 4,
      "path" : "src/script/interpreter.cpp",
      "position" : 4,
      "pull_request_review_id" : 350508596,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-01-30T00:03:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372697829",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372698278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372698278"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Passing it as const reference would require an unnecessary copy. I'll add a comment.",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-01-30T00:05:23Z",
      "diff_hunk" : "@@ -1416,9 +1416,26 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>> stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372698278",
      "id" : 372698278,
      "in_reply_to_id" : 372697829,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5ODI3OA==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 4,
      "path" : "src/script/interpreter.cpp",
      "position" : 4,
      "pull_request_review_id" : 350509164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-01-30T00:05:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372698278",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code Review ACK https://github.com/bitcoin/bitcoin/pull/18002/commits/1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-01-30T00:11:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-580023477",
      "id" : 580023477,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18002",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDAyMzQ3Nw==",
      "updated_at" : "2020-01-30T00:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580023477",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372701039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372701039"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sounds good re comment. Doesn't the copy occur in either case? AFAIK pass by value requires a copy to have a new instance available for modification.",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-01-30T00:15:19Z",
      "diff_hunk" : "@@ -1416,9 +1416,26 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>> stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372701039",
      "id" : 372701039,
      "in_reply_to_id" : 372697829,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMTAzOQ==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 4,
      "path" : "src/script/interpreter.cpp",
      "position" : 4,
      "pull_request_review_id" : 350512520,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-01-30T00:15:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372701039",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372702063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372702063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Pass by value is a terrible name.\n\nIt's just a variable on the callee side that is constructed in place by the caller. The call sites construct temporaries, so the move constructor will be invoked to construct the parameter.",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-01-30T00:18:43Z",
      "diff_hunk" : "@@ -1416,9 +1416,26 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>> stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372702063",
      "id" : 372702063,
      "in_reply_to_id" : 372697829,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMjA2Mw==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 4,
      "path" : "src/script/interpreter.cpp",
      "position" : 4,
      "pull_request_review_id" : 350513731,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-01-30T00:18:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372702063",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372892925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372892925"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Having `if () { ...; } else { ... }` instead of `if () { ...; assert(false); } ...` would let gcc and clang issue a compile-time warning (\"control reaches end of non-void function\") if the logic got messed up in future, but I don't think there's any way to get both a compile time warning and a runtime safety check (assert(false) overrules the \"control reaches end...\" warning), so just having the runtime safety check is probably best.",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-01-30T11:20:06Z",
      "diff_hunk" : "@@ -1428,45 +1445,31 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n             scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n-            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n             if (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n+            return ExecuteWitnessProgram({witness.stack.begin(), witness.stack.end() - 1}, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n         } else if (program.size() == WITNESS_V0_KEYHASH_SIZE) {\n             // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n             if (witness.stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n             scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n-            stack = witness.stack;\n+            return ExecuteWitnessProgram(witness.stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n-    } else if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n-        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n-    } else {\n-        // Higher version witness scripts return true for future softfork compatibility\n-        return set_success(serror);\n-    }\n-\n-    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n-    for (unsigned int i = 0; i < stack.size(); i++) {\n-        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\n-            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+        assert(false); // Unreachable code",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372892925",
      "id" : 372892925,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg5MjkyNQ==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 61,
      "path" : "src/script/interpreter.cpp",
      "position" : 61,
      "pull_request_review_id" : 350749895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-01-31T04:26:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372892925",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372894416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372894416"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`for (const auto& el : stack) { if (el.size() > MAX_SCRIPT_ELEMENT_SIZE) { ...` ? Probably too gratuitous a change to justify. Likewise `++i` vs `i++` :)",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-01-30T11:23:50Z",
      "diff_hunk" : "@@ -1416,9 +1416,26 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>> stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)\n+{\n+    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n+    for (unsigned int i = 0; i < stack.size(); i++) {\n+        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372894416",
      "id" : 372894416,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg5NDQxNg==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 8,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_review_id" : 350749895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-01-31T04:26:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372894416",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r373310915"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373310915"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Everything else is called `Eval` rather than `Execute`",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-01-31T04:23:33Z",
      "diff_hunk" : "@@ -1416,9 +1416,26 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>> stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r373310915",
      "id" : 373310915,
      "in_reply_to_id" : 372697829,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxMDkxNQ==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 4,
      "path" : "src/script/interpreter.cpp",
      "position" : 4,
      "pull_request_review_id" : 350749895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-01-31T04:26:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373310915",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r373919265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373919265"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I didn't want to call it ...Eval, as it's not just evaluating a script (EvalScript just executes opcodes, and modifies a stack; this function is actually closer to VerifyScript which maps it to a true/false success overall).",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-02-03T04:35:05Z",
      "diff_hunk" : "@@ -1416,9 +1416,26 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>> stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r373919265",
      "id" : 373919265,
      "in_reply_to_id" : 372697829,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxOTI2NQ==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 4,
      "path" : "src/script/interpreter.cpp",
      "position" : 4,
      "pull_request_review_id" : 352017278,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-02-03T04:35:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373919265",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r376168256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376168256"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Concerning the `stack` parameter: would it make sense to declare it as an rvalue parameter (&&) and pass constructed temporaries in both calls (would need to change `witness.stack` to `{witness.stack.begin(), witness.stack.end()}`, to ensure and clarify that the move-constructor is _always_ involved? Just an idea following the \"explicit is better than implicit\" principle.",
      "commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "created_at" : "2020-02-07T01:09:48Z",
      "diff_hunk" : "@@ -1416,9 +1416,26 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>> stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18002#discussion_r376168256",
      "id" : 376168256,
      "in_reply_to_id" : 372697829,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2ODI1Ng==",
      "original_commit_id" : "1e1e28cdc207b7f12a8dce953e61c7c508c63611",
      "original_position" : 4,
      "path" : "src/script/interpreter.cpp",
      "position" : 4,
      "pull_request_review_id" : 354877984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18002",
      "updated_at" : "2020-02-07T01:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376168256",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   }
]
