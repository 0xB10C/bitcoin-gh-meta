[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#18098](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/18098.html) (scripted-diff: Add missing spaces in RPCResult, Normalize type names by MarcoFalke)\n* [#18087](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/18087.html) (Get rid of VARINT default argument by sipa)\n* [#17809](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17809.html) (rpc: Auto-format RPCResult by MarcoFalke)\n* [#17786](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17786.html) (refactor: Nuke policy/fees->mempool circular dependencies by hebasto)\n* [#17060](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17060.html) (Cache 26% more coins: Reduce CCoinsMap::value_type from 96 to 76 bytes by martinus)\n* [#10443](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10443.html) (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-01-25T00:37:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578354949",
      "id" : 578354949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODM1NDk0OQ==",
      "updated_at" : "2020-02-10T22:50:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578354949",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm reviewing and testing it right now but from some benchmarks I did, I saw how the time goes down by 50%. However the performance increases by 19% percent.\r\n\r\nRegtest results only right now\r\n\r\nOn master (ef8e2cee9f5d157eeb3139b64e9c3a5fa4bf36f3):\r\n```\r\n$ time src/bitcoin-cli --regtest gettxoutsetinfo\r\n...\r\n> src/bitcoin-cli --regtest gettxoutsetinfo  0,00s user 0,00s system 23% cpu 0,014 total\r\n```\r\nWith this PR\r\n```\r\n$ time src/bitcoin-cli --regtest gettxoutsetinfo\r\n...\r\n> src/bitcoin-cli --regtest gettxoutsetinfo  0,00s user 0,00s system 42% cpu 0,007 total\r\n```",
      "created_at" : "2020-01-27T17:27:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578859737",
      "id" : 578859737,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODg1OTczNw==",
      "updated_at" : "2020-01-27T17:27:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578859737",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Can you say more about current use cases of the `gettxoutsetinfo` function and maybe future use cases if it's significantly faster with this change?",
      "created_at" : "2020-01-27T20:03:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578926752",
      "id" : 578926752,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODkyNjc1Mg==",
      "updated_at" : "2020-01-27T20:03:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578926752",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it's perfectly fine to drop the \"transactions\" statistics. It doesn't really mean anything; it just happened to be easy to compute pre-pertxout, but even now it's mostly a hack.",
      "created_at" : "2020-01-27T21:18:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578957115",
      "id" : 578957115,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODk1NzExNQ==",
      "updated_at" : "2020-01-27T21:18:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578957115",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@emilengler  Thanks for giving it a try! But I think the benchmarks you are comparing are not well suited in this case. I assume you are running a standard regtest network, maybe generated a few hundred blocks and made some transactions by hand. In this case the UTXO set is very small and iterating over it will be extremely fast, so that it would not surprise me if there is no measurable upside to using the index (maybe it will be even a little slower as you saw). But the goal of this index is that the time of the call will stay constant for a realistically sized UTXO set. So a better indicator would be to try it on a synced mainnet or testnet node, where `gettxoutset` currently takes several minutes without the index, even on pretty high powered hardware.\r\n\r\n@ryanofsky  Sure, I will go along the different statistics the call provides to highlight which ones I think are more or less important:\r\n- `total_amount` The total amount of the current bitcoin supply. Tracking this number on a continual basis allows users to detect potential inflation bugs, such as CVE-2018-17144 (Example: [Bitmex Research](https://blog.bitmex.com/forkmonitor-unexpected-inflation-detection-and-warning-system/)). I think all users should be given the chance to continually check this, even on more affordable hardware. I am currently running a mainnet node on an Odroid HC2 and `gettxoutsetinfo` takes 7min 50s. Specs are roughly comparable to a Raspberry Pi 4, so it can keep up well with the chain otherwise. If I wanted to run a continual inflation detection on this hardware, I would not be able to do so when the UTXO set has grown another 20-25% (ignoring hashrate fluctuations).\r\n- `hash_serialized_2` The serialized hash of the UTXO set can be used for a quick comparison of the UTXO set between different notes. Essentially, it can be a stand-in for the latest blockhash and compared for sanity checks. BTCPayServer has been using it for their [FastSync](https://github.com/btcpayserver/btcpayserver-docker/tree/master/contrib/FastSync) feature, which will probably be replaced with `assume_utxo`, where a UTXO set hash (not necessarily this one) will play a role as well. I still need to sync up with @jamesob  about the latest plans for the hash and how this proposal can be compatible with his or even help/support it.\r\n- `txouts` The total number of unspent outputs is an interesting number to track from an operations standpoint. Users can see if coins are being consolidated or at which rate the UTXO set is growing. Example: [satoshi.info](https://statoshi.info/dashboard/db/unspent-transaction-output-set)\r\n- `bogosize` and `disk_size` might be also interesting to track but not as actionable, disc usage is probably much more efficient to collect from the OS\r\n- `transactions` it seems to be a nice-to-have metric that does not serve any real purpose afaict, as @sipa also noted\r\n- `height` and `bestblock` can be ignored since they are available from other RPCs, but are necessary to compare numbers between different machines\r\n\r\nFor future use cases (aside from integration with `assume_utxo` potentially) I don't have specific ideas yet, but it opens the door to track any other statistics of the UTXO set or block content in the index. So it may collect further metrics of interest where users currently parse the block data with their own custom software.",
      "created_at" : "2020-01-27T23:40:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-579009007",
      "id" : 579009007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTAwOTAwNw==",
      "updated_at" : "2020-01-27T23:40:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579009007",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@fjahr I'm a bit confused now, I ran the tests again on a full chain and master is MUCH faster than this Pull Request (4 MINUTES faster)\r\nOn master (2755b2b1092d0286022cf3cc3028e96f6bee2b34)\r\n```\r\n$ time src/bitcoin-cli --datadir=/media/emil/Files/Bitcoin/ gettxoutsetinfo\r\n{\r\n  \"height\": 614943,\r\n  \"bestblock\": \"0000000000000000000fa03a2ce4c6d7fb763e55402deac32371b898e8faba5e\",\r\n  \"transactions\": 38747934,\r\n  \"txouts\": 65245740,\r\n  \"bogosize\": 4903711195,\r\n  \"hash_serialized_2\": \"011d3eccd148b68a3bf039f0695bb4d77a23ba208dcd4d8ac073d867fd5bbef6\",\r\n  \"disk_size\": 4035082036,\r\n  \"total_amount\": 18186617.32125282\r\n}\r\nsrc/bitcoin-cli --datadir=/media/emil/Files/Bitcoin/ gettxoutsetinfo  0,00s user 0,01s system 0% cpu 57,428 total\r\n```\r\nOn fjahr:utxo-stats-index-rebase (663dbfbd1da60e91c9576629ace82b712d31668c)\r\n```\r\n$ time src/bitcoin-cli --datadir=/media/emil/Files/Bitcoin/ gettxoutsetinfo\r\n{\r\n  \"height\": 614937,\r\n  \"bestblock\": \"00000000000000000005973a14ac338b681e410922c7566e435107db1b1d807b\",\r\n  \"transactions\": 38745882,\r\n  \"txouts\": 65244661,\r\n  \"bogosize\": 4903634025,\r\n  \"utxo_set_hash\": \"87d3e7f807d6b428bf60e983a73137ef410cb510de1b5f4e650e081d044fc772\",\r\n  \"disk_size\": 4082447626,\r\n  \"total_amount\": 18186542.32125282\r\n}\r\nsrc/bitcoin-cli --datadir=/media/emil/Files/Bitcoin/ gettxoutsetinfo  0,01s user 0,00s system 0% cpu 5:01,42 total\r\n```",
      "created_at" : "2020-01-28T19:39:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-579418971",
      "id" : 579418971,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTQxODk3MQ==",
      "updated_at" : "2020-01-28T19:39:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579418971",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @ryanofsky Sure, I will go along the different statistics the call provides to highlight which ones I think are more or less important:\r\n\r\nThanks, this information is really clarifying. I wonder if some of it could be incorporated in the reference documentation (without mentioning specific CVE's or software projects), or maybe if it would be useful as part of some wiki. In any case, this definitely helps motivate the PR, so concept ACK from me",
      "created_at" : "2020-01-29T19:22:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-579917647",
      "id" : 579917647,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTkxNzY0Nw==",
      "updated_at" : "2020-01-29T19:22:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579917647",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@emilengler did you actually start `bitcoind` with `-coinstatsindex`? I mention it briefly in the PR description, but as @ryanofsky already pointed out as well, I need to do a much better job at documenting the intent and current state of the proposal. It seems so because otherwise you could not test it that quickly, building up the index takes a quite long time and while the index is building up `gettxoutsetinfo` is responding with \"unable to read UTXO set\". In fact, on my machine, it is currently so slow that I might have to address it. But running a plain IBD is also incredibly slow right now so it could also be a local issue. What is probably happening is that you are running `bitcoind` without the flag and so the stats are still calculated by iterating over the UTXO set but the hash is using the new hashing algorithm (Muhash), which is slower and results in slower performance when not using the index.",
      "created_at" : "2020-01-30T17:53:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580375400",
      "id" : 580375400,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDM3NTQwMA==",
      "updated_at" : "2020-01-30T17:53:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580375400",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @emilengler did you actually start bitcoind with -coinstatsindex?\r\n\r\nno, sorry oversaw that",
      "created_at" : "2020-01-30T18:55:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580401182",
      "id" : 580401182,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDQwMTE4Mg==",
      "updated_at" : "2020-01-30T18:55:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580401182",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmmm I get this error message now:\r\n```\r\nerror code: -32603\r\nerror message:\r\nUnable to read UTXO set\r\n\r\n```\r\nthe chain state is about ~2 days old",
      "created_at" : "2020-01-30T20:22:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580442697",
      "id" : 580442697,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDQ0MjY5Nw==",
      "updated_at" : "2020-01-30T20:22:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580442697",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Hmmm I get this error message now:\r\n> \r\n> ```\r\n> error code: -32603\r\n> error message:\r\n> Unable to read UTXO set\r\n> ```\r\n> \r\n> the chain state is about ~2 days old\r\n\r\nYeah, that means the index is syncing at the moment. You should see the progress in the logs of `bitcoind`. Something like `Syncing coinstatsindex with block chain from height XXXXX`.",
      "created_at" : "2020-01-30T20:30:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580445887",
      "id" : 580445887,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDQ0NTg4Nw==",
      "updated_at" : "2020-01-30T20:30:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580445887",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383619253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383619253"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "b5f112c\r\n\r\nCan't you use `block_index->nHeight`  here and avoid a lock ?",
      "commit_id" : "f7bcb1251d6d5f2ce44a2b71f356b7a1f2772c98",
      "created_at" : "2020-02-25T01:59:38Z",
      "diff_hunk" : "@@ -43,6 +44,27 @@ bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n \n+    // Use CoinStatsIndex if it is available\n+    if (g_coin_stats_index) {\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(pcursor->GetBestBlock());\n+        }\n+\n+        if (g_coin_stats_index->LookupStats(block_index, stats)) {\n+            stats.hashBlock = pcursor->GetBestBlock();\n+            {\n+                LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383619253",
      "id" : 383619253,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxOTI1Mw==",
      "original_commit_id" : "b5f112cb0acfd3431fabc13012aa32a18cb4d7d0",
      "original_position" : 23,
      "path" : "src/node/coinstats.cpp",
      "position" : null,
      "pull_request_review_id" : 363825551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
      "updated_at" : "2020-03-07T00:07:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383619253",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383623566"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383623566"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "93db4a5\r\n\r\nThere is a coinbase output in the genesis block?",
      "commit_id" : "f7bcb1251d6d5f2ce44a2b71f356b7a1f2772c98",
      "created_at" : "2020-02-25T02:17:10Z",
      "diff_hunk" : "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t coins_count;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactions);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(coins_count);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactions = 0;\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_coins_count = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383623566",
      "id" : 383623566,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyMzU2Ng==",
      "original_commit_id" : "93db4a5018b81a4b9e9998ce859568ed3341c354",
      "original_position" : 140,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 134,
      "pull_request_review_id" : 363825551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
      "updated_at" : "2020-03-07T00:07:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383623566",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383624117"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383624117"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "93db4a5\r\n\r\nAlso, OP_RETURN outputs shouldn't be considered (we remove them from utxo set IIRC) ?",
      "commit_id" : "f7bcb1251d6d5f2ce44a2b71f356b7a1f2772c98",
      "created_at" : "2020-02-25T02:19:21Z",
      "diff_hunk" : "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t coins_count;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactions);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(coins_count);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactions = 0;\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_coins_count = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO: deal with stats.coins_count++;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+            // TODO: deal with m_nTransactions\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                // ignore segwit block OP_RETURN output with merkle root of witness tree\n+                if (tx->IsCoinBase() && j > 0) break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383624117",
      "id" : 383624117,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNDExNw==",
      "original_commit_id" : "93db4a5018b81a4b9e9998ce859568ed3341c354",
      "original_position" : 165,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : null,
      "pull_request_review_id" : 363825551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
      "updated_at" : "2020-03-07T00:07:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383624117",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187278"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You are right, fixed now!",
      "commit_id" : "f7bcb1251d6d5f2ce44a2b71f356b7a1f2772c98",
      "created_at" : "2020-03-06T23:09:08Z",
      "diff_hunk" : "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t coins_count;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactions);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(coins_count);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactions = 0;\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_coins_count = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO: deal with stats.coins_count++;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+            // TODO: deal with m_nTransactions\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                // ignore segwit block OP_RETURN output with merkle root of witness tree\n+                if (tx->IsCoinBase() && j > 0) break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187278",
      "id" : 389187278,
      "in_reply_to_id" : 383624117,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NzI3OA==",
      "original_commit_id" : "93db4a5018b81a4b9e9998ce859568ed3341c354",
      "original_position" : 165,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : null,
      "pull_request_review_id" : 370680065,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
      "updated_at" : "2020-03-07T00:07:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187278",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187404"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done. Cleaned up that whole part considerably.",
      "commit_id" : "f7bcb1251d6d5f2ce44a2b71f356b7a1f2772c98",
      "created_at" : "2020-03-06T23:09:36Z",
      "diff_hunk" : "@@ -43,6 +44,27 @@ bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n \n+    // Use CoinStatsIndex if it is available\n+    if (g_coin_stats_index) {\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(pcursor->GetBestBlock());\n+        }\n+\n+        if (g_coin_stats_index->LookupStats(block_index, stats)) {\n+            stats.hashBlock = pcursor->GetBestBlock();\n+            {\n+                LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187404",
      "id" : 389187404,
      "in_reply_to_id" : 383619253,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NzQwNA==",
      "original_commit_id" : "b5f112cb0acfd3431fabc13012aa32a18cb4d7d0",
      "original_position" : 23,
      "path" : "src/node/coinstats.cpp",
      "position" : null,
      "pull_request_review_id" : 370680210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
      "updated_at" : "2020-03-07T00:07:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187404",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187774"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187774"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, see https://www.blockchain.com/btc/block/0",
      "commit_id" : "f7bcb1251d6d5f2ce44a2b71f356b7a1f2772c98",
      "created_at" : "2020-03-06T23:10:58Z",
      "diff_hunk" : "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t coins_count;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactions);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(coins_count);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactions = 0;\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_coins_count = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187774",
      "id" : 389187774,
      "in_reply_to_id" : 383623566,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4Nzc3NA==",
      "original_commit_id" : "93db4a5018b81a4b9e9998ce859568ed3341c354",
      "original_position" : 140,
      "path" : "src/index/coinstatsindex.cpp",
      "position" : 134,
      "pull_request_review_id" : 370680657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
      "updated_at" : "2020-03-07T00:07:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187774",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "First of all, thanks for taking early looks and comments @ariard , @ryanofsky, @emilengler , @jnewbery (offline). Your comments should be mostly addressed in the latest code changes and in further information below. With the latest fixes and performance improvements, this should be now ready for real review and testing.\r\n\r\n# Short recap of changes (this changed slightly)\r\n- Introduces `MuHash3072` and `TruncatedSHA256Writer` implementations (code by Pieter Wuille)\r\n- Uses above for MuHash hashing alogrithm for the UTXO set hash in `gettxoutsetinfo`\r\n- Removed tracking of the transactions count statistic\r\n- Introduces `CoinStatsIndex` class, an index for all the statistics in `gettxoutsetinfo`\r\n- Allows activating the index using the flag `-coinstatsindex`. When activated `gettxoutsetinfo` responds within seconds after the initial sync phase. Otherwise it works as before but will be slower to parse the UTXO set due to the change in the hashing algorithm.\r\n\r\n# Benchmarking\r\n- For reference, on my benchmarking server and my local machine, IBD takes around 18-19 hours\r\n- I can provide more detailed numbers if required but so far I am pretty confident that it's not a bottleneck even for users on under-powered nodes.\r\n\r\n## How long does the sync of the CoinStatsIndex take?\r\n- On my benchmarking server syncing the Coinstatsindex after IBD took between 8.5 and 9.5h hours\r\n- On my local machine, I also synced testnet and it took 8h 20min.\r\n\r\n## How about the growth of the UTXO set (ariard's question above)?\r\n- For the sync time of the index should actually not make much of a difference if the UTXO set shrinks or grows, it should rather grow linearly with the size of the blockchain.\r\n- Instead, growth of the UTXO set causes `gettxoutsetinfo` without the index to run longer because it iterates over it every time and so it is one of the reasons why I think the index is worth integrating into core.\r\n\r\n# TBD\r\n- Although its a lot of LOC I think the changes are still ok to be reviewed as one PR but if people would prefer me to split it into two or three smaller PRs that is easily doable.\r\n- The newly introduced metric `coins count` that is only used in Assume UTXO is not in the index and I don't think there is a practical way to integrate it (similar problem to transaction count). That means it will probably not be possible to have this index running and create a new assume utxo set on the same node at the same time. I will need to discuss this with @jamesob  to make sure this dealt with correctly one Assume UTXO is finished.",
      "created_at" : "2020-03-06T23:16:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-596004565",
      "id" : 596004565,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjAwNDU2NQ==",
      "updated_at" : "2020-03-06T23:16:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596004565",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased",
      "created_at" : "2020-03-07T00:08:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-596015652",
      "id" : 596015652,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjAxNTY1Mg==",
      "updated_at" : "2020-03-07T00:08:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596015652",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   }
]
