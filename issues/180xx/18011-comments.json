[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Strong concept ACK! Seems like a big improvement.\r\n\r\nCan you comment more on the 6 seconds claim? AFAIK each bench was supposed to target running for 1 second? Is this no longer required to reduce variance?\r\n\r\n\r\nSecondly -- and separately -- can you comment on how this might impact the need for something like #17375? Can we add better support for benchmarks where we want to run with different scaling params and output each trial to get a sense of the complexity? ",
      "created_at" : "2020-01-27T22:09:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-578978817",
      "id" : 578978817,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODk3ODgxNw==",
      "updated_at" : "2020-01-27T22:09:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578978817",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I calculate a good number of iterations based on the clock accuracy, then perform these iterations a few times and use the median to get rid of outliers. I found it actually to be more reliable with shorter runs, because there is less chance for random fluctuations to interfer. It is necessary though to disable frequency scaling etc (but this should be done with the old framework too anyways). This can be easily done with e.g pyperf\r\n\r\nConcerning https://github.com/bitcoin/bitcoin/pull/17375, nanobench can estimate complexity, but it requires a bit of code change: https://github.com/martinus/nanobench/blob/master/docs/reference.md#asymptotic-complexity",
      "created_at" : "2020-01-27T22:21:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-578983430",
      "id" : 578983430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODk4MzQzMA==",
      "updated_at" : "2020-01-27T22:21:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578983430",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18014 (lib: Optimizing siphash implementation by elichai)\n* #17977 ([WIP] Implement BIP 340-342 validation (Schnorr/taproot/tapscript) by sipa)\n* #17526 (Use Single Random Draw In addition to knapsack as coin selection fallback by achow101)\n* #17331 (Use effective values throughout coin selection by achow101)\n* #16902 (O(1) OP_IF/NOTIF/ELSE/ENDIF script implementation by sipa)\n* #16117 (util: Replace boost sleep with std sleep by MarcoFalke)\n* #13525 (policy: Report reason inputs are nonstandard from AreInputsStandard by Empact)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-01-28T01:49:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579041181",
      "id" : 579041181,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTA0MTE4MQ==",
      "updated_at" : "2020-02-29T04:50:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579041181",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The lint check currently fails with this error:\r\n\r\n> fatal: bad revision '8b138526b5dc...488d538cbf6f'\r\n\r\nI believe the reason is some key verification check at the end of ci/lint/06_script.sh, but I can't really say why this is failing",
      "created_at" : "2020-01-28T07:00:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579108323",
      "id" : 579108323,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTEwODMyMw==",
      "updated_at" : "2020-01-28T07:00:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579108323",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\n\r\n\r\nThe travis failure is\r\n\r\n```\r\nThe locale dependent function std::to_string(...) appears to be used:\r\n\r\nsrc/bench/nanobench.h:            auto sysCpu = \"/sys/devices/system/cpu/cpu\" + std::to_string(id);\r\n\r\nsrc/bench/nanobench.h:                warnings.emplace_back(\"CPU frequency scaling enabled: CPU \" + std::to_string(id) + \" between \" +\r\n\r\nUnnecessary locale dependence can cause bugs that are very\r\n\r\ntricky to isolate and fix. Please avoid using locale dependent\r\n\r\nfunctions if possible.\r\n\r\nAdvice not applicable in this specific case? Add an exception\r\n\r\nby updating the ignore list in test/lint/lint-locale-dependence.sh\r\n\r\n^---- failure generated from test/lint/lint-locale-dependence.sh",
      "created_at" : "2020-01-28T15:05:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579288765",
      "id" : 579288765,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTI4ODc2NQ==",
      "updated_at" : "2020-01-28T15:05:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579288765",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Would it be easy to hack in csv output that is somewhat similar to the existing output? The markdown table looks a little tricky to parse programmatically (though it could be done). For example, bitcoinperf (https://github.com/chaincodelabs/bitcoinperf) currently relies on this format. ",
      "created_at" : "2020-01-28T15:24:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579298846",
      "id" : 579298846,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTI5ODg0Ng==",
      "updated_at" : "2020-01-28T15:24:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579298846",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The locale dependent function std::to_string(...) appears to be used:\r\n\r\nAh, ok I'll fix this\r\n\r\n> Would it be easy to hack in csv output that is somewhat similar to the existing output?\r\n\r\nI think it should be easy, in nanobench I already have CSV & JSON output format using [mustache-like templates](https://github.com/martinus/nanobench/blob/master/docs/reference.md#processing-results), so it's possible to create a custom format. I have not exposed this feature yet though in this PR.",
      "created_at" : "2020-01-28T15:53:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579315933",
      "id" : 579315933,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTMxNTkzMw==",
      "updated_at" : "2020-01-28T15:53:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579315933",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Strong concept ACK\r\n\r\n@martinus, thanks for your great contributions! Please keep them coming :)",
      "created_at" : "2020-01-28T16:49:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579345876",
      "id" : 579345876,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTM0NTg3Ng==",
      "updated_at" : "2020-01-28T16:49:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579345876",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Does this library also does memory clobbers and barriers? (like google's `DoNotOptimize`[0], `ClobberMemory`[1], or Rust's `black_box`[2])\r\n\r\n[0] https://github.com/google/benchmark/blob/master/include/benchmark/benchmark.h#L307\r\n[1] https://github.com/google/benchmark/blob/master/include/benchmark/benchmark.h#L326\r\n[2] https://doc.rust-lang.org/std/hint/fn.black_box.html",
      "created_at" : "2020-01-28T17:02:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579352138",
      "id" : 579352138,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTM1MjEzOA==",
      "updated_at" : "2020-01-28T17:02:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579352138",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Does this library also does memory clobbers and barriers? (like google's `DoNotOptimize`[0], `ClobberMemory`[1], or Rust's `black_box`[2])\r\n\r\nI currently have `doNotOptimizeAway`, which is based on [folly](https://github.com/facebook/folly/blob/master/folly/Benchmark.h)'s benchmark. I think folly's version is based on google benchmark. I have not added `doNotOptimizeAway` calls in the PR because I did not want to modify each benchmark too much\r\n\r\nI don't have clobberMemory yet, because I've never used it... What I'm also doing is I force the `run(...)` to be noinline to prevent some optimizations.",
      "created_at" : "2020-01-28T17:11:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579356379",
      "id" : 579356379,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTM1NjM3OQ==",
      "updated_at" : "2020-01-28T17:11:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579356379",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Is it possible to make the nanobench include a submodule (like secp256k1 or univalue) so that it's easier for us to pull in updates from upstream? If you plan on adding new features to nanobench, that should help streamline review potentially. If you think that there will be Bitcoin specific changes made to the header that you wouldn't want to upstream, then I would leave it as you've done.",
      "created_at" : "2020-01-28T20:11:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579433076",
      "id" : 579433076,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTQzMzA3Ng==",
      "updated_at" : "2020-01-28T20:11:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579433076",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Closed https://github.com/bitcoin/bitcoin/pull/17375 in favor of nanobench. When you have time would love assistance in making the asymptotic test introduced there nanobench compatible.\r\n\r\n\r\nBeing able to run asymptotic tests on the code is going to be a huge help with advocating for mempool policy changes in the future (e.g., loosening descendants limit) once the epoch mempool work is completed. This also impacts other parts of the code (e.g., wallet) where right now we don't have good insight into if we introduce a regression. I think the curve fitting is a bit less useful because we do care about the constant factors too (e.g., if we're a O(n log n) v.s. O(n) but c > log n for max n), but it's quite nifty nonetheless. ",
      "created_at" : "2020-01-28T20:21:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579437431",
      "id" : 579437431,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTQzNzQzMQ==",
      "updated_at" : "2020-01-28T20:21:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579437431",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Is it possible to make the nanobench include a submodule (like secp256k1 or univalue)\r\n\r\nI think it should be possible, I need to read up how git-subtree works... I prefer if nanobench stays generic, and try to implement bitcoin's requirement in a generic way so it's usable by others too. So no separate repository if possible.\r\n\r\n> When you have time would love assistance in making the asymptotic test introduced there nanobench compatible.\r\n\r\nSure, I'll have a look at https://github.com/bitcoin/bitcoin/pull/17375 when I have time! I can't predict how soon this is though.",
      "created_at" : "2020-01-29T09:46:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579675970",
      "id" : 579675970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTY3NTk3MA==",
      "updated_at" : "2020-01-29T09:46:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579675970",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Haven't looked at the library itself yet, but Concept ACK on replacing the current framework. (I really dislike it)\r\nPersonally I also would've been fine with dynamically linking against google's benchmarking library (https://github.com/google/benchmark)",
      "created_at" : "2020-01-29T09:52:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579678349",
      "id" : 579678349,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTY3ODM0OQ==",
      "updated_at" : "2020-01-29T09:53:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579678349",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : ">  Personally I also would've been fine with dynamically linking against google's benchmarking library (https://github.com/google/benchmark)\r\n\r\nI don't think google benchmark is viable here. It's a large dependency, and you also need to use the gtest framework for this. It would be quite a big change.",
      "created_at" : "2020-01-29T11:46:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579719346",
      "id" : 579719346,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTcxOTM0Ng==",
      "updated_at" : "2020-01-29T11:46:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579719346",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2020-01-30T03:16:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-580065007",
      "id" : 580065007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDA2NTAwNw==",
      "updated_at" : "2020-01-30T03:16:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580065007",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "We discussed nanobench today in the IRC Meeting. There's seems to be general agreement that this is a nice idea, and that the current bench framework isn't perfect.\r\n\r\nOur current bench framework is actually based on Google's, and I think most people are opposed to linking google's whole thing.\r\n\r\nWith respect to the question of if to subtree or not: let's ignore that for now, copied in is fine, and we can deal with that in the future if we require changes to nanobench or if there are new features in nanobench we want to incorporate.\r\n\r\nThere's some concern about maintaining compatibility with existing tools. I think given that the output is fundamentally different from before (no longer reporting iterations and things like that) we can't have perfect parity. But perhaps we could:\r\n\r\n1. \"backport\" on top of the last few releases (no new release) so that we have a bit more history to compare with\r\n2. Add a compatibility mode which emits something similar to the previous output with NaN subsituted where nanobench has no equivalent value. \r\n3. Ignore compatibility, but do support output into a nice machine-readable format.\r\n\r\nI think most people would be satisfied with 3, as 2 can be done a script on 3's output and 1 can be done if someone has the itch for it.",
      "created_at" : "2020-01-30T20:15:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-580440077",
      "id" : 580440077,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDQ0MDA3Nw==",
      "updated_at" : "2020-01-30T20:15:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580440077",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the summary! I just read through the log [here](http://www.erisian.com.au/meetbot/bitcoin-core-dev/2020/bitcoin-core-dev.2020-01-30-19.00.log.html) and think I can add a few clarifications:\r\n\r\n> I think if we can do a cursory check it's not actually malware\r\n\r\nIt's not malware, not sure how I can help here :) I've created nanobench because I was annoyed at how difficult other benchmarking frameworks were to integrate into existing codebase because I don't like google test.\r\n\r\n> For example, a lot of tools rely on the output format of the current bench framework\r\n\r\nI have templating support in nanobench, and I can relatively easily add another output format that resembles the current output format closely. I need to do some improvements to the available data in nanobench, then I can use a template liks this to produce practically the same output as before:\r\n\r\n```\r\n# Benchmark, evals, iterations, total, min, max, median\r\n{{#benchmarks}} {{name}}, {{num_measurements}}, {{total_iters}}, {{total_runtime}}, {{min}}, {{max}}, {{median}}\r\n{{/benchmarks}}\r\n```\r\n\r\nThen I can e.g. print the markdown tables to stdout, and create e.g. `benchmarkresults.csv` along with it based on the template format. \r\n\r\n> <jeremyrubin> I beleive nanobench autodetects variance or something\r\n\r\nGoogle benchmark is quite simple: it has a fixed runtime that it wants to achieve, then finds out the number of iterations it needs to do to get there, then it measures the time for that.\r\n\r\nIn nanobench I try to be a bit smarter: I find out the clocks accuracy first, and base the target runtime on that. Since clocks are nowadays very accurate (18ns or so on my machine), I can easily perform the measurement multiple times and use the median to get rid of outliers.\r\n\r\nThe fast runtimes gives very repeatable measurements for stuff that's deterministic (e.g. SHA hashing).  There I believe nanobench has a clear advantage over all other bencharking frameworks that I've tried.\r\n\r\nWhen the code under test has fluctuations (e.g. because it allocates stuff, or has some randomness or lots of cache misses / branch misspredictions in it), nanobench's runtime measurement probably isn't better than google benchmark. In that case it helps to also show the numbers for branch misses and retired instruction count to get a better feeling.\r\n\r\n",
      "created_at" : "2020-01-30T21:50:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-580477347",
      "id" : 580477347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDQ3NzM0Nw==",
      "updated_at" : "2020-01-30T21:52:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580477347",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2020-02-10T12:03:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-584090585",
      "id" : 584090585,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NDA5MDU4NQ==",
      "updated_at" : "2020-02-10T12:03:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584090585",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I've rebased & pushed a big update to the code. In addition to the markdown output, I also generate a file `benchmarkresults.csv` which has practically the same content as the output had previously. This should can be used by any tools that rely on the benchmark output. On my computer, the file has this output:\r\n\r\n```\r\n# Benchmark, evals, iterations, total, min, max, median\r\nAssembleBlock, 11, 1, 0.006106585, 0.000538949, 0.000643127, 0.000545681\r\nBase58CheckEncode, 11, 9.81818181818182, 0.000240226, 2.06e-06, 3.02745454545455e-06, 2.07709090909091e-06\r\nBase58Decode, 11, 27.2727272727273, 0.000245003, 8.11689655172414e-07, 8.1968e-07, 8.166e-07\r\nBase58Encode, 11, 18.5454545454545, 0.000244574, 1.19615e-06, 1.2115e-06, 1.19763157894737e-06\r\nBech32Decode, 11, 42.3636363636364, 0.000250479, 4.27466666666667e-07, 1.32740740740741e-06, 4.35666666666667e-07\r\nBech32Encode, 11, 34.6363636363636, 0.000248104, 6.29258064516129e-07, 8.0896875e-07, 6.36314285714286e-07\r\nBenchLockedPool, 11, 167.363636363636, 0.000264967, 1.08922651933702e-07, 1.73769662921348e-07, 1.46138888888889e-07\r\nBenchTimeDeprecated, 11, 4587.81818181818, 0.00024425, 4.38138264341248e-09, 5.01115472009915e-09, 5.0051077059738e-09\r\nBenchTimeMillis, 11, 237.363636363636, 0.00024483, 9.26184738955823e-08, 9.43307086614173e-08, 9.3963963963964e-08\r\nBenchTimeMillisSys, 11, 243.272727272727, 0.000244799, 9.1088122605364e-08, 9.19113924050633e-08, 9.15038461538462e-08\r\nBenchTimeMock, 11, 10562.9090909091, 0.000246826, 2.08633681343622e-09, 2.29533626901521e-09, 2.08746447742343e-09\r\nBlockToJsonVerbose, 11, 1, 0.812951704, 0.072167457, 0.085656596, 0.072707134\r\nCCheckQueueSpeedPrevectorJob, 11, 11.1818181818182, 0.199323679, 0.00153634016666667, 0.00172734963636364, 0.0016258129\r\nCCoinsCaching, 11, 36.5454545454545, 0.000227408, 5.422e-07, 7.69351351351351e-07, 5.44605263157895e-07\r\nCHACHA20_1MB, 11, 1, 0.023085774, 0.00201953, 0.002240195, 0.002090533\r\nCHACHA20_256BYTES, 11, 44.5454545454545, 0.000245398, 4.99659574468085e-07, 5.02047619047619e-07, 5.00717391304348e-07\r\nCHACHA20_64BYTES, 11, 168.363636363636, 0.000245097, 1.32019736842105e-07, 1.32545454545455e-07, 1.32360759493671e-07\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT, 11, 1, 0.063083902, 0.005614908, 0.006009997, 0.005679771\r\nCHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT, 11, 1, 0.031591654, 0.002799809, 0.003083797, 0.002855794\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT, 11, 11.2727272727273, 0.000236947, 1.89941666666667e-06, 1.92533333333333e-06, 1.90981818181818e-06\r\nCHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT, 11, 21.5454545454545, 0.000233245, 9.55045454545455e-07, 1.23718181818182e-06, 9.5747619047619e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT, 11, 25, 0.000247072, 8.81333333333333e-07, 1.015125e-06, 8.87961538461539e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT, 11, 48.9090909090909, 0.00024602, 4.42068181818182e-07, 5.63777777777778e-07, 4.45867924528302e-07\r\nComplexMemPool, 11, 1, 3.457592325, 0.313054487, 0.316239363, 0.313548617\r\nConstructGCSFilter, 11, 1, 0.018953542, 0.001667658, 0.001879675, 0.001676587\r\nDeserializeAndCheckBlockTest, 11, 1, 0.068399757, 0.006003952, 0.006412799, 0.00618906\r\nDeserializeBlockTest, 11, 1, 0.057322626, 0.005100356, 0.00547949, 0.005164525\r\nDuplicateInputs, 11, 1, 0.082094071, 0.007329521, 0.007526674, 0.007472722\r\nFastRandom_1bit, 11, 14773.0909090909, 0.000239545, 1.46252213259886e-09, 1.47889590295829e-09, 1.47590446579989e-09\r\nFastRandom_32bit, 11, 2285.45454545455, 0.000242346, 9.26413255360624e-09, 1.2139653815893e-08, 9.36415362731152e-09\r\nHASH_1MB, 11, 1, 0.037448639, 0.00333361, 0.003531469, 0.003387306\r\nHASH_256BYTES, 11, 17.2727272727273, 0.000244883, 1.28611764705882e-06, 1.291e-06, 1.28872222222222e-06\r\nHASH_64BYTES, 11, 32.8181818181818, 0.000244595, 6.75885714285714e-07, 6.79625e-07, 6.77514285714286e-07\r\nMatchGCSFilter, 11, 1, 0.000303108, 2.6787e-05, 3.0751e-05, 2.7047e-05\r\nMempoolEviction, 11, 1, 0.00035951, 2.6216e-05, 4.4312e-05, 3.0276e-05\r\nMerkleRoot, 11, 1, 0.013989533, 0.001220381, 0.001462655, 0.001242791\r\nPOLY1305_1MB, 11, 1, 0.008822394, 0.000778289, 0.000909028, 0.000782461\r\nPOLY1305_256BYTES, 11, 106.272727272727, 0.000243963, 2.07696428571429e-07, 2.09357142857143e-07, 2.088e-07\r\nPOLY1305_64BYTES, 11, 328.636363636364, 0.000248855, 6.70127795527157e-08, 8.63612040133779e-08, 6.72832369942197e-08\r\nPrevectorClearNontrivial, 11, 791.454545454545, 0.000372666, 2.59770491803279e-08, 1.94881395348837e-07, 2.60037735849057e-08\r\nPrevectorClearTrivial, 11, 2630.54545454545, 0.000244958, 8.46212395795578e-09, 8.47009966777409e-09, 8.46505271378368e-09\r\nPrevectorDeserializeNontrivial, 11, 1, 0.001192481, 0.000105425, 0.000123912, 0.00010568\r\nPrevectorDeserializeTrivial, 11, 2, 0.000255826, 1.1333e-05, 1.2048e-05, 1.1635e-05\r\nPrevectorDestructorNontrivial, 11, 415.272727272727, 0.000358251, 5.15516483516484e-08, 3.43633971291866e-07, 5.15764966740576e-08\r\nPrevectorDestructorTrivial, 11, 1590.36363636364, 0.000237761, 1.31619407687461e-08, 1.39810235767683e-08, 1.3519e-08\r\nPrevectorResizeNontrivial, 11, 811.272727272727, 0.000273009, 2.46290155440415e-08, 8.05017709563164e-08, 2.46548295454545e-08\r\nPrevectorResizeTrivial, 11, 2536.54545454545, 0.000244927, 8.77334809892949e-09, 8.78255578093306e-09, 8.77719528178244e-09\r\nRIPEMD160, 11, 1, 0.028423992, 0.002516573, 0.002757947, 0.00255517\r\nRollingBloom, 11, 44.3636363636364, 0.000245064, 4.99872340425532e-07, 5.05348837209302e-07, 5.02531914893617e-07\r\nRollingBloomReset, 11, 1, 0.000696645, 6.2348e-05, 6.9429e-05, 6.2588e-05\r\nRpcMempool, 11, 1, 0.121633853, 0.010798163, 0.011604045, 0.010929157\r\nSHA1, 11, 1, 0.021057291, 0.001862186, 0.002103509, 0.001878588\r\nSHA256, 11, 1, 0.035631576, 0.00317911, 0.003383292, 0.003233048\r\nSHA256D64_1024, 11, 1, 0.001464103, 0.000132135, 0.000138764, 0.000132205\r\nSHA256_32b, 11, 95.6363636363636, 0.000244411, 2.31903225806452e-07, 2.32772727272727e-07, 2.32415841584158e-07\r\nSHA512, 11, 1, 0.034134625, 0.00303295, 0.003282536, 0.003086899\r\nSipHash_32b, 11, 776.181818181818, 0.000244754, 2.85349500713267e-08, 2.88179581795818e-08, 2.86630872483221e-08\r\nTrig, 11, 4313.81818181818, 0.000238146, 5.01395348837209e-09, 5.03433333333333e-09, 5.01748251748252e-09\r\nVerifyScriptBench, 11, 1, 0.001860283, 0.000155127, 0.000299556, 0.000155384\r\n```\r\n\r\nNote that \"number of iterations\" is now a double value, because in nanobench I automatically determine the number of iterations, and the value is the average number of iterations over the 11 evaluations. (so e.g. `Base58CheckEncode` as 11 evaluations and 9.81818181818182 iterations, so 11*9.818 = 108 iterations in total)",
      "created_at" : "2020-02-20T16:17:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-589162113",
      "id" : 589162113,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTE2MjExMw==",
      "updated_at" : "2020-02-20T16:17:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589162113",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK 83a7839\r\n\r\nVerified that only benchmarks are effected, checked that the high level design seems reasonable & an improvement over what we do presently.",
      "created_at" : "2020-02-20T18:55:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-589251617",
      "id" : 589251617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTI1MTYxNw==",
      "updated_at" : "2020-02-20T18:55:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589251617",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "In bf5ae5e I've added some support for asymptotes. I hope that's somewhat similar to what you did in #17375, @JeremyRubin?\r\n\r\nUsage is e.g. like this:\r\n\r\n```\r\n./bench_bitcoin -filter=ComplexMemPool -asymptote=25,50,100,200,400,600,800\r\n```\r\n\r\nThis runs the benchmark `ComplexMemPool` several times but with  different complexityN settings. The benchmark can extract that number and use it accordingly. Here, it's used for `childTxs`. The output is this:\r\n\r\n| complexityN |               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |     total | benchmark\r\n|------------:|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|----------:|:----------\r\n|          25 |        1,064,241.00 |              939.64 |    1.4% |    3,960,279.00 |    2,829,708.00 |  1.400 |      0.01 | `ComplexMemPool`\r\n|          50 |        1,579,530.00 |              633.10 |    1.0% |    6,231,810.00 |    4,412,674.00 |  1.412 |      0.02 | `ComplexMemPool`\r\n|         100 |        4,022,774.00 |              248.58 |    0.6% |   16,544,406.00 |   11,889,535.00 |  1.392 |      0.04 | `ComplexMemPool`\r\n|         200 |       15,390,986.00 |               64.97 |    0.2% |   63,904,254.00 |   47,731,705.00 |  1.339 |      0.17 | `ComplexMemPool`\r\n|         400 |       69,394,711.00 |               14.41 |    0.1% |  272,602,461.00 |  219,014,691.00 |  1.245 |      0.76 | `ComplexMemPool`\r\n|         600 |      168,977,165.00 |                5.92 |    0.1% |  639,108,082.00 |  535,316,887.00 |  1.194 |      1.86 | `ComplexMemPool`\r\n|         800 |      310,109,077.00 |                3.22 |    0.1% |1,149,134,246.00 |  984,620,812.00 |  1.167 |      3.41 | `ComplexMemPool`\r\n\r\n|   coefficient |   err% | complexity\r\n|--------------:|-------:|------------\r\n|   4.78486e-07 |   4.5% | O(n^2)\r\n|   6.38557e-10 |  21.7% | O(n^3)\r\n|   3.42338e-05 |  38.0% | O(n log n)\r\n|   0.000313914 |  46.9% | O(n)\r\n|     0.0129823 | 114.4% | O(log n)\r\n|     0.0815055 | 133.8% | O(1)\r\n\r\nThe best fitting curve is O(n^2), so the algorithm seems to scale quadratic with `childTxs` in the range 25 to 800.",
      "created_at" : "2020-02-20T21:47:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-589335251",
      "id" : 589335251,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTMzNTI1MQ==",
      "updated_at" : "2020-02-20T21:47:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589335251",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK bf5ae5e\r\n\r\nbravo!",
      "created_at" : "2020-02-20T22:51:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-589392669",
      "id" : 589392669,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTM5MjY2OQ==",
      "updated_at" : "2020-02-20T22:51:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589392669",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18011#discussion_r385845065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18011"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385845065"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: How about:\r\n```cpp\r\nnamespace nanobench { using namespace ankerl::nanobench; }\r\n```\r\nSo that all the external nanobench members are more explicitly identified?",
      "commit_id" : "c2e924fc046110eb7ac5ab7bf19cfaf6daf1c44b",
      "created_at" : "2020-02-28T18:11:45Z",
      "diff_hunk" : "@@ -9,136 +9,48 @@\n #include <map>\n #include <string>\n #include <vector>\n-#include <chrono>\n \n+#include <bench/nanobench.h>\n #include <boost/preprocessor/cat.hpp>\n #include <boost/preprocessor/stringize.hpp>\n \n struct RegTestingSetup;\n extern const RegTestingSetup* g_testing_setup; //!< A pointer to the current testing setup\n-\n-// Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n-// framework (see https://github.com/google/benchmark)\n-// Why not use the Google Benchmark framework? Because adding Yet Another Dependency\n-// (that uses cmake as its build system and has lots of features we don't need) isn't\n-// worth it.\n-\n /*\n  * Usage:\n \n-static void CODE_TO_TIME(benchmark::State& state)\n+static void CODE_TO_TIME(benchmark::Bench& bench)\n {\n     ... do any setup needed...\n-    while (state.KeepRunning()) {\n+    nanobench::Config().run([&] {\n        ... do stuff you want to time...\n-    }\n+    });\n     ... do any cleanup needed...\n }\n \n-// default to running benchmark for 5000 iterations\n-BENCHMARK(CODE_TO_TIME, 5000);\n+BENCHMARK(CODE_TO_TIME);\n \n  */\n \n namespace benchmark {\n-// In case high_resolution_clock is steady, prefer that, otherwise use steady_clock.\n-struct best_clock {\n-    using hi_res_clock = std::chrono::high_resolution_clock;\n-    using steady_clock = std::chrono::steady_clock;\n-    using type = std::conditional<hi_res_clock::is_steady, hi_res_clock, steady_clock>::type;\n-};\n-using clock = best_clock::type;\n-using time_point = clock::time_point;\n-using duration = clock::duration;\n-\n-class Printer;\n-\n-class State\n-{\n-public:\n-    std::string m_name;\n-    uint64_t m_num_iters_left;\n-    const uint64_t m_num_iters;\n-    const uint64_t m_num_evals;\n-    std::vector<double> m_elapsed_results;\n-    time_point m_start_time;\n \n-    bool UpdateTimer(time_point finish_time);\n+using namespace ankerl::nanobench;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#discussion_r385845065",
      "id" : 385845065,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0NTA2NQ==",
      "original_commit_id" : "bf5ae5ed0f3f02051a14069d311d98ab6628a213",
      "original_position" : 64,
      "path" : "src/bench/bench.h",
      "position" : null,
      "pull_request_review_id" : 366588035,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18011",
      "updated_at" : "2020-03-01T06:44:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385845065",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386024046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18011"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386024046"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sure I can do that. Would you do that inside the benchmark namespace? then all benchmark arguments would become e.g. \r\n```cpp\r\nstatic void Base58Encode(benchmark::nanobench::Bench& bench)\r\n```\r\nWhich is a bit long. ",
      "commit_id" : "c2e924fc046110eb7ac5ab7bf19cfaf6daf1c44b",
      "created_at" : "2020-02-29T12:11:22Z",
      "diff_hunk" : "@@ -9,136 +9,48 @@\n #include <map>\n #include <string>\n #include <vector>\n-#include <chrono>\n \n+#include <bench/nanobench.h>\n #include <boost/preprocessor/cat.hpp>\n #include <boost/preprocessor/stringize.hpp>\n \n struct RegTestingSetup;\n extern const RegTestingSetup* g_testing_setup; //!< A pointer to the current testing setup\n-\n-// Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n-// framework (see https://github.com/google/benchmark)\n-// Why not use the Google Benchmark framework? Because adding Yet Another Dependency\n-// (that uses cmake as its build system and has lots of features we don't need) isn't\n-// worth it.\n-\n /*\n  * Usage:\n \n-static void CODE_TO_TIME(benchmark::State& state)\n+static void CODE_TO_TIME(benchmark::Bench& bench)\n {\n     ... do any setup needed...\n-    while (state.KeepRunning()) {\n+    nanobench::Config().run([&] {\n        ... do stuff you want to time...\n-    }\n+    });\n     ... do any cleanup needed...\n }\n \n-// default to running benchmark for 5000 iterations\n-BENCHMARK(CODE_TO_TIME, 5000);\n+BENCHMARK(CODE_TO_TIME);\n \n  */\n \n namespace benchmark {\n-// In case high_resolution_clock is steady, prefer that, otherwise use steady_clock.\n-struct best_clock {\n-    using hi_res_clock = std::chrono::high_resolution_clock;\n-    using steady_clock = std::chrono::steady_clock;\n-    using type = std::conditional<hi_res_clock::is_steady, hi_res_clock, steady_clock>::type;\n-};\n-using clock = best_clock::type;\n-using time_point = clock::time_point;\n-using duration = clock::duration;\n-\n-class Printer;\n-\n-class State\n-{\n-public:\n-    std::string m_name;\n-    uint64_t m_num_iters_left;\n-    const uint64_t m_num_iters;\n-    const uint64_t m_num_evals;\n-    std::vector<double> m_elapsed_results;\n-    time_point m_start_time;\n \n-    bool UpdateTimer(time_point finish_time);\n+using namespace ankerl::nanobench;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386024046",
      "id" : 386024046,
      "in_reply_to_id" : 385845065,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyNDA0Ng==",
      "original_commit_id" : "bf5ae5ed0f3f02051a14069d311d98ab6628a213",
      "original_position" : 64,
      "path" : "src/bench/bench.h",
      "position" : null,
      "pull_request_review_id" : 366794924,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18011",
      "updated_at" : "2020-03-01T06:44:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386024046",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386051798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18011"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386051798"
         }
      },
      "author_association" : "MEMBER",
      "body" : "How about doing individual assignments for the classes in use, e.g.:\r\n\r\n```cpp\r\nnamespace benchmark { using ankerl::nanobench::Bench; }\r\n```",
      "commit_id" : "c2e924fc046110eb7ac5ab7bf19cfaf6daf1c44b",
      "created_at" : "2020-02-29T19:58:04Z",
      "diff_hunk" : "@@ -9,136 +9,48 @@\n #include <map>\n #include <string>\n #include <vector>\n-#include <chrono>\n \n+#include <bench/nanobench.h>\n #include <boost/preprocessor/cat.hpp>\n #include <boost/preprocessor/stringize.hpp>\n \n struct RegTestingSetup;\n extern const RegTestingSetup* g_testing_setup; //!< A pointer to the current testing setup\n-\n-// Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n-// framework (see https://github.com/google/benchmark)\n-// Why not use the Google Benchmark framework? Because adding Yet Another Dependency\n-// (that uses cmake as its build system and has lots of features we don't need) isn't\n-// worth it.\n-\n /*\n  * Usage:\n \n-static void CODE_TO_TIME(benchmark::State& state)\n+static void CODE_TO_TIME(benchmark::Bench& bench)\n {\n     ... do any setup needed...\n-    while (state.KeepRunning()) {\n+    nanobench::Config().run([&] {\n        ... do stuff you want to time...\n-    }\n+    });\n     ... do any cleanup needed...\n }\n \n-// default to running benchmark for 5000 iterations\n-BENCHMARK(CODE_TO_TIME, 5000);\n+BENCHMARK(CODE_TO_TIME);\n \n  */\n \n namespace benchmark {\n-// In case high_resolution_clock is steady, prefer that, otherwise use steady_clock.\n-struct best_clock {\n-    using hi_res_clock = std::chrono::high_resolution_clock;\n-    using steady_clock = std::chrono::steady_clock;\n-    using type = std::conditional<hi_res_clock::is_steady, hi_res_clock, steady_clock>::type;\n-};\n-using clock = best_clock::type;\n-using time_point = clock::time_point;\n-using duration = clock::duration;\n-\n-class Printer;\n-\n-class State\n-{\n-public:\n-    std::string m_name;\n-    uint64_t m_num_iters_left;\n-    const uint64_t m_num_iters;\n-    const uint64_t m_num_evals;\n-    std::vector<double> m_elapsed_results;\n-    time_point m_start_time;\n \n-    bool UpdateTimer(time_point finish_time);\n+using namespace ankerl::nanobench;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386051798",
      "id" : 386051798,
      "in_reply_to_id" : 385845065,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1MTc5OA==",
      "original_commit_id" : "bf5ae5ed0f3f02051a14069d311d98ab6628a213",
      "original_position" : 64,
      "path" : "src/bench/bench.h",
      "position" : null,
      "pull_request_review_id" : 366816897,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18011",
      "updated_at" : "2020-03-01T06:44:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386051798",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386081966"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18011"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386081966"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that's better, `Bench` is the only thing that's needed in the benchmarks anyway. I've commited c2e924f which does that",
      "commit_id" : "c2e924fc046110eb7ac5ab7bf19cfaf6daf1c44b",
      "created_at" : "2020-03-01T06:45:21Z",
      "diff_hunk" : "@@ -9,136 +9,48 @@\n #include <map>\n #include <string>\n #include <vector>\n-#include <chrono>\n \n+#include <bench/nanobench.h>\n #include <boost/preprocessor/cat.hpp>\n #include <boost/preprocessor/stringize.hpp>\n \n struct RegTestingSetup;\n extern const RegTestingSetup* g_testing_setup; //!< A pointer to the current testing setup\n-\n-// Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n-// framework (see https://github.com/google/benchmark)\n-// Why not use the Google Benchmark framework? Because adding Yet Another Dependency\n-// (that uses cmake as its build system and has lots of features we don't need) isn't\n-// worth it.\n-\n /*\n  * Usage:\n \n-static void CODE_TO_TIME(benchmark::State& state)\n+static void CODE_TO_TIME(benchmark::Bench& bench)\n {\n     ... do any setup needed...\n-    while (state.KeepRunning()) {\n+    nanobench::Config().run([&] {\n        ... do stuff you want to time...\n-    }\n+    });\n     ... do any cleanup needed...\n }\n \n-// default to running benchmark for 5000 iterations\n-BENCHMARK(CODE_TO_TIME, 5000);\n+BENCHMARK(CODE_TO_TIME);\n \n  */\n \n namespace benchmark {\n-// In case high_resolution_clock is steady, prefer that, otherwise use steady_clock.\n-struct best_clock {\n-    using hi_res_clock = std::chrono::high_resolution_clock;\n-    using steady_clock = std::chrono::steady_clock;\n-    using type = std::conditional<hi_res_clock::is_steady, hi_res_clock, steady_clock>::type;\n-};\n-using clock = best_clock::type;\n-using time_point = clock::time_point;\n-using duration = clock::duration;\n-\n-class Printer;\n-\n-class State\n-{\n-public:\n-    std::string m_name;\n-    uint64_t m_num_iters_left;\n-    const uint64_t m_num_iters;\n-    const uint64_t m_num_evals;\n-    std::vector<double> m_elapsed_results;\n-    time_point m_start_time;\n \n-    bool UpdateTimer(time_point finish_time);\n+using namespace ankerl::nanobench;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386081966",
      "id" : 386081966,
      "in_reply_to_id" : 385845065,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4MTk2Ng==",
      "original_commit_id" : "bf5ae5ed0f3f02051a14069d311d98ab6628a213",
      "original_position" : 64,
      "path" : "src/bench/bench.h",
      "position" : null,
      "pull_request_review_id" : 366838590,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18011",
      "updated_at" : "2020-03-01T06:45:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/386081966",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK https://github.com/bitcoin/bitcoin/pull/18011/commits/c2e924fc046110eb7ac5ab7bf19cfaf6daf1c44b",
      "created_at" : "2020-03-01T09:44:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-593076531",
      "id" : 593076531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzA3NjUzMQ==",
      "updated_at" : "2020-03-01T09:44:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593076531",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   }
]
