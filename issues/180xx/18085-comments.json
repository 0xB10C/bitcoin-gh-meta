[
   {
      "author_association" : "MEMBER",
      "body" : "A possible (imagined) use case where things would go wrong with the current concept/info:\r\n\r\n* Bob installs Core, IBDs\r\n* Bob creates a new receiving address with the label \"xxx money\"\r\n* Bob buys a few \"item\" online and uses \"pretty honest\" labels\r\n* Bob then decides to **encrypt** the wallet since he used words that are not meant to be read by his wife Alice\r\n* Bob closes the wallet and shutdown Core\r\n* Bob sleeps well since he knows the wallet is *encrypted*\r\n* Alice opens \"Bitcoin\" (Bitcoin Core), inspects the applications,... and no longer talks to Bob\r\n\r\nAnother user-story where things can go wrong:\r\n* Bob installs Core, IBDs\r\n* Bob **encrypts** the wallet (doesn't read the warning blablas)\r\n* Bob stack sats over 2-3 years\r\n* Bob **totally forgot** that he initially encrypted the wallet since it uses **keypools**\r\n* Bob finally wants to send some of his Bitcoins to a Alice\r\n* Bob is surprised by the password request (he started the application many times and didn't get asked for a password)\r\n* Bob no longer remembers the password and loses his fortune forever\r\n\r\n---\r\n\r\n* A possible option could be to encrypt not only the keys (or the seed later) but also the metadata (derived addresses, scripts, labels, transactions) and request the passphrase at startup.\r\n* To avoid keeping the private-key encryption key for loo long in memory, we could KDF a different key for metadata that stays the whole session in memory (leading to too different timeouts, one for spends, one for the loaded wallet)\r\n* In general, the doctrine could be that the persistent content (wallet.dat) must always completely encrypted. After entering the passphrase, it deflates/decrypts metadata, keypools, descriptors into memory only.\r\n* A password re-entry when spends happen could still be made (eventually with the short inmemory timespan KDF-ed key)\r\n* Enter the passphrase more often (at startup / load-time of a wallet plus additional timeout) prevents from lost funds through lost passphrase.",
      "created_at" : "2020-02-06T20:34:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18085#issuecomment-583098001",
      "id" : 583098001,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18085",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MzA5ODAwMQ==",
      "updated_at" : "2020-02-06T20:37:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/583098001",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
