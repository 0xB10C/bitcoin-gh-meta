[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372859156"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372859156"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You should pick a letter to turn into the keyboard shortcut (works on some operating systems, not macOS). E.g. `\"&Load PSBT...\" if `L` isn't taken.",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-01-30T10:08:05Z",
      "diff_hunk" : "@@ -317,6 +317,8 @@ void BitcoinGUI::createActions()\n     signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n     verifyMessageAction = new QAction(tr(\"&Verify message...\"), this);\n     verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n+    m_load_psbt_action = new QAction(tr(\"Load PSBT...\"), this);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372859156",
      "id" : 372859156,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1OTE1Ng==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 4,
      "path" : "src/qt/bitcoingui.cpp",
      "position" : null,
      "pull_request_review_id" : 350706469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372859156",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372859805"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372859805"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: fix year",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-01-30T10:09:21Z",
      "diff_hunk" : "@@ -0,0 +1,52 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372859805",
      "id" : 372859805,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1OTgwNQ==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 1,
      "path" : "src/qt/psbtoperationsdialog.h",
      "position" : null,
      "pull_request_review_id" : 350706469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372859805",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372862556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372862556"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Cleaning these error messages could probably be its own commit.",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-01-30T10:15:09Z",
      "diff_hunk" : "@@ -14,7 +14,7 @@ std::string TransactionErrorString(const TransactionError err)\n         case TransactionError::OK:\n             return \"No error\";\n         case TransactionError::MISSING_INPUTS:\n-            return \"Missing inputs\";\n+            return \"Inputs missing or spent\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372862556",
      "id" : 372862556,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2MjU1Ng==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 5,
      "path" : "src/util/error.cpp",
      "position" : 5,
      "pull_request_review_id" : 350706469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372862556",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372867561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372867561"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I wonder if these strings can be moved to a place where the RPC can also use them.",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-01-30T10:24:47Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction &psbt) {\n+    size_t count = 0;\n+    for (const auto& input : psbt.inputs) {\n+        if (!PSBTInputSigned(input)) {\n+            count++;\n+        }\n+    }\n+\n+    return count;\n+}\n+\n+PSBTOperationsDialog::PSBTOperationsDialog(\n+    QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent),\n+                                                                             m_ui(new Ui::PSBTOperationsDialog),\n+                                                                             m_wallet_model(wallet_model),\n+                                                                             m_client_model(client_model)\n+{\n+    m_ui->setupUi(this);\n+    setWindowTitle(\"PSBT Operations\");\n+\n+    connect(m_ui->signTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::signTransaction);\n+    connect(m_ui->broadcastTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::broadcastTransaction);\n+    connect(m_ui->copyToClipboardButton, &QPushButton::clicked, this, &PSBTOperationsDialog::copyToClipboard);\n+    connect(m_ui->saveButton, &QPushButton::clicked, this, &PSBTOperationsDialog::saveTransaction);\n+\n+    connect(m_ui->closeButton, &QPushButton::clicked, this, &PSBTOperationsDialog::close);\n+\n+    m_ui->signTransactionButton->setEnabled(false);\n+    m_ui->broadcastTransactionButton->setEnabled(false);\n+}\n+\n+PSBTOperationsDialog::~PSBTOperationsDialog()\n+{\n+    delete m_ui;\n+}\n+\n+void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n+{\n+    m_transaction_data = psbtx;\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to load transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    m_ui->broadcastTransactionButton->setEnabled(complete);\n+    m_ui->signTransactionButton->setEnabled(!complete);\n+\n+    updateTransactionDisplay();\n+}\n+\n+void PSBTOperationsDialog::signTransaction()\n+{\n+    size_t unsigned_count = CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, true /* sign */, true /* bip32derivs */);\n+    size_t did_sign_count = unsigned_count - CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to sign transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    updateTransactionDisplay();\n+\n+    if (!complete && did_sign_count < 1) {\n+        showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARNING);\n+    } else if (!complete) {\n+        showStatus(tr(\"Signed transaction successfully, but more signatures are still required.\"),\n+            StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Signed transaction sucessfully. Transaction is ready to broadcast.\"),\n+            StatusLevel::INFO);\n+        m_ui->broadcastTransactionButton->setEnabled(true);\n+    }\n+}\n+\n+void PSBTOperationsDialog::broadcastTransaction()\n+{\n+    CMutableTransaction mtx;\n+    if (!FinalizeAndExtractPSBT(m_transaction_data, mtx)) {\n+        // This is never expected to fail unless we were given a malformed PSBT\n+        // (e.g. with an invalid signature.)\n+        showStatus(tr(\"Unknown error processing transaction.\"), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    CTransactionRef tx = MakeTransactionRef(mtx);\n+    std::string err_string;\n+    TransactionError error = BroadcastTransaction(\n+        *m_client_model->node().context(), tx, err_string, COIN / 10, /* relay */ true, /* await_callback */ false);\n+\n+    if (error == TransactionError::OK) {\n+        showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")\n+            .arg(QString::fromStdString(tx->GetHash().GetHex())), StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Transaction broadcast failed: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(error))), StatusLevel::ERROR);\n+    }\n+}\n+\n+void PSBTOperationsDialog::copyToClipboard() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::saveTransaction() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+\n+    QString selected_filter;\n+    QString filename_suggestion = \"\";\n+    bool first = true;\n+    for (const CTxOut& out : m_transaction_data.tx->vout) {\n+        if (!first) {\n+            filename_suggestion.append(\"-\");\n+        }\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        QString amount = BitcoinUnits::format(m_wallet_model->getOptionsModel()->getDisplayUnit(), out.nValue);\n+        QString address_str = QString::fromStdString(EncodeDestination(address));\n+        filename_suggestion.append(address_str + \"-\" + amount);\n+        first = false;\n+    }\n+    filename_suggestion.append(\".psbt\");\n+    QString filename = GUIUtil::getSaveFileName(this,\n+        tr(\"Save Transaction Data\"), filename_suggestion,\n+        tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selected_filter);\n+    if (filename.isEmpty()) {\n+        return;\n+    }\n+    std::ofstream out(filename.toLocal8Bit().data());\n+    out << ssTx.str();\n+    out.close();\n+    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::updateTransactionDisplay() {\n+    m_ui->transactionDescription->setText(QString::fromStdString(renderTransaction(m_transaction_data)));\n+    showTransactionStatus(m_transaction_data);\n+}\n+\n+std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransaction &psbtx)\n+{\n+    QString tx_description = \"\";\n+    CAmount totalAmount = 0;\n+    for (const CTxOut& out : psbtx.tx->vout) {\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        totalAmount += out.nValue;\n+        tx_description.append(tr(\" * Sends %1 to %2\")\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(QString::fromStdString(EncodeDestination(address))));\n+        tx_description.append(\"<br>\");\n+    }\n+\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    tx_description.append(\" * \");\n+    if (!*analysis.fee) {\n+        // This happens if the transaction is missing input UTXO information.\n+        tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n+    } else {\n+        tx_description.append(tr(\"Pays transaction fee: \"));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+\n+        // add total amount in all subdivision units\n+        tx_description.append(\"<hr />\");\n+        QStringList alternativeUnits;\n+        for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+        {\n+            if(u != m_client_model->getOptionsModel()->getDisplayUnit())\n+                alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n+        }\n+        tx_description.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+            .arg(BitcoinUnits::formatHtmlWithUnit(m_client_model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n+        tx_description.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+            .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n+    }\n+\n+    size_t num_unsigned = CountPSBTUnsignedInputs(psbtx);\n+    if (num_unsigned > 0) {\n+        tx_description.append(\"<br><br>\");\n+        tx_description.append(tr(\"Transaction has %1 unsigned inputs.\").arg(QString::number(num_unsigned)));\n+    }\n+\n+    return tx_description.toStdString();\n+}\n+\n+void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {\n+    m_ui->statusBar->setText(msg);\n+    switch (level) {\n+        case StatusLevel::INFO: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : lightgreen }\");\n+            break;\n+        }\n+        case StatusLevel::WARNING: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : orange }\");\n+            break;\n+        }\n+        case StatusLevel::ERROR: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : red }\");\n+            break;\n+        }\n+    }\n+    m_ui->statusBar->show();\n+}\n+\n+void PSBTOperationsDialog::showTransactionStatus(const PartiallySignedTransaction &psbtx) {\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+\n+    switch (analysis.next) {\n+        case PSBTRole::UPDATER: {\n+            showStatus(tr(\"Transaction is missing some information about inputs.\"), StatusLevel::WARNING);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372867561",
      "id" : 372867561,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2NzU2MQ==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 238,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : null,
      "pull_request_review_id" : 350706469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372867561",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372868419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372868419"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should we create a `OperationsDialog` class to make this stuff reusable? (can wait of course)",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-01-30T10:26:25Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction &psbt) {\n+    size_t count = 0;\n+    for (const auto& input : psbt.inputs) {\n+        if (!PSBTInputSigned(input)) {\n+            count++;\n+        }\n+    }\n+\n+    return count;\n+}\n+\n+PSBTOperationsDialog::PSBTOperationsDialog(\n+    QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent),\n+                                                                             m_ui(new Ui::PSBTOperationsDialog),\n+                                                                             m_wallet_model(wallet_model),\n+                                                                             m_client_model(client_model)\n+{\n+    m_ui->setupUi(this);\n+    setWindowTitle(\"PSBT Operations\");\n+\n+    connect(m_ui->signTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::signTransaction);\n+    connect(m_ui->broadcastTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::broadcastTransaction);\n+    connect(m_ui->copyToClipboardButton, &QPushButton::clicked, this, &PSBTOperationsDialog::copyToClipboard);\n+    connect(m_ui->saveButton, &QPushButton::clicked, this, &PSBTOperationsDialog::saveTransaction);\n+\n+    connect(m_ui->closeButton, &QPushButton::clicked, this, &PSBTOperationsDialog::close);\n+\n+    m_ui->signTransactionButton->setEnabled(false);\n+    m_ui->broadcastTransactionButton->setEnabled(false);\n+}\n+\n+PSBTOperationsDialog::~PSBTOperationsDialog()\n+{\n+    delete m_ui;\n+}\n+\n+void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n+{\n+    m_transaction_data = psbtx;\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to load transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    m_ui->broadcastTransactionButton->setEnabled(complete);\n+    m_ui->signTransactionButton->setEnabled(!complete);\n+\n+    updateTransactionDisplay();\n+}\n+\n+void PSBTOperationsDialog::signTransaction()\n+{\n+    size_t unsigned_count = CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, true /* sign */, true /* bip32derivs */);\n+    size_t did_sign_count = unsigned_count - CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to sign transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    updateTransactionDisplay();\n+\n+    if (!complete && did_sign_count < 1) {\n+        showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARNING);\n+    } else if (!complete) {\n+        showStatus(tr(\"Signed transaction successfully, but more signatures are still required.\"),\n+            StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Signed transaction sucessfully. Transaction is ready to broadcast.\"),\n+            StatusLevel::INFO);\n+        m_ui->broadcastTransactionButton->setEnabled(true);\n+    }\n+}\n+\n+void PSBTOperationsDialog::broadcastTransaction()\n+{\n+    CMutableTransaction mtx;\n+    if (!FinalizeAndExtractPSBT(m_transaction_data, mtx)) {\n+        // This is never expected to fail unless we were given a malformed PSBT\n+        // (e.g. with an invalid signature.)\n+        showStatus(tr(\"Unknown error processing transaction.\"), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    CTransactionRef tx = MakeTransactionRef(mtx);\n+    std::string err_string;\n+    TransactionError error = BroadcastTransaction(\n+        *m_client_model->node().context(), tx, err_string, COIN / 10, /* relay */ true, /* await_callback */ false);\n+\n+    if (error == TransactionError::OK) {\n+        showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")\n+            .arg(QString::fromStdString(tx->GetHash().GetHex())), StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Transaction broadcast failed: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(error))), StatusLevel::ERROR);\n+    }\n+}\n+\n+void PSBTOperationsDialog::copyToClipboard() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::saveTransaction() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+\n+    QString selected_filter;\n+    QString filename_suggestion = \"\";\n+    bool first = true;\n+    for (const CTxOut& out : m_transaction_data.tx->vout) {\n+        if (!first) {\n+            filename_suggestion.append(\"-\");\n+        }\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        QString amount = BitcoinUnits::format(m_wallet_model->getOptionsModel()->getDisplayUnit(), out.nValue);\n+        QString address_str = QString::fromStdString(EncodeDestination(address));\n+        filename_suggestion.append(address_str + \"-\" + amount);\n+        first = false;\n+    }\n+    filename_suggestion.append(\".psbt\");\n+    QString filename = GUIUtil::getSaveFileName(this,\n+        tr(\"Save Transaction Data\"), filename_suggestion,\n+        tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selected_filter);\n+    if (filename.isEmpty()) {\n+        return;\n+    }\n+    std::ofstream out(filename.toLocal8Bit().data());\n+    out << ssTx.str();\n+    out.close();\n+    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::updateTransactionDisplay() {\n+    m_ui->transactionDescription->setText(QString::fromStdString(renderTransaction(m_transaction_data)));\n+    showTransactionStatus(m_transaction_data);\n+}\n+\n+std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransaction &psbtx)\n+{\n+    QString tx_description = \"\";\n+    CAmount totalAmount = 0;\n+    for (const CTxOut& out : psbtx.tx->vout) {\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        totalAmount += out.nValue;\n+        tx_description.append(tr(\" * Sends %1 to %2\")\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(QString::fromStdString(EncodeDestination(address))));\n+        tx_description.append(\"<br>\");\n+    }\n+\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    tx_description.append(\" * \");\n+    if (!*analysis.fee) {\n+        // This happens if the transaction is missing input UTXO information.\n+        tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n+    } else {\n+        tx_description.append(tr(\"Pays transaction fee: \"));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+\n+        // add total amount in all subdivision units\n+        tx_description.append(\"<hr />\");\n+        QStringList alternativeUnits;\n+        for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+        {\n+            if(u != m_client_model->getOptionsModel()->getDisplayUnit())\n+                alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n+        }\n+        tx_description.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+            .arg(BitcoinUnits::formatHtmlWithUnit(m_client_model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n+        tx_description.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+            .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n+    }\n+\n+    size_t num_unsigned = CountPSBTUnsignedInputs(psbtx);\n+    if (num_unsigned > 0) {\n+        tx_description.append(\"<br><br>\");\n+        tx_description.append(tr(\"Transaction has %1 unsigned inputs.\").arg(QString::number(num_unsigned)));\n+    }\n+\n+    return tx_description.toStdString();\n+}\n+\n+void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372868419",
      "id" : 372868419,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2ODQxOQ==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 214,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : 203,
      "pull_request_review_id" : 350706469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372868419",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372871737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372871737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe move this to `psbt.h`?",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-01-30T10:33:14Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction &psbt) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372871737",
      "id" : 372871737,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3MTczNw==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 19,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : null,
      "pull_request_review_id" : 350706469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372871737",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18202 (refactor: consolidate sendmany and sendtoaddress code by Sjors)\n* #18115 (wallet: Pass in transactions and messages for signing instead of exporting the private keys by achow101)\n* #17509 (gui: save and load PSBT by Sjors)\n* #17463 (Bugfix: GUI: Restore SendConfirmationDialog button default to \"Yes\" by luke-jr)\n* #17457 (gui: Fix manual coin control with multiple wallets loaded by promag)\n* #17264 (rpc: set default bip32derivs to true for psbt methods by Sjors)\n* #16549 ([WIP] UI external signer support (e.g. hardware wallet) by Sjors)\n* #16546 ([WIP] External signer support - Wallet Box edition by Sjors)\n* #16528 (Native Descriptor Wallets using DescriptorScriptPubKeyMan by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-01-30T11:52:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580217825",
      "id" : 580217825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDIxNzgyNQ==",
      "updated_at" : "2020-02-24T21:34:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580217825",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373138329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373138329"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can do, was dithering about what to do with it.",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-01-30T19:08:54Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction &psbt) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373138329",
      "id" : 373138329,
      "in_reply_to_id" : 372871737,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzODMyOQ==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 19,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : null,
      "pull_request_review_id" : 351070912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373138329",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373138827"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373138827"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm happy to go either way, are there other existing dialogs we'd immediately want to adopt it for? I do like it better than messageboxes, I tried to make it as drop-in as possible a replacement for them.",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-01-30T19:09:50Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction &psbt) {\n+    size_t count = 0;\n+    for (const auto& input : psbt.inputs) {\n+        if (!PSBTInputSigned(input)) {\n+            count++;\n+        }\n+    }\n+\n+    return count;\n+}\n+\n+PSBTOperationsDialog::PSBTOperationsDialog(\n+    QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent),\n+                                                                             m_ui(new Ui::PSBTOperationsDialog),\n+                                                                             m_wallet_model(wallet_model),\n+                                                                             m_client_model(client_model)\n+{\n+    m_ui->setupUi(this);\n+    setWindowTitle(\"PSBT Operations\");\n+\n+    connect(m_ui->signTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::signTransaction);\n+    connect(m_ui->broadcastTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::broadcastTransaction);\n+    connect(m_ui->copyToClipboardButton, &QPushButton::clicked, this, &PSBTOperationsDialog::copyToClipboard);\n+    connect(m_ui->saveButton, &QPushButton::clicked, this, &PSBTOperationsDialog::saveTransaction);\n+\n+    connect(m_ui->closeButton, &QPushButton::clicked, this, &PSBTOperationsDialog::close);\n+\n+    m_ui->signTransactionButton->setEnabled(false);\n+    m_ui->broadcastTransactionButton->setEnabled(false);\n+}\n+\n+PSBTOperationsDialog::~PSBTOperationsDialog()\n+{\n+    delete m_ui;\n+}\n+\n+void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n+{\n+    m_transaction_data = psbtx;\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to load transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    m_ui->broadcastTransactionButton->setEnabled(complete);\n+    m_ui->signTransactionButton->setEnabled(!complete);\n+\n+    updateTransactionDisplay();\n+}\n+\n+void PSBTOperationsDialog::signTransaction()\n+{\n+    size_t unsigned_count = CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, true /* sign */, true /* bip32derivs */);\n+    size_t did_sign_count = unsigned_count - CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to sign transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    updateTransactionDisplay();\n+\n+    if (!complete && did_sign_count < 1) {\n+        showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARNING);\n+    } else if (!complete) {\n+        showStatus(tr(\"Signed transaction successfully, but more signatures are still required.\"),\n+            StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Signed transaction sucessfully. Transaction is ready to broadcast.\"),\n+            StatusLevel::INFO);\n+        m_ui->broadcastTransactionButton->setEnabled(true);\n+    }\n+}\n+\n+void PSBTOperationsDialog::broadcastTransaction()\n+{\n+    CMutableTransaction mtx;\n+    if (!FinalizeAndExtractPSBT(m_transaction_data, mtx)) {\n+        // This is never expected to fail unless we were given a malformed PSBT\n+        // (e.g. with an invalid signature.)\n+        showStatus(tr(\"Unknown error processing transaction.\"), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    CTransactionRef tx = MakeTransactionRef(mtx);\n+    std::string err_string;\n+    TransactionError error = BroadcastTransaction(\n+        *m_client_model->node().context(), tx, err_string, COIN / 10, /* relay */ true, /* await_callback */ false);\n+\n+    if (error == TransactionError::OK) {\n+        showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")\n+            .arg(QString::fromStdString(tx->GetHash().GetHex())), StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Transaction broadcast failed: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(error))), StatusLevel::ERROR);\n+    }\n+}\n+\n+void PSBTOperationsDialog::copyToClipboard() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::saveTransaction() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+\n+    QString selected_filter;\n+    QString filename_suggestion = \"\";\n+    bool first = true;\n+    for (const CTxOut& out : m_transaction_data.tx->vout) {\n+        if (!first) {\n+            filename_suggestion.append(\"-\");\n+        }\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        QString amount = BitcoinUnits::format(m_wallet_model->getOptionsModel()->getDisplayUnit(), out.nValue);\n+        QString address_str = QString::fromStdString(EncodeDestination(address));\n+        filename_suggestion.append(address_str + \"-\" + amount);\n+        first = false;\n+    }\n+    filename_suggestion.append(\".psbt\");\n+    QString filename = GUIUtil::getSaveFileName(this,\n+        tr(\"Save Transaction Data\"), filename_suggestion,\n+        tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selected_filter);\n+    if (filename.isEmpty()) {\n+        return;\n+    }\n+    std::ofstream out(filename.toLocal8Bit().data());\n+    out << ssTx.str();\n+    out.close();\n+    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::updateTransactionDisplay() {\n+    m_ui->transactionDescription->setText(QString::fromStdString(renderTransaction(m_transaction_data)));\n+    showTransactionStatus(m_transaction_data);\n+}\n+\n+std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransaction &psbtx)\n+{\n+    QString tx_description = \"\";\n+    CAmount totalAmount = 0;\n+    for (const CTxOut& out : psbtx.tx->vout) {\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        totalAmount += out.nValue;\n+        tx_description.append(tr(\" * Sends %1 to %2\")\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(QString::fromStdString(EncodeDestination(address))));\n+        tx_description.append(\"<br>\");\n+    }\n+\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    tx_description.append(\" * \");\n+    if (!*analysis.fee) {\n+        // This happens if the transaction is missing input UTXO information.\n+        tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n+    } else {\n+        tx_description.append(tr(\"Pays transaction fee: \"));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+\n+        // add total amount in all subdivision units\n+        tx_description.append(\"<hr />\");\n+        QStringList alternativeUnits;\n+        for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+        {\n+            if(u != m_client_model->getOptionsModel()->getDisplayUnit())\n+                alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n+        }\n+        tx_description.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+            .arg(BitcoinUnits::formatHtmlWithUnit(m_client_model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n+        tx_description.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+            .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n+    }\n+\n+    size_t num_unsigned = CountPSBTUnsignedInputs(psbtx);\n+    if (num_unsigned > 0) {\n+        tx_description.append(\"<br><br>\");\n+        tx_description.append(tr(\"Transaction has %1 unsigned inputs.\").arg(QString::number(num_unsigned)));\n+    }\n+\n+    return tx_description.toStdString();\n+}\n+\n+void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373138827",
      "id" : 373138827,
      "in_reply_to_id" : 372868419,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzODgyNw==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 214,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : 203,
      "pull_request_review_id" : 351071556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373138827",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373139535"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373139535"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That would make sense actually, yeah. I could move them to wherever AnalyzePSBT is. What would the impact of this be on translation issues? I know that tr() is only used for GUI strings, and _() is used for non-GUI strings -- is there precedent for shared strings?",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-01-30T19:11:12Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction &psbt) {\n+    size_t count = 0;\n+    for (const auto& input : psbt.inputs) {\n+        if (!PSBTInputSigned(input)) {\n+            count++;\n+        }\n+    }\n+\n+    return count;\n+}\n+\n+PSBTOperationsDialog::PSBTOperationsDialog(\n+    QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent),\n+                                                                             m_ui(new Ui::PSBTOperationsDialog),\n+                                                                             m_wallet_model(wallet_model),\n+                                                                             m_client_model(client_model)\n+{\n+    m_ui->setupUi(this);\n+    setWindowTitle(\"PSBT Operations\");\n+\n+    connect(m_ui->signTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::signTransaction);\n+    connect(m_ui->broadcastTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::broadcastTransaction);\n+    connect(m_ui->copyToClipboardButton, &QPushButton::clicked, this, &PSBTOperationsDialog::copyToClipboard);\n+    connect(m_ui->saveButton, &QPushButton::clicked, this, &PSBTOperationsDialog::saveTransaction);\n+\n+    connect(m_ui->closeButton, &QPushButton::clicked, this, &PSBTOperationsDialog::close);\n+\n+    m_ui->signTransactionButton->setEnabled(false);\n+    m_ui->broadcastTransactionButton->setEnabled(false);\n+}\n+\n+PSBTOperationsDialog::~PSBTOperationsDialog()\n+{\n+    delete m_ui;\n+}\n+\n+void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n+{\n+    m_transaction_data = psbtx;\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to load transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    m_ui->broadcastTransactionButton->setEnabled(complete);\n+    m_ui->signTransactionButton->setEnabled(!complete);\n+\n+    updateTransactionDisplay();\n+}\n+\n+void PSBTOperationsDialog::signTransaction()\n+{\n+    size_t unsigned_count = CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, true /* sign */, true /* bip32derivs */);\n+    size_t did_sign_count = unsigned_count - CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to sign transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    updateTransactionDisplay();\n+\n+    if (!complete && did_sign_count < 1) {\n+        showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARNING);\n+    } else if (!complete) {\n+        showStatus(tr(\"Signed transaction successfully, but more signatures are still required.\"),\n+            StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Signed transaction sucessfully. Transaction is ready to broadcast.\"),\n+            StatusLevel::INFO);\n+        m_ui->broadcastTransactionButton->setEnabled(true);\n+    }\n+}\n+\n+void PSBTOperationsDialog::broadcastTransaction()\n+{\n+    CMutableTransaction mtx;\n+    if (!FinalizeAndExtractPSBT(m_transaction_data, mtx)) {\n+        // This is never expected to fail unless we were given a malformed PSBT\n+        // (e.g. with an invalid signature.)\n+        showStatus(tr(\"Unknown error processing transaction.\"), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    CTransactionRef tx = MakeTransactionRef(mtx);\n+    std::string err_string;\n+    TransactionError error = BroadcastTransaction(\n+        *m_client_model->node().context(), tx, err_string, COIN / 10, /* relay */ true, /* await_callback */ false);\n+\n+    if (error == TransactionError::OK) {\n+        showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")\n+            .arg(QString::fromStdString(tx->GetHash().GetHex())), StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Transaction broadcast failed: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(error))), StatusLevel::ERROR);\n+    }\n+}\n+\n+void PSBTOperationsDialog::copyToClipboard() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::saveTransaction() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+\n+    QString selected_filter;\n+    QString filename_suggestion = \"\";\n+    bool first = true;\n+    for (const CTxOut& out : m_transaction_data.tx->vout) {\n+        if (!first) {\n+            filename_suggestion.append(\"-\");\n+        }\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        QString amount = BitcoinUnits::format(m_wallet_model->getOptionsModel()->getDisplayUnit(), out.nValue);\n+        QString address_str = QString::fromStdString(EncodeDestination(address));\n+        filename_suggestion.append(address_str + \"-\" + amount);\n+        first = false;\n+    }\n+    filename_suggestion.append(\".psbt\");\n+    QString filename = GUIUtil::getSaveFileName(this,\n+        tr(\"Save Transaction Data\"), filename_suggestion,\n+        tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selected_filter);\n+    if (filename.isEmpty()) {\n+        return;\n+    }\n+    std::ofstream out(filename.toLocal8Bit().data());\n+    out << ssTx.str();\n+    out.close();\n+    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::updateTransactionDisplay() {\n+    m_ui->transactionDescription->setText(QString::fromStdString(renderTransaction(m_transaction_data)));\n+    showTransactionStatus(m_transaction_data);\n+}\n+\n+std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransaction &psbtx)\n+{\n+    QString tx_description = \"\";\n+    CAmount totalAmount = 0;\n+    for (const CTxOut& out : psbtx.tx->vout) {\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        totalAmount += out.nValue;\n+        tx_description.append(tr(\" * Sends %1 to %2\")\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(QString::fromStdString(EncodeDestination(address))));\n+        tx_description.append(\"<br>\");\n+    }\n+\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    tx_description.append(\" * \");\n+    if (!*analysis.fee) {\n+        // This happens if the transaction is missing input UTXO information.\n+        tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n+    } else {\n+        tx_description.append(tr(\"Pays transaction fee: \"));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+\n+        // add total amount in all subdivision units\n+        tx_description.append(\"<hr />\");\n+        QStringList alternativeUnits;\n+        for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+        {\n+            if(u != m_client_model->getOptionsModel()->getDisplayUnit())\n+                alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n+        }\n+        tx_description.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+            .arg(BitcoinUnits::formatHtmlWithUnit(m_client_model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n+        tx_description.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+            .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n+    }\n+\n+    size_t num_unsigned = CountPSBTUnsignedInputs(psbtx);\n+    if (num_unsigned > 0) {\n+        tx_description.append(\"<br><br>\");\n+        tx_description.append(tr(\"Transaction has %1 unsigned inputs.\").arg(QString::number(num_unsigned)));\n+    }\n+\n+    return tx_description.toStdString();\n+}\n+\n+void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {\n+    m_ui->statusBar->setText(msg);\n+    switch (level) {\n+        case StatusLevel::INFO: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : lightgreen }\");\n+            break;\n+        }\n+        case StatusLevel::WARNING: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : orange }\");\n+            break;\n+        }\n+        case StatusLevel::ERROR: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : red }\");\n+            break;\n+        }\n+    }\n+    m_ui->statusBar->show();\n+}\n+\n+void PSBTOperationsDialog::showTransactionStatus(const PartiallySignedTransaction &psbtx) {\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+\n+    switch (analysis.next) {\n+        case PSBTRole::UPDATER: {\n+            showStatus(tr(\"Transaction is missing some information about inputs.\"), StatusLevel::WARNING);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373139535",
      "id" : 373139535,
      "in_reply_to_id" : 372867561,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzOTUzNQ==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 238,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : null,
      "pull_request_review_id" : 351072436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373139535",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373139630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373139630"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, agreed, will fix.",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-01-30T19:11:24Z",
      "diff_hunk" : "@@ -14,7 +14,7 @@ std::string TransactionErrorString(const TransactionError err)\n         case TransactionError::OK:\n             return \"No error\";\n         case TransactionError::MISSING_INPUTS:\n-            return \"Missing inputs\";\n+            return \"Inputs missing or spent\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373139630",
      "id" : 373139630,
      "in_reply_to_id" : 372862556,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzOTYzMA==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 5,
      "path" : "src/util/error.cpp",
      "position" : 5,
      "pull_request_review_id" : 351072541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373139630",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Ideally disable the sign button if there's nothing we can sign.\r\n\r\nCan I determine that without actually trying to sign? I was assuming that (1) I cannot, and (2) I shouldn't try to actually sign for real just to see if it works.  (Or do you mean just disable the button at the point where we are asked to sign, try, and fail?)\r\n\r\n> Currently this only changes the Load PSBT flow. Do you also want to apply this dialog to the send / bump fee flow? I'm fine with doing that later too.\r\n\r\nI'd rather do that separately, I am trying _really_ hard to cure myself of the disease of biting off way more than I can reasonably do in one go.\r\n\r\n> You could also add a menu option to open a PSBT that's currently on the clipboard (e.g. handy when you need to save it as binary).\r\n\r\nThis I'd be happy to add, since it's a very small change. Just another item below \"Load PSBT...\", perhaps \"Load PSBT from clipboard...\"?",
      "created_at" : "2020-01-30T19:14:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580409421",
      "id" : 580409421,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDQwOTQyMQ==",
      "updated_at" : "2020-01-30T19:14:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580409421",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I indeed wouldn't try actually signing. But you e.g. tell if a wallet is watch-only, and the new ScriptPubKeyManager's can tell if they can sign for things.",
      "created_at" : "2020-01-30T19:17:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580410733",
      "id" : 580410733,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDQxMDczMw==",
      "updated_at" : "2020-01-30T19:17:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580410733",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Aha, and the Travis failure is the same issue we were talking about yesterday in #bitcoin-core-dev, I got scooped by #17261 and need to rebase again and fix errors, will do. EDIT: Oh, I think actually the Travis failure is just _because_ master was already failing Travis at the moment I made the PR. So I think it will pass as soon as I push again.",
      "created_at" : "2020-01-30T19:17:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580410894",
      "id" : 580410894,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDQxMDg5NA==",
      "updated_at" : "2020-01-31T23:21:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580410894",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373738096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373738096"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-02-01T00:17:43Z",
      "diff_hunk" : "@@ -0,0 +1,52 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373738096",
      "id" : 373738096,
      "in_reply_to_id" : 372859805,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczODA5Ng==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 1,
      "path" : "src/qt/psbtoperationsdialog.h",
      "position" : null,
      "pull_request_review_id" : 351844185,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373738096",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373738183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373738183"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just went with L -- it's hard for me to check what's going on here since I'm on a Mac, but I don't see it as being taken. (I didn't add a shortcut for loading from clipboard, since L is taken, C is taken, I could use P for PSBT but it seems kind of unnatural.",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-02-01T00:18:22Z",
      "diff_hunk" : "@@ -317,6 +317,8 @@ void BitcoinGUI::createActions()\n     signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n     verifyMessageAction = new QAction(tr(\"&Verify message...\"), this);\n     verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n+    m_load_psbt_action = new QAction(tr(\"Load PSBT...\"), this);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373738183",
      "id" : 373738183,
      "in_reply_to_id" : 372859156,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczODE4Mw==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 4,
      "path" : "src/qt/bitcoingui.cpp",
      "position" : null,
      "pull_request_review_id" : 351844288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373738183",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, I'm adding a check so that we do not enable the sign button (and we show a helpful note) if the current wallet is privateKeysDisabled().\r\n\r\nI would like to use ScriptPubKeyMan to get a better verdict, but it doesn't seem like the functionality I need is quite there. It looks like what I want is something like CWallet::GetSigningProvider, which calls CanProvide on each ScriptPubKeyMan in the wallet; except that the implementation of LegacyScriptPubKeyMan::CanProvide looks like it can return true in cases where we can't actually sign, but \"We can still provide some stuff if we have the script\". So I can't tell if there's a call I can make that just answers the question \"do we believe that this wallet can sign\", without myself looping over all our ScriptPubKeyMans, and trying ProduceSignature with each with a DUMMY_SIGNATURE_CREATOR. Obviously if this is true, a better approach would be to enhance the CWallet/ScriptPubKeyMan interface to provide this, but I think that's best left for another PR. (Or if this is already provided and I'm not seeing how, please fill me in.)",
      "created_at" : "2020-02-01T00:36:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580968561",
      "id" : 580968561,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDk2ODU2MQ==",
      "updated_at" : "2020-02-01T00:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580968561",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Actually, here's an approach that seems like it should work -- FillPSBT already does basically all this work for us, since it does all the signing using a HidingSigningProvider, and allows us to tell it not to sign. So _if_ I correctly understand the behavior of HidingSigningProvider, I think this should already tell us how many inputs we could sign, it just doesn't expose the result. If that seems correct to you, I can expose that from FillPSBT, and determine that way where there's anything for us to do here. @Sjors do you know whether this sounds correct?\r\n\r\nEDIT: No, this does not work. LegacyScriptPubKeyMan::CanProvide is playing some clever games with ProduceSignature in order to answer the \"could we sign\" question, and I don't want to duplicate those clever games into the PSBT logic.\r\n\r\nSON OF EDIT: Ok, a slightly different method _does_ work -- in FillPSBT we can effectively check whether keys are available by whether pwallet->GetSigningProvider returns anything. This ultimately calls LegacyScriptPubKeyMan::CanProvide, which has the apparent issue I described above -- it says it returns true if we don't have keys, but we do have the script -- but I don't understand exactly what that means to try to produce an example that would confuse it.\r\n\r\nI do at least have something that works on the obvious cases now.",
      "created_at" : "2020-02-01T00:48:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580970228",
      "id" : 580970228,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDk3MDIyOA==",
      "updated_at" : "2020-02-01T01:41:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580970228",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated:\r\n* Disable sign button unless !privateKeysDisabled() and GetSigningProvider() != nullptr (I'm not sure how perfect a proxy that is for \"we can sign\" but it worked on my positive and negative test cases.)\r\n* Added \"load from clipboard\" option.\r\n* Added shortcut key in menu.\r\n* Separated error message fixes into their own commit.\r\n* Moved CountPSBTUnsignedInputs into psbt.h.\r\n\r\nDid not change:\r\n* Send/bumpfee flow (would rather save for another PR)\r\n* Factoring out PSBT completeness description strings (not a bad idea, but could someone advise me on how that interacts with translation?)\r\n* Factoring out \"OperationsDialog\" (would probably rather save for another PR, and would like to understand where else we might use it first.)\r\n\r\nOther notes:\r\n* Regarding the transient error Sjors got when clicking the menu item, all I can find when googling is that it's some transient issue that shows up for some people on OS X Catalina in multiple apps, with no obvious cause. I have no real insight there.\r\n\r\nPlease take another look?",
      "created_at" : "2020-02-01T02:58:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580983817",
      "id" : 580983817,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MDk4MzgxNw==",
      "updated_at" : "2020-02-01T02:58:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580983817",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373786367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373786367"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure actually. @laanwj, @hebasto?",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-02-01T15:45:23Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction &psbt) {\n+    size_t count = 0;\n+    for (const auto& input : psbt.inputs) {\n+        if (!PSBTInputSigned(input)) {\n+            count++;\n+        }\n+    }\n+\n+    return count;\n+}\n+\n+PSBTOperationsDialog::PSBTOperationsDialog(\n+    QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent),\n+                                                                             m_ui(new Ui::PSBTOperationsDialog),\n+                                                                             m_wallet_model(wallet_model),\n+                                                                             m_client_model(client_model)\n+{\n+    m_ui->setupUi(this);\n+    setWindowTitle(\"PSBT Operations\");\n+\n+    connect(m_ui->signTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::signTransaction);\n+    connect(m_ui->broadcastTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::broadcastTransaction);\n+    connect(m_ui->copyToClipboardButton, &QPushButton::clicked, this, &PSBTOperationsDialog::copyToClipboard);\n+    connect(m_ui->saveButton, &QPushButton::clicked, this, &PSBTOperationsDialog::saveTransaction);\n+\n+    connect(m_ui->closeButton, &QPushButton::clicked, this, &PSBTOperationsDialog::close);\n+\n+    m_ui->signTransactionButton->setEnabled(false);\n+    m_ui->broadcastTransactionButton->setEnabled(false);\n+}\n+\n+PSBTOperationsDialog::~PSBTOperationsDialog()\n+{\n+    delete m_ui;\n+}\n+\n+void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n+{\n+    m_transaction_data = psbtx;\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to load transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    m_ui->broadcastTransactionButton->setEnabled(complete);\n+    m_ui->signTransactionButton->setEnabled(!complete);\n+\n+    updateTransactionDisplay();\n+}\n+\n+void PSBTOperationsDialog::signTransaction()\n+{\n+    size_t unsigned_count = CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, true /* sign */, true /* bip32derivs */);\n+    size_t did_sign_count = unsigned_count - CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to sign transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    updateTransactionDisplay();\n+\n+    if (!complete && did_sign_count < 1) {\n+        showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARNING);\n+    } else if (!complete) {\n+        showStatus(tr(\"Signed transaction successfully, but more signatures are still required.\"),\n+            StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Signed transaction sucessfully. Transaction is ready to broadcast.\"),\n+            StatusLevel::INFO);\n+        m_ui->broadcastTransactionButton->setEnabled(true);\n+    }\n+}\n+\n+void PSBTOperationsDialog::broadcastTransaction()\n+{\n+    CMutableTransaction mtx;\n+    if (!FinalizeAndExtractPSBT(m_transaction_data, mtx)) {\n+        // This is never expected to fail unless we were given a malformed PSBT\n+        // (e.g. with an invalid signature.)\n+        showStatus(tr(\"Unknown error processing transaction.\"), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    CTransactionRef tx = MakeTransactionRef(mtx);\n+    std::string err_string;\n+    TransactionError error = BroadcastTransaction(\n+        *m_client_model->node().context(), tx, err_string, COIN / 10, /* relay */ true, /* await_callback */ false);\n+\n+    if (error == TransactionError::OK) {\n+        showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")\n+            .arg(QString::fromStdString(tx->GetHash().GetHex())), StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Transaction broadcast failed: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(error))), StatusLevel::ERROR);\n+    }\n+}\n+\n+void PSBTOperationsDialog::copyToClipboard() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::saveTransaction() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+\n+    QString selected_filter;\n+    QString filename_suggestion = \"\";\n+    bool first = true;\n+    for (const CTxOut& out : m_transaction_data.tx->vout) {\n+        if (!first) {\n+            filename_suggestion.append(\"-\");\n+        }\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        QString amount = BitcoinUnits::format(m_wallet_model->getOptionsModel()->getDisplayUnit(), out.nValue);\n+        QString address_str = QString::fromStdString(EncodeDestination(address));\n+        filename_suggestion.append(address_str + \"-\" + amount);\n+        first = false;\n+    }\n+    filename_suggestion.append(\".psbt\");\n+    QString filename = GUIUtil::getSaveFileName(this,\n+        tr(\"Save Transaction Data\"), filename_suggestion,\n+        tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selected_filter);\n+    if (filename.isEmpty()) {\n+        return;\n+    }\n+    std::ofstream out(filename.toLocal8Bit().data());\n+    out << ssTx.str();\n+    out.close();\n+    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::updateTransactionDisplay() {\n+    m_ui->transactionDescription->setText(QString::fromStdString(renderTransaction(m_transaction_data)));\n+    showTransactionStatus(m_transaction_data);\n+}\n+\n+std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransaction &psbtx)\n+{\n+    QString tx_description = \"\";\n+    CAmount totalAmount = 0;\n+    for (const CTxOut& out : psbtx.tx->vout) {\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        totalAmount += out.nValue;\n+        tx_description.append(tr(\" * Sends %1 to %2\")\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(QString::fromStdString(EncodeDestination(address))));\n+        tx_description.append(\"<br>\");\n+    }\n+\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    tx_description.append(\" * \");\n+    if (!*analysis.fee) {\n+        // This happens if the transaction is missing input UTXO information.\n+        tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n+    } else {\n+        tx_description.append(tr(\"Pays transaction fee: \"));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+\n+        // add total amount in all subdivision units\n+        tx_description.append(\"<hr />\");\n+        QStringList alternativeUnits;\n+        for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+        {\n+            if(u != m_client_model->getOptionsModel()->getDisplayUnit())\n+                alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n+        }\n+        tx_description.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+            .arg(BitcoinUnits::formatHtmlWithUnit(m_client_model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n+        tx_description.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+            .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n+    }\n+\n+    size_t num_unsigned = CountPSBTUnsignedInputs(psbtx);\n+    if (num_unsigned > 0) {\n+        tx_description.append(\"<br><br>\");\n+        tx_description.append(tr(\"Transaction has %1 unsigned inputs.\").arg(QString::number(num_unsigned)));\n+    }\n+\n+    return tx_description.toStdString();\n+}\n+\n+void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {\n+    m_ui->statusBar->setText(msg);\n+    switch (level) {\n+        case StatusLevel::INFO: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : lightgreen }\");\n+            break;\n+        }\n+        case StatusLevel::WARNING: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : orange }\");\n+            break;\n+        }\n+        case StatusLevel::ERROR: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : red }\");\n+            break;\n+        }\n+    }\n+    m_ui->statusBar->show();\n+}\n+\n+void PSBTOperationsDialog::showTransactionStatus(const PartiallySignedTransaction &psbtx) {\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+\n+    switch (analysis.next) {\n+        case PSBTRole::UPDATER: {\n+            showStatus(tr(\"Transaction is missing some information about inputs.\"), StatusLevel::WARNING);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373786367",
      "id" : 373786367,
      "in_reply_to_id" : 372867561,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc4NjM2Nw==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 238,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : null,
      "pull_request_review_id" : 351890110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373786367",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373790520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373790520"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@gwillen \r\n> I know that tr() is only used for GUI strings, and _() is used for non-GUI strings -- is there precedent for shared strings?\r\n\r\nActually, `bilingual_str` type from `util/translation.h` supports both original and translated strings. More details are available in #16362 and #16224.\r\n\r\nYou could use something like this:\r\n\r\n```\r\n#include <util/translation.h>\r\n\r\nbilingual_str bs = _(\"Transaction is missing some information about inputs.\");\r\nshowStatus(bs.translated, StatusLevel::WARNING);\r\nLogPrintf(bs.original);\r\n```\r\n",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-02-01T17:10:52Z",
      "diff_hunk" : "@@ -0,0 +1,255 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction &psbt) {\n+    size_t count = 0;\n+    for (const auto& input : psbt.inputs) {\n+        if (!PSBTInputSigned(input)) {\n+            count++;\n+        }\n+    }\n+\n+    return count;\n+}\n+\n+PSBTOperationsDialog::PSBTOperationsDialog(\n+    QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent),\n+                                                                             m_ui(new Ui::PSBTOperationsDialog),\n+                                                                             m_wallet_model(wallet_model),\n+                                                                             m_client_model(client_model)\n+{\n+    m_ui->setupUi(this);\n+    setWindowTitle(\"PSBT Operations\");\n+\n+    connect(m_ui->signTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::signTransaction);\n+    connect(m_ui->broadcastTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::broadcastTransaction);\n+    connect(m_ui->copyToClipboardButton, &QPushButton::clicked, this, &PSBTOperationsDialog::copyToClipboard);\n+    connect(m_ui->saveButton, &QPushButton::clicked, this, &PSBTOperationsDialog::saveTransaction);\n+\n+    connect(m_ui->closeButton, &QPushButton::clicked, this, &PSBTOperationsDialog::close);\n+\n+    m_ui->signTransactionButton->setEnabled(false);\n+    m_ui->broadcastTransactionButton->setEnabled(false);\n+}\n+\n+PSBTOperationsDialog::~PSBTOperationsDialog()\n+{\n+    delete m_ui;\n+}\n+\n+void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n+{\n+    m_transaction_data = psbtx;\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to load transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    m_ui->broadcastTransactionButton->setEnabled(complete);\n+    m_ui->signTransactionButton->setEnabled(!complete);\n+\n+    updateTransactionDisplay();\n+}\n+\n+void PSBTOperationsDialog::signTransaction()\n+{\n+    size_t unsigned_count = CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, true /* sign */, true /* bip32derivs */);\n+    size_t did_sign_count = unsigned_count - CountPSBTUnsignedInputs(m_transaction_data);\n+\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to sign transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    updateTransactionDisplay();\n+\n+    if (!complete && did_sign_count < 1) {\n+        showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARNING);\n+    } else if (!complete) {\n+        showStatus(tr(\"Signed transaction successfully, but more signatures are still required.\"),\n+            StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Signed transaction sucessfully. Transaction is ready to broadcast.\"),\n+            StatusLevel::INFO);\n+        m_ui->broadcastTransactionButton->setEnabled(true);\n+    }\n+}\n+\n+void PSBTOperationsDialog::broadcastTransaction()\n+{\n+    CMutableTransaction mtx;\n+    if (!FinalizeAndExtractPSBT(m_transaction_data, mtx)) {\n+        // This is never expected to fail unless we were given a malformed PSBT\n+        // (e.g. with an invalid signature.)\n+        showStatus(tr(\"Unknown error processing transaction.\"), StatusLevel::ERROR);\n+        return;\n+    }\n+\n+    CTransactionRef tx = MakeTransactionRef(mtx);\n+    std::string err_string;\n+    TransactionError error = BroadcastTransaction(\n+        *m_client_model->node().context(), tx, err_string, COIN / 10, /* relay */ true, /* await_callback */ false);\n+\n+    if (error == TransactionError::OK) {\n+        showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")\n+            .arg(QString::fromStdString(tx->GetHash().GetHex())), StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Transaction broadcast failed: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(error))), StatusLevel::ERROR);\n+    }\n+}\n+\n+void PSBTOperationsDialog::copyToClipboard() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::saveTransaction() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+\n+    QString selected_filter;\n+    QString filename_suggestion = \"\";\n+    bool first = true;\n+    for (const CTxOut& out : m_transaction_data.tx->vout) {\n+        if (!first) {\n+            filename_suggestion.append(\"-\");\n+        }\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        QString amount = BitcoinUnits::format(m_wallet_model->getOptionsModel()->getDisplayUnit(), out.nValue);\n+        QString address_str = QString::fromStdString(EncodeDestination(address));\n+        filename_suggestion.append(address_str + \"-\" + amount);\n+        first = false;\n+    }\n+    filename_suggestion.append(\".psbt\");\n+    QString filename = GUIUtil::getSaveFileName(this,\n+        tr(\"Save Transaction Data\"), filename_suggestion,\n+        tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selected_filter);\n+    if (filename.isEmpty()) {\n+        return;\n+    }\n+    std::ofstream out(filename.toLocal8Bit().data());\n+    out << ssTx.str();\n+    out.close();\n+    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::updateTransactionDisplay() {\n+    m_ui->transactionDescription->setText(QString::fromStdString(renderTransaction(m_transaction_data)));\n+    showTransactionStatus(m_transaction_data);\n+}\n+\n+std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransaction &psbtx)\n+{\n+    QString tx_description = \"\";\n+    CAmount totalAmount = 0;\n+    for (const CTxOut& out : psbtx.tx->vout) {\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        totalAmount += out.nValue;\n+        tx_description.append(tr(\" * Sends %1 to %2\")\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(QString::fromStdString(EncodeDestination(address))));\n+        tx_description.append(\"<br>\");\n+    }\n+\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    tx_description.append(\" * \");\n+    if (!*analysis.fee) {\n+        // This happens if the transaction is missing input UTXO information.\n+        tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n+    } else {\n+        tx_description.append(tr(\"Pays transaction fee: \"));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+\n+        // add total amount in all subdivision units\n+        tx_description.append(\"<hr />\");\n+        QStringList alternativeUnits;\n+        for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+        {\n+            if(u != m_client_model->getOptionsModel()->getDisplayUnit())\n+                alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n+        }\n+        tx_description.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+            .arg(BitcoinUnits::formatHtmlWithUnit(m_client_model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n+        tx_description.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+            .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n+    }\n+\n+    size_t num_unsigned = CountPSBTUnsignedInputs(psbtx);\n+    if (num_unsigned > 0) {\n+        tx_description.append(\"<br><br>\");\n+        tx_description.append(tr(\"Transaction has %1 unsigned inputs.\").arg(QString::number(num_unsigned)));\n+    }\n+\n+    return tx_description.toStdString();\n+}\n+\n+void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {\n+    m_ui->statusBar->setText(msg);\n+    switch (level) {\n+        case StatusLevel::INFO: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : lightgreen }\");\n+            break;\n+        }\n+        case StatusLevel::WARNING: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : orange }\");\n+            break;\n+        }\n+        case StatusLevel::ERROR: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : red }\");\n+            break;\n+        }\n+    }\n+    m_ui->statusBar->show();\n+}\n+\n+void PSBTOperationsDialog::showTransactionStatus(const PartiallySignedTransaction &psbtx) {\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+\n+    switch (analysis.next) {\n+        case PSBTRole::UPDATER: {\n+            showStatus(tr(\"Transaction is missing some information about inputs.\"), StatusLevel::WARNING);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373790520",
      "id" : 373790520,
      "in_reply_to_id" : 372867561,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MDUyMA==",
      "original_commit_id" : "b58e6f70f99d650a8e6ef4a081641a332cf8748e",
      "original_position" : 238,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : null,
      "pull_request_review_id" : 351893983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-08T00:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373790520",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2020-02-03T00:51:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-581198012",
      "id" : 581198012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MTE5ODAxMg==",
      "updated_at" : "2020-02-03T00:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/581198012",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Speculatively attempting to fix the Windows-only fails without a Windows machine to test on. It looks like MinGW defines \"ERROR\" as a macro, so I can't give an enum constant that name. And it looks like the Visual Studio project file for building Bitcoin-QT is not autogenerated from the Makefiles, but has to be manually updated, so I've attempted to update it.",
      "created_at" : "2020-02-08T00:27:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-583673272",
      "id" : 583673272,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MzY3MzI3Mg==",
      "updated_at" : "2020-02-08T00:27:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/583673272",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r377127607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377127607"
         }
      },
      "author_association" : "MEMBER",
      "body" : "When all inputs have `\"next\": \"finalizer\"` the transaction itself may still be `\"next\": \"signer\"`. This seems to be a bug (@achow101 or feature?) in `analyzepsbt`. If it's a bug, we can ignore it for this PR, if it's a feature, we should handle it, though imo it can wait for a followup.",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-02-10T15:20:53Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+\n+PSBTOperationsDialog::PSBTOperationsDialog(\n+    QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent),\n+                                                                             m_ui(new Ui::PSBTOperationsDialog),\n+                                                                             m_wallet_model(wallet_model),\n+                                                                             m_client_model(client_model)\n+{\n+    m_ui->setupUi(this);\n+    setWindowTitle(\"PSBT Operations\");\n+\n+    connect(m_ui->signTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::signTransaction);\n+    connect(m_ui->broadcastTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::broadcastTransaction);\n+    connect(m_ui->copyToClipboardButton, &QPushButton::clicked, this, &PSBTOperationsDialog::copyToClipboard);\n+    connect(m_ui->saveButton, &QPushButton::clicked, this, &PSBTOperationsDialog::saveTransaction);\n+\n+    connect(m_ui->closeButton, &QPushButton::clicked, this, &PSBTOperationsDialog::close);\n+\n+    m_ui->signTransactionButton->setEnabled(false);\n+    m_ui->broadcastTransactionButton->setEnabled(false);\n+}\n+\n+PSBTOperationsDialog::~PSBTOperationsDialog()\n+{\n+    delete m_ui;\n+}\n+\n+void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n+{\n+    m_transaction_data = psbtx;\n+\n+    bool complete;\n+    size_t n_could_sign;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */, &n_could_sign);\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to load transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    m_ui->broadcastTransactionButton->setEnabled(complete);\n+    m_ui->signTransactionButton->setEnabled(!complete && !m_wallet_model->privateKeysDisabled() && n_could_sign > 0);\n+\n+    updateTransactionDisplay();\n+}\n+\n+void PSBTOperationsDialog::signTransaction()\n+{\n+    bool complete;\n+    size_t n_signed;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, true /* sign */, true /* bip32derivs */, &n_signed);\n+\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to sign transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    updateTransactionDisplay();\n+\n+    if (!complete && n_signed < 1) {\n+        showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARN);\n+    } else if (!complete) {\n+        showStatus(tr(\"Signed %1 inputs, but more signatures are still required.\").arg(n_signed),\n+            StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Signed transaction sucessfully. Transaction is ready to broadcast.\"),\n+            StatusLevel::INFO);\n+        m_ui->broadcastTransactionButton->setEnabled(true);\n+    }\n+}\n+\n+void PSBTOperationsDialog::broadcastTransaction()\n+{\n+    CMutableTransaction mtx;\n+    if (!FinalizeAndExtractPSBT(m_transaction_data, mtx)) {\n+        // This is never expected to fail unless we were given a malformed PSBT\n+        // (e.g. with an invalid signature.)\n+        showStatus(tr(\"Unknown error processing transaction.\"), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    CTransactionRef tx = MakeTransactionRef(mtx);\n+    std::string err_string;\n+    TransactionError error = BroadcastTransaction(\n+        *m_client_model->node().context(), tx, err_string, COIN / 10, /* relay */ true, /* await_callback */ false);\n+\n+    if (error == TransactionError::OK) {\n+        showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")\n+            .arg(QString::fromStdString(tx->GetHash().GetHex())), StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Transaction broadcast failed: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(error))), StatusLevel::ERR);\n+    }\n+}\n+\n+void PSBTOperationsDialog::copyToClipboard() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::saveTransaction() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+\n+    QString selected_filter;\n+    QString filename_suggestion = \"\";\n+    bool first = true;\n+    for (const CTxOut& out : m_transaction_data.tx->vout) {\n+        if (!first) {\n+            filename_suggestion.append(\"-\");\n+        }\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        QString amount = BitcoinUnits::format(m_wallet_model->getOptionsModel()->getDisplayUnit(), out.nValue);\n+        QString address_str = QString::fromStdString(EncodeDestination(address));\n+        filename_suggestion.append(address_str + \"-\" + amount);\n+        first = false;\n+    }\n+    filename_suggestion.append(\".psbt\");\n+    QString filename = GUIUtil::getSaveFileName(this,\n+        tr(\"Save Transaction Data\"), filename_suggestion,\n+        tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selected_filter);\n+    if (filename.isEmpty()) {\n+        return;\n+    }\n+    std::ofstream out(filename.toLocal8Bit().data());\n+    out << ssTx.str();\n+    out.close();\n+    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::updateTransactionDisplay() {\n+    m_ui->transactionDescription->setText(QString::fromStdString(renderTransaction(m_transaction_data)));\n+    showTransactionStatus(m_transaction_data);\n+}\n+\n+std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransaction &psbtx)\n+{\n+    QString tx_description = \"\";\n+    CAmount totalAmount = 0;\n+    for (const CTxOut& out : psbtx.tx->vout) {\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        totalAmount += out.nValue;\n+        tx_description.append(tr(\" * Sends %1 to %2\")\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(QString::fromStdString(EncodeDestination(address))));\n+        tx_description.append(\"<br>\");\n+    }\n+\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    tx_description.append(\" * \");\n+    if (!*analysis.fee) {\n+        // This happens if the transaction is missing input UTXO information.\n+        tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n+    } else {\n+        tx_description.append(tr(\"Pays transaction fee: \"));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+\n+        // add total amount in all subdivision units\n+        tx_description.append(\"<hr />\");\n+        QStringList alternativeUnits;\n+        for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+        {\n+            if(u != m_client_model->getOptionsModel()->getDisplayUnit())\n+                alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n+        }\n+        tx_description.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+            .arg(BitcoinUnits::formatHtmlWithUnit(m_client_model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n+        tx_description.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+            .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n+    }\n+\n+    size_t num_unsigned = CountPSBTUnsignedInputs(psbtx);\n+    if (num_unsigned > 0) {\n+        tx_description.append(\"<br><br>\");\n+        tx_description.append(tr(\"Transaction has %1 unsigned inputs.\").arg(QString::number(num_unsigned)));\n+    }\n+\n+    return tx_description.toStdString();\n+}\n+\n+void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {\n+    m_ui->statusBar->setText(msg);\n+    switch (level) {\n+        case StatusLevel::INFO: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : lightgreen }\");\n+            break;\n+        }\n+        case StatusLevel::WARN: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : orange }\");\n+            break;\n+        }\n+        case StatusLevel::ERR: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : red }\");\n+            break;\n+        }\n+    }\n+    m_ui->statusBar->show();\n+}\n+\n+size_t PSBTOperationsDialog::couldSignInputs(const PartiallySignedTransaction &psbtx) {\n+    size_t n_signed;\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, false /* bip32derivs */, &n_signed);\n+\n+    if (err != TransactionError::OK) {\n+        return 0;\n+    }\n+    return n_signed;\n+}\n+\n+void PSBTOperationsDialog::showTransactionStatus(const PartiallySignedTransaction &psbtx) {\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    size_t n_could_sign = couldSignInputs(psbtx);\n+\n+    switch (analysis.next) {\n+        case PSBTRole::UPDATER: {\n+            showStatus(tr(\"Transaction is missing some information about inputs.\"), StatusLevel::WARN);\n+            break;\n+        }\n+        case PSBTRole::SIGNER: {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r377127607",
      "id" : 377127607,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEyNzYwNw==",
      "original_commit_id" : "3a9939cf832633c358d0ee579ba5528e7a559971",
      "original_position" : 242,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : 242,
      "pull_request_review_id" : 356021931,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-10T15:22:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377127607",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK!",
      "created_at" : "2020-02-10T16:18:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-584203853",
      "id" : 584203853,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NDIwMzg1Mw==",
      "updated_at" : "2020-02-10T16:18:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584203853",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Mmm, it's misinterpreting a 2-of-3 multisig with two signed outputs. Probably related to my [earlier comment](https://github.com/bitcoin/bitcoin/pull/18027#discussion_r377127607). This is more annoying though, because it means I can't broadcast without the third signature.\r\n<img width=\"586\" alt=\"Schermafbeelding 2020-02-12 om 19 30 41\" src=\"https://user-images.githubusercontent.com/10217/74365443-69b08800-4dce-11ea-9598-6c92961d276e.png\">\r\n",
      "created_at" : "2020-02-12T18:34:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585353349",
      "id" : 585353349,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTM1MzM0OQ==",
      "updated_at" : "2020-02-12T18:34:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585353349",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Sjors are you able to supply me with an exact process to reproduce this? (Or an exact description -- is this a 2-of-3 using keys A, B, C, where both A and B have already signed, and you have C in your wallet, so it should be signable?)\r\n\r\nI don't _think_ I'm relying on analyzepsbt for this determination -- I will have to look back at the code, but I should be saying that we can sign as long as GetSigningProvider does not return nullptr. So this might just be a simple bug, or I might have misunderstood something fundamental about when we can and can't sign, but either way I'll take a look, thanks!",
      "created_at" : "2020-02-12T18:43:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585357240",
      "id" : 585357240,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTM1NzI0MA==",
      "updated_at" : "2020-02-12T18:45:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585357240",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It's a watch-only wallet with a 2-of-3 multisig (three hardware wallets). Two of them signed.\r\n\r\nYou probably want to call finalize on a copy of the PSBT just to see if it's complete.",
      "created_at" : "2020-02-12T19:01:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585365026",
      "id" : 585365026,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTM2NTAyNg==",
      "updated_at" : "2020-02-12T19:02:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585365026",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "What is it misinterpreting? That is, what do you expect it to say? (If it's a watch-only wallet, then \"this wallet does not have the right keys\" should really say \"this wallet cannot make signatures\", because it's supposed to check privateKeysDisabled() first.)",
      "created_at" : "2020-02-12T19:04:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585366164",
      "id" : 585366164,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTM2NjE2NA==",
      "updated_at" : "2020-02-12T19:04:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585366164",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The Broadcast Transaction button should not be disabled. I can finalize it with the RPC and `testmempoolaccept` is happy. The rest of the info is fine I suppose.",
      "created_at" : "2020-02-12T19:05:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585366572",
      "id" : 585366572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTM2NjU3Mg==",
      "updated_at" : "2020-02-12T19:06:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585366572",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh!! Sorry, of course. You're right, I will look into why it's doing that. For testing broadcastability, I am relying on FillPSBT's \"complete\" output, which I thought was the right thing and should just work in this case. The actual text does rely on AnalyzePSBT, but the button should in theory still be enabled. I'll figure that out.",
      "created_at" : "2020-02-12T19:20:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585373147",
      "id" : 585373147,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTM3MzE0Nw==",
      "updated_at" : "2020-02-12T19:20:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585373147",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Mmm, actually it looks like I was testing on an outdated descriptor wallet branch (with your commits cherry-picked). I just tried on slightly more recent version and it now it recognized it as finished. So I think you're right that `FillPSBT` did the job (it's also a finalizer, as I learned the hard way in #18039).",
      "created_at" : "2020-02-12T19:32:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585378178",
      "id" : 585378178,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTM3ODE3OA==",
      "updated_at" : "2020-02-12T19:32:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585378178",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh, fantastic. Yeah, I have essentially ended up assuming that finalization is trivial and will always succeed given sufficient signatures, and I automatically attempt it before doing anything else.",
      "created_at" : "2020-02-12T19:33:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585378805",
      "id" : 585378805,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTM3ODgwNQ==",
      "updated_at" : "2020-02-12T19:33:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585378805",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r378468553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378468553"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I am going to assume this is a bug, so I'm happy to push to a followup. I have been tempted to try to rewrite the flow of AnalyzePSBT, with an eye to simplifying it and making its correctness easier to check.",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-02-12T19:35:19Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+\n+PSBTOperationsDialog::PSBTOperationsDialog(\n+    QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent),\n+                                                                             m_ui(new Ui::PSBTOperationsDialog),\n+                                                                             m_wallet_model(wallet_model),\n+                                                                             m_client_model(client_model)\n+{\n+    m_ui->setupUi(this);\n+    setWindowTitle(\"PSBT Operations\");\n+\n+    connect(m_ui->signTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::signTransaction);\n+    connect(m_ui->broadcastTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::broadcastTransaction);\n+    connect(m_ui->copyToClipboardButton, &QPushButton::clicked, this, &PSBTOperationsDialog::copyToClipboard);\n+    connect(m_ui->saveButton, &QPushButton::clicked, this, &PSBTOperationsDialog::saveTransaction);\n+\n+    connect(m_ui->closeButton, &QPushButton::clicked, this, &PSBTOperationsDialog::close);\n+\n+    m_ui->signTransactionButton->setEnabled(false);\n+    m_ui->broadcastTransactionButton->setEnabled(false);\n+}\n+\n+PSBTOperationsDialog::~PSBTOperationsDialog()\n+{\n+    delete m_ui;\n+}\n+\n+void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n+{\n+    m_transaction_data = psbtx;\n+\n+    bool complete;\n+    size_t n_could_sign;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */, &n_could_sign);\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to load transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    m_ui->broadcastTransactionButton->setEnabled(complete);\n+    m_ui->signTransactionButton->setEnabled(!complete && !m_wallet_model->privateKeysDisabled() && n_could_sign > 0);\n+\n+    updateTransactionDisplay();\n+}\n+\n+void PSBTOperationsDialog::signTransaction()\n+{\n+    bool complete;\n+    size_t n_signed;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, true /* sign */, true /* bip32derivs */, &n_signed);\n+\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to sign transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    updateTransactionDisplay();\n+\n+    if (!complete && n_signed < 1) {\n+        showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARN);\n+    } else if (!complete) {\n+        showStatus(tr(\"Signed %1 inputs, but more signatures are still required.\").arg(n_signed),\n+            StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Signed transaction sucessfully. Transaction is ready to broadcast.\"),\n+            StatusLevel::INFO);\n+        m_ui->broadcastTransactionButton->setEnabled(true);\n+    }\n+}\n+\n+void PSBTOperationsDialog::broadcastTransaction()\n+{\n+    CMutableTransaction mtx;\n+    if (!FinalizeAndExtractPSBT(m_transaction_data, mtx)) {\n+        // This is never expected to fail unless we were given a malformed PSBT\n+        // (e.g. with an invalid signature.)\n+        showStatus(tr(\"Unknown error processing transaction.\"), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    CTransactionRef tx = MakeTransactionRef(mtx);\n+    std::string err_string;\n+    TransactionError error = BroadcastTransaction(\n+        *m_client_model->node().context(), tx, err_string, COIN / 10, /* relay */ true, /* await_callback */ false);\n+\n+    if (error == TransactionError::OK) {\n+        showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")\n+            .arg(QString::fromStdString(tx->GetHash().GetHex())), StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Transaction broadcast failed: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(error))), StatusLevel::ERR);\n+    }\n+}\n+\n+void PSBTOperationsDialog::copyToClipboard() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::saveTransaction() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+\n+    QString selected_filter;\n+    QString filename_suggestion = \"\";\n+    bool first = true;\n+    for (const CTxOut& out : m_transaction_data.tx->vout) {\n+        if (!first) {\n+            filename_suggestion.append(\"-\");\n+        }\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        QString amount = BitcoinUnits::format(m_wallet_model->getOptionsModel()->getDisplayUnit(), out.nValue);\n+        QString address_str = QString::fromStdString(EncodeDestination(address));\n+        filename_suggestion.append(address_str + \"-\" + amount);\n+        first = false;\n+    }\n+    filename_suggestion.append(\".psbt\");\n+    QString filename = GUIUtil::getSaveFileName(this,\n+        tr(\"Save Transaction Data\"), filename_suggestion,\n+        tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selected_filter);\n+    if (filename.isEmpty()) {\n+        return;\n+    }\n+    std::ofstream out(filename.toLocal8Bit().data());\n+    out << ssTx.str();\n+    out.close();\n+    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::updateTransactionDisplay() {\n+    m_ui->transactionDescription->setText(QString::fromStdString(renderTransaction(m_transaction_data)));\n+    showTransactionStatus(m_transaction_data);\n+}\n+\n+std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransaction &psbtx)\n+{\n+    QString tx_description = \"\";\n+    CAmount totalAmount = 0;\n+    for (const CTxOut& out : psbtx.tx->vout) {\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        totalAmount += out.nValue;\n+        tx_description.append(tr(\" * Sends %1 to %2\")\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(QString::fromStdString(EncodeDestination(address))));\n+        tx_description.append(\"<br>\");\n+    }\n+\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    tx_description.append(\" * \");\n+    if (!*analysis.fee) {\n+        // This happens if the transaction is missing input UTXO information.\n+        tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n+    } else {\n+        tx_description.append(tr(\"Pays transaction fee: \"));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+\n+        // add total amount in all subdivision units\n+        tx_description.append(\"<hr />\");\n+        QStringList alternativeUnits;\n+        for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+        {\n+            if(u != m_client_model->getOptionsModel()->getDisplayUnit())\n+                alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n+        }\n+        tx_description.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+            .arg(BitcoinUnits::formatHtmlWithUnit(m_client_model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n+        tx_description.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+            .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n+    }\n+\n+    size_t num_unsigned = CountPSBTUnsignedInputs(psbtx);\n+    if (num_unsigned > 0) {\n+        tx_description.append(\"<br><br>\");\n+        tx_description.append(tr(\"Transaction has %1 unsigned inputs.\").arg(QString::number(num_unsigned)));\n+    }\n+\n+    return tx_description.toStdString();\n+}\n+\n+void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {\n+    m_ui->statusBar->setText(msg);\n+    switch (level) {\n+        case StatusLevel::INFO: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : lightgreen }\");\n+            break;\n+        }\n+        case StatusLevel::WARN: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : orange }\");\n+            break;\n+        }\n+        case StatusLevel::ERR: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : red }\");\n+            break;\n+        }\n+    }\n+    m_ui->statusBar->show();\n+}\n+\n+size_t PSBTOperationsDialog::couldSignInputs(const PartiallySignedTransaction &psbtx) {\n+    size_t n_signed;\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, false /* bip32derivs */, &n_signed);\n+\n+    if (err != TransactionError::OK) {\n+        return 0;\n+    }\n+    return n_signed;\n+}\n+\n+void PSBTOperationsDialog::showTransactionStatus(const PartiallySignedTransaction &psbtx) {\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    size_t n_could_sign = couldSignInputs(psbtx);\n+\n+    switch (analysis.next) {\n+        case PSBTRole::UPDATER: {\n+            showStatus(tr(\"Transaction is missing some information about inputs.\"), StatusLevel::WARN);\n+            break;\n+        }\n+        case PSBTRole::SIGNER: {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r378468553",
      "id" : 378468553,
      "in_reply_to_id" : 377127607,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODU1Mw==",
      "original_commit_id" : "3a9939cf832633c358d0ee579ba5528e7a559971",
      "original_position" : 242,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : 242,
      "pull_request_review_id" : 357730875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-12T19:35:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378468553",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/458997?v=4",
         "events_url" : "https://api.github.com/users/gwillen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gwillen/followers",
         "following_url" : "https://api.github.com/users/gwillen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gwillen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gwillen",
         "id" : 458997,
         "login" : "gwillen",
         "node_id" : "MDQ6VXNlcjQ1ODk5Nw==",
         "organizations_url" : "https://api.github.com/users/gwillen/orgs",
         "received_events_url" : "https://api.github.com/users/gwillen/received_events",
         "repos_url" : "https://api.github.com/users/gwillen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gwillen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gwillen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2020-02-13T07:56:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585598439",
      "id" : 585598439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTU5ODQzOQ==",
      "updated_at" : "2020-02-13T07:56:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585598439",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2020-02-25T11:17:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-590817164",
      "id" : 590817164,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MDgxNzE2NA==",
      "updated_at" : "2020-02-25T11:17:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590817164",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "concept ACK, will start reviewing in depth post-merge/rebase of https://github.com/bitcoin/bitcoin/pull/17509",
      "created_at" : "2020-02-27T19:14:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-592128997",
      "id" : 592128997,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MjEyODk5Nw==",
      "updated_at" : "2020-02-27T19:14:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/592128997",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r385385534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385385534"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sounds like a bug",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-02-27T21:36:50Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+\n+PSBTOperationsDialog::PSBTOperationsDialog(\n+    QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent),\n+                                                                             m_ui(new Ui::PSBTOperationsDialog),\n+                                                                             m_wallet_model(wallet_model),\n+                                                                             m_client_model(client_model)\n+{\n+    m_ui->setupUi(this);\n+    setWindowTitle(\"PSBT Operations\");\n+\n+    connect(m_ui->signTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::signTransaction);\n+    connect(m_ui->broadcastTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::broadcastTransaction);\n+    connect(m_ui->copyToClipboardButton, &QPushButton::clicked, this, &PSBTOperationsDialog::copyToClipboard);\n+    connect(m_ui->saveButton, &QPushButton::clicked, this, &PSBTOperationsDialog::saveTransaction);\n+\n+    connect(m_ui->closeButton, &QPushButton::clicked, this, &PSBTOperationsDialog::close);\n+\n+    m_ui->signTransactionButton->setEnabled(false);\n+    m_ui->broadcastTransactionButton->setEnabled(false);\n+}\n+\n+PSBTOperationsDialog::~PSBTOperationsDialog()\n+{\n+    delete m_ui;\n+}\n+\n+void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n+{\n+    m_transaction_data = psbtx;\n+\n+    bool complete;\n+    size_t n_could_sign;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */, &n_could_sign);\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to load transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    m_ui->broadcastTransactionButton->setEnabled(complete);\n+    m_ui->signTransactionButton->setEnabled(!complete && !m_wallet_model->privateKeysDisabled() && n_could_sign > 0);\n+\n+    updateTransactionDisplay();\n+}\n+\n+void PSBTOperationsDialog::signTransaction()\n+{\n+    bool complete;\n+    size_t n_signed;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, true /* sign */, true /* bip32derivs */, &n_signed);\n+\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to sign transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    updateTransactionDisplay();\n+\n+    if (!complete && n_signed < 1) {\n+        showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARN);\n+    } else if (!complete) {\n+        showStatus(tr(\"Signed %1 inputs, but more signatures are still required.\").arg(n_signed),\n+            StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Signed transaction sucessfully. Transaction is ready to broadcast.\"),\n+            StatusLevel::INFO);\n+        m_ui->broadcastTransactionButton->setEnabled(true);\n+    }\n+}\n+\n+void PSBTOperationsDialog::broadcastTransaction()\n+{\n+    CMutableTransaction mtx;\n+    if (!FinalizeAndExtractPSBT(m_transaction_data, mtx)) {\n+        // This is never expected to fail unless we were given a malformed PSBT\n+        // (e.g. with an invalid signature.)\n+        showStatus(tr(\"Unknown error processing transaction.\"), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    CTransactionRef tx = MakeTransactionRef(mtx);\n+    std::string err_string;\n+    TransactionError error = BroadcastTransaction(\n+        *m_client_model->node().context(), tx, err_string, COIN / 10, /* relay */ true, /* await_callback */ false);\n+\n+    if (error == TransactionError::OK) {\n+        showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")\n+            .arg(QString::fromStdString(tx->GetHash().GetHex())), StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Transaction broadcast failed: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(error))), StatusLevel::ERR);\n+    }\n+}\n+\n+void PSBTOperationsDialog::copyToClipboard() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::saveTransaction() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+\n+    QString selected_filter;\n+    QString filename_suggestion = \"\";\n+    bool first = true;\n+    for (const CTxOut& out : m_transaction_data.tx->vout) {\n+        if (!first) {\n+            filename_suggestion.append(\"-\");\n+        }\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        QString amount = BitcoinUnits::format(m_wallet_model->getOptionsModel()->getDisplayUnit(), out.nValue);\n+        QString address_str = QString::fromStdString(EncodeDestination(address));\n+        filename_suggestion.append(address_str + \"-\" + amount);\n+        first = false;\n+    }\n+    filename_suggestion.append(\".psbt\");\n+    QString filename = GUIUtil::getSaveFileName(this,\n+        tr(\"Save Transaction Data\"), filename_suggestion,\n+        tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selected_filter);\n+    if (filename.isEmpty()) {\n+        return;\n+    }\n+    std::ofstream out(filename.toLocal8Bit().data());\n+    out << ssTx.str();\n+    out.close();\n+    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::updateTransactionDisplay() {\n+    m_ui->transactionDescription->setText(QString::fromStdString(renderTransaction(m_transaction_data)));\n+    showTransactionStatus(m_transaction_data);\n+}\n+\n+std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransaction &psbtx)\n+{\n+    QString tx_description = \"\";\n+    CAmount totalAmount = 0;\n+    for (const CTxOut& out : psbtx.tx->vout) {\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        totalAmount += out.nValue;\n+        tx_description.append(tr(\" * Sends %1 to %2\")\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(QString::fromStdString(EncodeDestination(address))));\n+        tx_description.append(\"<br>\");\n+    }\n+\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    tx_description.append(\" * \");\n+    if (!*analysis.fee) {\n+        // This happens if the transaction is missing input UTXO information.\n+        tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n+    } else {\n+        tx_description.append(tr(\"Pays transaction fee: \"));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+\n+        // add total amount in all subdivision units\n+        tx_description.append(\"<hr />\");\n+        QStringList alternativeUnits;\n+        for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+        {\n+            if(u != m_client_model->getOptionsModel()->getDisplayUnit())\n+                alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n+        }\n+        tx_description.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+            .arg(BitcoinUnits::formatHtmlWithUnit(m_client_model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n+        tx_description.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+            .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n+    }\n+\n+    size_t num_unsigned = CountPSBTUnsignedInputs(psbtx);\n+    if (num_unsigned > 0) {\n+        tx_description.append(\"<br><br>\");\n+        tx_description.append(tr(\"Transaction has %1 unsigned inputs.\").arg(QString::number(num_unsigned)));\n+    }\n+\n+    return tx_description.toStdString();\n+}\n+\n+void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {\n+    m_ui->statusBar->setText(msg);\n+    switch (level) {\n+        case StatusLevel::INFO: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : lightgreen }\");\n+            break;\n+        }\n+        case StatusLevel::WARN: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : orange }\");\n+            break;\n+        }\n+        case StatusLevel::ERR: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : red }\");\n+            break;\n+        }\n+    }\n+    m_ui->statusBar->show();\n+}\n+\n+size_t PSBTOperationsDialog::couldSignInputs(const PartiallySignedTransaction &psbtx) {\n+    size_t n_signed;\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, false /* bip32derivs */, &n_signed);\n+\n+    if (err != TransactionError::OK) {\n+        return 0;\n+    }\n+    return n_signed;\n+}\n+\n+void PSBTOperationsDialog::showTransactionStatus(const PartiallySignedTransaction &psbtx) {\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    size_t n_could_sign = couldSignInputs(psbtx);\n+\n+    switch (analysis.next) {\n+        case PSBTRole::UPDATER: {\n+            showStatus(tr(\"Transaction is missing some information about inputs.\"), StatusLevel::WARN);\n+            break;\n+        }\n+        case PSBTRole::SIGNER: {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r385385534",
      "id" : 385385534,
      "in_reply_to_id" : 377127607,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NTUzNA==",
      "original_commit_id" : "3a9939cf832633c358d0ee579ba5528e7a559971",
      "original_position" : 242,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : 242,
      "pull_request_review_id" : 366016565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-27T21:36:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385385534",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "from a test run:\r\n```\r\n* Sends 47.99999859 BTC to bcrt1q6yp5np47xjpcn06fxmut4rug5nll4uh4xmefwn\r\n* Sends 2.00000000 BTC to bcrt1qr5nel4sx76q953crm7vq3qjd6umgyzmlufyfaa\r\n```\r\n\r\nDo we really want to display change outputs? I guess it makes sense in coinjoiny contexts.",
      "created_at" : "2020-02-28T14:23:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-592534853",
      "id" : 592534853,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18027",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MjUzNDg1Mw==",
      "updated_at" : "2020-02-28T14:29:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/592534853",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r385727121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385727121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/18220",
      "commit_id" : "3e7ca1e85777df850bc83bd9b2665b957ab54072",
      "created_at" : "2020-02-28T14:33:10Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/psbtoperationsdialog.h>\n+\n+#include <core_io.h>\n+#include <interfaces/node.h>\n+#include <key_io.h>\n+#include <node/psbt.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/forms/ui_psbtoperationsdialog.h>\n+#include <qt/guiutil.h>\n+#include <qt/optionsmodel.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+\n+\n+PSBTOperationsDialog::PSBTOperationsDialog(\n+    QWidget* parent, WalletModel* wallet_model, ClientModel* client_model) : QDialog(parent),\n+                                                                             m_ui(new Ui::PSBTOperationsDialog),\n+                                                                             m_wallet_model(wallet_model),\n+                                                                             m_client_model(client_model)\n+{\n+    m_ui->setupUi(this);\n+    setWindowTitle(\"PSBT Operations\");\n+\n+    connect(m_ui->signTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::signTransaction);\n+    connect(m_ui->broadcastTransactionButton, &QPushButton::clicked, this, &PSBTOperationsDialog::broadcastTransaction);\n+    connect(m_ui->copyToClipboardButton, &QPushButton::clicked, this, &PSBTOperationsDialog::copyToClipboard);\n+    connect(m_ui->saveButton, &QPushButton::clicked, this, &PSBTOperationsDialog::saveTransaction);\n+\n+    connect(m_ui->closeButton, &QPushButton::clicked, this, &PSBTOperationsDialog::close);\n+\n+    m_ui->signTransactionButton->setEnabled(false);\n+    m_ui->broadcastTransactionButton->setEnabled(false);\n+}\n+\n+PSBTOperationsDialog::~PSBTOperationsDialog()\n+{\n+    delete m_ui;\n+}\n+\n+void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n+{\n+    m_transaction_data = psbtx;\n+\n+    bool complete;\n+    size_t n_could_sign;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */, &n_could_sign);\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to load transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    m_ui->broadcastTransactionButton->setEnabled(complete);\n+    m_ui->signTransactionButton->setEnabled(!complete && !m_wallet_model->privateKeysDisabled() && n_could_sign > 0);\n+\n+    updateTransactionDisplay();\n+}\n+\n+void PSBTOperationsDialog::signTransaction()\n+{\n+    bool complete;\n+    size_t n_signed;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, true /* sign */, true /* bip32derivs */, &n_signed);\n+\n+    if (err != TransactionError::OK) {\n+        showStatus(tr(\"Failed to sign transaction: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(err))), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    updateTransactionDisplay();\n+\n+    if (!complete && n_signed < 1) {\n+        showStatus(tr(\"Could not sign any more inputs.\"), StatusLevel::WARN);\n+    } else if (!complete) {\n+        showStatus(tr(\"Signed %1 inputs, but more signatures are still required.\").arg(n_signed),\n+            StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Signed transaction sucessfully. Transaction is ready to broadcast.\"),\n+            StatusLevel::INFO);\n+        m_ui->broadcastTransactionButton->setEnabled(true);\n+    }\n+}\n+\n+void PSBTOperationsDialog::broadcastTransaction()\n+{\n+    CMutableTransaction mtx;\n+    if (!FinalizeAndExtractPSBT(m_transaction_data, mtx)) {\n+        // This is never expected to fail unless we were given a malformed PSBT\n+        // (e.g. with an invalid signature.)\n+        showStatus(tr(\"Unknown error processing transaction.\"), StatusLevel::ERR);\n+        return;\n+    }\n+\n+    CTransactionRef tx = MakeTransactionRef(mtx);\n+    std::string err_string;\n+    TransactionError error = BroadcastTransaction(\n+        *m_client_model->node().context(), tx, err_string, COIN / 10, /* relay */ true, /* await_callback */ false);\n+\n+    if (error == TransactionError::OK) {\n+        showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")\n+            .arg(QString::fromStdString(tx->GetHash().GetHex())), StatusLevel::INFO);\n+    } else {\n+        showStatus(tr(\"Transaction broadcast failed: %1\")\n+            .arg(QString::fromStdString(TransactionErrorString(error))), StatusLevel::ERR);\n+    }\n+}\n+\n+void PSBTOperationsDialog::copyToClipboard() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::saveTransaction() {\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << m_transaction_data;\n+\n+    QString selected_filter;\n+    QString filename_suggestion = \"\";\n+    bool first = true;\n+    for (const CTxOut& out : m_transaction_data.tx->vout) {\n+        if (!first) {\n+            filename_suggestion.append(\"-\");\n+        }\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        QString amount = BitcoinUnits::format(m_wallet_model->getOptionsModel()->getDisplayUnit(), out.nValue);\n+        QString address_str = QString::fromStdString(EncodeDestination(address));\n+        filename_suggestion.append(address_str + \"-\" + amount);\n+        first = false;\n+    }\n+    filename_suggestion.append(\".psbt\");\n+    QString filename = GUIUtil::getSaveFileName(this,\n+        tr(\"Save Transaction Data\"), filename_suggestion,\n+        tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selected_filter);\n+    if (filename.isEmpty()) {\n+        return;\n+    }\n+    std::ofstream out(filename.toLocal8Bit().data());\n+    out << ssTx.str();\n+    out.close();\n+    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\n+}\n+\n+void PSBTOperationsDialog::updateTransactionDisplay() {\n+    m_ui->transactionDescription->setText(QString::fromStdString(renderTransaction(m_transaction_data)));\n+    showTransactionStatus(m_transaction_data);\n+}\n+\n+std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransaction &psbtx)\n+{\n+    QString tx_description = \"\";\n+    CAmount totalAmount = 0;\n+    for (const CTxOut& out : psbtx.tx->vout) {\n+        CTxDestination address;\n+        ExtractDestination(out.scriptPubKey, address);\n+        totalAmount += out.nValue;\n+        tx_description.append(tr(\" * Sends %1 to %2\")\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(QString::fromStdString(EncodeDestination(address))));\n+        tx_description.append(\"<br>\");\n+    }\n+\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    tx_description.append(\" * \");\n+    if (!*analysis.fee) {\n+        // This happens if the transaction is missing input UTXO information.\n+        tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n+    } else {\n+        tx_description.append(tr(\"Pays transaction fee: \"));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+\n+        // add total amount in all subdivision units\n+        tx_description.append(\"<hr />\");\n+        QStringList alternativeUnits;\n+        for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+        {\n+            if(u != m_client_model->getOptionsModel()->getDisplayUnit())\n+                alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n+        }\n+        tx_description.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+            .arg(BitcoinUnits::formatHtmlWithUnit(m_client_model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n+        tx_description.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+            .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n+    }\n+\n+    size_t num_unsigned = CountPSBTUnsignedInputs(psbtx);\n+    if (num_unsigned > 0) {\n+        tx_description.append(\"<br><br>\");\n+        tx_description.append(tr(\"Transaction has %1 unsigned inputs.\").arg(QString::number(num_unsigned)));\n+    }\n+\n+    return tx_description.toStdString();\n+}\n+\n+void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {\n+    m_ui->statusBar->setText(msg);\n+    switch (level) {\n+        case StatusLevel::INFO: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : lightgreen }\");\n+            break;\n+        }\n+        case StatusLevel::WARN: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : orange }\");\n+            break;\n+        }\n+        case StatusLevel::ERR: {\n+            m_ui->statusBar->setStyleSheet(\"QLabel { background-color : red }\");\n+            break;\n+        }\n+    }\n+    m_ui->statusBar->show();\n+}\n+\n+size_t PSBTOperationsDialog::couldSignInputs(const PartiallySignedTransaction &psbtx) {\n+    size_t n_signed;\n+    bool complete;\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(m_transaction_data, complete, SIGHASH_ALL, false /* sign */, false /* bip32derivs */, &n_signed);\n+\n+    if (err != TransactionError::OK) {\n+        return 0;\n+    }\n+    return n_signed;\n+}\n+\n+void PSBTOperationsDialog::showTransactionStatus(const PartiallySignedTransaction &psbtx) {\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    size_t n_could_sign = couldSignInputs(psbtx);\n+\n+    switch (analysis.next) {\n+        case PSBTRole::UPDATER: {\n+            showStatus(tr(\"Transaction is missing some information about inputs.\"), StatusLevel::WARN);\n+            break;\n+        }\n+        case PSBTRole::SIGNER: {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18027#discussion_r385727121",
      "id" : 385727121,
      "in_reply_to_id" : 377127607,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNzEyMQ==",
      "original_commit_id" : "3a9939cf832633c358d0ee579ba5528e7a559971",
      "original_position" : 242,
      "path" : "src/qt/psbtoperationsdialog.cpp",
      "position" : 242,
      "pull_request_review_id" : 366438718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18027",
      "updated_at" : "2020-02-28T14:33:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385727121",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
