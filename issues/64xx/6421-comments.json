[
   {
      "body" : "Needs rebase because #6410 is merged now.",
      "created_at" : "2015-07-11T13:51:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120622404",
      "id" : 120622404,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
      "updated_at" : "2015-07-11T13:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120622404",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412933"
         }
      },
      "body" : "Need to update this error msg.",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T14:09:06Z",
      "diff_hunk" : "@@ -856,25 +856,45 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n+        // Try to make space in mempool\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, stagedelete, nFeesDeleted, nSizeDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-space\");\n+        }\n+        if (!stagedelete.empty()) {\n+            BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+                if (stagedelete.count(in.prevout.hash)) {\n+                    return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-dependency\");\n+                }\n+            }\n+        }\n+\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        if ((double)nFeesDeleted * nSize < (double)nFees * nSizeDeleted) {\n+            // The new transaction's feerate is below that of the replaced transactions.\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-improve\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, nSize + nSizeDeleted, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412933",
      "id" : 34412933,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 32,
      "path" : "src/main.cpp",
      "position" : 59,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412933",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412938"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412938"
         }
      },
      "body" : "What happens if the lowest fee-rate transaction in the pool is a parent transaction to a chain of high fee transactions?  Wouldn't that prevent any eviction from happening, even though there may be other transactions that could be removed to make room?",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T14:09:34Z",
      "diff_hunk" : "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412938",
      "id" : 34412938,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 197,
      "path" : "src/txmempool.cpp",
      "position" : 197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412938",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/549484?v=3",
         "events_url" : "https://api.github.com/users/ashleyholman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ashleyholman/followers",
         "following_url" : "https://api.github.com/users/ashleyholman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ashleyholman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ashleyholman",
         "id" : 549484,
         "login" : "ashleyholman",
         "organizations_url" : "https://api.github.com/users/ashleyholman/orgs",
         "received_events_url" : "https://api.github.com/users/ashleyholman/received_events",
         "repos_url" : "https://api.github.com/users/ashleyholman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ashleyholman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ashleyholman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412964"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412964"
         }
      },
      "body" : "Yup. Fixing that is complicated and/or expensive.",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T14:12:39Z",
      "diff_hunk" : "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412964",
      "id" : 34412964,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 197,
      "path" : "src/txmempool.cpp",
      "position" : 197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412964",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412968"
         }
      },
      "body" : "Can you update this comment to clarify if we're talking about txs or ram?",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T14:13:09Z",
      "diff_hunk" : "@@ -50,6 +50,8 @@ struct CNodeStateStats;\n static const bool DEFAULT_ALERTS = true;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n+/** Default for -maxmempool, maximum megabytes of the mempool */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412968",
      "id" : 34412968,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 5,
      "path" : "src/main.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412978"
         }
      },
      "body" : "(Efficient) code that implements CPFP will likely fix this, as I expect that it will maintain caches of sizes/fees of children of transactions.",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T14:14:24Z",
      "diff_hunk" : "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34412978",
      "id" : 34412978,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 197,
      "path" : "src/txmempool.cpp",
      "position" : 197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34412978",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413002"
         }
      },
      "body" : "Suggestion?",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T14:17:17Z",
      "diff_hunk" : "@@ -856,25 +856,45 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n+        // Try to make space in mempool\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, stagedelete, nFeesDeleted, nSizeDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-space\");\n+        }\n+        if (!stagedelete.empty()) {\n+            BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+                if (stagedelete.count(in.prevout.hash)) {\n+                    return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-dependency\");\n+                }\n+            }\n+        }\n+\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        if ((double)nFeesDeleted * nSize < (double)nFees * nSizeDeleted) {\n+            // The new transaction's feerate is below that of the replaced transactions.\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-improve\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, nSize + nSizeDeleted, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413002",
      "id" : 34413002,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 32,
      "path" : "src/main.cpp",
      "position" : 59,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413002",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413014"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T14:18:50Z",
      "diff_hunk" : "@@ -50,6 +50,8 @@ struct CNodeStateStats;\n static const bool DEFAULT_ALERTS = true;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n+/** Default for -maxmempool, maximum megabytes of the mempool */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413014",
      "id" : 34413014,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 5,
      "path" : "src/main.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413107"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413107"
         }
      },
      "body" : "Oh, actually I misread it; no changes needed.",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T14:29:32Z",
      "diff_hunk" : "@@ -856,25 +856,45 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n+        // Try to make space in mempool\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+        size_t nSizeDeleted = 0;\n+        if (!mempool.StageTrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, nFees, stagedelete, nFeesDeleted, nSizeDeleted)) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-space\");\n+        }\n+        if (!stagedelete.empty()) {\n+            BOOST_FOREACH(const CTxIn& in, tx.vin) {\n+                if (stagedelete.count(in.prevout.hash)) {\n+                    return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-dependency\");\n+                }\n+            }\n+        }\n+\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        if ((double)nFeesDeleted * nSize < (double)nFees * nSizeDeleted) {\n+            // The new transaction's feerate is below that of the replaced transactions.\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool-full-no-improve\");\n+        }\n+\n         // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, nSize + nSizeDeleted, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413107",
      "id" : 34413107,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 32,
      "path" : "src/main.cpp",
      "position" : 59,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413107",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413313"
         }
      },
      "body" : "CPFP could work with this by turning individual transactions into \"packages\" of transactions whenever a parent pays more fees/KB than a child+parent. Removal would then remove the whole \"package\" in one go; there would never be a situation where removal was blocked.\n\nThat said, I'd be inclined to merge this pull-req first, then work on the fixes for the edge cases second.\n\nOn 11 July 2015 10:15:01 GMT-04:00, Pieter Wuille <notifications@github.com> wrote:\n>> +\n>> +bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount&\n>maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved,\n>size_t& totalsizeremove) {\n>> +    size_t expsize = DynamicMemoryUsage();\n>> +    indexed_transaction_set::nth_index<1>::type::reverse_iterator it\n>= mapTx.get<1>().rbegin();\n>> +    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n>> +        std::deque<uint256> todo;\n>> +        todo.push_back(it->GetTx().GetHash());\n>> +        while (!todo.empty()) {\n>> +            uint256 donow = todo.front();\n>> +            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n>> +            todo.pop_front();\n>> +            if (!stage.count(donow)) {\n>> +                stage.insert(donow);\n>> +                totalfeeremoved += origTx->GetFee();\n>> +                if (totalfeeremoved > maxfeeremove) {\n>> +                    return false;\n>\n>(Efficient) code that implements CPFP will likely fix this, as I expect\n>that it will maintain caches of sizes/fees of children of transactions.\n>\n>---\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/6421/files#r34412978\n\n",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T14:56:31Z",
      "diff_hunk" : "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413313",
      "id" : 34413313,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 197,
      "path" : "src/txmempool.cpp",
      "position" : 197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413313",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413453"
         }
      },
      "body" : "Agree.",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T15:10:12Z",
      "diff_hunk" : "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413453",
      "id" : 34413453,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 197,
      "path" : "src/txmempool.cpp",
      "position" : 197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413453",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413490"
         }
      },
      "body" : "You could return to the outer loop and try again on the next tx, up until you hit one that has a feerate >= the one you are trying to add.  Although that does add a lot of extra work.",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T15:13:39Z",
      "diff_hunk" : "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413490",
      "id" : 34413490,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 197,
      "path" : "src/txmempool.cpp",
      "position" : 197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413490",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/549484?v=3",
         "events_url" : "https://api.github.com/users/ashleyholman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ashleyholman/followers",
         "following_url" : "https://api.github.com/users/ashleyholman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ashleyholman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ashleyholman",
         "id" : 549484,
         "login" : "ashleyholman",
         "organizations_url" : "https://api.github.com/users/ashleyholman/orgs",
         "received_events_url" : "https://api.github.com/users/ashleyholman/received_events",
         "repos_url" : "https://api.github.com/users/ashleyholman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ashleyholman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ashleyholman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413532"
         }
      },
      "body" : "That risks quadratic work...",
      "commit_id" : "7ddb9d067974e124d7199ee0692125db7b5a843a",
      "created_at" : "2015-07-11T15:20:45Z",
      "diff_hunk" : "@@ -429,5 +439,47 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 5 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}\n+\n+size_t CTxMemPool::GuessDynamicMemoryUsage(const CTxMemPoolEntry& entry) const {\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 5 * sizeof(void*)) + entry.DynamicMemoryUsage() + memusage::IncrementalDynamicUsage(mapNextTx) * entry.GetTx().vin.size();\n+}\n+\n+bool CTxMemPool::StageTrimToSize(size_t sizelimit, const CAmount& maxfeeremove, std::set<uint256>& stage, CAmount& totalfeeremoved, size_t& totalsizeremove) {\n+    size_t expsize = DynamicMemoryUsage();\n+    indexed_transaction_set::nth_index<1>::type::reverse_iterator it = mapTx.get<1>().rbegin();\n+    while (expsize > sizelimit && it != mapTx.get<1>().rend()) {\n+        std::deque<uint256> todo;\n+        todo.push_back(it->GetTx().GetHash());\n+        while (!todo.empty()) {\n+            uint256 donow = todo.front();\n+            const CTxMemPoolEntry* origTx = &*mapTx.find(donow);\n+            todo.pop_front();\n+            if (!stage.count(donow)) {\n+                stage.insert(donow);\n+                totalfeeremoved += origTx->GetFee();\n+                if (totalfeeremoved > maxfeeremove) {\n+                    return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#discussion_r34413532",
      "id" : 34413532,
      "original_commit_id" : "489726e5d0cfbc3050e0e5f608690c155c4b9916",
      "original_position" : 197,
      "path" : "src/txmempool.cpp",
      "position" : 197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6421",
      "updated_at" : "2015-07-11T16:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34413532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Nits from #6331 rebased at https://github.com/sipa/bitcoin/compare/limitpool...jtimon:pr-6421-0.11.99 (will force push to jtimon/pr-6421-0.11.99 as this gets rebased).",
      "created_at" : "2015-07-11T16:04:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120635982",
      "id" : 120635982,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
      "updated_at" : "2015-07-11T16:04:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120635982",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "@lapp0 You suggested using \"the new transaction's fees should pay for the size of the new plus removed transaction\". That doesn't help, as you can create a sequence of transactions that each replace the previous one, and each have enough fees to pay for both. This would give you infinite relay bandwidth at fixed cost.\r\n\r\nThe solution is perhaps to remember for each mempool transaction what the size of everything it has replaced is, but that's a bit more complex than I'm willing to do now. I've chosen the conservative approach here which is to look at the fee difference instead.",
      "created_at" : "2015-07-11T18:45:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120652090",
      "id" : 120652090,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
      "updated_at" : "2015-07-11T18:45:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120652090",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@jtimon It's probably a bit more complicated than just a score function, I now realize. The mempool code is trying to optimize for fee/byte (currently), independently of what sorting is implemented by the index. I think we'll need a policy-controlled \"cost\" (as a generalization of size, perhaps corrected for UTXO differences) and policy-controlled \"revenue\" (as a generalization of fee). The reason is that you can't compute the \"score\" of a collection of transactions - you need (revenue1+revenue2)/(cost1+cost2) rather than just score1+score2.",
      "created_at" : "2015-07-11T18:49:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120652225",
      "id" : 120652225,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
      "updated_at" : "2015-07-11T18:49:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120652225",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Slightly tested. Running this code (git commit tip 3c638fc0ba82a9d9c235f428d098a098fc0b6b16, not the latest tip) since some hours with `-maxmempool=100`. Since 1h i have a stable dynamic memory size of ~100MB. Graph: http://bitcoin.jonasschnelli.ch/charts/mempool6410/\r\n\r\nLog filtered after the \"stored orphan txs\": https://gist.githubusercontent.com/jonasschnelli/1f2e89d64887710f6c5b/raw/dba3d68d79cc649cd7e01c992d40da8d46073431/gistfile1.txt",
      "created_at" : "2015-07-11T18:57:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120652531",
      "id" : 120652531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
      "updated_at" : "2015-07-11T18:57:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120652531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@sipa answered in #6331: bike-shed the name of the variable, the getter and the comparator, but please don't make the type CFeeRate so that we have to fix it later. int64_t should work perfectly fine for these changes.",
      "created_at" : "2015-07-11T21:42:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120663063",
      "id" : 120663063,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
      "updated_at" : "2015-07-11T21:42:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120663063",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "I believe this could be much simpler (and the end result better) after #5709 (is 10 commits but ready to be squashed into the first one), but I doubt people want to read step by step to be sure behavior is not being changed. At least not more now than when it was opened...",
      "created_at" : "2015-07-12T15:20:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120730086",
      "id" : 120730086,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
      "updated_at" : "2015-07-12T15:20:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120730086",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "@jtimon It's a bit more complicated. The replacement code needs to have a way to know whether replacing a set of transactions with another transaction is a good idea. Contrary to what I first thought, just having a score to compare is not enough - if the index order doesn't match the feerate well, its search for sets to remove will degrade or fail.\r\n\r\nOne way to generalize this to something policy-controllable is to have a \"general reward\" (typically fee) and a \"general cost\" (typically bytes) determined by the policy at mempool entry time, and then compare reward/cost ratios (typically feerates), both in the index, and in the replacement code (the limiting code, but also for example CPFP combination code and RBF code). But it's really not as simple as making the index order configurable - sorry for saying so at first.",
      "created_at" : "2015-07-12T18:43:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120753654",
      "id" : 120753654,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
      "updated_at" : "2015-07-12T18:44:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120753654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Even in that case, both the \"general reward\" and the \"general cost\" indexes can use int64_t instead of CFeeRate  and size_t respectively. Can we agree on that first?\r\n\r\nI still don't understand why this needs transaction replacement. We can add it or not as normal and, after adding, trim to the desired size. with this, we could have a unified index that it's just reward/cost instead of two separate ones.\r\nBut for transaction replacement, #6416 is what I had in mind. Something more flexible that is independent from the index or the mempool entries themselves. I just realized that ApproveTxReplacement needs a CCoinsViewCache parameter and it would be a good idea to call it later. Even a \"general reward\" and \"general cost\" index in the mempool may not be enough for certain replacement policies, for example, zero-conf-safer-RBF (also known as FSS-RBF, but it seems to me that everything is \"first seen safe\").\r\nSo I don't think we need or can generally solve replacements here: expiring old transactions before adding a new transaction and forcing the mempool to a given size just after that (simply by dropping until it is enough from the bottom of the unified index) should be enough.\r\nIn my opinion adding transaction replacement will unnecessarily complicate things, not only for this PR, but also for later changes in replacement policies (for example adding an option to use ZCS-RBF instead of FS as replacement policy) and with later stages of your own plan (https://github.com/bitcoin/bitcoin/pull/6331#issuecomment-120464993 ):\r\n\r\n> - Generalize the feerate here to a unified policy-dependent score (effectively removing the priority as it exists today, as in #6405).\r\n> - Implement block creation using this score-based index.\r\n",
      "created_at" : "2015-07-12T19:12:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6421#issuecomment-120754922",
      "id" : 120754922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6421",
      "updated_at" : "2015-07-12T19:12:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120754922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   }
]
