[
   {
      "body" : "Untested ACK. I was thinking about implementing something like this myself while working on the mempool limitation.\r\n\r\nGiven the false positive rate and the amount of memory usage, I think this approach is better than #6450.",
      "created_at" : "2015-07-17T18:30:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-122366525",
      "id" : 122366525,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6452",
      "updated_at" : "2015-07-17T18:30:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/122366525",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "\r\nIf I've done the math right, I think it would only take about a million rejects to push the false positive rate on this near 98%.  At 1000 txn/sec, this is somewhere on the order of 20 minutes.  It only takes a few hundred thousand to push it into low, yet still problematic double digit false positive territory.\r\n\r\nI also don't fully understand the comment in the code that claims this uses 1.7MB.  I calculated the filter size myself using the parameters from the code and I get about 430k each, for around 960k total.\r\n\r\nIt's worth noting that the attack surface here involves filling up the bloom filter and causing a high false positive rate which can blind nodes to incoming transactions.  If a bloom filter is used here, I think it needs to be larger.  (Maybe that was the intention?)\r\n\r\nThoughts?\r\n\r\n",
      "created_at" : "2015-07-17T20:48:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-122410352",
      "id" : 122410352,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6452",
      "updated_at" : "2015-07-17T20:48:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/122410352",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/430315?v=3",
         "events_url" : "https://api.github.com/users/ajweiss/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajweiss/followers",
         "following_url" : "https://api.github.com/users/ajweiss/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajweiss/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajweiss",
         "id" : 430315,
         "login" : "ajweiss",
         "organizations_url" : "https://api.github.com/users/ajweiss/orgs",
         "received_events_url" : "https://api.github.com/users/ajweiss/received_events",
         "repos_url" : "https://api.github.com/users/ajweiss/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajweiss/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajweiss"
      }
   },
   {
      "body" : "Ahh, I see nevermind.  I didn't catch that the rolling stuff allocates filters at 2x size, and rotates them when they're half full making the fprate never go above the specified value (1e-6).  \r\n\r\nThe sizes add up now too...\r\n\r\nLooks good.",
      "created_at" : "2015-07-17T21:03:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-122415126",
      "id" : 122415126,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6452",
      "updated_at" : "2015-07-17T21:03:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/122415126",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/430315?v=3",
         "events_url" : "https://api.github.com/users/ajweiss/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajweiss/followers",
         "following_url" : "https://api.github.com/users/ajweiss/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajweiss/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajweiss",
         "id" : 430315,
         "login" : "ajweiss",
         "organizations_url" : "https://api.github.com/users/ajweiss/orgs",
         "received_events_url" : "https://api.github.com/users/ajweiss/received_events",
         "repos_url" : "https://api.github.com/users/ajweiss/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajweiss/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajweiss"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34945357"
         }
      },
      "body" : "Not sure if this should be insecure_rand. insecure_rand is meant for high-performance low-security use. \r\n- No performance constraints: this is done once, at initialization time\r\n- If this value could be guessed by an adversary, there is additional DoS risk. \r\n- Also, the spread between nodes should be as uniform as possible to make sure that if false positives happen, they are at least as non-consistent as possible.\r\nSo IMO let's use the normal GetRand.\r\n\r\nWhat I am also slightly worried about here is the static global initialization. Random generators will not have been initialized at that time.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-18T07:18:12Z",
      "diff_hunk" : "@@ -154,6 +154,29 @@ namespace {\n      */\n     map<uint256, NodeId> mapBlockSource;\n \n+    /**\n+     * Filter for transactions that were recently rejected by\n+     * AcceptToMemoryPool. These are not rerequested until the chain tip\n+     * changes, at which point the entire filter is cleared. Protected by\n+     * cs_main.\n+     *\n+     * Without this filter we'd be re-requesting txs from each of our peers,\n+     * increasing bandwidth consumption considerably. For instance, with 100\n+     * peers, half of which relay a tx we don't accept, that might be a 50x\n+     * bandwidth increase. A flooding attacker attempting to roll-over the\n+     * filter using minimum-sized, 60byte, transactions might manage to send\n+     * 1000/sec if we have fast peers, so we pick 120,000 to give our peers a\n+     * two minute window to send invs to us.\n+     *\n+     * Decreasing the false positive rate is fairly cheap, so we pick one in a\n+     * million to make it highly unlikely for users to have issues with this\n+     * filter.\n+     *\n+     * Memory used: 1.7MB\n+     */\n+    CRollingBloomFilter recentRejects(120000, 0.000001, insecure_rand());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945357",
      "id" : 34945357,
      "original_commit_id" : "5250f5fbcbf9b79ee1816624d9439b3b86b70f4e",
      "original_position" : 24,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34945357",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "utACK apart from randomness nit.\r\n\r\nEdit: as using randomness during static initialization seems error prone.",
      "created_at" : "2015-07-18T07:19:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-122507976",
      "id" : 122507976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6452",
      "updated_at" : "2015-07-18T08:06:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/122507976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34945564"
         }
      },
      "body" : "Changed to GetRand()\r\n\r\nThe other CRollingBloom filter use is in net.cpp, which also uses insecure_rand() - might be worth it to fix that too.\r\n\r\nRe: static global initialization, it'd be possible to change the seed here every time the bloom filter is cleared; dunno what's the best way to actually do that in C++ though.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-18T07:46:58Z",
      "diff_hunk" : "@@ -154,6 +154,29 @@ namespace {\n      */\n     map<uint256, NodeId> mapBlockSource;\n \n+    /**\n+     * Filter for transactions that were recently rejected by\n+     * AcceptToMemoryPool. These are not rerequested until the chain tip\n+     * changes, at which point the entire filter is cleared. Protected by\n+     * cs_main.\n+     *\n+     * Without this filter we'd be re-requesting txs from each of our peers,\n+     * increasing bandwidth consumption considerably. For instance, with 100\n+     * peers, half of which relay a tx we don't accept, that might be a 50x\n+     * bandwidth increase. A flooding attacker attempting to roll-over the\n+     * filter using minimum-sized, 60byte, transactions might manage to send\n+     * 1000/sec if we have fast peers, so we pick 120,000 to give our peers a\n+     * two minute window to send invs to us.\n+     *\n+     * Decreasing the false positive rate is fairly cheap, so we pick one in a\n+     * million to make it highly unlikely for users to have issues with this\n+     * filter.\n+     *\n+     * Memory used: 1.7MB\n+     */\n+    CRollingBloomFilter recentRejects(120000, 0.000001, insecure_rand());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945564",
      "id" : 34945564,
      "original_commit_id" : "5250f5fbcbf9b79ee1816624d9439b3b86b70f4e",
      "original_position" : 24,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34945564",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945638"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34945638"
         }
      },
      "body" : "GetRand() relies on openssl being initialized, so something very bad could happen if things are executed in the wrong order.\r\nThus I'd prefer an explicit initialization. Possibly make recentRejects a pointer and explicitly allocate/deallocate it.\r\nSetting a new tweak every time the filter is cleared may be overkill, I don't know.\r\nAgree re: net.cpp, although that structure is per-peer so there's not as much scope for monkey tricks.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-18T07:59:17Z",
      "diff_hunk" : "@@ -154,6 +154,29 @@ namespace {\n      */\n     map<uint256, NodeId> mapBlockSource;\n \n+    /**\n+     * Filter for transactions that were recently rejected by\n+     * AcceptToMemoryPool. These are not rerequested until the chain tip\n+     * changes, at which point the entire filter is cleared. Protected by\n+     * cs_main.\n+     *\n+     * Without this filter we'd be re-requesting txs from each of our peers,\n+     * increasing bandwidth consumption considerably. For instance, with 100\n+     * peers, half of which relay a tx we don't accept, that might be a 50x\n+     * bandwidth increase. A flooding attacker attempting to roll-over the\n+     * filter using minimum-sized, 60byte, transactions might manage to send\n+     * 1000/sec if we have fast peers, so we pick 120,000 to give our peers a\n+     * two minute window to send invs to us.\n+     *\n+     * Decreasing the false positive rate is fairly cheap, so we pick one in a\n+     * million to make it highly unlikely for users to have issues with this\n+     * filter.\n+     *\n+     * Memory used: 1.7MB\n+     */\n+    CRollingBloomFilter recentRejects(120000, 0.000001, insecure_rand());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945638",
      "id" : 34945638,
      "original_commit_id" : "5250f5fbcbf9b79ee1816624d9439b3b86b70f4e",
      "original_position" : 24,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34945638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34945720"
         }
      },
      "body" : "At what point can we actually guarantee OpenSSL is initialized? Remember that the capcity of the filter has to be pretty large - 120,000 transactions - so it could take a long time before it gets rolled over if a bad initialization is an issue.\r\n\r\nRegardless of how it gets initialized, only 1/1,000,000 txs will be affected. Sure an attacker might be able to pick-and-choose that subset, but I can't think of any example other than zeroconf crap where that actually matters.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-18T08:12:33Z",
      "diff_hunk" : "@@ -154,6 +154,29 @@ namespace {\n      */\n     map<uint256, NodeId> mapBlockSource;\n \n+    /**\n+     * Filter for transactions that were recently rejected by\n+     * AcceptToMemoryPool. These are not rerequested until the chain tip\n+     * changes, at which point the entire filter is cleared. Protected by\n+     * cs_main.\n+     *\n+     * Without this filter we'd be re-requesting txs from each of our peers,\n+     * increasing bandwidth consumption considerably. For instance, with 100\n+     * peers, half of which relay a tx we don't accept, that might be a 50x\n+     * bandwidth increase. A flooding attacker attempting to roll-over the\n+     * filter using minimum-sized, 60byte, transactions might manage to send\n+     * 1000/sec if we have fast peers, so we pick 120,000 to give our peers a\n+     * two minute window to send invs to us.\n+     *\n+     * Decreasing the false positive rate is fairly cheap, so we pick one in a\n+     * million to make it highly unlikely for users to have issues with this\n+     * filter.\n+     *\n+     * Memory used: 1.7MB\n+     */\n+    CRollingBloomFilter recentRejects(120000, 0.000001, insecure_rand());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945720",
      "id" : 34945720,
      "original_commit_id" : "5250f5fbcbf9b79ee1816624d9439b3b86b70f4e",
      "original_position" : 24,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34945720",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@laanwj As per @sipa's suggestion I added a reset() method that resets nTweak as well, and went even further to change the CRollingBloomFilter to handle setting nTweak for you. This is a bigger patch that changes addrKnown a bit as well, but overall this should simplify all uses by ensuring the default behavior is a secure RNG source.",
      "created_at" : "2015-07-19T20:26:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-122701364",
      "id" : 122701364,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6452",
      "updated_at" : "2015-07-19T20:26:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/122701364",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34964825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34964825"
         }
      },
      "body" : "I didn't realize you changed this.  For whatever reason the previous behavior was to relay transactions we rejected (even for reasons other than we already had them) if we received them from a white listed peer.  It might be better to leave this unchanged.  Although orphan transactions are already not relayed, so its not quite consistent as is.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-20T00:53:48Z",
      "diff_hunk" : "@@ -4276,11 +4310,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n+        } else {\n+            // AcceptToMemoryPool() returned false, possibly because the tx is\n+            // already in the mempool; if the tx isn't in the mempool that\n+            // means it was rejected and we shouldn't ask for it again.\n+            if (!mempool.exists(tx.GetHash())) {\n+                recentRejects.insert(tx.GetHash());\n+            }\n+            else if (pfrom->fWhitelisted) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34964825",
      "id" : 34964825,
      "original_commit_id" : "767e5366a1147c5e44bb7fcc54aa0609141b8e37",
      "original_position" : 79,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34964825",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34985672"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34985672"
         }
      },
      "body" : "Given that relaying invalid txs can get you banned, seems like a vulnerability waiting to be exploited... Sure this is for whitelisted peers only, but there's many shades of grey in white. :)",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-20T11:25:55Z",
      "diff_hunk" : "@@ -4276,11 +4310,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n+        } else {\n+            // AcceptToMemoryPool() returned false, possibly because the tx is\n+            // already in the mempool; if the tx isn't in the mempool that\n+            // means it was rejected and we shouldn't ask for it again.\n+            if (!mempool.exists(tx.GetHash())) {\n+                recentRejects.insert(tx.GetHash());\n+            }\n+            else if (pfrom->fWhitelisted) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34985672",
      "id" : 34985672,
      "original_commit_id" : "767e5366a1147c5e44bb7fcc54aa0609141b8e37",
      "original_position" : 79,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/34985672",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35000921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35000921"
         }
      },
      "body" : "I think there are some companies that rely on the current behavior that peers that have you whitelisted relay all your transactions. E.g. they use a bitcoin node as border router.\r\nAgree that it's a grey area, but changing this without announcement is a bad idea.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-20T14:37:21Z",
      "diff_hunk" : "@@ -4276,11 +4310,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n+        } else {\n+            // AcceptToMemoryPool() returned false, possibly because the tx is\n+            // already in the mempool; if the tx isn't in the mempool that\n+            // means it was rejected and we shouldn't ask for it again.\n+            if (!mempool.exists(tx.GetHash())) {\n+                recentRejects.insert(tx.GetHash());\n+            }\n+            else if (pfrom->fWhitelisted) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35000921",
      "id" : 35000921,
      "original_commit_id" : "767e5366a1147c5e44bb7fcc54aa0609141b8e37",
      "original_position" : 79,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35000921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35005273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35005273"
         }
      },
      "body" : "I wonder whether claiming that a 32-bit random integer can be cryptographically secure...",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-20T15:13:53Z",
      "diff_hunk" : "@@ -103,7 +104,11 @@ class CBloomFilter\n \n /**\n  * RollingBloomFilter is a probabilistic \"keep track of most recently inserted\" set.\n- * Construct it with the number of items to keep track of, and a false-positive rate.\n+ * Construct it with the number of items to keep track of, and a false-positive\n+ * rate. Unlike CBloomFilter, by default nTweak is set to a cryptographically\n+ * secure random value for you. Similarly rather than clear() the method",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35005273",
      "id" : 35005273,
      "original_commit_id" : "767e5366a1147c5e44bb7fcc54aa0609141b8e37",
      "original_position" : 15,
      "path" : "src/bloom.h",
      "position" : 15,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35005273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35005485"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35005485"
         }
      },
      "body" : "If a global CRollingBloomFilter object is constructed, this GetRand() call will still happen before the OpenSSL PRNG is initialized.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-20T15:15:45Z",
      "diff_hunk" : "@@ -242,9 +264,20 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n     return b1.contains(vKey);\n }\n \n-void CRollingBloomFilter::clear()\n+bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    b1.clear();\n-    b2.clear();\n+    if (nInsertions < nBloomSize / 2) {\n+        return b2.contains(hash);\n+    }\n+    return b1.contains(hash);\n+}\n+\n+void CRollingBloomFilter::reset(unsigned int nNewTweak)\n+{\n+    if (!nNewTweak)\n+        nNewTweak = GetRand(std::numeric_limits<unsigned int>::max());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35005485",
      "id" : 35005485,
      "original_commit_id" : "767e5366a1147c5e44bb7fcc54aa0609141b8e37",
      "original_position" : 70,
      "path" : "src/bloom.cpp",
      "position" : 70,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35005485",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35006141"
         }
      },
      "body" : "I think the behaviour should be to relay every valid transaction received from a whitelisted peer (including when it was in the mempool already).\r\n\r\nI don't think we should relay invalid transactions from whitelisted peers (especially not things tha would otherwise trigger DoS score), but instead yell loudly that some whitelisted peer is broken.\r\n\r\nConcept ACK here, though.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-20T15:21:02Z",
      "diff_hunk" : "@@ -4276,11 +4310,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n+        } else {\n+            // AcceptToMemoryPool() returned false, possibly because the tx is\n+            // already in the mempool; if the tx isn't in the mempool that\n+            // means it was rejected and we shouldn't ask for it again.\n+            if (!mempool.exists(tx.GetHash())) {\n+                recentRejects.insert(tx.GetHash());\n+            }\n+            else if (pfrom->fWhitelisted) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006141",
      "id" : 35006141,
      "original_commit_id" : "767e5366a1147c5e44bb7fcc54aa0609141b8e37",
      "original_position" : 79,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:21:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35006141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35006175"
         }
      },
      "body" : "Fair enough - reverted and added a FIXME for a future patch to fix.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-20T15:21:20Z",
      "diff_hunk" : "@@ -4276,11 +4310,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n+        } else {\n+            // AcceptToMemoryPool() returned false, possibly because the tx is\n+            // already in the mempool; if the tx isn't in the mempool that\n+            // means it was rejected and we shouldn't ask for it again.\n+            if (!mempool.exists(tx.GetHash())) {\n+                recentRejects.insert(tx.GetHash());\n+            }\n+            else if (pfrom->fWhitelisted) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006175",
      "id" : 35006175,
      "original_commit_id" : "767e5366a1147c5e44bb7fcc54aa0609141b8e37",
      "original_position" : 79,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:21:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35006175",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35006422"
         }
      },
      "body" : "Well yes! It's cryptographically secure if there are 32-bits of randomness unknown to the attacker; the point is the attacker has no insight into what the value is, which is what we need for this application.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-20T15:22:58Z",
      "diff_hunk" : "@@ -103,7 +104,11 @@ class CBloomFilter\n \n /**\n  * RollingBloomFilter is a probabilistic \"keep track of most recently inserted\" set.\n- * Construct it with the number of items to keep track of, and a false-positive rate.\n+ * Construct it with the number of items to keep track of, and a false-positive\n+ * rate. Unlike CBloomFilter, by default nTweak is set to a cryptographically\n+ * secure random value for you. Similarly rather than clear() the method",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006422",
      "id" : 35006422,
      "original_commit_id" : "767e5366a1147c5e44bb7fcc54aa0609141b8e37",
      "original_position" : 15,
      "path" : "src/bloom.h",
      "position" : 15,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:22:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35006422",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35006721"
         }
      },
      "body" : "Fair enough.",
      "commit_id" : "65c4c69c8504724eabb6385b3a6e917c5b85290a",
      "created_at" : "2015-07-20T15:25:13Z",
      "diff_hunk" : "@@ -103,7 +104,11 @@ class CBloomFilter\n \n /**\n  * RollingBloomFilter is a probabilistic \"keep track of most recently inserted\" set.\n- * Construct it with the number of items to keep track of, and a false-positive rate.\n+ * Construct it with the number of items to keep track of, and a false-positive\n+ * rate. Unlike CBloomFilter, by default nTweak is set to a cryptographically\n+ * secure random value for you. Similarly rather than clear() the method",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006721",
      "id" : 35006721,
      "original_commit_id" : "767e5366a1147c5e44bb7fcc54aa0609141b8e37",
      "original_position" : 15,
      "path" : "src/bloom.h",
      "position" : 15,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6452",
      "updated_at" : "2015-07-20T15:25:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35006721",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
