[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35382668"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6470"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35382668"
         }
      },
      "body" : "Can't ```- GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60``` be inside pool.Expire?, it may become an attribute of the txmempool in the future or something.",
      "commit_id" : "6b4af964ff15ffec0bc6dccef90f854fd28efddc",
      "created_at" : "2015-07-23T23:16:33Z",
      "diff_hunk" : "@@ -852,6 +877,12 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                                    hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n+        // Expire old transactions before trying to replace low-priority ones.\n+        int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35382668",
      "id" : 35382668,
      "original_commit_id" : "6b4af964ff15ffec0bc6dccef90f854fd28efddc",
      "original_position" : 71,
      "path" : "src/main.cpp",
      "position" : 71,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6470",
      "updated_at" : "2015-07-23T23:16:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35382668",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35382823"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6470"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35382823"
         }
      },
      "body" : "s/mempool/pool don't use the global when you have the parameter",
      "commit_id" : "6b4af964ff15ffec0bc6dccef90f854fd28efddc",
      "created_at" : "2015-07-23T23:18:33Z",
      "diff_hunk" : "@@ -859,22 +890,51 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n+        // The fees required to accept this transaction start with the fees required to accept it on its own\n+        CAmount nFeesRequired = 0;\n+        if (fLimitFree) {\n+            nFeesRequired = GetMinRelayFee(tx, nSize, true);\n+            if (nFees < nFeesRequired)\n+                return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\", hash.ToString(), nFees, nFeesRequired),\n+                                 REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+        }\n+        // If we are not relaying low priority free transactions, then if this tx doesn't have sufficient priority\n+        // it must have minRelayTxFee\n+        if (GetBoolArg(\"-relaypriority\", true) && nFeesRequired < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+            nFeesRequired =  ::minRelayTxFee.GetFee(nSize);\n+            if (nFees < nFeesRequired)\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n+        }\n+\n+        // Try to make space in mempool\n+        size_t softcap = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 700000;\n+        size_t hardcap = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+        size_t capstep = (hardcap - softcap) / 10;\n+        std::set<uint256> stagedelete;\n+        CAmount nFeesDeleted = 0;\n+\n+        if (!mempool.StageTrimToSize(softcap, entry, stagedelete, nFeesRequired, nFeesDeleted)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35382823",
      "id" : 35382823,
      "original_commit_id" : "6b4af964ff15ffec0bc6dccef90f854fd28efddc",
      "original_position" : 116,
      "path" : "src/main.cpp",
      "position" : 116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6470",
      "updated_at" : "2015-07-23T23:18:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35382823",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35383584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6470"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35383584"
         }
      },
      "body" : "Can't all this code around pool.addUnchecked be moved to a new mempool method that internally calls pool.addUnchecked ?\r\nYou could go further. stagedelete and nFeesDeleted could just be ctxmempool attributes so that you don't need to pass it to pool.RemoveStagedAndAddUnchecked (or whatever you want to call the method) and pool.StageTrimToSize (or whatever you want to call the method)",
      "commit_id" : "6b4af964ff15ffec0bc6dccef90f854fd28efddc",
      "created_at" : "2015-07-23T23:29:37Z",
      "diff_hunk" : "@@ -921,8 +981,38 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n \n+        // Make actually space",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35383584",
      "id" : 35383584,
      "original_commit_id" : "6b4af964ff15ffec0bc6dccef90f854fd28efddc",
      "original_position" : 146,
      "path" : "src/main.cpp",
      "position" : 146,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6470",
      "updated_at" : "2015-07-23T23:29:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35383584",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35384695"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6470"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35384695"
         }
      },
      "body" : "Can't all this new code be part of  mempool.StageTrimToSize ?\r\nIn fact, I would go further and take anything that depends on nFeesDeleted to txmempool as well (including ```csFreeLimiter``` ```GetBoolArg(\"-relaypriority\", true)``` and ```GetMinRelayFee```).\r\nI would also move https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L785 there and have all mempool-replacement-related things in one place: txmempool. We could also move some things directly to policy/fees but I'm not going to ask for that much.\r\n\r\nI'm sorry but I won't push my nits as branches with fixup! commits anymore on this subject.\r\nI guess I'll have to wait the ages that will take to move the code later and accept that nobody else but me cares about  the movement being better-than-free right now. I won't miss the chance to beg you though.\r\nPlease, try some of my movement suggestions and if takes you too long to adapt the parameter too recompile or you don't like what my suggestions are doing to the number of parameters in pool.StageTrimToSize just stop it. And I guess I can just add/maintain all those things in my tomove list. It seems I'm the only one that doesn't love the fact that most of our changes conflict with each other in main.cpp. But I understand, moving things out of main so that things don't need to conflict and don't need to be prioritized is not a priority.\r\n@sipa I must be getting something wrong or I've been communicating poorly around this. Maybe code doesn't talk as much as I thought after all.",
      "commit_id" : "6b4af964ff15ffec0bc6dccef90f854fd28efddc",
      "created_at" : "2015-07-23T23:51:10Z",
      "diff_hunk" : "@@ -859,22 +890,51 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n+        // The fees required to accept this transaction start with the fees required to accept it on its own",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35384695",
      "id" : 35384695,
      "original_commit_id" : "6b4af964ff15ffec0bc6dccef90f854fd28efddc",
      "original_position" : 93,
      "path" : "src/main.cpp",
      "position" : 93,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6470",
      "updated_at" : "2015-07-23T23:51:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35384695",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "re: GetRand slowness, wouldn't insecure_rand() be good enough here?\r\nIf you need both fast and cryptographic randomness you'd have to wait for #5885",
      "created_at" : "2015-07-24T07:56:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-124409428",
      "id" : 124409428,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6470",
      "updated_at" : "2015-07-24T07:56:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124409428",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "I like the approach; I'll review the code in detail soon.",
      "created_at" : "2015-07-24T17:53:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-124598997",
      "id" : 124598997,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6470",
      "updated_at" : "2015-07-24T17:53:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124598997",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "The idea that a transaction must be \"paid for\" when evicted by an unrelated transaction is mistaken.  It creates zero incentive for the evicted author to pay more fees in the future.  He got what he wanted -- his tx was relayed.\r\n\r\nIf the decision does not affect the cost, the cost should not affect the decision.",
      "created_at" : "2015-07-25T16:26:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-124859207",
      "id" : 124859207,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6470",
      "updated_at" : "2015-07-25T16:26:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124859207",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4284124?v=3",
         "events_url" : "https://api.github.com/users/dgenr8/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dgenr8/followers",
         "following_url" : "https://api.github.com/users/dgenr8/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dgenr8/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dgenr8",
         "id" : 4284124,
         "login" : "dgenr8",
         "organizations_url" : "https://api.github.com/users/dgenr8/orgs",
         "received_events_url" : "https://api.github.com/users/dgenr8/received_events",
         "repos_url" : "https://api.github.com/users/dgenr8/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dgenr8/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dgenr8"
      }
   }
]
