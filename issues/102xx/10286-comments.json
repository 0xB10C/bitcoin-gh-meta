[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114424119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114424119"
         }
      },
      "body" : "In commit \"Add a CValidationInterface::TransactionRemovedFromMempool\"\r\n\r\nWhat does this imply? Just that if there are any new calls to `addUnchecked`, the caller also needs to signal `TransactionAddedToMempool` not to break the wallet? Would say this in the comment explicitly if this is the case.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-02T21:01:49Z",
      "diff_hunk" : "@@ -511,6 +511,9 @@ class CTxMemPool\n     // to track size/count of descendant transactions.  First version of\n     // addUnchecked can be used to have it call CalculateMemPoolAncestors(), and\n     // then invoke the second version.\n+    // Note that addUnchecked is ONLY called from ATMP during normal operation,\n+    // and any other callers may break wallet's in-mempool tracking (due to\n+    // lack of CValidationInterface::TransactionAddedToMempool callbacks).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114424119",
      "id" : 114424119,
      "original_commit_id" : "1b6b0c9911a7429c001f74d1b58645f0716988fb",
      "original_position" : 6,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T19:58:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114424119",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114424864"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114424864"
         }
      },
      "body" : "In commit \"Add a CValidationInterface::TransactionRemovedFromMempool\"\r\n\r\nUnclear to me what a normal operation is. Comment might be clearer mentioning a not normal counterexample.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-02T21:05:07Z",
      "diff_hunk" : "@@ -511,6 +511,9 @@ class CTxMemPool\n     // to track size/count of descendant transactions.  First version of\n     // addUnchecked can be used to have it call CalculateMemPoolAncestors(), and\n     // then invoke the second version.\n+    // Note that addUnchecked is ONLY called from ATMP during normal operation,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114424864",
      "id" : 114424864,
      "original_commit_id" : "1b6b0c9911a7429c001f74d1b58645f0716988fb",
      "original_position" : 4,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T19:58:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114424864",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114427322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114427322"
         }
      },
      "body" : "In commit \"Add CWallet::BlockUntilSyncedToCurrentChain()\"\r\n\r\nDoes \"some things might block forever\" just mean this wait might block forever? If so, maybe be more concrete and say something like \"lastBlockProcessed will not be rewound back to chainActive.Tip().\" Otherwise it would be good to clarify what some things is referring to.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-02T21:16:09Z",
      "diff_hunk" : "@@ -1150,6 +1156,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    const CBlockIndex* initialChainTip;\n+    {\n+        LOCK(cs_main);\n+        initialChainTip = chainActive.Tip();\n+    }\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);\n+    std::unique_lock<std::mutex> lock(lastBlockProcessedMutex);\n+\n+    assert(lastBlockProcessed);\n+\n+    auto pred = [this, initialChainTip] {\n+            if (this->lastBlockProcessed == initialChainTip) {\n+                return true;\n+            }\n+            if (this->lastBlockProcessed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n+                return true;\n+            }\n+            // Catch the race condition where the wallet may have caught up and\n+            // moved past initialChainTip through a reorg before we could get\n+            // lastBlockProcessedMutex.\n+            // This should be exceedingly rare in regular usage, so potentially\n+            // eating 100ms to retry this lock should be fine (not TRY_LOCKing\n+            // here would be a lock inversion against lastBlockProcessedMutex)\n+            TRY_LOCK(cs_main, mainLocked);\n+            if (mainLocked) {\n+                if (this->lastBlockProcessed == chainActive.Tip()) {\n+                    return true;\n+                }\n+                // If the user called invalidatechain some things might block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114427322",
      "id" : 114427322,
      "original_commit_id" : "f651d58a3b841ff7d8e4917881da6f6a8f8ec42f",
      "original_position" : 47,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T19:58:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114427322",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114427544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114427544"
         }
      },
      "body" : "In commit \"Add CWallet::BlockUntilSyncedToCurrentChain()\"\r\n\r\nStray tab here",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-02T21:17:11Z",
      "diff_hunk" : "@@ -1108,6 +1117,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n        If possibleOldChain is provided, the parameters from the old chain (version)\n        will be preserved. */\n     bool SetHDMasterKey(const CPubKey& key, CHDChain *possibleOldChain = nullptr);\n+\n+    /**\n+     * Blocks until the wallet state is up-to-date to /at least/ the current\n+     * chain at the time this function is entered\n+     * Obviously holding cs_main/cs_wallet when going into this call may cause\n+\t * deadlock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114427544",
      "id" : 114427544,
      "original_commit_id" : "f651d58a3b841ff7d8e4917881da6f6a8f8ec42f",
      "original_position" : 32,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T19:58:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114427544",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114430207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114430207"
         }
      },
      "body" : "In commit \"Add calls to CWallet::BlockUntilSyncedToCurrentChain() in RPCs\"\r\n\r\nCan you give an example of specific bug that could occur without these BlockUntilSynced calls and is prevented by adding them? I looked at some of the old issues (#9584, #9148, etc), but they're confusing and I don't know how much of the information is up to date.\r\n\r\nIt would be great if `BlockUntilSyncedToCurrentChain` had a comment that made it clearer when it does and doesn't need to be called, and what consistency issues it is and isn't supposed to solve.\r\n\r\nMaybe there should also be a bullet point in the new [RPC interface guidelines](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#rpc-interface-guidelines) about what kind of consistency wallet RPCs are expected to have.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-02T21:30:07Z",
      "diff_hunk" : "@@ -2648,6 +2712,10 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n+    // Make sure the results are valid at least up to the most recent block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114430207",
      "id" : 114430207,
      "original_commit_id" : "ec4df8c633f0297eaa6f74304ad058bb5413a2ee",
      "original_position" : 180,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 180,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T19:58:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114430207",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114434508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114434508"
         }
      },
      "body" : "In commit \"Fix zmq tests now that txn/blocks are unordered\"\r\n\r\nMaybe assert `msg[0] != topic` above this line to confirm actually receive distinct `hashtx` and `hashblock` messages (not two hashblocks).",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-02T21:52:37Z",
      "diff_hunk" : "@@ -56,17 +56,25 @@ def run_test(self):\n         self.log.info(\"listen...\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n-        assert_equal(topic, b\"hashtx\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx\n+        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx/block\n+\n+        if topic == b\"hashblock\":\n+            blkhash = bytes_to_hex_str(body)\n+        else:\n+            assert_equal(topic, b\"hashtx\")\n \n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114434508",
      "id" : 114434508,
      "original_commit_id" : "6fb571977d9cc41793a594688e5071dd5bbd864d",
      "original_position" : 16,
      "path" : "test/functional/zmq_test.py",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T19:58:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114434508",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114630924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114630924"
         }
      },
      "body" : "Updated the comment to mention that addUnchecked is only called from ATMP outside of tests period. I think the implication is that we need to fix the strong-coupling here.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T19:20:18Z",
      "diff_hunk" : "@@ -511,6 +511,9 @@ class CTxMemPool\n     // to track size/count of descendant transactions.  First version of\n     // addUnchecked can be used to have it call CalculateMemPoolAncestors(), and\n     // then invoke the second version.\n+    // Note that addUnchecked is ONLY called from ATMP during normal operation,\n+    // and any other callers may break wallet's in-mempool tracking (due to\n+    // lack of CValidationInterface::TransactionAddedToMempool callbacks).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114630924",
      "id" : 114630924,
      "original_commit_id" : "1b6b0c9911a7429c001f74d1b58645f0716988fb",
      "original_position" : 6,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 36113880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T19:58:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114630924",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "Rebased and fixed @ryanofsky's mostly-comment nits :).",
      "created_at" : "2017-05-03T19:20:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299009278",
      "id" : 299009278,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10286",
      "updated_at" : "2017-05-03T19:20:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299009278",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114632911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114632911"
         }
      },
      "body" : "These changes do not appear to be related to the rest. Am I missing something or should this be in its own PR?\r\nI believe @sipa made a similar comment on #10179 ",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T19:30:28Z",
      "diff_hunk" : "@@ -12,6 +12,7 @@\n #include \"rpc/server.h\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114632911",
      "id" : 114632911,
      "original_commit_id" : "a14fa884f7ef82b9b1fc8b8d85a211ec2f8ea59e",
      "original_position" : 1,
      "path" : "src/qt/test/rpcnestedtests.cpp",
      "position" : 1,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114632911",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114633497"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114633497"
         }
      },
      "body" : "This would be safer/faster/cleaner with ` : internals(new CMainSignalsInstance()) {}` instead of the body.\r\n\r\nInitializer lists guarantee proper cross-thread visibility, otherwise you might init twice and have sharing issues.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T19:33:26Z",
      "diff_hunk" : "@@ -5,48 +5,107 @@\n \n #include \"validationinterface.h\"\n \n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+};\n+\n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114633497",
      "id" : 114633497,
      "original_commit_id" : "f481ce1109d5b51ea55187a497bbca7b0fe8a856",
      "original_position" : 21,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114633497",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114639639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114639639"
         }
      },
      "body" : "You can accomplish this entire commit by changing this line to \r\n`    void schedule(Function f, boost::chrono::system_clock::time_point t = boost::chrono::system_clock::now());`",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T20:03:44Z",
      "diff_hunk" : "@@ -43,6 +43,9 @@ class CScheduler\n     // Call func at/after time t\n     void schedule(Function f, boost::chrono::system_clock::time_point t);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114639639",
      "id" : 114639639,
      "original_commit_id" : "d923d41826c7b00934284cdb04e3263ca236d99f",
      "original_position" : 2,
      "path" : "src/scheduler.h",
      "position" : 11,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114639639",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114641508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114641508"
         }
      },
      "body" : "This comment and issue can  be avoided entirely if you move line 56 up to 46.\r\nAfter that lines 54 and 55 (which will be 55 and 56) can be removed.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T20:13:05Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114641508",
      "id" : 114641508,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114641508",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114644451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114644451"
         }
      },
      "body" : "RAII is great and all but exists for the acquisition of resources. Why not try{} catch{}?\r\n`        try {\r\n        \tcallback();\r\n        } catch(...) {\r\n\t\t\t{\r\n\t\t\t\tLOCK(cs_callbacksPending);\r\n\t\t\t\tfCallbacksRunning = false;\r\n\t\t\t}\r\n\t\t\tMaybeScheduleProcessQueue();\r\n        }`",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T20:26:32Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114644451",
      "id" : 114644451,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 48,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114644451",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114646664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114646664"
         }
      },
      "body" : "Is this really what we want? A scheduler call for each callback?\r\nIt does prevent starving any other scheduled tasks in case of a long queue, but it also generates a lot of lock contention which can be a performance killer.\r\n\r\nUnless there is evidence of this queue processing messing with other scheduling I feel strongly we should avoid this design. It will be much harder to detect performance issues from lock contention than performance issues from the processing of a long queue.\r\n\r\nI recommend replacing line 45 with a size() query, -- the size (to account for your pop), and put the entire thing in a do {} while (size > 0);. You can then avoid calling `MaybeScheduleProcessQueue()` inside of `ProcessQueue()` itself. ",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T20:35:42Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+        // to ensure both happen safely even if callback() throws.\n+        struct RAIICallbacksRunning {\n+            CMainSignalsInstance* instance;\n+            RAIICallbacksRunning(CMainSignalsInstance* _instance) : instance(_instance) {}\n+            ~RAIICallbacksRunning() {\n+                {\n+                    LOCK(instance->cs_callbacksPending);\n+                    instance->fCallbacksRunning = false;\n+                }\n+                instance->MaybeScheduleProcessQueue();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114646664",
      "id" : 114646664,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 58,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114646664",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114647690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114647690"
         }
      },
      "body" : "This is no longer a scheduler. It has one public method, `void AddToProcessQueue(std::function<void (void)> func);`, which does not take any 'schedule' information.\r\n\r\nThis class is neat, more of a SingleThreadedExecutor that happens to use a scheduler to execute. Really its treating the scheduler as a thread pool. \r\n\r\nI'm all for keeping this if it's not named 'scheduler' and if a thread pool abstraction can be extracted from CScheduler then both this class and CScheduler can use that pool for execution. Also to consider, is this used anywhere else yet or is it expected to be used?",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T20:40:07Z",
      "diff_hunk" : "@@ -82,4 +84,26 @@ class CScheduler\n     bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n };\n \n+/**\n+ * Class used by CScheduler clients which may schedule multiple jobs\n+ * which are required to be run serially. Does not require such jobs\n+ * to be executed on the same thread, but no two jobs will be executed\n+ * at the same time.\n+ */\n+class CSingleThreadedSchedulerClient {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114647690",
      "id" : 114647690,
      "original_commit_id" : "0703075a7153912ee089f6f2e0c1dfc3b41e76fe",
      "original_position" : 19,
      "path" : "src/scheduler.h",
      "position" : 29,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114647690",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114649332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114649332"
         }
      },
      "body" : "Odd comment, \"Obviously... may...\" is concerning enough that we should have a comment explaining how to avoid a deadlock rather than this vagueness or perhaps removing the statement altogether?",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T20:46:55Z",
      "diff_hunk" : "@@ -1104,6 +1113,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n     bool SetHDMasterKey(const CPubKey& key);\n+\n+    /**\n+     * Blocks until the wallet state is up-to-date to /at least/ the current\n+     * chain at the time this function is entered\n+     * Obviously holding cs_main/cs_wallet when going into this call may cause",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114649332",
      "id" : 114649332,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 31,
      "path" : "src/wallet/wallet.h",
      "position" : 74,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114649332",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114651162"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114651162"
         }
      },
      "body" : "This method is concerning. It may be that it is being used in a safe manner but the method itself is quite dangerous. Preliminary observation suggests this can be called from both the command line RPC and JSON RPC at the same time but I don't know how true this is. \r\n\r\nCalling it from two different threads appears to be not okay, so it is \"Not thread safe\" and should likely be labeled as such (though I don't see this as a standard in the project codebase so maybe that's going a bit far). ",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T20:55:13Z",
      "diff_hunk" : "@@ -1147,6 +1153,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114651162",
      "id" : 114651162,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 17,
      "path" : "src/wallet/wallet.cpp",
      "position" : 43,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114651162",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114654883"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114654883"
         }
      },
      "body" : "If these assertions need to be held for this method to execute correctly then the method cannot be thread safe as itself being called twice, in two threads, is enough to cause a failure.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T21:11:39Z",
      "diff_hunk" : "@@ -1147,6 +1153,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    const CBlockIndex* initialChainTip;\n+    {\n+        LOCK(cs_main);\n+        initialChainTip = chainActive.Tip();\n+    }\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114654883",
      "id" : 114654883,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 24,
      "path" : "src/wallet/wallet.cpp",
      "position" : 50,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114654883",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114657449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114657449"
         }
      },
      "body" : "This is a fine solution. All these lock inversion concerns make me wonder if there isn't a more serious issue regarding lack of proper encapsulation with some of these locks. I'm sure global locks (cs_main) don't help either, can't imagine actually needing a global lock. ",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-03T21:24:18Z",
      "diff_hunk" : "@@ -104,7 +104,9 @@ void UnregisterAllValidationInterfaces() {\n \n void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        internals->TransactionRemovedFromMempool(ptx);\n+        internals->schedulerClient.AddToProcessQueue([ptx, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114657449",
      "id" : 114657449,
      "original_commit_id" : "b9acf32eb65c2a70382c36bd8b218d8ac513e2c2",
      "original_position" : 5,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-03T23:16:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114657449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114685849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114685849"
         }
      },
      "body" : "> This comment and issue can be avoided entirely if you move line 56 up to 46.\r\n> After that lines 54 and 55 (which will be 55 and 56) can be removed.\r\n\r\nI think this is right (line numbers apply to commit 8daf2439796dfdee41c1a32787e0ec9726daf6be). It also seems like you could eliminate the fCallbacksRunning variable if you change ProcessQueue to call pop_front after running the callback and condition the AddToProcessQueue schedule() call on the queue being previously empty.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-04T01:04:28Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114685849",
      "id" : 114685849,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36173185,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-04T01:21:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114685849",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686501"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686501"
         }
      },
      "body" : "> Why not try{} catch{}?\r\n\r\nMy guess about this was that it allows the processqueue to take advantage of whatever error handling or reporting cscheduler provides, and to not have to repeat the finalization logic both inside and after the catch clause. Either approach seems fine to me, though.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-04T01:13:41Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686501",
      "id" : 114686501,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 48,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36173185,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-04T01:21:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686501",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686861"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686861"
         }
      },
      "body" : "Without them test_bitcoin-qt segfaults.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-04T01:18:25Z",
      "diff_hunk" : "@@ -12,6 +12,7 @@\n #include \"rpc/server.h\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686861",
      "id" : 114686861,
      "original_commit_id" : "a14fa884f7ef82b9b1fc8b8d85a211ec2f8ea59e",
      "original_position" : 1,
      "path" : "src/qt/test/rpcnestedtests.cpp",
      "position" : 1,
      "pull_request_review_id" : 36174235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-04T01:18:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686861",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686925"
         }
      },
      "body" : "This is being run in a background thread, so there are no possible lock inversions? We've had great success with DEBUG_LOCKORDER and havent had any serious deadlock issues afair since the 0.3.X era.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-04T01:19:21Z",
      "diff_hunk" : "@@ -104,7 +104,9 @@ void UnregisterAllValidationInterfaces() {\n \n void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        internals->TransactionRemovedFromMempool(ptx);\n+        internals->schedulerClient.AddToProcessQueue([ptx, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686925",
      "id" : 114686925,
      "original_commit_id" : "b9acf32eb65c2a70382c36bd8b218d8ac513e2c2",
      "original_position" : 5,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36174305,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-04T01:19:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686925",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686965"
         }
      },
      "body" : "> Is this really what we want? A scheduler call for each callback?\r\n\r\nI'm guessing the work done in any of these callbacks far outweighs the cost of scheduling one of them but I could be wrong.\r\n\r\n",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-04T01:20:05Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+        // to ensure both happen safely even if callback() throws.\n+        struct RAIICallbacksRunning {\n+            CMainSignalsInstance* instance;\n+            RAIICallbacksRunning(CMainSignalsInstance* _instance) : instance(_instance) {}\n+            ~RAIICallbacksRunning() {\n+                {\n+                    LOCK(instance->cs_callbacksPending);\n+                    instance->fCallbacksRunning = false;\n+                }\n+                instance->MaybeScheduleProcessQueue();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686965",
      "id" : 114686965,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 58,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36173185,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-04T01:21:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686965",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687180"
         }
      },
      "body" : "Looks like you commented on an outdated version and github wont show me full context, so I have no idea what those line numbers refer to :/",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-04T01:23:16Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687180",
      "id" : 114687180,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36174603,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-04T01:23:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687180",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687225"
         }
      },
      "body" : "@laanwj previously requested that any exceptions be thrown all the way up, so this was an easier way to do that. That request seemed reasonable.",
      "commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "created_at" : "2017-05-04T01:23:56Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687225",
      "id" : 114687225,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 48,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36174655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-05-04T01:23:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687225",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
