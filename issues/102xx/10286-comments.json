[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114424119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114424119"
         }
      },
      "body" : "In commit \"Add a CValidationInterface::TransactionRemovedFromMempool\"\r\n\r\nWhat does this imply? Just that if there are any new calls to `addUnchecked`, the caller also needs to signal `TransactionAddedToMempool` not to break the wallet? Would say this in the comment explicitly if this is the case.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-02T21:01:49Z",
      "diff_hunk" : "@@ -511,6 +511,9 @@ class CTxMemPool\n     // to track size/count of descendant transactions.  First version of\n     // addUnchecked can be used to have it call CalculateMemPoolAncestors(), and\n     // then invoke the second version.\n+    // Note that addUnchecked is ONLY called from ATMP during normal operation,\n+    // and any other callers may break wallet's in-mempool tracking (due to\n+    // lack of CValidationInterface::TransactionAddedToMempool callbacks).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114424119",
      "id" : 114424119,
      "original_commit_id" : "1b6b0c9911a7429c001f74d1b58645f0716988fb",
      "original_position" : 6,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114424119",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114424864"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114424864"
         }
      },
      "body" : "In commit \"Add a CValidationInterface::TransactionRemovedFromMempool\"\r\n\r\nUnclear to me what a normal operation is. Comment might be clearer mentioning a not normal counterexample.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-02T21:05:07Z",
      "diff_hunk" : "@@ -511,6 +511,9 @@ class CTxMemPool\n     // to track size/count of descendant transactions.  First version of\n     // addUnchecked can be used to have it call CalculateMemPoolAncestors(), and\n     // then invoke the second version.\n+    // Note that addUnchecked is ONLY called from ATMP during normal operation,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114424864",
      "id" : 114424864,
      "original_commit_id" : "1b6b0c9911a7429c001f74d1b58645f0716988fb",
      "original_position" : 4,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114424864",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114427322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114427322"
         }
      },
      "body" : "In commit \"Add CWallet::BlockUntilSyncedToCurrentChain()\"\r\n\r\nDoes \"some things might block forever\" just mean this wait might block forever? If so, maybe be more concrete and say something like \"lastBlockProcessed will not be rewound back to chainActive.Tip().\" Otherwise it would be good to clarify what some things is referring to.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-02T21:16:09Z",
      "diff_hunk" : "@@ -1150,6 +1156,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    const CBlockIndex* initialChainTip;\n+    {\n+        LOCK(cs_main);\n+        initialChainTip = chainActive.Tip();\n+    }\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);\n+    std::unique_lock<std::mutex> lock(lastBlockProcessedMutex);\n+\n+    assert(lastBlockProcessed);\n+\n+    auto pred = [this, initialChainTip] {\n+            if (this->lastBlockProcessed == initialChainTip) {\n+                return true;\n+            }\n+            if (this->lastBlockProcessed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n+                return true;\n+            }\n+            // Catch the race condition where the wallet may have caught up and\n+            // moved past initialChainTip through a reorg before we could get\n+            // lastBlockProcessedMutex.\n+            // This should be exceedingly rare in regular usage, so potentially\n+            // eating 100ms to retry this lock should be fine (not TRY_LOCKing\n+            // here would be a lock inversion against lastBlockProcessedMutex)\n+            TRY_LOCK(cs_main, mainLocked);\n+            if (mainLocked) {\n+                if (this->lastBlockProcessed == chainActive.Tip()) {\n+                    return true;\n+                }\n+                // If the user called invalidatechain some things might block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114427322",
      "id" : 114427322,
      "original_commit_id" : "f651d58a3b841ff7d8e4917881da6f6a8f8ec42f",
      "original_position" : 47,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114427322",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114427544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114427544"
         }
      },
      "body" : "In commit \"Add CWallet::BlockUntilSyncedToCurrentChain()\"\r\n\r\nStray tab here",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-02T21:17:11Z",
      "diff_hunk" : "@@ -1108,6 +1117,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n        If possibleOldChain is provided, the parameters from the old chain (version)\n        will be preserved. */\n     bool SetHDMasterKey(const CPubKey& key, CHDChain *possibleOldChain = nullptr);\n+\n+    /**\n+     * Blocks until the wallet state is up-to-date to /at least/ the current\n+     * chain at the time this function is entered\n+     * Obviously holding cs_main/cs_wallet when going into this call may cause\n+\t * deadlock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114427544",
      "id" : 114427544,
      "original_commit_id" : "f651d58a3b841ff7d8e4917881da6f6a8f8ec42f",
      "original_position" : 32,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114427544",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114430207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114430207"
         }
      },
      "body" : "In commit \"Add calls to CWallet::BlockUntilSyncedToCurrentChain() in RPCs\"\r\n\r\nCan you give an example of specific bug that could occur without these BlockUntilSynced calls and is prevented by adding them? I looked at some of the old issues (#9584, #9148, etc), but they're confusing and I don't know how much of the information is up to date.\r\n\r\nIt would be great if `BlockUntilSyncedToCurrentChain` had a comment that made it clearer when it does and doesn't need to be called, and what consistency issues it is and isn't supposed to solve.\r\n\r\nMaybe there should also be a bullet point in the new [RPC interface guidelines](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#rpc-interface-guidelines) about what kind of consistency wallet RPCs are expected to have.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-02T21:30:07Z",
      "diff_hunk" : "@@ -2648,6 +2712,10 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n+    // Make sure the results are valid at least up to the most recent block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114430207",
      "id" : 114430207,
      "original_commit_id" : "ec4df8c633f0297eaa6f74304ad058bb5413a2ee",
      "original_position" : 180,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114430207",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114434508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114434508"
         }
      },
      "body" : "In commit \"Fix zmq tests now that txn/blocks are unordered\"\r\n\r\nMaybe assert `msg[0] != topic` above this line to confirm actually receive distinct `hashtx` and `hashblock` messages (not two hashblocks).",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-02T21:52:37Z",
      "diff_hunk" : "@@ -56,17 +56,25 @@ def run_test(self):\n         self.log.info(\"listen...\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n-        assert_equal(topic, b\"hashtx\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx\n+        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx/block\n+\n+        if topic == b\"hashblock\":\n+            blkhash = bytes_to_hex_str(body)\n+        else:\n+            assert_equal(topic, b\"hashtx\")\n \n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114434508",
      "id" : 114434508,
      "original_commit_id" : "6fb571977d9cc41793a594688e5071dd5bbd864d",
      "original_position" : 16,
      "path" : "test/functional/zmq_test.py",
      "position" : null,
      "pull_request_review_id" : 35889308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114434508",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114630924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114630924"
         }
      },
      "body" : "Updated the comment to mention that addUnchecked is only called from ATMP outside of tests period. I think the implication is that we need to fix the strong-coupling here.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T19:20:18Z",
      "diff_hunk" : "@@ -511,6 +511,9 @@ class CTxMemPool\n     // to track size/count of descendant transactions.  First version of\n     // addUnchecked can be used to have it call CalculateMemPoolAncestors(), and\n     // then invoke the second version.\n+    // Note that addUnchecked is ONLY called from ATMP during normal operation,\n+    // and any other callers may break wallet's in-mempool tracking (due to\n+    // lack of CValidationInterface::TransactionAddedToMempool callbacks).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114630924",
      "id" : 114630924,
      "original_commit_id" : "1b6b0c9911a7429c001f74d1b58645f0716988fb",
      "original_position" : 6,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 36113880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114630924",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "Rebased and fixed @ryanofsky's mostly-comment nits :).",
      "created_at" : "2017-05-03T19:20:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299009278",
      "id" : 299009278,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10286",
      "updated_at" : "2017-05-03T19:20:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299009278",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114632911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114632911"
         }
      },
      "body" : "These changes do not appear to be related to the rest. Am I missing something or should this be in its own PR?\r\nI believe @sipa made a similar comment on #10179 ",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T19:30:28Z",
      "diff_hunk" : "@@ -12,6 +12,7 @@\n #include \"rpc/server.h\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114632911",
      "id" : 114632911,
      "original_commit_id" : "a14fa884f7ef82b9b1fc8b8d85a211ec2f8ea59e",
      "original_position" : 1,
      "path" : "src/qt/test/rpcnestedtests.cpp",
      "position" : 1,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114632911",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114633497"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114633497"
         }
      },
      "body" : "This would be safer/faster/cleaner with ` : internals(new CMainSignalsInstance()) {}` instead of the body.\r\n\r\nInitializer lists guarantee proper cross-thread visibility, otherwise you might init twice and have sharing issues.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T19:33:26Z",
      "diff_hunk" : "@@ -5,48 +5,107 @@\n \n #include \"validationinterface.h\"\n \n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+};\n+\n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114633497",
      "id" : 114633497,
      "original_commit_id" : "f481ce1109d5b51ea55187a497bbca7b0fe8a856",
      "original_position" : 21,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114633497",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114639639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114639639"
         }
      },
      "body" : "You can accomplish this entire commit by changing this line to \r\n`    void schedule(Function f, boost::chrono::system_clock::time_point t = boost::chrono::system_clock::now());`",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T20:03:44Z",
      "diff_hunk" : "@@ -43,6 +43,9 @@ class CScheduler\n     // Call func at/after time t\n     void schedule(Function f, boost::chrono::system_clock::time_point t);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114639639",
      "id" : 114639639,
      "original_commit_id" : "d923d41826c7b00934284cdb04e3263ca236d99f",
      "original_position" : 2,
      "path" : "src/scheduler.h",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114639639",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114641508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114641508"
         }
      },
      "body" : "This comment and issue can  be avoided entirely if you move line 56 up to 46.\r\nAfter that lines 54 and 55 (which will be 55 and 56) can be removed.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T20:13:05Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114641508",
      "id" : 114641508,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114641508",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114644451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114644451"
         }
      },
      "body" : "RAII is great and all but exists for the acquisition of resources. Why not try{} catch{}?\r\n`        try {\r\n        \tcallback();\r\n        } catch(...) {\r\n\t\t\t{\r\n\t\t\t\tLOCK(cs_callbacksPending);\r\n\t\t\t\tfCallbacksRunning = false;\r\n\t\t\t}\r\n\t\t\tMaybeScheduleProcessQueue();\r\n        }`",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T20:26:32Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114644451",
      "id" : 114644451,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 48,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114644451",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114646664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114646664"
         }
      },
      "body" : "Is this really what we want? A scheduler call for each callback?\r\nIt does prevent starving any other scheduled tasks in case of a long queue, but it also generates a lot of lock contention which can be a performance killer.\r\n\r\nUnless there is evidence of this queue processing messing with other scheduling I feel strongly we should avoid this design. It will be much harder to detect performance issues from lock contention than performance issues from the processing of a long queue.\r\n\r\nI recommend replacing line 45 with a size() query, -- the size (to account for your pop), and put the entire thing in a do {} while (size > 0);. You can then avoid calling `MaybeScheduleProcessQueue()` inside of `ProcessQueue()` itself. ",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T20:35:42Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+        // to ensure both happen safely even if callback() throws.\n+        struct RAIICallbacksRunning {\n+            CMainSignalsInstance* instance;\n+            RAIICallbacksRunning(CMainSignalsInstance* _instance) : instance(_instance) {}\n+            ~RAIICallbacksRunning() {\n+                {\n+                    LOCK(instance->cs_callbacksPending);\n+                    instance->fCallbacksRunning = false;\n+                }\n+                instance->MaybeScheduleProcessQueue();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114646664",
      "id" : 114646664,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 58,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114646664",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114647690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114647690"
         }
      },
      "body" : "This is no longer a scheduler. It has one public method, `void AddToProcessQueue(std::function<void (void)> func);`, which does not take any 'schedule' information.\r\n\r\nThis class is neat, more of a SingleThreadedExecutor that happens to use a scheduler to execute. Really its treating the scheduler as a thread pool. \r\n\r\nI'm all for keeping this if it's not named 'scheduler' and if a thread pool abstraction can be extracted from CScheduler then both this class and CScheduler can use that pool for execution. Also to consider, is this used anywhere else yet or is it expected to be used?",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T20:40:07Z",
      "diff_hunk" : "@@ -82,4 +84,26 @@ class CScheduler\n     bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n };\n \n+/**\n+ * Class used by CScheduler clients which may schedule multiple jobs\n+ * which are required to be run serially. Does not require such jobs\n+ * to be executed on the same thread, but no two jobs will be executed\n+ * at the same time.\n+ */\n+class CSingleThreadedSchedulerClient {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114647690",
      "id" : 114647690,
      "original_commit_id" : "0703075a7153912ee089f6f2e0c1dfc3b41e76fe",
      "original_position" : 19,
      "path" : "src/scheduler.h",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114647690",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114649332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114649332"
         }
      },
      "body" : "Odd comment, \"Obviously... may...\" is concerning enough that we should have a comment explaining how to avoid a deadlock rather than this vagueness or perhaps removing the statement altogether?",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T20:46:55Z",
      "diff_hunk" : "@@ -1104,6 +1113,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n     bool SetHDMasterKey(const CPubKey& key);\n+\n+    /**\n+     * Blocks until the wallet state is up-to-date to /at least/ the current\n+     * chain at the time this function is entered\n+     * Obviously holding cs_main/cs_wallet when going into this call may cause",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114649332",
      "id" : 114649332,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 31,
      "path" : "src/wallet/wallet.h",
      "position" : 66,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114649332",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114651162"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114651162"
         }
      },
      "body" : "This method is concerning. It may be that it is being used in a safe manner but the method itself is quite dangerous. Preliminary observation suggests this can be called from both the command line RPC and JSON RPC at the same time but I don't know how true this is. \r\n\r\nCalling it from two different threads appears to be not okay, so it is \"Not thread safe\" and should likely be labeled as such (though I don't see this as a standard in the project codebase so maybe that's going a bit far). ",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T20:55:13Z",
      "diff_hunk" : "@@ -1147,6 +1153,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114651162",
      "id" : 114651162,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 17,
      "path" : "src/wallet/wallet.cpp",
      "position" : 47,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114651162",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114654883"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114654883"
         }
      },
      "body" : "If these assertions need to be held for this method to execute correctly then the method cannot be thread safe as itself being called twice, in two threads, is enough to cause a failure.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T21:11:39Z",
      "diff_hunk" : "@@ -1147,6 +1153,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    const CBlockIndex* initialChainTip;\n+    {\n+        LOCK(cs_main);\n+        initialChainTip = chainActive.Tip();\n+    }\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114654883",
      "id" : 114654883,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 24,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114654883",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114657449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114657449"
         }
      },
      "body" : "This is a fine solution. All these lock inversion concerns make me wonder if there isn't a more serious issue regarding lack of proper encapsulation with some of these locks. I'm sure global locks (cs_main) don't help either, can't imagine actually needing a global lock. ",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-03T21:24:18Z",
      "diff_hunk" : "@@ -104,7 +104,9 @@ void UnregisterAllValidationInterfaces() {\n \n void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        internals->TransactionRemovedFromMempool(ptx);\n+        internals->schedulerClient.AddToProcessQueue([ptx, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114657449",
      "id" : 114657449,
      "original_commit_id" : "b9acf32eb65c2a70382c36bd8b218d8ac513e2c2",
      "original_position" : 5,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36116036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114657449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114685849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114685849"
         }
      },
      "body" : "> This comment and issue can be avoided entirely if you move line 56 up to 46.\r\n> After that lines 54 and 55 (which will be 55 and 56) can be removed.\r\n\r\nI think this is right (line numbers apply to commit 8daf2439796dfdee41c1a32787e0ec9726daf6be). It also seems like you could eliminate the fCallbacksRunning variable if you change ProcessQueue to call pop_front after running the callback and condition the AddToProcessQueue schedule() call on the queue being previously empty.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:04:28Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114685849",
      "id" : 114685849,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36173185,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114685849",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686501"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686501"
         }
      },
      "body" : "> Why not try{} catch{}?\r\n\r\nMy guess about this was that it allows the processqueue to take advantage of whatever error handling or reporting cscheduler provides, and to not have to repeat the finalization logic both inside and after the catch clause. Either approach seems fine to me, though.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:13:41Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686501",
      "id" : 114686501,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 48,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36173185,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686501",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686861"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686861"
         }
      },
      "body" : "Without them test_bitcoin-qt segfaults.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:18:25Z",
      "diff_hunk" : "@@ -12,6 +12,7 @@\n #include \"rpc/server.h\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686861",
      "id" : 114686861,
      "original_commit_id" : "a14fa884f7ef82b9b1fc8b8d85a211ec2f8ea59e",
      "original_position" : 1,
      "path" : "src/qt/test/rpcnestedtests.cpp",
      "position" : 1,
      "pull_request_review_id" : 36174235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686861",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686925"
         }
      },
      "body" : "This is being run in a background thread, so there are no possible lock inversions? We've had great success with DEBUG_LOCKORDER and havent had any serious deadlock issues afair since the 0.3.X era.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:19:21Z",
      "diff_hunk" : "@@ -104,7 +104,9 @@ void UnregisterAllValidationInterfaces() {\n \n void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        internals->TransactionRemovedFromMempool(ptx);\n+        internals->schedulerClient.AddToProcessQueue([ptx, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686925",
      "id" : 114686925,
      "original_commit_id" : "b9acf32eb65c2a70382c36bd8b218d8ac513e2c2",
      "original_position" : 5,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36174305,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686925",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686965"
         }
      },
      "body" : "> Is this really what we want? A scheduler call for each callback?\r\n\r\nI'm guessing the work done in any of these callbacks far outweighs the cost of scheduling one of them but I could be wrong.\r\n\r\n",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:20:05Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+        // to ensure both happen safely even if callback() throws.\n+        struct RAIICallbacksRunning {\n+            CMainSignalsInstance* instance;\n+            RAIICallbacksRunning(CMainSignalsInstance* _instance) : instance(_instance) {}\n+            ~RAIICallbacksRunning() {\n+                {\n+                    LOCK(instance->cs_callbacksPending);\n+                    instance->fCallbacksRunning = false;\n+                }\n+                instance->MaybeScheduleProcessQueue();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114686965",
      "id" : 114686965,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 58,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36173185,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114686965",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687180"
         }
      },
      "body" : "Looks like you commented on an outdated version and github wont show me full context, so I have no idea what those line numbers refer to :/",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:23:16Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687180",
      "id" : 114687180,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36174603,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687180",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687225"
         }
      },
      "body" : "@laanwj previously requested that any exceptions be thrown all the way up, so this was an easier way to do that. That request seemed reasonable.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:23:56Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687225",
      "id" : 114687225,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 48,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36174655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687225",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687355"
         }
      },
      "body" : "Right now we only have one scheduler thread, so there should be limited lock contention, not to mention anything running is gonna take much longer than any locks held (locks are only held to push/pop/whatever, which should be very, very fast).",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:25:59Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+        // to ensure both happen safely even if callback() throws.\n+        struct RAIICallbacksRunning {\n+            CMainSignalsInstance* instance;\n+            RAIICallbacksRunning(CMainSignalsInstance* _instance) : instance(_instance) {}\n+            ~RAIICallbacksRunning() {\n+                {\n+                    LOCK(instance->cs_callbacksPending);\n+                    instance->fCallbacksRunning = false;\n+                }\n+                instance->MaybeScheduleProcessQueue();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687355",
      "id" : 114687355,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 58,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36174787,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687355",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687671"
         }
      },
      "body" : "The AssertLockNotHeld call only fails if the current thread holds the lock, not any thread.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:29:50Z",
      "diff_hunk" : "@@ -1147,6 +1153,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    const CBlockIndex* initialChainTip;\n+    {\n+        LOCK(cs_main);\n+        initialChainTip = chainActive.Tip();\n+    }\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687671",
      "id" : 114687671,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 24,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 36175082,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687671",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687720"
         }
      },
      "body" : "I'm not sure how it is not thread safe? It blocks the *current* thread, not any other work.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:30:41Z",
      "diff_hunk" : "@@ -1147,6 +1153,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687720",
      "id" : 114687720,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 17,
      "path" : "src/wallet/wallet.cpp",
      "position" : 47,
      "pull_request_review_id" : 36175144,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687720",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687783"
         }
      },
      "body" : "Any suggestions? The statement indicates that \"holding cs_main/cs_wallet may cause deadlock\", this is true, deadlock is not guaranteed, but may appear, thus you should obviously never call with cs_main or cs_wallet held.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:31:53Z",
      "diff_hunk" : "@@ -1104,6 +1113,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n     bool SetHDMasterKey(const CPubKey& key);\n+\n+    /**\n+     * Blocks until the wallet state is up-to-date to /at least/ the current\n+     * chain at the time this function is entered\n+     * Obviously holding cs_main/cs_wallet when going into this call may cause",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687783",
      "id" : 114687783,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 31,
      "path" : "src/wallet/wallet.h",
      "position" : 66,
      "pull_request_review_id" : 36175213,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687783",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687995"
         }
      },
      "body" : "Does that compile? CMainSignalsInstance() is not defined at that time, only declared.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:35:12Z",
      "diff_hunk" : "@@ -5,48 +5,107 @@\n \n #include \"validationinterface.h\"\n \n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+};\n+\n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114687995",
      "id" : 114687995,
      "original_commit_id" : "f481ce1109d5b51ea55187a497bbca7b0fe8a856",
      "original_position" : 21,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36175430,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114687995",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114688203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114688203"
         }
      },
      "body" : "Took this on #10179, will be here when I next rebase.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:37:51Z",
      "diff_hunk" : "@@ -43,6 +43,9 @@ class CScheduler\n     // Call func at/after time t\n     void schedule(Function f, boost::chrono::system_clock::time_point t);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114688203",
      "id" : 114688203,
      "original_commit_id" : "d923d41826c7b00934284cdb04e3263ca236d99f",
      "original_position" : 2,
      "path" : "src/scheduler.h",
      "position" : null,
      "pull_request_review_id" : 36175627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114688203",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114688353"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114688353"
         }
      },
      "body" : "Its unlikely to be used elsewhere, but as it is more intimate with the CScheduler than the validation interface, it was abstracted out and put here. We should probably tweak up how it all works in a later PR (as we move off of the big boost threadGroup in init), but for now I'll leave it.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T01:39:46Z",
      "diff_hunk" : "@@ -82,4 +84,26 @@ class CScheduler\n     bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n };\n \n+/**\n+ * Class used by CScheduler clients which may schedule multiple jobs\n+ * which are required to be run serially. Does not require such jobs\n+ * to be executed on the same thread, but no two jobs will be executed\n+ * at the same time.\n+ */\n+class CSingleThreadedSchedulerClient {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114688353",
      "id" : 114688353,
      "original_commit_id" : "0703075a7153912ee089f6f2e0c1dfc3b41e76fe",
      "original_position" : 19,
      "path" : "src/scheduler.h",
      "position" : null,
      "pull_request_review_id" : 36175770,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114688353",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114847628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114847628"
         }
      },
      "body" : "Since it is only a declaration I believe it should have been fine. I see this code isn't present in the final commit so I suppose it doesn't matter either way. ",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T18:00:47Z",
      "diff_hunk" : "@@ -5,48 +5,107 @@\n \n #include \"validationinterface.h\"\n \n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+};\n+\n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114847628",
      "id" : 114847628,
      "original_commit_id" : "f481ce1109d5b51ea55187a497bbca7b0fe8a856",
      "original_position" : 21,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36342810,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114847628",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114861172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114861172"
         }
      },
      "body" : "Ahh, yes, since the rebase on the latest version of #10179 this code no longer exists, as the scheduler has to be passed into the creation of the internals object.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T18:58:15Z",
      "diff_hunk" : "@@ -5,48 +5,107 @@\n \n #include \"validationinterface.h\"\n \n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+};\n+\n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114861172",
      "id" : 114861172,
      "original_commit_id" : "f481ce1109d5b51ea55187a497bbca7b0fe8a856",
      "original_position" : 21,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36357626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114861172",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114861867"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114861867"
         }
      },
      "body" : "Understood, makes perfect sense. Didn't occur to me we'd have to duplicate the logic, spoiled by finally.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T19:01:11Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114861867",
      "id" : 114861867,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 48,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36358355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114861867",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114865783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114865783"
         }
      },
      "body" : "Okay, sounds like blocking/starving is the biggest risk. Can't disagree with that.\r\n\r\nFeels like a bit of wasted work to call schedule on things you know are intended to execute now, but that's just a performance (not important) concern.\r\nA bit surprising there is only one scheduler thread when the scheduler counts threads, but indeed it is only one.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T19:20:04Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+        // to ensure both happen safely even if callback() throws.\n+        struct RAIICallbacksRunning {\n+            CMainSignalsInstance* instance;\n+            RAIICallbacksRunning(CMainSignalsInstance* _instance) : instance(_instance) {}\n+            ~RAIICallbacksRunning() {\n+                {\n+                    LOCK(instance->cs_callbacksPending);\n+                    instance->fCallbacksRunning = false;\n+                }\n+                instance->MaybeScheduleProcessQueue();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114865783",
      "id" : 114865783,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 58,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36362796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114865783",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114869346"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114869346"
         }
      },
      "body" : "@ryanofsky I believe the point is to avoid duplicate calls to the scheduler since it may be multi-threaded. So a call to AddToProcessQueue should not schedule() anything if we're already scheduled; it should only schedule() if our previously scheduled function has completed execution (at least beyond the point of it calling schedule() again). Can't see implementing that without knowing if fCallbacksRunning is true.\r\n\r\nStill, the code does not guarantee single threaded execution in its current form due to the fCallbacksRunning state being set AFTER the call to schedule(). Being that all the locks are placed appropriately we might as well make this guarantee or else it seems like a bug because the SingleThreadedClient won't be.\r\n\r\nI'll see if I can't get a test showing this behavior. ",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T19:39:09Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114869346",
      "id" : 114869346,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36366979,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114869346",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114872197"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114872197"
         }
      },
      "body" : "> @ryanofsky I believe the point is to avoid duplicate calls to the scheduler since it may be multi-threaded.\r\n\r\nI know, this is why the second half of my suggestion was \"condition the AddToProcessQueue schedule() call on the queue being previously empty.\" Anyway, I don't think Matt's particularly interested in these simplifications, and it's easier to communicate these changes as patches rather than english descriptions, so I'd rather just leave any simplifications to followup PRs.\r\n\r\n> Still, the code does not guarantee single threaded execution in its current form due to the fCallbacksRunning state being set AFTER the call to schedule()\r\n\r\nThe reason it works in its current form is because of the `if (fCallbacksRunning) return;` line at the top of `ProcessQueue()`\r\n\r\nAgain, I don't think the code in it's current form is the simplest it could be, but it seems safe and easy to clean up later in a followup PR. Also this whole discussion really should be moved to #10179. #10286 is only building on the changes in #10179.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T19:53:37Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114872197",
      "id" : 114872197,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36370216,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114872197",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114873653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114873653"
         }
      },
      "body" : "I'd just drop \"Obviously\" now that I'm more familiar with the method.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T20:00:43Z",
      "diff_hunk" : "@@ -1104,6 +1113,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n     bool SetHDMasterKey(const CPubKey& key);\n+\n+    /**\n+     * Blocks until the wallet state is up-to-date to /at least/ the current\n+     * chain at the time this function is entered\n+     * Obviously holding cs_main/cs_wallet when going into this call may cause",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114873653",
      "id" : 114873653,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 31,
      "path" : "src/wallet/wallet.h",
      "position" : 66,
      "pull_request_review_id" : 36371910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114873653",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114874181"
         }
      },
      "body" : "`boost::thread_specific_ptr<LockStack> lockstack;`\r\nDidn't see that, makes perfect sense then.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T20:03:18Z",
      "diff_hunk" : "@@ -1147,6 +1153,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    const CBlockIndex* initialChainTip;\n+    {\n+        LOCK(cs_main);\n+        initialChainTip = chainActive.Tip();\n+    }\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874181",
      "id" : 114874181,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 24,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 36372483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114874181",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114874633"
         }
      },
      "body" : "In commit \"Add a dev notes document describing the new wallet RPC blocking\"\r\n\r\ns/who's/whose",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T20:05:21Z",
      "diff_hunk" : "@@ -568,3 +568,16 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n   - *Rationale*: as well as complicating the implementation and interfering\n     with the introduction of multi-wallet, wallet and non-wallet code should be\n     separated to avoid introducing circular dependencies between code units.\n+\n+- Wallet RPCs call BlockUntilSyncedToCurrentChain to maintain consistency with\n+  `getblockchaininfo`'s state immediately prior to the call's execution. Wallet\n+  RPCs who's behavior does *not* depend on the current chainstate may omit this",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874633",
      "id" : 114874633,
      "original_commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "original_position" : 7,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 36372945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114874633",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114874764"
         }
      },
      "body" : "I thought unsafe due to the \"AssertLockNotHeld\" that I misunderstood. My above comment is totally wrong and can be disregarded. ",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T20:06:04Z",
      "diff_hunk" : "@@ -1147,6 +1153,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874764",
      "id" : 114874764,
      "original_commit_id" : "bc3f415e09f13bb275c2d1a79b40d10f395c10c5",
      "original_position" : 17,
      "path" : "src/wallet/wallet.cpp",
      "position" : 47,
      "pull_request_review_id" : 36373103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114874764",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114874924"
         }
      },
      "body" : "In commit \"Add a dev notes document describing the new wallet RPC blocking\"\r\n\r\ns/restults/results, s/best-known-block/best-known block,/",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T20:06:56Z",
      "diff_hunk" : "@@ -568,3 +568,16 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n   - *Rationale*: as well as complicating the implementation and interfering\n     with the introduction of multi-wallet, wallet and non-wallet code should be\n     separated to avoid introducing circular dependencies between code units.\n+\n+- Wallet RPCs call BlockUntilSyncedToCurrentChain to maintain consistency with\n+  `getblockchaininfo`'s state immediately prior to the call's execution. Wallet\n+  RPCs who's behavior does *not* depend on the current chainstate may omit this\n+  call.\n+\n+  - *Rationale*: In previous versions of Bitcoin Core, the wallet was always\n+    in-sync with the chainstate (by virtue of them all being updated in the\n+    same cs_main lock). In order to maintain the behavior that wallet RPCs\n+    return restults as of at least the highest best-known-block an RPC",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114874924",
      "id" : 114874924,
      "original_commit_id" : "943217460bc527c4003868415c264e4a77a6e55a",
      "original_position" : 13,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 36372945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114874924",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "So far looks good to me, I'm going to poke around wallet<->blockchain interaction so I can better understand the wallet.cpp changes you made before I comment further.\r\n\r\nThat said I feel like there is something fundamentally wrong with the interaction between CWallet and the blockchain (I don't even know where that code lives yet). This feels like a solution to current issues but I would hope a refactor prevents needing such frequently occurring checks and thread specific execution. \r\n\r\nThat said, it would be interesting if a single \"blockchain operations\" thread is needed to get the code working in a reasonable manner. GUI systems tend to need such threads because of the nature of problem which is events coming from both ends of the system (rendering thread vs input thread) which would have to, in any logical design, invert lock ordering or else excessively block.",
      "created_at" : "2017-05-04T20:13:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299296104",
      "id" : 299296104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10286",
      "updated_at" : "2017-05-04T20:13:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299296104",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "body" : "@mchrostowski thanks for the review! Generally, wallet and blockchain (essentially validation.cpp's stuff) have historically been pretty tightly coupled (updated all under the same cs_main lock). This PR is a step, however small, towards decoupling that a bit. Because the wallet still relies on \"is it in our mempool?\" as a proxy for \"is this possibly going to get confirmed/is it spendable with the result making it into my mempool\", the chainstate and mempool still need to be updated in-sync and the wallet notified of the updates in a single notification, which come in in the order they happened. Still, this is much better than the wallet actually querying the mempool/validation logic directly instead of tracking the stuff it cares about out of them.",
      "created_at" : "2017-05-04T20:25:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299298859",
      "id" : 299298859,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10286",
      "updated_at" : "2017-05-04T20:25:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299298859",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "Rebased on latest #10179, current master, and fixed @ryanofsky's english corrections.",
      "created_at" : "2017-05-04T20:55:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299306356",
      "id" : 299306356,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10286",
      "updated_at" : "2017-05-04T20:55:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299306356",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114887076"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114887076"
         }
      },
      "body" : "@ryanofsky I see that now, the extra check does prevent the execution. \r\n\r\nBeing that this is new code I wouldn't call it a simplification. Here's a patch of the proposed change, less logic with the same function:\r\n[scheduler.patch.txt](https://github.com/bitcoin/bitcoin/files/977512/scheduler.patch.txt)\r\n\r\nwhich reads better if you rename `fCallbacksRunning` to `fCallbacksScheduled`\r\nand this patch:\r\n[scheduler.patch2.txt](https://github.com/bitcoin/bitcoin/files/977548/scheduler.patch2.txt)\r\nwhich can be argued reduces code reuse but I think the readability is improved.\r\n",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T21:02:30Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114887076",
      "id" : 114887076,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36386797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114887076",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114887634"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114887634"
         }
      },
      "body" : "@TheBlueMatt If you're open to these changes in a PR to your branch I can do that, I assume they'll be squashed so either way works.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T21:05:15Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114887634",
      "id" : 114887634,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36387425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114887634",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114890462"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114890462"
         }
      },
      "body" : "@mchrostowski hmm, really, I find that it decreases readability (though that may be NIH). It looks harder to reason about whether some callbacks might accidentally get missed to me.\r\n\r\n(Other random note, we dont use tabs in our codebase, which your patch added).",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T21:20:06Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114890462",
      "id" : 114890462,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36390631,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114890462",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114894590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114894590"
         }
      },
      "body" : "@TheBlueMatt Well, in that case I feel like either patch gets funky, especially since the use of fCallbacksRunning becomes inconsistent if you apply the first patch without the second (unless some alternative name for `fCallbacksRunning` works). \r\n\r\nThe extra safety check and inconsistency of scheduling bothers me but I wouldn't expect it to actually cause issues so I have no grounds for objection.\r\n\r\nI think my inquiry stemmed from it not being immediately apparent that ProcessQueue() only runs once and the extra check is just an extra check. Perhaps the \"not a big deal\" part of the comment could be \"because ProcessQueue() already checks\" for clarity, I would not have looked so deeply into the code except that I thought \"not a big deal\" meant \"sometimes interweaving calls is okay.\"",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-04T21:42:03Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r114894590",
      "id" : 114894590,
      "original_commit_id" : "8daf2439796dfdee41c1a32787e0ec9726daf6be",
      "original_position" : 27,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 36395056,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114894590",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "body" : "utACK 2c306d7876fb57ff26d217f97415a79942094002. Changes since previous were some documentation tweaks and new block calls in \"Add calls to CWallet::BlockUntilSyncedToCurrentChain()\", along with the rebase.",
      "created_at" : "2017-05-05T21:00:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-299574349",
      "id" : 299574349,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10286",
      "updated_at" : "2017-05-05T21:00:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299574349",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@TheBlueMatt The stated purpose of this PR is to reduce locking on cs_main so as to reducing code coupling. I see one change in this PR that actually deletes a `LOCK(cs_main)` which is in `CWallet::InMempool()`. This looks like a step in the right direction.\r\n\r\nThat said, the remaining changes seem to be all about getting the signals into a background thread. What does this gain us for decoupling?\r\n\r\nIf the purpose is to not hold cs_main from whatever call sites hit `GetMainSignals()` then I don't see a benefit in using new threads when we can release the lock before making the call. That is, running in another thread is not decoupling synchronization or interface dependencies. The goal of \"move wallet updates out of cs_main into a background thread\" seems unrelated to decoupling because \"using a background thread\" and \"not holding cs_main\" are not dependent on each other, at least in the cases I observed.\r\n\r\nOf particular concern is the re-ordering of calls, which you're avoiding with the single threaded scheduler, but if this isn't required for decoupling then it is just added complexity and overhead.",
      "created_at" : "2017-05-13T22:12:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-301278019",
      "id" : 301278019,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10286",
      "updated_at" : "2017-05-13T22:12:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301278019",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/19847568?v=3",
         "events_url" : "https://api.github.com/users/mchrostowski/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mchrostowski/followers",
         "following_url" : "https://api.github.com/users/mchrostowski/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mchrostowski/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mchrostowski",
         "id" : 19847568,
         "login" : "mchrostowski",
         "organizations_url" : "https://api.github.com/users/mchrostowski/orgs",
         "received_events_url" : "https://api.github.com/users/mchrostowski/received_events",
         "repos_url" : "https://api.github.com/users/mchrostowski/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mchrostowski/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mchrostowski/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mchrostowski"
      }
   },
   {
      "body" : "This needs rebase due to a minor conflict in listunspent.",
      "created_at" : "2017-05-30T16:14:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-304929650",
      "id" : 304929650,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10286",
      "updated_at" : "2017-05-30T16:14:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/304929650",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r119458534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119458534"
         }
      },
      "body" : "In commit \"Add CWallet::BlockUntilSyncedToCurrentChain()\"\r\n\r\nI don't understand why we would wait forever without this check. Does InvalidateBlock not trigger notifications that would lead to lastBlockProcessed being updated? And if it doesn't, shouldn't this just be fixed so the right notifications are sent?",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-31T20:00:21Z",
      "diff_hunk" : "@@ -1147,6 +1153,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    const CBlockIndex* initialChainTip;\n+    {\n+        LOCK(cs_main);\n+        initialChainTip = chainActive.Tip();\n+    }\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);\n+    std::unique_lock<std::mutex> lock(lastBlockProcessedMutex);\n+\n+    assert(lastBlockProcessed);\n+\n+    auto pred = [this, initialChainTip] {\n+            if (this->lastBlockProcessed == initialChainTip) {\n+                return true;\n+            }\n+            if (this->lastBlockProcessed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n+                return true;\n+            }\n+            // Catch the race condition where the wallet may have caught up and\n+            // moved past initialChainTip through a reorg before we could get\n+            // lastBlockProcessedMutex.\n+            // This should be exceedingly rare in regular usage, so potentially\n+            // eating 100ms to retry this lock should be fine (not TRY_LOCKing\n+            // here would be a lock inversion against lastBlockProcessedMutex)\n+            TRY_LOCK(cs_main, mainLocked);\n+            if (mainLocked) {\n+                if (this->lastBlockProcessed == chainActive.Tip()) {\n+                    return true;\n+                }\n+                // If the user called invalidateblock our wait here might block\n+                // forever, so we check if we're ahead of the tip (a state\n+                // which should otherwise never be exposed outside of validation)\n+                return this->lastBlockProcessed->nChainWork > chainActive.Tip()->nChainWork;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r119458534",
      "id" : 119458534,
      "original_commit_id" : "6cbe04c9cf237b34b6521edd33468b61b1f2032b",
      "original_position" : 50,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 41340432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119458534",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r119459716"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119459716"
         }
      },
      "body" : "In commit \"Add CWallet::BlockUntilSyncedToCurrentChain()\"\r\n\r\nMaybe consider dropping the try-lock and replacing it with `lastBlockProcessedMutex.unlock(); LOCK(cs_main);  lastBlockProcessedMutex.lock();`. Maybe this would be a little slower in the average case where this code runs (which is rare to begin with), but it would avoid the 100ms worst case, and make the code simpler because you could also replace the while loop and timeout with a plain `cv.wait(lock, pred)` call.\r\n\r\n\r\n",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-05-31T20:05:43Z",
      "diff_hunk" : "@@ -1147,6 +1153,50 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    const CBlockIndex* initialChainTip;\n+    {\n+        LOCK(cs_main);\n+        initialChainTip = chainActive.Tip();\n+    }\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);\n+    std::unique_lock<std::mutex> lock(lastBlockProcessedMutex);\n+\n+    assert(lastBlockProcessed);\n+\n+    auto pred = [this, initialChainTip] {\n+            if (this->lastBlockProcessed == initialChainTip) {\n+                return true;\n+            }\n+            if (this->lastBlockProcessed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n+                return true;\n+            }\n+            // Catch the race condition where the wallet may have caught up and\n+            // moved past initialChainTip through a reorg before we could get\n+            // lastBlockProcessedMutex.\n+            // This should be exceedingly rare in regular usage, so potentially\n+            // eating 100ms to retry this lock should be fine (not TRY_LOCKing\n+            // here would be a lock inversion against lastBlockProcessedMutex)\n+            TRY_LOCK(cs_main, mainLocked);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r119459716",
      "id" : 119459716,
      "original_commit_id" : "6cbe04c9cf237b34b6521edd33468b61b1f2032b",
      "original_position" : 42,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 41340432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119459716",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Rebased and rewrote CWallet::BlockUntilSyncedToCurrentChain(). Instead of the complicated fallback logic, it now just tests if it is caught up, and if it is not, it puts a callback into the CValidationInterface queue and waits for it to trigger. I wanted to avoid having this function previously, but I ended up needing it for a different branch which moves more CValidationInterface callbacks to the background and the logic is so simple, that I went ahead with it.",
      "created_at" : "2017-06-08T15:32:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#issuecomment-307140100",
      "id" : 307140100,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10286",
      "updated_at" : "2017-06-08T15:32:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307140100",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r120993449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120993449"
         }
      },
      "body" : "In commit \"Add CallFunctionInQueue to wait on validation interface queue drain\"\r\n\r\nWould std::move(func)",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-06-08T20:40:38Z",
      "diff_hunk" : "@@ -102,6 +102,10 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.m_internals->NewPoWValidBlock.disconnect_all_slots();\n }\n \n+void CallFunctionInValidationInterfaceQueue(std::function<void ()> func) {\n+    g_signals.m_internals->m_schedulerClient.AddToProcessQueue(func);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r120993449",
      "id" : 120993449,
      "original_commit_id" : "09c604afe78f080bd1dbd82c4bcc8cdbe11455cd",
      "original_position" : 5,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 43007637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120993449",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r120995283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120995283"
         }
      },
      "body" : "In commit \"Add CWallet::BlockUntilSyncedToCurrentChain()\"\r\n\r\nMaybe drop this check. Seems to be a special case of the check below which isn't actually more expensive.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-06-08T20:48:58Z",
      "diff_hunk" : "@@ -1154,6 +1156,39 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip()\n+        LOCK(cs_main);\n+        const CBlockIndex* initialChainTip = chainActive.Tip();\n+\n+        if (m_last_block_processed == initialChainTip) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r120995283",
      "id" : 120995283,
      "original_commit_id" : "53024056522e59db67938c2df070a90ebb3592a8",
      "original_position" : 23,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 43007637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120995283",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r120998395"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120998395"
         }
      },
      "body" : "In commit \"Add CWallet::BlockUntilSyncedToCurrentChain()\"\r\n\r\nI think all the mutex/cv/lambda/looping stuff below could be replaced by:\r\n\r\n```\r\nstd::promise<void> promise;\r\nCallFunctionInValidationInterfaceQueue([&promise]() { promise.set_value(); });\r\npromise.get_future().wait();\r\n```",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-06-08T21:03:17Z",
      "diff_hunk" : "@@ -1154,6 +1156,39 @@ void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n \n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip()\n+        LOCK(cs_main);\n+        const CBlockIndex* initialChainTip = chainActive.Tip();\n+\n+        if (m_last_block_processed == initialChainTip) {\n+            return;\n+        }\n+        if (m_last_block_processed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n+            return;\n+        }\n+    }\n+\n+    std::condition_variable callbacks_done_cv;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r120998395",
      "id" : 120998395,
      "original_commit_id" : "53024056522e59db67938c2df070a90ebb3592a8",
      "original_position" : 31,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 43007637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120998395",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r122807160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122807160"
         }
      },
      "body" : "In commit \"Fix wallet RPC race by informing wallet of tx in sendrawtransaction\"\r\n\r\nSeems like this will result in the wallet getting two TransactionAddedToMempool notifications, which is fine but might be worth noting in the comment.\r\n\r\nAlso, not asking for this change, but would another way to do this without referencing the wallet here be to release cs_main and then wait for the other notification to be processed? (Maybe using CallFunctionInValidationInterfaceQueue like in BlockUntilSyncedToCurrentChain?)",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-06-19T19:53:28Z",
      "diff_hunk" : "@@ -880,6 +880,15 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 }\n                 throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n             }\n+#ifdef ENABLE_WALLET\n+        } else {\n+            // If wallet is enabled, ensure that the wallet has been made aware\n+            // of the new transaction prior to returning. This prevents a race\n+            // where a user might call sendrawtransaction with a transaction\n+            // to/from their wallet, immediately call some wallet RPC, and get\n+            // a stale result because callbacks have not yet been processed.\n+            pwalletMain->TransactionAddedToMempool(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r122807160",
      "id" : 122807160,
      "original_commit_id" : "ef52453c96d33a754a17c320325d9b391ef70c4b",
      "original_position" : 20,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 44954013,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122807160",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r123135130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123135130"
         }
      },
      "body" : "Yes, much better to CallFunctionInValidatioInterface. Done.",
      "commit_id" : "db1d712d5668496ca83947cf9d6c4a39d3a3af1f",
      "created_at" : "2017-06-21T01:22:52Z",
      "diff_hunk" : "@@ -880,6 +880,15 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 }\n                 throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n             }\n+#ifdef ENABLE_WALLET\n+        } else {\n+            // If wallet is enabled, ensure that the wallet has been made aware\n+            // of the new transaction prior to returning. This prevents a race\n+            // where a user might call sendrawtransaction with a transaction\n+            // to/from their wallet, immediately call some wallet RPC, and get\n+            // a stale result because callbacks have not yet been processed.\n+            pwalletMain->TransactionAddedToMempool(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10286#discussion_r123135130",
      "id" : 123135130,
      "original_commit_id" : "ef52453c96d33a754a17c320325d9b391ef70c4b",
      "original_position" : 20,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 45308799,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10286",
      "updated_at" : "2017-06-21T01:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123135130",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
