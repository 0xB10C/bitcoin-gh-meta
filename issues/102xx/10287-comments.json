[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114133051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10287"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114133051"
         }
      },
      "body" : "This code isn't at all doing what I expected. On first looking, I assumed it was slicing off 8 bits at a time in order to format a 32 bit int as an ipv4 address, ie I was expecting this:\r\n\r\n```\r\nint octet1 = i % 256;\r\nint octet2 = i >> 8 % 256;\r\nint octet3 = i >> 16 % 256;\r\n```\r\n\r\nbut in fact it's effectively doing this:\r\n\r\n```\r\nint octet1 = i % 256;\r\nint octet2 = i >> 8 % 256;\r\nint octet3 = i >> 9 % 256;\r\n```\r\nie the bits used for octet 2 and 3 are overlapping. Did you work out whether there was a reason for this?\r\n\r\nI'd prefer to keep these using the modulos to indicate that each octet should be in the range 0-255. The only reason your suggested change would work is because i never exceeds 2^16. Perhaps replace with the following if there's no good reason to keep the strange octet3 behaviour:\r\n\r\n```\r\nint octet1 = i % 256;\r\nint octet2 = i >> 8 % 256;\r\nstd::string strAddr = boost::to_string(octet1) + \".\" + boost::to_string(octet2) + \".0.23\";\r\n```\r\nie eliminate octet3 entirely.",
      "commit_id" : "9320e02ef4a419588c850249f24eb26471d38c00",
      "created_at" : "2017-05-01T14:41:43Z",
      "diff_hunk" : "@@ -398,8 +405,8 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     // Test 25: Ensure GetAddr still returns 23% when addrman has many addrs.\n     for (unsigned int i = 1; i < (8 * 256); i++) {\n         int octet1 = i % 256;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114133051",
      "id" : 114133051,
      "original_commit_id" : "9320e02ef4a419588c850249f24eb26471d38c00",
      "original_position" : 43,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 35575219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10287",
      "updated_at" : "2017-05-01T14:42:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114133051",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114134016"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10287"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114134016"
         }
      },
      "body" : "I was expecting the same until I tried to refactor it. I can't speak to the original intent, but @EthanHeilman can maybe give us a clue as to what it was?\r\nAnyway it turns out that the addresses are going into a hash table and any adjustment of octet3 in any way changes the numbers in lines 415-417 (vAddr size and addrman size). Thankfully, the hash table is deterministic, but I wanted minimal disruption at least for this PR. I was thinking that this test could be refactored slightly so we can predict the number of collisions in another PR.\r\n",
      "commit_id" : "9320e02ef4a419588c850249f24eb26471d38c00",
      "created_at" : "2017-05-01T14:48:22Z",
      "diff_hunk" : "@@ -398,8 +405,8 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     // Test 25: Ensure GetAddr still returns 23% when addrman has many addrs.\n     for (unsigned int i = 1; i < (8 * 256); i++) {\n         int octet1 = i % 256;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114134016",
      "id" : 114134016,
      "original_commit_id" : "9320e02ef4a419588c850249f24eb26471d38c00",
      "original_position" : 43,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 35576276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10287",
      "updated_at" : "2017-05-01T14:48:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114134016",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/524761?v=3",
         "events_url" : "https://api.github.com/users/jimmysong/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimmysong/followers",
         "following_url" : "https://api.github.com/users/jimmysong/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimmysong/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimmysong",
         "id" : 524761,
         "login" : "jimmysong",
         "organizations_url" : "https://api.github.com/users/jimmysong/orgs",
         "received_events_url" : "https://api.github.com/users/jimmysong/received_events",
         "repos_url" : "https://api.github.com/users/jimmysong/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimmysong/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimmysong"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114171284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10287"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114171284"
         }
      },
      "body" : "@jimmysong It just makes it less likely we will have a collision when adding addresses.\r\n\r\nChanging\r\n```cpp\r\nint octet3 = (i / (256 * 2)) % 256;\r\n```\r\nto \r\n```cpp\r\nint octet3 = (i / (256 * 256)) % 256;\r\n```\r\nwould cause all of these generated addresses to map to the same source group in the new table as they would all have the same \\16. \r\n\r\nCurrent behavior is intended to lower the chance that addresses are evicted when adding them by spreading them across more than one source group. A byproduct of this is also a more realistic test since the addresses returned by GetAddr() are now being drawn from several source groups.",
      "commit_id" : "9320e02ef4a419588c850249f24eb26471d38c00",
      "created_at" : "2017-05-01T18:26:02Z",
      "diff_hunk" : "@@ -398,8 +405,8 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     // Test 25: Ensure GetAddr still returns 23% when addrman has many addrs.\n     for (unsigned int i = 1; i < (8 * 256); i++) {\n         int octet1 = i % 256;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10287#discussion_r114171284",
      "id" : 114171284,
      "original_commit_id" : "9320e02ef4a419588c850249f24eb26471d38c00",
      "original_position" : 43,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 35616232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10287",
      "updated_at" : "2017-05-01T18:26:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114171284",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/274814?v=3",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   }
]
