[
   {
      "body" : "ClientModel and WalletModel were already meant as abstraction layer for accessing the core from the GUI. What is your rationale for adding another layer?",
      "created_at" : "2017-04-20T19:41:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295875877",
      "id" : 295875877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-20T19:41:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295875877",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> ClientModel and WalletModel were already meant as abstraction layer for accessing the core from the GUI. What is your rationale for adding another layer?\r\n\r\nClientModel and WalletModel might have been intended to be an abstraction layer, but they are not functioning like one. There are libbitcoin functions and global variables accessed all over Qt code right now. With this change, all of these calls (there are around 200 of them) are stripped out of Qt code and moved into a one file: [src/ipc/local/interfaces.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/ipc/local/interfaces.cpp).",
      "created_at" : "2017-04-20T19:47:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295877901",
      "id" : 295877901,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-20T19:47:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295877901",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "I once did a similar thing,.. but stopped at some point and now I know why.\r\nIt's an impressive code change and I kinda like a central point (your interfaces.cpp) where communication between the node, the wallet and the GUI happens.\r\n\r\nI also agree with @laanwj that the clientmodel (node) and the walletmodal (wallet) are originally though to be that layer.\r\nThough, there are many violations AFAIK.\r\n\r\nWhat would be the downsides of using the exiting layers (clientmodel / walletmodel) better?",
      "created_at" : "2017-04-20T19:48:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295878426",
      "id" : 295878426,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-20T19:48:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295878426",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> What would be the downsides of using the exiting layers (clientmodel / walletmodel) better?\r\n\r\nIf you look at the `ClientModel` class, you can see it is doing a lot more work than the `ipc::local::Node` class is. Similarly with `WalletModel` and `ipc::local::Wallet.` The ipc classes are just simple shims around low-level node and wallet functionality, while Qt objects implement higher level logic specific to our current GUI. I think `ClientModel` and `WalletModel` classes are still useful after this change. They will just have 1 job instead of 2. Instead of serving as both abstraction layers and MVC model classes, they will serve only as MVC model classes.\r\n\r\nAlso, and in more concrete terms, the reason these interfaces live outside the src/qt directory is that with #10102, they need to be accessed not only by `bitcoin-qt` but also by `bitcoind` (specifically inside the `StartServer` function in [src/ipc/server.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/ipc/server.cpp) which is called here: https://github.com/ryanofsky/bitcoin/commit/ab0afba3a44255b3eec80f4eebe45a851ae23927#diff-6e30027c2045842fe842430d98d099fb",
      "created_at" : "2017-04-20T20:10:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295887270",
      "id" : 295887270,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-20T20:11:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295887270",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "The general IPC interface makes sense to me. The main problem I see for any type of low latency IPC/RPC is the missing asynchronity.\r\nTake `getWalletTxDetails`. This IPC call may take 2-3 seconds depending on the communication protocol and database you are using. Ideally the GUI is design to handle it asynchronous (like an RPC call) otherwise this will lead to GUI thread freezes. Not sure if this would be solvable as a generic part in the IPC layer of if the wallet/GUI logic must handle it.",
      "created_at" : "2017-04-21T11:09:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296163518",
      "id" : 296163518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T11:09:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296163518",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> The main problem I see for any type of low latency IPC/RPC is the missing asynchronity.\r\n\r\nNot sure if you saw the comments about this in the other pr starting here: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294094610\r\n\r\nThese changes are orthogonal to event processing / blocking issues in the UI. If UI blocked before, it will still block after these changes, if UI didn't block before, it won't start blocking now because of these changes. If remote calls are too slow because of socket/serialization overhead, we can process UI events in the background while they are being made. There are many ways to accomplish this, with one possible way described in that comment above. If anything, having calls get funnelled through an IPC framework makes it easier, not harder to add more asynchronicity.",
      "created_at" : "2017-04-21T11:32:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296167489",
      "id" : 296167489,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T11:37:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296167489",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Also would point out that Node and Wallet interfaces in [ipc/interfaces.h](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/ipc/interfaces.h) were mainly designed with goal of changing existing Qt code as little as possible. They aren't in any way set in stone, and I would expect them to evolve over time. Probably some calls will get consolidated, others will get broken up, calls that currently return big chunks of data will be made streaming, etc.",
      "created_at" : "2017-04-21T11:50:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296170668",
      "id" : 296170668,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T11:50:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296170668",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Thinking again and discussing this with @sipa / @laanwj, I think we should use the existing client-/walletmodal as node/wallet abstraction (including a possible IPC abstraction).\r\n\r\nWhat's missing in the first place are better asynchronous messaging between the GUI and the wallet/node.\r\n\r\nIMO using a thread with queue for general node/wallet communication (and eventual additional threads for procedures that usually take longer) seems after a low hanging fruit with direct benefits.\r\n\r\nUsing QT slots/signals for all(most?) communication would be required anyways and would be beneficial even without IPC and therefor should be done first.",
      "created_at" : "2017-04-21T11:51:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296170774",
      "id" : 296170774,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T11:52:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296170774",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> What's missing in the first place are better asynchronous messaging between the GUI and the wallet/node.\r\n\r\nAgain I think this is (and should be) an independent issue, but if you want to flesh out some more concrete suggestions and I would be happy to hear them.\r\n\r\n> IMO using a thread with queue for general node/wallet communication (and eventual additional threads for procedures that usually take longer) seems after a low hanging fruit with direct benefits.\r\n\r\nThis is exactly what the change I was suggesting in https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294094610 does.",
      "created_at" : "2017-04-21T12:00:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296172416",
      "id" : 296172416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T12:01:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296172416",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "> Using QT slots/signals for all(most?) communication would be required anyways and would be beneficial even without IPC and therefor should be done first.\r\n\r\nThis was my point too. Making the GUI asynchronous would avoid ever hard-freezing the GUI. Modern operating systems assume that an application has crashed if its GUI thread is unresponsive. This is a priority for improving user experience. For example: Currently, if e.g. a transaction is sent while the cs_main lock is held the entire thing hangs for a moment. Ideally it would display a modal dialog with a status, or progress animation instead. There are similar issues at startup.\r\n\r\nSure, this is only partially related to IPC work: When the GUI already would communicate with Qt signals and slots with the core backend (similar to how RPCConsole and RPCThread communicate, for example), it could be mostly oblivious whether this backend exists in-process or communicates over a pipe.\r\n\r\nAlthough it's laudable that you're working on this, it looks to me that what you are doing currently is simply replicating what we do now but replacing direct core calls with IPC calls. The drawback is that it calcifies some things that shouldn't have been designed that way in the first place (e.g. into multiple abstraction layers), making it harder to improve later.\r\n",
      "created_at" : "2017-04-21T12:10:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296174182",
      "id" : 296174182,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T12:10:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296174182",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> The drawback is that it calcifies some things\r\n\r\nCould you be more concrete about this? I don't see how it is true. Direct calls before are still direct calls now. If we want to follow the RPCConsole / RPCExecutor model in other parts of Qt code, I don't see how any of the changes I've made for IPC make this more difficult.",
      "created_at" : "2017-04-21T12:59:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296183743",
      "id" : 296183743,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T12:59:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296183743",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "I had a look at discussion in IRC (https://botbot.me/freenode/bitcoin-core-dev/msg/84348426/)\r\n\r\nWith respect, what I think you guys are missing on the `WalletModel`/`ClientModel` topic is that the `ipc::local::WalletImpl` and `ipc::local::NodeImpl` classes in [ipc/local/interfaces.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/ipc/local/interfaces.cpp) are only **temporarily** being created and invoked within the `bitcoin-qt` process. In the next PR they are created and run in the `bitcoind` process instead of `bitcoin-qt`. That's the reason these classes do not reside in the `src/qt` directory and one reason why they don't really substitute for the `WalletModel`/`ClientModel` classes. See my previous comment for details and a code pointer: https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295887270. \r\n\r\nHowever, I do see that it is kind of silly to have cases where Qt code calls a `WalletModel`/`ClientModel` method that merely forwards to a `WalletImpl`/`NodeImpl` method. I can easily clear this up by inlining these `WalletModel`/`ClientModel` methods, which would make the classes more lean.\r\n\r\nAlso, if this PR will be too difficult to review because of its size (https://botbot.me/freenode/bitcoin-core-dev/msg/84348447/), I can easily decompose it into smaller PRs that could be gradually merged. It is already broken up into separate commits, and many of the individual commits could be further broken up (right now they try to group together related changes).",
      "created_at" : "2017-04-21T13:32:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296191498",
      "id" : 296191498,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T13:32:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296191498",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@laanwj and @jonasschnelli can you let me know if you still see issues with this approach?\r\n\r\nOn the Qt model class issue, I pulled out a bunch of model methods that were just wrapping IPC calls so it should be clearer what actual work [walletmodel.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/qt/walletmodel.cpp) and [clientmodel.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/qt/clientmodel.cpp) are doing. I also added a little blurb to the [IPC README](https://github.com/ryanofsky/bitcoin/tree/pr/ipc-local/src/ipc#does-having-an-ipc-layer-make-qt-model-classes-redundant) describing what the distinction between Qt model classes and the IPC interface classes is supposed to be.\r\n\r\nOn the asynchronous GUI issue, I created #10504 for more discussion, but think that issue is mostly unrelated to the changes in this PR, except as far as some changes here might potentially make it easier to identify blocking calls and make them asynchronous.\r\n",
      "created_at" : "2017-06-01T19:00:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-305588012",
      "id" : 305588012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-06-01T19:00:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305588012",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Concept ACK on the approach, moving things to interfaces instead of global calls is usually good as it makes it easier to see what the interface to the core is.\r\n",
      "created_at" : "2017-06-15T13:38:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-308731640",
      "id" : 308731640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-06-15T13:38:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308731640",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Concept ACK.\r\nI think we could try to rebase and get this in once 0.15 has been split off",
      "created_at" : "2017-06-15T13:58:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-308738280",
      "id" : 308738280,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-06-15T13:58:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308738280",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@promag re: https://botbot.me/freenode/bitcoin-core-dev/msg/92986206/\r\n\r\n> \\<promag> to change the current wallet from widgets to qtquick would take several PR's (which would sit there for a long time)\r\n> \\<promag> dunno if the IPC PR from ryanofsky is going forward\r\n> \\<promag> both require lots of changes to the wallet ui code\r\n> \\<promag> that's why I think adding IPC to glue a new wallet ui is probably easier\r\n> \\<promag> we could have both bitcoin-qt and bitcoin-quick and later drop support for the first\r\n> \\<promag> anyway, moving to qtquick is something IMHO we should plan\r\n\r\nI don't think you need any IPC stuff for this. This PR by itself, which is a refactoring, provides interfaces for GUI code to access node&wallet state while being less tied to their internals. The Node and Wallet interfaces here would probably have to be extended in various ways to do things you'd want in a more modern UI, but they do provide a base of functionality that someone could use to implement one.",
      "created_at" : "2017-11-01T13:14:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-341102695",
      "id" : 341102695,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-11-01T13:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/341102695",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Another IRC mention of this: https://botbot.me/freenode/bitcoin-core-dev/msg/93856775/",
      "created_at" : "2017-12-01T22:37:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-348632889",
      "id" : 348632889,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-12-01T22:37:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348632889",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173273761"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173273761"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems like we should be able to remove `init.h` inclusions from src/qt. I tried this removal locally and it compiles okay.\r\n```\r\n $ git grep init.h src/qt\r\n\r\nsrc/qt/bitcoin.cpp:#include <init.h>\r\nsrc/qt/bitcoingui.cpp:#include <init.h>\r\nsrc/qt/coincontroldialog.cpp:#include <init.h>\r\nsrc/qt/guiutil.cpp:#include <init.h>\r\nsrc/qt/optionsmodel.cpp:#include <init.h>\r\nsrc/qt/signverifymessagedialog.cpp:#include <init.h>\r\nsrc/qt/splashscreen.cpp:#include <init.h>\r\nsrc/qt/utilitydialog.cpp:#include <init.h>\r\nsrc/qt/winshutdownmonitor.cpp:#include <init.h>\r\n```",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-08T19:58:50Z",
      "diff_hunk" : "@@ -27,16 +27,14 @@\n #endif\n \n #include <init.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173273761",
      "id" : 173273761,
      "original_commit_id" : "9cdbd195ba85b1af12fe8c55db3880df73e107ff",
      "original_position" : 3,
      "path" : "src/qt/bitcoin.cpp",
      "position" : 3,
      "pull_request_review_id" : 102437485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173273761",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173285690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173285690"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Needs `override`?",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-08T20:47:19Z",
      "diff_hunk" : "@@ -0,0 +1,453 @@\n+#include <interface/wallet.h>\n+\n+#include <amount.h>\n+#include <chain.h>\n+#include <consensus/validation.h>\n+#include <interface/handler.h>\n+#include <net.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <rpc/server.h>\n+#include <script/ismine.h>\n+#include <script/standard.h>\n+#include <support/allocators/secure.h>\n+#include <sync.h>\n+#include <timedata.h>\n+#include <ui_interface.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <wallet/feebumper.h>\n+#include <wallet/init.h>\n+#include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+class CScheduler;\n+\n+namespace interface {\n+namespace {\n+\n+class PendingWalletTxImpl : public PendingWalletTx\n+{\n+public:\n+    PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n+\n+    const CTransaction& get() override { return *m_wtx.tx; }\n+\n+    int64_t getVirtualSize() override { return GetVirtualTransactionSize(*m_wtx.tx); }\n+\n+    bool commit(WalletValueMap value_map,\n+        WalletOrderForm order_form,\n+        std::string from_account,\n+        std::string& reject_reason) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        m_wtx.mapValue = std::move(value_map);\n+        m_wtx.vOrderForm = std::move(order_form);\n+        m_wtx.strFromAccount = std::move(from_account);\n+        CValidationState state;\n+        if (!m_wallet.CommitTransaction(m_wtx, m_key, ::g_connman.get(), state)) {\n+            reject_reason = state.GetRejectReason();\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    CWalletTx m_wtx;\n+    CWallet& m_wallet;\n+    CReserveKey m_key;\n+};\n+\n+//! Construct wallet tx struct.\n+WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n+{\n+    WalletTx result;\n+    result.tx = wtx.tx;\n+    result.txin_is_mine.reserve(wtx.tx->vin.size());\n+    for (const auto& txin : wtx.tx->vin) {\n+        result.txin_is_mine.emplace_back(wallet.IsMine(txin));\n+    }\n+    result.txout_is_mine.reserve(wtx.tx->vout.size());\n+    result.txout_address.reserve(wtx.tx->vout.size());\n+    result.txout_address_is_mine.reserve(wtx.tx->vout.size());\n+    for (const auto& txout : wtx.tx->vout) {\n+        result.txout_is_mine.emplace_back(wallet.IsMine(txout));\n+        result.txout_address.emplace_back();\n+        result.txout_address_is_mine.emplace_back(ExtractDestination(txout.scriptPubKey, result.txout_address.back()) ?\n+                                                      IsMine(wallet, result.txout_address.back()) :\n+                                                      ISMINE_NO);\n+    }\n+    result.credit = wtx.GetCredit(ISMINE_ALL);\n+    result.debit = wtx.GetDebit(ISMINE_ALL);\n+    result.change = wtx.GetChange();\n+    result.time = wtx.GetTxTime();\n+    result.value_map = wtx.mapValue;\n+    result.is_coinbase = wtx.IsCoinBase();\n+    return result;\n+}\n+\n+//! Construct wallet tx status struct.\n+WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n+{\n+    WalletTxStatus result;\n+    auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n+    CBlockIndex* block = mi != ::mapBlockIndex.end() ? mi->second : nullptr;\n+    result.block_height = (block ? block->nHeight : std::numeric_limits<int>::max()),\n+    result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n+    result.depth_in_main_chain = wtx.GetDepthInMainChain();\n+    result.request_count = wtx.GetRequestCount();\n+    result.time_received = wtx.nTimeReceived;\n+    result.lock_time = wtx.tx->nLockTime;\n+    result.is_final = CheckFinalTx(*wtx.tx);\n+    result.is_trusted = wtx.IsTrusted();\n+    result.is_abandoned = wtx.isAbandoned();\n+    result.is_coinbase = wtx.IsCoinBase();\n+    result.is_in_main_chain = wtx.IsInMainChain();\n+    return result;\n+}\n+\n+//! Construct wallet TxOut struct.\n+WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth)\n+{\n+    WalletTxOut result;\n+    result.txout = wtx.tx->vout[n];\n+    result.time = wtx.GetTxTime();\n+    result.depth_in_main_chain = depth;\n+    result.is_spent = wallet.IsSpent(wtx.GetHash(), n);\n+    return result;\n+}\n+\n+class WalletImpl : public Wallet\n+{\n+public:\n+    WalletImpl(CWallet& wallet) : m_wallet(wallet) {}\n+\n+    bool encryptWallet(const SecureString& wallet_passphrase) override\n+    {\n+        return m_wallet.EncryptWallet(wallet_passphrase);\n+    }\n+    bool isCrypted() override { return m_wallet.IsCrypted(); }\n+    bool lock() override { return m_wallet.Lock(); }\n+    bool unlock(const SecureString& wallet_passphrase) override { return m_wallet.Unlock(wallet_passphrase); }\n+    bool isLocked() override { return m_wallet.IsLocked(); }\n+    bool changeWalletPassphrase(const SecureString& old_wallet_passphrase,\n+        const SecureString& new_wallet_passphrase) override\n+    {\n+        return m_wallet.ChangeWalletPassphrase(old_wallet_passphrase, new_wallet_passphrase);\n+    }\n+    bool backupWallet(const std::string& filename) override { return m_wallet.BackupWallet(filename); }\n+    bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n+    {\n+        return m_wallet.GetKeyFromPool(pub_key, internal);\n+    }\n+    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet.GetPubKey(address, pub_key); }\n+    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet.GetKey(address, key); }\n+    bool isSpendable(const CTxDestination& dest) override { return IsMine(m_wallet, dest) & ISMINE_SPENDABLE; }\n+    bool haveWatchOnly() override { return m_wallet.HaveWatchOnly(); };\n+    bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        return m_wallet.SetAddressBook(dest, name, purpose);\n+    }\n+    bool delAddressBook(const CTxDestination& dest) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        return m_wallet.DelAddressBook(dest);\n+    }\n+    bool getAddress(const CTxDestination& dest, std::string* name, isminetype* is_mine) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        auto it = m_wallet.mapAddressBook.find(dest);\n+        if (it == m_wallet.mapAddressBook.end()) {\n+            return false;\n+        }\n+        if (name) {\n+            *name = it->second.name;\n+        }\n+        if (is_mine) {\n+            *is_mine = IsMine(m_wallet, dest);\n+        }\n+        return true;\n+    }\n+    std::vector<WalletAddress> getAddresses() override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        std::vector<WalletAddress> result;\n+        for (const auto& item : m_wallet.mapAddressBook) {\n+            result.emplace_back();\n+            result.back().dest = item.first;\n+            result.back().is_mine = IsMine(m_wallet, item.first);\n+            result.back().name = item.second.name;\n+            result.back().purpose = item.second.purpose;\n+        }\n+        return result;\n+    }\n+    void learnRelatedScripts(const CPubKey& key, OutputType type) override { m_wallet.LearnRelatedScripts(key, type); }\n+    bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        return m_wallet.AddDestData(dest, key, value);\n+    }\n+    bool eraseDestData(const CTxDestination& dest, const std::string& key) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        return m_wallet.EraseDestData(dest, key);\n+    }\n+    std::vector<std::string> getDestValues(const std::string& prefix) override\n+    {\n+        return m_wallet.GetDestValues(prefix);\n+    }\n+    void lockCoin(const COutPoint& output) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.LockCoin(output);\n+    }\n+    void unlockCoin(const COutPoint& output) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.UnlockCoin(output);\n+    }\n+    bool isLockedCoin(const COutPoint& output) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.IsLockedCoin(output.hash, output.n);\n+    }\n+    void listLockedCoins(std::vector<COutPoint>& outputs) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.ListLockedCoins(outputs);\n+    }\n+    std::unique_ptr<PendingWalletTx> createTransaction(const std::vector<CRecipient>& recipients,\n+        const CCoinControl& coin_control,\n+        bool sign,\n+        int& change_pos,\n+        CAmount& fee,\n+        std::string& fail_reason) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto pending = MakeUnique<PendingWalletTxImpl>(m_wallet);\n+        if (!m_wallet.CreateTransaction(recipients, pending->m_wtx, pending->m_key, fee, change_pos,\n+                fail_reason, coin_control, sign)) {\n+            return {};\n+        }\n+        return std::move(pending);\n+    }\n+    bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet.TransactionCanBeAbandoned(txid); }\n+    bool abandonTransaction(const uint256& txid) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.AbandonTransaction(txid);\n+    }\n+    bool transactionCanBeBumped(const uint256& txid) override\n+    {\n+        return feebumper::TransactionCanBeBumped(&m_wallet, txid);\n+    }\n+    bool createBumpTransaction(const uint256& txid,\n+        const CCoinControl& coin_control,\n+        CAmount total_fee,\n+        std::vector<std::string>& errors,\n+        CAmount& old_fee,\n+        CAmount& new_fee,\n+        CMutableTransaction& mtx) override\n+    {\n+        return feebumper::CreateTransaction(&m_wallet, txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n+               feebumper::Result::OK;\n+    }\n+    bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(&m_wallet, mtx); }\n+    bool commitBumpTransaction(const uint256& txid,\n+        CMutableTransaction&& mtx,\n+        std::vector<std::string>& errors,\n+        uint256& bumped_txid) override\n+    {\n+        return feebumper::CommitTransaction(&m_wallet, txid, std::move(mtx), errors, bumped_txid) ==\n+               feebumper::Result::OK;\n+    }\n+    CTransactionRef getTx(const uint256& txid) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi != m_wallet.mapWallet.end()) {\n+            return mi->second.tx;\n+        }\n+        return {};\n+    }\n+    WalletTx getWalletTx(const uint256& txid) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi != m_wallet.mapWallet.end()) {\n+            return MakeWalletTx(m_wallet, mi->second);\n+        }\n+        return {};\n+    }\n+    std::vector<WalletTx> getWalletTxs() override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        std::vector<WalletTx> result;\n+        result.reserve(m_wallet.mapWallet.size());\n+        for (const auto& entry : m_wallet.mapWallet) {\n+            result.emplace_back(MakeWalletTx(m_wallet, entry.second));\n+        }\n+        return result;\n+    }\n+    bool tryGetTxStatus(const uint256& txid,\n+        interface::WalletTxStatus& tx_status,\n+        int& num_blocks,\n+        int64_t& adjusted_time) override\n+    {\n+        TRY_LOCK(::cs_main, locked_chain);\n+        if (!locked_chain) {\n+            return false;\n+        }\n+        TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n+        if (!locked_wallet) {\n+            return false;\n+        }\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi == m_wallet.mapWallet.end()) {\n+            return false;\n+        }\n+        num_blocks = ::chainActive.Height();\n+        adjusted_time = GetAdjustedTime();\n+        tx_status = MakeWalletTxStatus(mi->second);\n+        return true;\n+    }\n+    WalletTx getWalletTxDetails(const uint256& txid,\n+        WalletTxStatus& tx_status,\n+        WalletOrderForm& order_form,\n+        bool& in_mempool,\n+        int& num_blocks,\n+        int64_t& adjusted_time) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi != m_wallet.mapWallet.end()) {\n+            num_blocks = ::chainActive.Height();\n+            adjusted_time = GetAdjustedTime();\n+            in_mempool = mi->second.InMempool();\n+            order_form = mi->second.vOrderForm;\n+            tx_status = MakeWalletTxStatus(mi->second);\n+            return MakeWalletTx(m_wallet, mi->second);\n+        }\n+        return {};\n+    }\n+    WalletBalances getBalances() override\n+    {\n+        WalletBalances result;\n+        result.balance = m_wallet.GetBalance();\n+        result.unconfirmed_balance = m_wallet.GetUnconfirmedBalance();\n+        result.immature_balance = m_wallet.GetImmatureBalance();\n+        result.have_watch_only = m_wallet.HaveWatchOnly();\n+        if (result.have_watch_only) {\n+            result.watch_only_balance = m_wallet.GetWatchOnlyBalance();\n+            result.unconfirmed_watch_only_balance = m_wallet.GetUnconfirmedWatchOnlyBalance();\n+            result.immature_watch_only_balance = m_wallet.GetImmatureWatchOnlyBalance();\n+        }\n+        return result;\n+    }\n+    bool tryGetBalances(WalletBalances& balances, int& num_blocks) override\n+    {\n+        TRY_LOCK(::cs_main, locked_chain);\n+        if (!locked_chain) return false;\n+        TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n+        if (!locked_wallet) {\n+            return false;\n+        }\n+        balances = getBalances();\n+        num_blocks = ::chainActive.Height();\n+        return true;\n+    }\n+    CAmount getBalance() override { return m_wallet.GetBalance(); }\n+    CAmount getAvailableBalance(const CCoinControl& coin_control) override\n+    {\n+        return m_wallet.GetAvailableBalance(&coin_control);\n+    }\n+    isminetype txinIsMine(const CTxIn& txin) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.IsMine(txin);\n+    }\n+    isminetype txoutIsMine(const CTxOut& txout) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.IsMine(txout);\n+    }\n+    CAmount getDebit(const CTxIn& txin, isminefilter filter) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.GetDebit(txin, filter);\n+    }\n+    CAmount getCredit(const CTxOut& txout, isminefilter filter) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.GetCredit(txout, filter);\n+    }\n+    CoinsList listCoins() override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        CoinsList result;\n+        for (const auto& entry : m_wallet.ListCoins()) {\n+            auto& group = result[entry.first];\n+            for (const auto& coin : entry.second) {\n+                group.emplace_back(\n+                    COutPoint(coin.tx->GetHash(), coin.i), MakeWalletTxOut(m_wallet, *coin.tx, coin.i, coin.nDepth));\n+            }\n+        }\n+        return result;\n+    }\n+    std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        std::vector<WalletTxOut> result;\n+        result.reserve(outputs.size());\n+        for (const auto& output : outputs) {\n+            result.emplace_back();\n+            auto it = m_wallet.mapWallet.find(output.hash);\n+            if (it != m_wallet.mapWallet.end()) {\n+                int depth = it->second.GetDepthInMainChain();\n+                if (depth >= 0) {\n+                    result.back() = MakeWalletTxOut(m_wallet, it->second, output.n, depth);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+    bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n+    OutputType getDefaultAddressType() { return g_address_type; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173285690",
      "id" : 173285690,
      "original_commit_id" : "9cdbd195ba85b1af12fe8c55db3880df73e107ff",
      "original_position" : 421,
      "path" : "src/interface/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102437485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173285690",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173300689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173300689"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Unused?",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-08T21:42:03Z",
      "diff_hunk" : "@@ -0,0 +1,37 @@\n+#include <interface/wallet.h>\n+\n+#include <interface/handler.h>\n+#include <rpc/server.h>\n+#include <util.h>\n+#include <wallet/init.h>\n+#include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+class CScheduler;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173300689",
      "id" : 173300689,
      "original_commit_id" : "9ac4cfdf91ee31dc6515ebb935b1c79457c3cc6a",
      "original_position" : 15,
      "path" : "src/interface/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102437485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173300689",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173469241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173469241"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The naming of `nodes` is a little confusing (would expect it to be a vector of `interface::Node` instances), especially when elements of it are named `node` in the loop below. Does `node_stats` make more sense?",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-09T14:48:22Z",
      "diff_hunk" : "@@ -56,38 +57,26 @@ class PeerTablePriv\n     std::map<NodeId, int> mapNodeRows;\n \n     /** Pull a full list of peers from vNodes into our cache */\n-    void refreshPeers()\n+    void refreshPeers(interface::Node& node)\n     {\n         {\n             cachedNodeStats.clear();\n-            std::vector<CNodeStats> vstats;\n-            if(g_connman)\n-                g_connman->GetNodeStats(vstats);\n+\n+            interface::Node::NodesStats nodes;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173469241",
      "id" : 173469241,
      "original_commit_id" : "bcd694497a3d5b7f0d0dc3566474a31a1f48c4e7",
      "original_position" : 21,
      "path" : "src/qt/peertablemodel.cpp",
      "position" : null,
      "pull_request_review_id" : 102437485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173469241",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173487964"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173487964"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Since we're passing in nullptr for `node` here, is it worth adding `&& node` to [line 306](https://github.com/bitcoin/bitcoin/blob/9cdbd195ba85b1af12fe8c55db3880df73e107ff/src/qt/rpcconsole.cpp#L306) (or something similar) to be cautious?",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-09T15:51:57Z",
      "diff_hunk" : "@@ -863,7 +870,7 @@ void RPCConsole::on_lineEdit_returnPressed()\n         std::string strFilteredCmd;\n         try {\n             std::string dummy;\n-            if (!RPCParseCommandLine(dummy, cmd.toStdString(), false, &strFilteredCmd)) {\n+            if (!RPCParseCommandLine(nullptr, dummy, cmd.toStdString(), false, &strFilteredCmd)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173487964",
      "id" : 173487964,
      "original_commit_id" : "07cdbb757fb0513dbb3d81eab026dfb2d8961efc",
      "original_position" : 110,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : 145,
      "pull_request_review_id" : 102437485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173487964",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173501882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173501882"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Looks like this is already acquired as-needed in `CWallet::SetAddressBook`, but maybe this acquisition is intentional.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-09T16:39:04Z",
      "diff_hunk" : "@@ -17,15 +31,215 @@ class CScheduler;\n namespace interface {\n namespace {\n \n+class PendingWalletTxImpl : public PendingWalletTx\n+{\n+public:\n+    PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n+\n+    const CTransaction& get() override { return *m_wtx.tx; }\n+\n+    int64_t getVirtualSize() override { return GetVirtualTransactionSize(*m_wtx.tx); }\n+\n+    bool commit(WalletValueMap value_map,\n+        WalletOrderForm order_form,\n+        std::string from_account,\n+        std::string& reject_reason) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        m_wtx.mapValue = std::move(value_map);\n+        m_wtx.vOrderForm = std::move(order_form);\n+        m_wtx.strFromAccount = std::move(from_account);\n+        CValidationState state;\n+        if (!m_wallet.CommitTransaction(m_wtx, m_key, ::g_connman.get(), state)) {\n+            reject_reason = state.GetRejectReason();\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    CWalletTx m_wtx;\n+    CWallet& m_wallet;\n+    CReserveKey m_key;\n+};\n+\n class WalletImpl : public Wallet\n {\n public:\n     WalletImpl(CWallet& wallet) : m_wallet(wallet) {}\n \n+    bool encryptWallet(const SecureString& wallet_passphrase) override\n+    {\n+        return m_wallet.EncryptWallet(wallet_passphrase);\n+    }\n+    bool isCrypted() override { return m_wallet.IsCrypted(); }\n+    bool lock() override { return m_wallet.Lock(); }\n+    bool unlock(const SecureString& wallet_passphrase) override { return m_wallet.Unlock(wallet_passphrase); }\n+    bool isLocked() override { return m_wallet.IsLocked(); }\n+    bool changeWalletPassphrase(const SecureString& old_wallet_passphrase,\n+        const SecureString& new_wallet_passphrase) override\n+    {\n+        return m_wallet.ChangeWalletPassphrase(old_wallet_passphrase, new_wallet_passphrase);\n+    }\n+    bool backupWallet(const std::string& filename) override { return m_wallet.BackupWallet(filename); }\n+    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet.GetPubKey(address, pub_key); }\n+    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet.GetKey(address, key); }\n+    bool isSpendable(const CTxDestination& dest) override { return IsMine(m_wallet, dest) & ISMINE_SPENDABLE; }\n+    bool haveWatchOnly() override { return m_wallet.HaveWatchOnly(); };\n+    bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) override\n+    {\n+        LOCK(m_wallet.cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173501882",
      "id" : 173501882,
      "original_commit_id" : "c664c4365844eaf0a3244295e81c1f07d86e0b09",
      "original_position" : 83,
      "path" : "src/interface/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102437485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173501882",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "After reading the discussion again, Concept ACK.\r\n\r\nWhile WalletModel and ClientModel were designed as an abstraction for the \"core\", they're incomplete in that regard (many direct calls bypass the abstraction), and a bit too high level (having significant logic of their own).\r\n\r\nI guess we can see this PR as introducing a perfect abstraction, with no logic of its own.\r\n\r\n@ryanofsky What do you think the future responsibilities of WalletModel and ClientModel should be? Should they be turned into logic on the core side (abstracted by the new interfaces), or just inlined into the calls sites inside the GUI?",
      "created_at" : "2018-03-09T17:29:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-371883024",
      "id" : 371883024,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2018-03-09T17:52:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371883024",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @ryanofsky What do you think the future responsibilities of WalletModel and ClientModel should be? Should they be turned into logic on the core signed, abstracted by the new interfaces, or just inlined into the calls sites inside the GUI?\r\n\r\nI think if model code is just calling interface functions it should probably be inlined. But if model code is doing something useful to support the gui, like caching, it should be kept. If there is model code that makes too many assumptions about node/wallet internals, or implements functionality that could be useful for RPCs, I think it should be moved into the core and wrapped by new interfaces.\r\n\r\nExample of code that could be inlined:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/9cdbd195ba85b1af12fe8c55db3880df73e107ff/src/qt/walletmodel.cpp#L354-L366\r\n\r\nExample of code that should be kept:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/9cdbd195ba85b1af12fe8c55db3880df73e107ff/src/qt/clientmodel.cpp#L73-L86\r\n\r\nAn example of code that should be probably be moved into the core is a lot of the startup and config code in [qt/bitcoin.cpp](https://github.com/bitcoin/bitcoin/blob/9cdbd195ba85b1af12fe8c55db3880df73e107ff/src/qt/bitcoin.cpp).",
      "created_at" : "2018-03-09T18:20:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-371900598",
      "id" : 371900598,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2018-03-09T18:20:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371900598",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173528339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173528339"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Dead code?",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-09T18:24:32Z",
      "diff_hunk" : "@@ -182,7 +186,29 @@ class NodeImpl : public Node\n     }\n     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n     unsigned int getTxConfirmTarget() override { CHECK_WALLET(return ::nTxConfirmTarget); }\n+    CAmount getRequiredFee(unsigned int tx_bytes) override { CHECK_WALLET(return GetRequiredFee(tx_bytes)); }\n+    CAmount getMinimumFee(unsigned int tx_bytes,\n+        const CCoinControl& coin_control,\n+        int* returned_target,\n+        FeeReason* reason) override\n+    {\n+        FeeCalculation fee_calc;\n+        CHECK_WALLET(return GetMinimumFee(tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc));\n+        if (returned_target) *returned_target = fee_calc.returnedTarget;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173528339",
      "id" : 173528339,
      "original_commit_id" : "a5cbfc01b6ec7dc440a0141c89b98cd39f8d60c8",
      "original_position" : 30,
      "path" : "src/interface/node.cpp",
      "position" : null,
      "pull_request_review_id" : 102437485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173528339",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173531920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173531920"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could define a ctor here to avoid the `emplace_back`-related boilerplate above, but that's just minor style.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-09T18:37:51Z",
      "diff_hunk" : "@@ -206,6 +221,15 @@ class PendingWalletTx\n         std::string& reject_reason) = 0;\n };\n \n+//! Information about one wallet address.\n+struct WalletAddress\n+{\n+    CTxDestination dest;\n+    isminetype is_mine;\n+    std::string name;\n+    std::string purpose;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173531920",
      "id" : 173531920,
      "original_commit_id" : "9ec1240f5eba4e2663fa77aab29d1ff61e0eebc2",
      "original_position" : 58,
      "path" : "src/interface/wallet.h",
      "position" : 267,
      "pull_request_review_id" : 102437485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173531920",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173535338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173535338"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Appears to be unused.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-09T18:50:59Z",
      "diff_hunk" : "@@ -11,6 +11,7 @@\n #include <functional>\n #include <map>\n #include <memory>\n+#include <set>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173535338",
      "id" : 173535338,
      "original_commit_id" : "ffe5e3487d9409a4ad61792e84fface90e286699",
      "original_position" : 4,
      "path" : "src/interface/wallet.h",
      "position" : null,
      "pull_request_review_id" : 102437485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173535338",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173540820"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173540820"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This may not be practical to change for legacy reasons, but I find the naming here confusing; it makes me think bool and not vector. Something like `my_txout_addresses` (and likewise for two others above) seems clearer.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-09T19:11:58Z",
      "diff_hunk" : "@@ -251,6 +288,38 @@ struct WalletBalances\n     }\n };\n \n+// Wallet transaction information.\n+struct WalletTx\n+{\n+    CTransactionRef tx;\n+    std::vector<isminetype> txin_is_mine;\n+    std::vector<isminetype> txout_is_mine;\n+    std::vector<CTxDestination> txout_address;\n+    std::vector<isminetype> txout_address_is_mine;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173540820",
      "id" : 173540820,
      "original_commit_id" : "80d9a255f65d7f647f6d86158b64c50142f32a18",
      "original_position" : 70,
      "path" : "src/interface/wallet.h",
      "position" : 302,
      "pull_request_review_id" : 102437485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173540820",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173550190"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173550190"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oops, nevermind; the include should stay in some files: \r\n```\r\n $ for i in Interrupt Shutdown ShutdownRequested InitParameter AppInit HelpMessageMode HelpMessage LicenseInfo; do git grep \"${i}*()\" src/qt | cut -d':' -f 1 | sort -u; done\r\n\r\nsrc/qt/bitcoin.cpp\r\nsrc/qt/bitcoingui.cpp\r\nsrc/qt/bitcoingui.h\r\nsrc/qt/splashscreen.cpp\r\nsrc/qt/winshutdownmonitor.cpp\r\nsrc/qt/utilitydialog.cpp\r\n```",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-09T19:48:21Z",
      "diff_hunk" : "@@ -27,16 +27,14 @@\n #endif\n \n #include <init.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173550190",
      "id" : 173550190,
      "in_reply_to_id" : 173273761,
      "original_commit_id" : "9cdbd195ba85b1af12fe8c55db3880df73e107ff",
      "original_position" : 3,
      "path" : "src/qt/bitcoin.cpp",
      "position" : 3,
      "pull_request_review_id" : 102767768,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173550190",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174177885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174177885"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173528339\r\n\r\n> Dead code?\r\n\r\nThe returned_target output isn't used here but is needed a little later from `SendCoinsDialog::updateSmartFeeLabel` in the \"Remove direct bitcoin calls from qt/sendcoinsdialog.cpp\" commit.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T15:35:47Z",
      "diff_hunk" : "@@ -182,7 +186,29 @@ class NodeImpl : public Node\n     }\n     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n     unsigned int getTxConfirmTarget() override { CHECK_WALLET(return ::nTxConfirmTarget); }\n+    CAmount getRequiredFee(unsigned int tx_bytes) override { CHECK_WALLET(return GetRequiredFee(tx_bytes)); }\n+    CAmount getMinimumFee(unsigned int tx_bytes,\n+        const CCoinControl& coin_control,\n+        int* returned_target,\n+        FeeReason* reason) override\n+    {\n+        FeeCalculation fee_calc;\n+        CHECK_WALLET(return GetMinimumFee(tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc));\n+        if (returned_target) *returned_target = fee_calc.returnedTarget;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174177885",
      "id" : 174177885,
      "in_reply_to_id" : 173528339,
      "original_commit_id" : "a5cbfc01b6ec7dc440a0141c89b98cd39f8d60c8",
      "original_position" : 30,
      "path" : "src/interface/node.cpp",
      "position" : null,
      "pull_request_review_id" : 103485677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174177885",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174177928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174177928"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173531920\r\n\r\n> Could define a ctor here to avoid the emplace_back-related boilerplate above, but that's just minor style.\r\n\r\nNice, done in c6bf991ce90e8c290bff56f74de900f5b27af793.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T15:35:53Z",
      "diff_hunk" : "@@ -206,6 +221,15 @@ class PendingWalletTx\n         std::string& reject_reason) = 0;\n };\n \n+//! Information about one wallet address.\n+struct WalletAddress\n+{\n+    CTxDestination dest;\n+    isminetype is_mine;\n+    std::string name;\n+    std::string purpose;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174177928",
      "id" : 174177928,
      "in_reply_to_id" : 173531920,
      "original_commit_id" : "9ec1240f5eba4e2663fa77aab29d1ff61e0eebc2",
      "original_position" : 58,
      "path" : "src/interface/wallet.h",
      "position" : 267,
      "pull_request_review_id" : 103485677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174177928",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174177968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174177968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173540820\r\n\r\n> This may not be practical to change for legacy reasons, but I find the naming here confusing; it makes me think bool and not vector. Something like my_txout_addresses (and likewise for two others above) seems clearer.\r\n\r\nI think I disagree. A name like `my_txout_addresses` to me suggests a list of addresses, not a list of isminetype statuses. I think it should be pretty clear in context (e.g. `wtx.txout_is_mine[i]` or `txout_is_mine.emplace_back`) that these are vectors and not singular values, but it's not a problem to to rename the struct members if there's a different suggestion. Maybe it could be good to change the suffixes from `_is_mine` to `_isminetype` to make it clearer values are enums and not bools.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T15:35:59Z",
      "diff_hunk" : "@@ -251,6 +288,38 @@ struct WalletBalances\n     }\n };\n \n+// Wallet transaction information.\n+struct WalletTx\n+{\n+    CTransactionRef tx;\n+    std::vector<isminetype> txin_is_mine;\n+    std::vector<isminetype> txout_is_mine;\n+    std::vector<CTxDestination> txout_address;\n+    std::vector<isminetype> txout_address_is_mine;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174177968",
      "id" : 174177968,
      "in_reply_to_id" : 173540820,
      "original_commit_id" : "80d9a255f65d7f647f6d86158b64c50142f32a18",
      "original_position" : 70,
      "path" : "src/interface/wallet.h",
      "position" : 302,
      "pull_request_review_id" : 103485677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174177968",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174178024"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174178024"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173273761\r\n\r\n> Seems like we should be able to remove init.h\r\n\r\nRemoved in a few places in d5c84fdb9d1b6863018a3206e33bb4d57ce2b3fa, 990f4e4503d5f0eaaa3b724d2d9a2396c57a6ff1, and 2da306b742c4487b1fbcee75ece66f1d14a5dfc0.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T15:36:07Z",
      "diff_hunk" : "@@ -27,16 +27,14 @@\n #endif\n \n #include <init.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174178024",
      "id" : 174178024,
      "in_reply_to_id" : 173273761,
      "original_commit_id" : "9cdbd195ba85b1af12fe8c55db3880df73e107ff",
      "original_position" : 3,
      "path" : "src/qt/bitcoin.cpp",
      "position" : 3,
      "pull_request_review_id" : 103485677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174178024",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174178060"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174178060"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173469241\r\n\r\n> The naming of nodes is a little confusing\r\n\r\nRenamed `node` and `nodes` in 2504665640b434fd150ffe0f04f7a3aade7de8d4.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T15:36:14Z",
      "diff_hunk" : "@@ -56,38 +57,26 @@ class PeerTablePriv\n     std::map<NodeId, int> mapNodeRows;\n \n     /** Pull a full list of peers from vNodes into our cache */\n-    void refreshPeers()\n+    void refreshPeers(interface::Node& node)\n     {\n         {\n             cachedNodeStats.clear();\n-            std::vector<CNodeStats> vstats;\n-            if(g_connman)\n-                g_connman->GetNodeStats(vstats);\n+\n+            interface::Node::NodesStats nodes;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174178060",
      "id" : 174178060,
      "in_reply_to_id" : 173469241,
      "original_commit_id" : "bcd694497a3d5b7f0d0dc3566474a31a1f48c4e7",
      "original_position" : 21,
      "path" : "src/qt/peertablemodel.cpp",
      "position" : null,
      "pull_request_review_id" : 103485677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174178060",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174178105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174178105"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173487964\r\n\r\n> Since we're passing in nullptr for node here, is it worth adding && node to line 306 (or something similar) to be cautious?\r\n\r\nWent with an assert in a0fa93d471a9deb986e4207dd09f679b655cae49",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T15:36:21Z",
      "diff_hunk" : "@@ -863,7 +870,7 @@ void RPCConsole::on_lineEdit_returnPressed()\n         std::string strFilteredCmd;\n         try {\n             std::string dummy;\n-            if (!RPCParseCommandLine(dummy, cmd.toStdString(), false, &strFilteredCmd)) {\n+            if (!RPCParseCommandLine(nullptr, dummy, cmd.toStdString(), false, &strFilteredCmd)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174178105",
      "id" : 174178105,
      "in_reply_to_id" : 173487964,
      "original_commit_id" : "07cdbb757fb0513dbb3d81eab026dfb2d8961efc",
      "original_position" : 110,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : 145,
      "pull_request_review_id" : 103485677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174178105",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174179009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174179009"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173535338\r\n\r\n> Appears to be unused.\r\n\r\nRemoved in 113a1bc44fa1df87e494b71ae5dd53567ab72f30\r\n\r\n",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T15:38:44Z",
      "diff_hunk" : "@@ -11,6 +11,7 @@\n #include <functional>\n #include <map>\n #include <memory>\n+#include <set>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174179009",
      "id" : 174179009,
      "in_reply_to_id" : 173535338,
      "original_commit_id" : "ffe5e3487d9409a4ad61792e84fface90e286699",
      "original_position" : 4,
      "path" : "src/interface/wallet.h",
      "position" : null,
      "pull_request_review_id" : 103485677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174179009",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174179493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174179493"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173501882\r\n\r\n> Looks like this is already acquired as-needed in CWallet::SetAddressBook, but maybe this acquisition is intentional.\r\n\r\nGood catch, removed locks in setAddressBook and delAddressBook in \r\n7fcc6e43025fb2692acdd722dab2ef9598711377 and a25886384f7c2e3f5b2f86ef28fd86d4ccc7e3d7.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T15:39:59Z",
      "diff_hunk" : "@@ -17,15 +31,215 @@ class CScheduler;\n namespace interface {\n namespace {\n \n+class PendingWalletTxImpl : public PendingWalletTx\n+{\n+public:\n+    PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n+\n+    const CTransaction& get() override { return *m_wtx.tx; }\n+\n+    int64_t getVirtualSize() override { return GetVirtualTransactionSize(*m_wtx.tx); }\n+\n+    bool commit(WalletValueMap value_map,\n+        WalletOrderForm order_form,\n+        std::string from_account,\n+        std::string& reject_reason) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        m_wtx.mapValue = std::move(value_map);\n+        m_wtx.vOrderForm = std::move(order_form);\n+        m_wtx.strFromAccount = std::move(from_account);\n+        CValidationState state;\n+        if (!m_wallet.CommitTransaction(m_wtx, m_key, ::g_connman.get(), state)) {\n+            reject_reason = state.GetRejectReason();\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    CWalletTx m_wtx;\n+    CWallet& m_wallet;\n+    CReserveKey m_key;\n+};\n+\n class WalletImpl : public Wallet\n {\n public:\n     WalletImpl(CWallet& wallet) : m_wallet(wallet) {}\n \n+    bool encryptWallet(const SecureString& wallet_passphrase) override\n+    {\n+        return m_wallet.EncryptWallet(wallet_passphrase);\n+    }\n+    bool isCrypted() override { return m_wallet.IsCrypted(); }\n+    bool lock() override { return m_wallet.Lock(); }\n+    bool unlock(const SecureString& wallet_passphrase) override { return m_wallet.Unlock(wallet_passphrase); }\n+    bool isLocked() override { return m_wallet.IsLocked(); }\n+    bool changeWalletPassphrase(const SecureString& old_wallet_passphrase,\n+        const SecureString& new_wallet_passphrase) override\n+    {\n+        return m_wallet.ChangeWalletPassphrase(old_wallet_passphrase, new_wallet_passphrase);\n+    }\n+    bool backupWallet(const std::string& filename) override { return m_wallet.BackupWallet(filename); }\n+    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet.GetPubKey(address, pub_key); }\n+    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet.GetKey(address, key); }\n+    bool isSpendable(const CTxDestination& dest) override { return IsMine(m_wallet, dest) & ISMINE_SPENDABLE; }\n+    bool haveWatchOnly() override { return m_wallet.HaveWatchOnly(); };\n+    bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) override\n+    {\n+        LOCK(m_wallet.cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174179493",
      "id" : 174179493,
      "in_reply_to_id" : 173501882,
      "original_commit_id" : "c664c4365844eaf0a3244295e81c1f07d86e0b09",
      "original_position" : 83,
      "path" : "src/interface/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103485677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174179493",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174180418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174180418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173300689\r\n\r\n> Unused?\r\n\r\nRemoved in 3495f5a3a1f3fe587f9013442084a77955c3564b. I think this somehow got pulled in from my changes in #10973.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T15:42:18Z",
      "diff_hunk" : "@@ -0,0 +1,37 @@\n+#include <interface/wallet.h>\n+\n+#include <interface/handler.h>\n+#include <rpc/server.h>\n+#include <util.h>\n+#include <wallet/init.h>\n+#include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+class CScheduler;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174180418",
      "id" : 174180418,
      "in_reply_to_id" : 173300689,
      "original_commit_id" : "9ac4cfdf91ee31dc6515ebb935b1c79457c3cc6a",
      "original_position" : 15,
      "path" : "src/interface/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103485677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174180418",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174181038"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174181038"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173285690\r\n\r\n> Needs override?\r\n\r\nAdded in 2a2c549eb7c45cff1ef21a9b1b3b9a5d1d1cec37.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T15:43:55Z",
      "diff_hunk" : "@@ -0,0 +1,453 @@\n+#include <interface/wallet.h>\n+\n+#include <amount.h>\n+#include <chain.h>\n+#include <consensus/validation.h>\n+#include <interface/handler.h>\n+#include <net.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <rpc/server.h>\n+#include <script/ismine.h>\n+#include <script/standard.h>\n+#include <support/allocators/secure.h>\n+#include <sync.h>\n+#include <timedata.h>\n+#include <ui_interface.h>\n+#include <uint256.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <wallet/feebumper.h>\n+#include <wallet/init.h>\n+#include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+class CScheduler;\n+\n+namespace interface {\n+namespace {\n+\n+class PendingWalletTxImpl : public PendingWalletTx\n+{\n+public:\n+    PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n+\n+    const CTransaction& get() override { return *m_wtx.tx; }\n+\n+    int64_t getVirtualSize() override { return GetVirtualTransactionSize(*m_wtx.tx); }\n+\n+    bool commit(WalletValueMap value_map,\n+        WalletOrderForm order_form,\n+        std::string from_account,\n+        std::string& reject_reason) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        m_wtx.mapValue = std::move(value_map);\n+        m_wtx.vOrderForm = std::move(order_form);\n+        m_wtx.strFromAccount = std::move(from_account);\n+        CValidationState state;\n+        if (!m_wallet.CommitTransaction(m_wtx, m_key, ::g_connman.get(), state)) {\n+            reject_reason = state.GetRejectReason();\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    CWalletTx m_wtx;\n+    CWallet& m_wallet;\n+    CReserveKey m_key;\n+};\n+\n+//! Construct wallet tx struct.\n+WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n+{\n+    WalletTx result;\n+    result.tx = wtx.tx;\n+    result.txin_is_mine.reserve(wtx.tx->vin.size());\n+    for (const auto& txin : wtx.tx->vin) {\n+        result.txin_is_mine.emplace_back(wallet.IsMine(txin));\n+    }\n+    result.txout_is_mine.reserve(wtx.tx->vout.size());\n+    result.txout_address.reserve(wtx.tx->vout.size());\n+    result.txout_address_is_mine.reserve(wtx.tx->vout.size());\n+    for (const auto& txout : wtx.tx->vout) {\n+        result.txout_is_mine.emplace_back(wallet.IsMine(txout));\n+        result.txout_address.emplace_back();\n+        result.txout_address_is_mine.emplace_back(ExtractDestination(txout.scriptPubKey, result.txout_address.back()) ?\n+                                                      IsMine(wallet, result.txout_address.back()) :\n+                                                      ISMINE_NO);\n+    }\n+    result.credit = wtx.GetCredit(ISMINE_ALL);\n+    result.debit = wtx.GetDebit(ISMINE_ALL);\n+    result.change = wtx.GetChange();\n+    result.time = wtx.GetTxTime();\n+    result.value_map = wtx.mapValue;\n+    result.is_coinbase = wtx.IsCoinBase();\n+    return result;\n+}\n+\n+//! Construct wallet tx status struct.\n+WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n+{\n+    WalletTxStatus result;\n+    auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n+    CBlockIndex* block = mi != ::mapBlockIndex.end() ? mi->second : nullptr;\n+    result.block_height = (block ? block->nHeight : std::numeric_limits<int>::max()),\n+    result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n+    result.depth_in_main_chain = wtx.GetDepthInMainChain();\n+    result.request_count = wtx.GetRequestCount();\n+    result.time_received = wtx.nTimeReceived;\n+    result.lock_time = wtx.tx->nLockTime;\n+    result.is_final = CheckFinalTx(*wtx.tx);\n+    result.is_trusted = wtx.IsTrusted();\n+    result.is_abandoned = wtx.isAbandoned();\n+    result.is_coinbase = wtx.IsCoinBase();\n+    result.is_in_main_chain = wtx.IsInMainChain();\n+    return result;\n+}\n+\n+//! Construct wallet TxOut struct.\n+WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth)\n+{\n+    WalletTxOut result;\n+    result.txout = wtx.tx->vout[n];\n+    result.time = wtx.GetTxTime();\n+    result.depth_in_main_chain = depth;\n+    result.is_spent = wallet.IsSpent(wtx.GetHash(), n);\n+    return result;\n+}\n+\n+class WalletImpl : public Wallet\n+{\n+public:\n+    WalletImpl(CWallet& wallet) : m_wallet(wallet) {}\n+\n+    bool encryptWallet(const SecureString& wallet_passphrase) override\n+    {\n+        return m_wallet.EncryptWallet(wallet_passphrase);\n+    }\n+    bool isCrypted() override { return m_wallet.IsCrypted(); }\n+    bool lock() override { return m_wallet.Lock(); }\n+    bool unlock(const SecureString& wallet_passphrase) override { return m_wallet.Unlock(wallet_passphrase); }\n+    bool isLocked() override { return m_wallet.IsLocked(); }\n+    bool changeWalletPassphrase(const SecureString& old_wallet_passphrase,\n+        const SecureString& new_wallet_passphrase) override\n+    {\n+        return m_wallet.ChangeWalletPassphrase(old_wallet_passphrase, new_wallet_passphrase);\n+    }\n+    bool backupWallet(const std::string& filename) override { return m_wallet.BackupWallet(filename); }\n+    bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n+    {\n+        return m_wallet.GetKeyFromPool(pub_key, internal);\n+    }\n+    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet.GetPubKey(address, pub_key); }\n+    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet.GetKey(address, key); }\n+    bool isSpendable(const CTxDestination& dest) override { return IsMine(m_wallet, dest) & ISMINE_SPENDABLE; }\n+    bool haveWatchOnly() override { return m_wallet.HaveWatchOnly(); };\n+    bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        return m_wallet.SetAddressBook(dest, name, purpose);\n+    }\n+    bool delAddressBook(const CTxDestination& dest) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        return m_wallet.DelAddressBook(dest);\n+    }\n+    bool getAddress(const CTxDestination& dest, std::string* name, isminetype* is_mine) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        auto it = m_wallet.mapAddressBook.find(dest);\n+        if (it == m_wallet.mapAddressBook.end()) {\n+            return false;\n+        }\n+        if (name) {\n+            *name = it->second.name;\n+        }\n+        if (is_mine) {\n+            *is_mine = IsMine(m_wallet, dest);\n+        }\n+        return true;\n+    }\n+    std::vector<WalletAddress> getAddresses() override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        std::vector<WalletAddress> result;\n+        for (const auto& item : m_wallet.mapAddressBook) {\n+            result.emplace_back();\n+            result.back().dest = item.first;\n+            result.back().is_mine = IsMine(m_wallet, item.first);\n+            result.back().name = item.second.name;\n+            result.back().purpose = item.second.purpose;\n+        }\n+        return result;\n+    }\n+    void learnRelatedScripts(const CPubKey& key, OutputType type) override { m_wallet.LearnRelatedScripts(key, type); }\n+    bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        return m_wallet.AddDestData(dest, key, value);\n+    }\n+    bool eraseDestData(const CTxDestination& dest, const std::string& key) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        return m_wallet.EraseDestData(dest, key);\n+    }\n+    std::vector<std::string> getDestValues(const std::string& prefix) override\n+    {\n+        return m_wallet.GetDestValues(prefix);\n+    }\n+    void lockCoin(const COutPoint& output) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.LockCoin(output);\n+    }\n+    void unlockCoin(const COutPoint& output) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.UnlockCoin(output);\n+    }\n+    bool isLockedCoin(const COutPoint& output) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.IsLockedCoin(output.hash, output.n);\n+    }\n+    void listLockedCoins(std::vector<COutPoint>& outputs) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.ListLockedCoins(outputs);\n+    }\n+    std::unique_ptr<PendingWalletTx> createTransaction(const std::vector<CRecipient>& recipients,\n+        const CCoinControl& coin_control,\n+        bool sign,\n+        int& change_pos,\n+        CAmount& fee,\n+        std::string& fail_reason) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto pending = MakeUnique<PendingWalletTxImpl>(m_wallet);\n+        if (!m_wallet.CreateTransaction(recipients, pending->m_wtx, pending->m_key, fee, change_pos,\n+                fail_reason, coin_control, sign)) {\n+            return {};\n+        }\n+        return std::move(pending);\n+    }\n+    bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet.TransactionCanBeAbandoned(txid); }\n+    bool abandonTransaction(const uint256& txid) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.AbandonTransaction(txid);\n+    }\n+    bool transactionCanBeBumped(const uint256& txid) override\n+    {\n+        return feebumper::TransactionCanBeBumped(&m_wallet, txid);\n+    }\n+    bool createBumpTransaction(const uint256& txid,\n+        const CCoinControl& coin_control,\n+        CAmount total_fee,\n+        std::vector<std::string>& errors,\n+        CAmount& old_fee,\n+        CAmount& new_fee,\n+        CMutableTransaction& mtx) override\n+    {\n+        return feebumper::CreateTransaction(&m_wallet, txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n+               feebumper::Result::OK;\n+    }\n+    bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(&m_wallet, mtx); }\n+    bool commitBumpTransaction(const uint256& txid,\n+        CMutableTransaction&& mtx,\n+        std::vector<std::string>& errors,\n+        uint256& bumped_txid) override\n+    {\n+        return feebumper::CommitTransaction(&m_wallet, txid, std::move(mtx), errors, bumped_txid) ==\n+               feebumper::Result::OK;\n+    }\n+    CTransactionRef getTx(const uint256& txid) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi != m_wallet.mapWallet.end()) {\n+            return mi->second.tx;\n+        }\n+        return {};\n+    }\n+    WalletTx getWalletTx(const uint256& txid) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi != m_wallet.mapWallet.end()) {\n+            return MakeWalletTx(m_wallet, mi->second);\n+        }\n+        return {};\n+    }\n+    std::vector<WalletTx> getWalletTxs() override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        std::vector<WalletTx> result;\n+        result.reserve(m_wallet.mapWallet.size());\n+        for (const auto& entry : m_wallet.mapWallet) {\n+            result.emplace_back(MakeWalletTx(m_wallet, entry.second));\n+        }\n+        return result;\n+    }\n+    bool tryGetTxStatus(const uint256& txid,\n+        interface::WalletTxStatus& tx_status,\n+        int& num_blocks,\n+        int64_t& adjusted_time) override\n+    {\n+        TRY_LOCK(::cs_main, locked_chain);\n+        if (!locked_chain) {\n+            return false;\n+        }\n+        TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n+        if (!locked_wallet) {\n+            return false;\n+        }\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi == m_wallet.mapWallet.end()) {\n+            return false;\n+        }\n+        num_blocks = ::chainActive.Height();\n+        adjusted_time = GetAdjustedTime();\n+        tx_status = MakeWalletTxStatus(mi->second);\n+        return true;\n+    }\n+    WalletTx getWalletTxDetails(const uint256& txid,\n+        WalletTxStatus& tx_status,\n+        WalletOrderForm& order_form,\n+        bool& in_mempool,\n+        int& num_blocks,\n+        int64_t& adjusted_time) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi != m_wallet.mapWallet.end()) {\n+            num_blocks = ::chainActive.Height();\n+            adjusted_time = GetAdjustedTime();\n+            in_mempool = mi->second.InMempool();\n+            order_form = mi->second.vOrderForm;\n+            tx_status = MakeWalletTxStatus(mi->second);\n+            return MakeWalletTx(m_wallet, mi->second);\n+        }\n+        return {};\n+    }\n+    WalletBalances getBalances() override\n+    {\n+        WalletBalances result;\n+        result.balance = m_wallet.GetBalance();\n+        result.unconfirmed_balance = m_wallet.GetUnconfirmedBalance();\n+        result.immature_balance = m_wallet.GetImmatureBalance();\n+        result.have_watch_only = m_wallet.HaveWatchOnly();\n+        if (result.have_watch_only) {\n+            result.watch_only_balance = m_wallet.GetWatchOnlyBalance();\n+            result.unconfirmed_watch_only_balance = m_wallet.GetUnconfirmedWatchOnlyBalance();\n+            result.immature_watch_only_balance = m_wallet.GetImmatureWatchOnlyBalance();\n+        }\n+        return result;\n+    }\n+    bool tryGetBalances(WalletBalances& balances, int& num_blocks) override\n+    {\n+        TRY_LOCK(::cs_main, locked_chain);\n+        if (!locked_chain) return false;\n+        TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n+        if (!locked_wallet) {\n+            return false;\n+        }\n+        balances = getBalances();\n+        num_blocks = ::chainActive.Height();\n+        return true;\n+    }\n+    CAmount getBalance() override { return m_wallet.GetBalance(); }\n+    CAmount getAvailableBalance(const CCoinControl& coin_control) override\n+    {\n+        return m_wallet.GetAvailableBalance(&coin_control);\n+    }\n+    isminetype txinIsMine(const CTxIn& txin) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.IsMine(txin);\n+    }\n+    isminetype txoutIsMine(const CTxOut& txout) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.IsMine(txout);\n+    }\n+    CAmount getDebit(const CTxIn& txin, isminefilter filter) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.GetDebit(txin, filter);\n+    }\n+    CAmount getCredit(const CTxOut& txout, isminefilter filter) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.GetCredit(txout, filter);\n+    }\n+    CoinsList listCoins() override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        CoinsList result;\n+        for (const auto& entry : m_wallet.ListCoins()) {\n+            auto& group = result[entry.first];\n+            for (const auto& coin : entry.second) {\n+                group.emplace_back(\n+                    COutPoint(coin.tx->GetHash(), coin.i), MakeWalletTxOut(m_wallet, *coin.tx, coin.i, coin.nDepth));\n+            }\n+        }\n+        return result;\n+    }\n+    std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        std::vector<WalletTxOut> result;\n+        result.reserve(outputs.size());\n+        for (const auto& output : outputs) {\n+            result.emplace_back();\n+            auto it = m_wallet.mapWallet.find(output.hash);\n+            if (it != m_wallet.mapWallet.end()) {\n+                int depth = it->second.GetDepthInMainChain();\n+                if (depth >= 0) {\n+                    result.back() = MakeWalletTxOut(m_wallet, it->second, output.n, depth);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+    bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n+    OutputType getDefaultAddressType() { return g_address_type; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174181038",
      "id" : 174181038,
      "in_reply_to_id" : 173285690,
      "original_commit_id" : "9cdbd195ba85b1af12fe8c55db3880df73e107ff",
      "original_position" : 421,
      "path" : "src/interface/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103485677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174181038",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174266521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174266521"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah sorry, what I meant was that, because of the way `CHECK_WALLET` works, it doesn't look like we'll ever make it to this line or the one below it.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T20:04:43Z",
      "diff_hunk" : "@@ -182,7 +186,29 @@ class NodeImpl : public Node\n     }\n     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n     unsigned int getTxConfirmTarget() override { CHECK_WALLET(return ::nTxConfirmTarget); }\n+    CAmount getRequiredFee(unsigned int tx_bytes) override { CHECK_WALLET(return GetRequiredFee(tx_bytes)); }\n+    CAmount getMinimumFee(unsigned int tx_bytes,\n+        const CCoinControl& coin_control,\n+        int* returned_target,\n+        FeeReason* reason) override\n+    {\n+        FeeCalculation fee_calc;\n+        CHECK_WALLET(return GetMinimumFee(tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc));\n+        if (returned_target) *returned_target = fee_calc.returnedTarget;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174266521",
      "id" : 174266521,
      "in_reply_to_id" : 173528339,
      "original_commit_id" : "a5cbfc01b6ec7dc440a0141c89b98cd39f8d60c8",
      "original_position" : 30,
      "path" : "src/interface/node.cpp",
      "position" : null,
      "pull_request_review_id" : 103591576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174266521",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174266882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174266882"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh, you're totally right; I misunderstood the content of these vectors. Thanks for the clarification.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T20:06:09Z",
      "diff_hunk" : "@@ -251,6 +288,38 @@ struct WalletBalances\n     }\n };\n \n+// Wallet transaction information.\n+struct WalletTx\n+{\n+    CTransactionRef tx;\n+    std::vector<isminetype> txin_is_mine;\n+    std::vector<isminetype> txout_is_mine;\n+    std::vector<CTxDestination> txout_address;\n+    std::vector<isminetype> txout_address_is_mine;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174266882",
      "id" : 174266882,
      "in_reply_to_id" : 173540820,
      "original_commit_id" : "80d9a255f65d7f647f6d86158b64c50142f32a18",
      "original_position" : 70,
      "path" : "src/interface/wallet.h",
      "position" : 302,
      "pull_request_review_id" : 103592057,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174266882",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174278109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174278109"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173528339\r\n\r\n> Ah sorry, what I meant was that, because of the way CHECK_WALLET works, it doesn't look like we'll ever make it to this line or the one below it.\r\n\r\n:man_facepalming: Good catch, fixed in 8aced6d22ddf6cf2af6ed02ad8344b583c238b9f",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T20:45:36Z",
      "diff_hunk" : "@@ -182,7 +186,29 @@ class NodeImpl : public Node\n     }\n     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n     unsigned int getTxConfirmTarget() override { CHECK_WALLET(return ::nTxConfirmTarget); }\n+    CAmount getRequiredFee(unsigned int tx_bytes) override { CHECK_WALLET(return GetRequiredFee(tx_bytes)); }\n+    CAmount getMinimumFee(unsigned int tx_bytes,\n+        const CCoinControl& coin_control,\n+        int* returned_target,\n+        FeeReason* reason) override\n+    {\n+        FeeCalculation fee_calc;\n+        CHECK_WALLET(return GetMinimumFee(tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc));\n+        if (returned_target) *returned_target = fee_calc.returnedTarget;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174278109",
      "id" : 174278109,
      "in_reply_to_id" : 173528339,
      "original_commit_id" : "a5cbfc01b6ec7dc440a0141c89b98cd39f8d60c8",
      "original_position" : 30,
      "path" : "src/interface/node.cpp",
      "position" : null,
      "pull_request_review_id" : 103605462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:08:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174278109",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174292493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174292493"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173528339\r\n\r\nPrevious comment looks a little odd in gmail. Github apparently tries to render `:man_facepalming:` as `['FACE PALM', 'ZERO WIDTH JOINER', 'MALE SIGN', 'VARIATION SELECTOR-16']` in unicode.",
      "commit_id" : "aa57e3dafaee4ec9383483997768d7db5ce8880a",
      "created_at" : "2018-03-13T21:35:43Z",
      "diff_hunk" : "@@ -182,7 +186,29 @@ class NodeImpl : public Node\n     }\n     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n     unsigned int getTxConfirmTarget() override { CHECK_WALLET(return ::nTxConfirmTarget); }\n+    CAmount getRequiredFee(unsigned int tx_bytes) override { CHECK_WALLET(return GetRequiredFee(tx_bytes)); }\n+    CAmount getMinimumFee(unsigned int tx_bytes,\n+        const CCoinControl& coin_control,\n+        int* returned_target,\n+        FeeReason* reason) override\n+    {\n+        FeeCalculation fee_calc;\n+        CHECK_WALLET(return GetMinimumFee(tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc));\n+        if (returned_target) *returned_target = fee_calc.returnedTarget;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174292493",
      "id" : 174292493,
      "in_reply_to_id" : 173528339,
      "original_commit_id" : "a5cbfc01b6ec7dc440a0141c89b98cd39f8d60c8",
      "original_position" : 30,
      "path" : "src/interface/node.cpp",
      "position" : null,
      "pull_request_review_id" : 103622356,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10244",
      "updated_at" : "2018-03-13T21:35:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174292493",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, on my to-do list to review",
      "created_at" : "2018-03-14T21:40:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-373184202",
      "id" : 373184202,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2018-03-14T21:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/373184202",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Going to hold off on testing this one until it's rebased.",
      "created_at" : "2018-03-23T20:23:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-375787808",
      "id" : 375787808,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2018-03-23T20:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375787808",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Going to hold off on testing this one until it's rebased.\r\n\r\nRebased 84e80629d10cb48009b84e131ee61e0a8b9ad171 -> b39555ae6eeb205706922766463a80cfe09153be ([pr/ipc-local.59](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.59) -> [pr/ipc-local.60](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.60))\r\nRebased b39555ae6eeb205706922766463a80cfe09153be -> 19a268c1f500e0c8793da6714a9d093d57bfe8f7 ([pr/ipc-local.60](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.60) -> [pr/ipc-local.61](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.61))",
      "created_at" : "2018-03-23T21:48:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-375807433",
      "id" : 375807433,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2018-03-26T15:32:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375807433",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase to fix unrelated travis failure",
      "created_at" : "2018-04-02T19:54:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378025592",
      "id" : 378025592,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2018-04-02T19:54:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378025592",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Needs rebase to fix unrelated travis failure\r\n\r\nRebased 4bf295201d0f1059d9670329cb412fd074910319 -> e73a9f589f6ddeb0e350d887cd1f98fc55aac632 ([pr/ipc-local.66](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.66) -> [pr/ipc-local.67](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.67)). Looks like failure in mempool_persist test: https://travis-ci.org/bitcoin/bitcoin/jobs/361243719#L2810\r\n",
      "created_at" : "2018-04-02T20:32:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378035305",
      "id" : 378035305,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2018-04-02T20:32:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378035305",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Looks like failure in mempool_persist test\r\n\r\nAh. The new linter lint-include-guards was also failing, which is what required a rebase.\r\n\r\nI think mempool_persist was broken by https://github.com/bitcoin/bitcoin/commit/cb1e319fe9e198c9c5cf5236fe9af5a3d748b9e8. Will open an issue.",
      "created_at" : "2018-04-02T20:45:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378038612",
      "id" : 378038612,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2018-04-02T20:45:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378038612",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
