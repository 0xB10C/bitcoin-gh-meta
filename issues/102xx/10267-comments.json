[
   {
      "body" : "Yeah. Why not. This can be useful.\r\n\r\n* I would recommend to use `-addconf=` (otherwise user may think it replaces the bitcoin.conf configuration file).\r\n* If I follow `GetConfigFile()` correctly, you can also use absolut paths, right?",
      "created_at" : "2017-04-24T06:12:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296533141",
      "id" : 296533141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-04-24T06:12:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296533141",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Why not making the existing `-config` a repeatable argument.",
      "created_at" : "2017-04-24T07:15:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296551716",
      "id" : 296551716,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-04-24T07:15:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296551716",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "@jonasschnelli Good point - will switch to `-addconf=`. Yes, you can use absolute paths. My worry above is for when a user presumes the path is relative to the config file when it is in fact not.\r\n\r\n@NicolasDorier I think `-config` simply tells what name to use and defaults to `bitcoin.conf` -- it doesn't actually load the file. This feature lets you load other files arbitrarily from within `bitcoin.conf`.\r\n",
      "created_at" : "2017-04-24T08:00:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296565587",
      "id" : 296565587,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-04-24T08:00:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296565587",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "[Unsquashed history](https://github.com/kallewoof/bitcoin/tree/feature-config-readconfig-unsquashed): [1](https://github.com/kallewoof/bitcoin/commit/b2c56e1ae2dad03bfd8af64cdf0d185317b19662) Ã¢ÂÂ [2](https://github.com/kallewoof/bitcoin/commit/770b88e3514a1d289bb64d0d66d276ca24197b06) Ã¢ÂÂ [3Ã¢ÂÂ±1](https://github.com/kallewoof/bitcoin/commit/bc4a972bcc50ad37d5b386b52cfe7f7a5b3d87cd) Ã¢ÂÂ [4Ã¢ÂÂ±2](https://github.com/kallewoof/bitcoin/commit/0aae401523a8986617bd1306748dae3d9c08f107)",
      "created_at" : "2017-04-24T09:35:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296595191",
      "id" : 296595191,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-04-25T06:29:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296595191",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "Concept ACK\r\n\r\n> My worry above is for when a user presumes the path is relative to the config file when it is in fact not.\r\n\r\nYes, making it relative to the data directory is a good choice. I think we should handle all relative paths in `bitcoind` that way.\r\n\r\n> Why not making the existing -config a repeatable argument.\r\n\r\nThat was also my first thought, but it may just be confusing as it changes the meaning of the option slightly. It's possible that some setups already use multiple `-conf` options, and rely on the overriding behavior.\r\n\r\nSo I'm good with making it an explicit option.  Another suggestion for the name would be `-includeconf`.",
      "created_at" : "2017-04-24T11:53:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296636109",
      "id" : 296636109,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-04-24T11:53:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296636109",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Concept ACK. Don't care much about the name, but what about -extraconf ?",
      "created_at" : "2017-04-24T16:50:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296739899",
      "id" : 296739899,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-04-24T16:50:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296739899",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "From the given suggestions I think `includeconf` is the most clear so I'll switch to that.\r\n\r\n@laanwj:\r\n\r\n> Yes, making it relative to the data directory is a good choice. I think we should handle all relative paths in bitcoind that way.\r\n\r\nTo clarify, you mean that the relative path inside /dir/file.conf should be /dir/, not [bitcoin datadir], right? It will require some lines of code I bet but I think that makes sense too.",
      "created_at" : "2017-04-25T01:47:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296868359",
      "id" : 296868359,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-04-25T01:47:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296868359",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "The `includeconf` feature now defines the path relative to the file being read, if any. For command line, it is [datadir], for `/dir/abc.conf` it is `/dir/`. I tested this with\r\n```\r\nsrc/testreadconfig/bitcoin.conf: [...] includeconf=../global.conf\r\nsrc/global.conf: includeconf=secrets.conf\r\nsrc/secrets.conf: rpcpassword=foo\r\n```\r\nwith `bitcoind  -datadir=testreadconfig`. Ensured `bitcoin-cli` with password `foo` worked and password `bar` did not. \r\n\r\n[[...]](https://github.com/kallewoof/bitcoin/tree/feature-config-readconfig-unsquashed): Ã¢ÂÂ [5Ã¢ÂÂ±1](https://github.com/kallewoof/bitcoin/commit/f88e7ce8ec842ce2b46b551b0efc067ae8276a6f) Ã¢ÂÂ [6Ã¢ÂÂ±2](https://github.com/kallewoof/bitcoin/commit/cc917f86045a978c11d7be6e1fe7a4da93748b9a)",
      "created_at" : "2017-04-25T03:00:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296880385",
      "id" : 296880385,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-04-25T06:35:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296880385",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "> To clarify, you mean that the relative path inside /dir/file.conf should be /dir/, not [bitcoin datadir], right? It > will require some lines of code I bet but I think that makes sense too.\r\n\r\nYes, seems good to me too. So it's like C's include \"\" - I wasn't thinking about relative includes in other includes.\r\n",
      "created_at" : "2017-04-25T05:14:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296910968",
      "id" : 296910968,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-04-25T05:14:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296910968",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "To clarify, the code now does what @laanwj suggested.",
      "created_at" : "2017-04-25T07:34:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296942171",
      "id" : 296942171,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-04-25T07:34:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296942171",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "> I am not sure how to test this in a neat manner. Feedback on this would be nice. Will dig/think though.\r\n\r\nSome ideas:\r\n- RPC test that creates a tree of bitcoin config files including each other beneath the data directory\r\n- Starts a node w/ `-includeconf=<path>`\r\n- Then interrogate node over RPC to verify the files got included, in the right order\r\n\r\nTo achieve the latter the option `uacomment=` is useful, as these will be added to an array, then querying `getnetworkinfo` to see if the `(...)` part of the `subversion` matches expected content and order.",
      "created_at" : "2017-05-01T11:59:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298323813",
      "id" : 298323813,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-05-01T11:59:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298323813",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@laanwj's suggested test method seems sensible. I'm happy to review that or lend a hand implementing it. Feel free to reach me on IRC.",
      "created_at" : "2017-05-01T21:43:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298440791",
      "id" : 298440791,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-05-01T21:43:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298440791",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Thanks for the suggestion! I added a test that checks for load order and ensures circular include is guarded against. @jnewbery review would be wonderful :)\r\n\r\nEdit: If anyone has ideas why travis is failing I'd appreciate it. It works fine on all the machines I test it on locally (mac, linux).",
      "created_at" : "2017-05-02T01:28:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298475283",
      "id" : 298475283,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-05-02T04:54:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298475283",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "> If anyone has ideas why travis is failing I'd appreciate it\r\n\r\nYou've made `ReadConfigFile()` recursive (through `ProcessSetting()`). `ReadConfigFile()` locks cs_args, and then at the end calls `ClearDatadirCache()`, which locks csPathCached. That means that the bottom-most `ReadConfigFile()` locks csPathCached while cs_args is still held.\r\n\r\nThere's already a function that locks in the other order: `GetDataDir()` locks csPathCached and then locks cs_args (in its call to `IsArgSet()`).\r\n\r\nIf those two functions are called in different threads, we'd have a deadlock.\r\n\r\nThere's a CPP_FLAG option that checks lock ordering `CPPFLAGS=-DDEBUG_LOCKORDER`, which is used in Travis build 5. That's why that build is failing. You can repro locally by running `configure` with that option.\r\n\r\nYou can fix this by not locking cs_args recursively.",
      "created_at" : "2017-05-02T15:33:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298671493",
      "id" : 298671493,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-05-02T15:33:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298671493",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "@jnewbery Thanks a lot for the explanation! I should've paid closer attention to locks considering the added recursiveness.\r\n\r\n97ee63b fixes this by moving the conditionally-locked code into a new `ReadConfigStream` function which is called with locking/clearing in one case and without in the other, based on a `bool lockAndClear` added to `ReadConfigFile`.\r\n\r\n(Also had to tweak tests a tiny bit; 8fb6511.)",
      "created_at" : "2017-05-08T04:02:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-299767955",
      "id" : 299767955,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-05-08T04:02:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299767955",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "I think you've introduced a subtle bug here. If `-datadir` is configured in one of the additional config files, then the datadir cache won't be cleared, which means that bitcoind will continue to use the old datadir.\r\n\r\nI think you should try to not make ReadConfigFile recursive. For me, it would be acceptable to only allow one level of redirection here (ie the \"base\" config file can specify `-includeconf` config file, but those included config files cannot themselves include other config files). I think that would be a simpler model and would remove a whole bunch of potential bugs (circular references, blowing the stack through too many `-includeconf` redirects, etc). ",
      "created_at" : "2017-05-15T19:57:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301586719",
      "id" : 301586719,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-05-15T19:57:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301586719",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "@jnewbery Hm, no the datadir cache is cleared after any recursions happen, which means it is always cleared, just not directly after the config file has been parsed. There are two cases:\r\n1. ParseParameters ([util.cpp:407](https://github.com/kallewoof/bitcoin/blame/feature-config-readconfig-unsquashed/src/util.cpp#L407) called from [bitcoind.cpp:75](https://github.com/kallewoof/bitcoin/blame/feature-config-readconfig-unsquashed/src/bitcoind.cpp#L75)) -- this will work as normal and does not require cache clearing.\r\n2. Nested ReadConfigs from the initial bitcoin.conf file: [bitcoind:107](https://github.com/kallewoof/bitcoin/blame/feature-config-readconfig-unsquashed/src/bitcoind.cpp#L107) calls `ReadConfigFile` with the `lockAndClear` flag set; recursion then happens in ProcessSetting (L401) via ReadConfigStream (L622) with `lockAndClear` unset. Eventually this gets back to original caller which leaves ReadConfigStream and gets to [util.cpp:649](https://github.com/kallewoof/bitcoin/blame/feature-config-readconfig-unsquashed/src/util.cpp#L649) which clears the datadir cache.\r\nOr am I missing something?\r\n\r\nAs for forbidding multiple levels of recursion, I think the value outweighs the issues personally (and I addressed circular refs I believe), but if people think it's not worth it I'll restrict it to one include.",
      "created_at" : "2017-05-16T00:54:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301644638",
      "id" : 301644638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-05-16T00:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301644638",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "@kallewoof yes you're right. datadir cache is cleared after all files are read. My mistake.\r\n\r\nI still don't like the recursion and the fact that there can be multiple levels of imports. It means there are more edge cases and unexpected behaviour. For example, if `-includeconf` is included as a command line parameter, then the includeconf file is read *before* the regular conf file, and so takes precedence. If an includeconf line is included in the regular conf file, then it is read *during* the regular config file, and which settings are taken from the regular conf file and which are taken from the includeconf file depend on the ordering of settings in the regular conf file.\r\n\r\nThe new `warnOnFailure` and `lockAndClear` bool arguments to `ReadConfigFile()` seem pretty strange to me. They're only used when `ReadConfigFile()` is being called recursively, and they control a large chunk of the behaviour within `ReadConfigFile()`. That's a clue to me that maybe the functionality isn't split up correctly - perhaps the locking/clearing should be in an outer function which calls an inner function for each of the config files?\r\n\r\nFinally, you've introduced a new crash bug. If `-conf` or `-includeconf` don't refer to a valid file, the bitcoind will crash on startup. Here's the backtrace:\r\n\r\n```\r\nCore was generated by `bitcoind -datadir=/tmp/user/1000/test6p7xn_xt/856/node0 -server -keypool=1 -dis'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3b77df0428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n54\t../sysdeps/unix/sysv/linux/raise.c: No such file or directory.\r\n(gdb) bt\r\n#0  0x00007f3b77df0428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3b77df202a in __GI_abort () at abort.c:89\r\n#2  0x00007f3b7873284d in __gnu_cxx::__verbose_terminate_handler() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#3  0x00007f3b787306b6 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#4  0x00007f3b78730701 in std::terminate() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#5  0x00007f3b78730919 in __cxa_throw () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#6  0x00007f3b79f29f82 in boost::filesystem::detail::canonical(boost::filesystem::path const&, boost::filesystem::path const&, boost::system::error_code*) () from /usr/lib/x86_64-linux-gnu/libboost_filesystem.so.1.58.0\r\n#7  0x000055e5c58b2ae2 in boost::filesystem::canonical (base=..., p=...) at /usr/include/boost/filesystem/operations.hpp:459\r\n#8  GetConfigFile (confPath=\"global.conf\", relativePath=\"\") at util.cpp:603\r\n#9  0x000055e5c58b4353 in ArgsManager::ProcessSetting (this=this@entry=0x55e5c5db1fa0 <gArgs>, strKey=\"-includeconf\", strValue=\"global.conf\", relativePath=\"\") at util.cpp:386\r\n#10 0x000055e5c58b487d in ArgsManager::ParseParameters (this=0x55e5c5db1fa0 <gArgs>, argc=<optimized out>, argv=<optimized out>) at util.cpp:424\r\n#11 0x000055e5c5653d4a in ParseParameters (argv=0x7fff5492e618, argc=14) at util.h:263\r\n#12 AppInit (argc=14, argv=0x7fff5492e618) at bitcoind.cpp:75\r\n#13 0x000055e5c5648bef in main (argc=14, argv=0x7fff5492e618) at bitcoind.cpp:196\r\n(gdb) quit\r\n```\r\n\r\nIf I use an invalid filename for `-conf` on master. I don't see this crash.",
      "created_at" : "2017-05-16T15:00:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301810263",
      "id" : 301810263,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-05-16T15:00:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301810263",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "@jnewbery Thanks a lot for all the feedback.\r\n\r\n> I still don't like the recursion and the fact that there can be multiple levels of imports. It means there are more edge cases and unexpected behaviour. For example, if -includeconf is included as a command line parameter, then the includeconf file is read before the regular conf file, and so takes precedence. If an includeconf line is included in the regular conf file, then it is read during the regular config file, and which settings are taken from the regular conf file and which are taken from the includeconf file depend on the ordering of settings in the regular conf file.\r\n\r\nThat is the case without recursion as well, unless we forbid command line case. (Which I can do already, even while keeping recursion.)\r\n\r\n> The new warnOnFailure and lockAndClear bool arguments to ReadConfigFile() seem pretty strange to me. They're only used when ReadConfigFile() is being called recursively, and they control a large chunk of the behaviour within ReadConfigFile(). That's a clue to me that maybe the functionality isn't split up correctly - perhaps the locking/clearing should be in an outer function which calls an inner function for each of the config files?\r\n\r\nHm.. the warnOnFailure was just a nice-to-have to inform the user when an explicitly included file didn't actually exist, but I can remove it for cleanliness. Since I moved most of ReadConfigFile into ReadConfigStream, the only remaining stuff was the caching stuff, which doesn't feel odd to me. I'm not actually sure why you consider this to be a problem: the ReadConfigFile is mostly there to do or not do the locking and data cache clearing, and the ReadConfigStream is there to do the actual reading/parsing part.\r\n\r\nThat said, I'm not overly attached to the idea of allowing recursion, so unless someone speaks *for* it I am going to try to simplify the code to only allow one single include and to only allow it in the file, i.e. not from command line. I believe that would address most of your concerns.\r\n",
      "created_at" : "2017-05-17T02:22:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301967013",
      "id" : 301967013,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10267",
      "updated_at" : "2017-05-17T02:22:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301967013",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119456769"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119456769"
         }
      },
      "body" : "I think it'd be clearer to rename this to `ReadConfigFiles()`. You could remove the `confPath` argument since it's a property of the `ArgsManager` class. The three places where this is called can just call `gArgs.ReadConfigFiles()`.\r\n\r\nThe responsibilities of this function then becomes very clear: read all the config files.",
      "commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "created_at" : "2017-05-31T19:52:40Z",
      "diff_hunk" : "@@ -592,26 +592,41 @@ fs::path GetConfigFile(const std::string& confPath)\n     return pathConfigFile;\n }\n \n+void ArgsManager::ReadConfigStream(fs::ifstream& streamConfig)\n+{\n+    std::set<std::string> setOptions;\n+    setOptions.insert(\"*\");\n+\n+    for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it) {\n+        // Don't overwrite existing settings so command line settings override bitcoin.conf\n+        std::string strKey = std::string(\"-\") + it->string_key;\n+        std::string strValue = it->value[0];\n+        InterpretNegativeSetting(strKey, strValue);\n+        if (mapArgs.count(strKey) == 0) {\n+            mapArgs[strKey] = strValue;\n+        }\n+        mapMultiArgs[strKey].push_back(strValue);\n+    }\n+}\n+\n void ArgsManager::ReadConfigFile(const std::string& confPath)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119456769",
      "id" : 119456769,
      "original_commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "original_position" : 21,
      "path" : "src/util.cpp",
      "position" : 21,
      "pull_request_review_id" : 41338462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267",
      "updated_at" : "2017-05-31T20:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119456769",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119457041"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119457041"
         }
      },
      "body" : "I'd prefer to name this function ReadConfigFile(). At the moment, the only type of input it can read is a file, so naming it `ReadInputStream()` is a little misleading.",
      "commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "created_at" : "2017-05-31T19:53:57Z",
      "diff_hunk" : "@@ -592,26 +592,41 @@ fs::path GetConfigFile(const std::string& confPath)\n     return pathConfigFile;\n }\n \n+void ArgsManager::ReadConfigStream(fs::ifstream& streamConfig)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119457041",
      "id" : 119457041,
      "original_commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "original_position" : 4,
      "path" : "src/util.cpp",
      "position" : 4,
      "pull_request_review_id" : 41338462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267",
      "updated_at" : "2017-05-31T20:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119457041",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119459000"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119459000"
         }
      },
      "body" : "Can we have an else clause that prints an error message if we fail to open an includeconfig file?",
      "commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "created_at" : "2017-05-31T20:02:39Z",
      "diff_hunk" : "@@ -592,26 +592,41 @@ fs::path GetConfigFile(const std::string& confPath)\n     return pathConfigFile;\n }\n \n+void ArgsManager::ReadConfigStream(fs::ifstream& streamConfig)\n+{\n+    std::set<std::string> setOptions;\n+    setOptions.insert(\"*\");\n+\n+    for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it) {\n+        // Don't overwrite existing settings so command line settings override bitcoin.conf\n+        std::string strKey = std::string(\"-\") + it->string_key;\n+        std::string strValue = it->value[0];\n+        InterpretNegativeSetting(strKey, strValue);\n+        if (mapArgs.count(strKey) == 0) {\n+            mapArgs[strKey] = strValue;\n+        }\n+        mapMultiArgs[strKey].push_back(strValue);\n+    }\n+}\n+\n void ArgsManager::ReadConfigFile(const std::string& confPath)\n {\n     fs::ifstream streamConfig(GetConfigFile(confPath));\n     if (!streamConfig.good())\n         return; // No bitcoin.conf file is OK\n \n+    std::string includeconf;\n     {\n         LOCK(cs_args);\n-        std::set<std::string> setOptions;\n-        setOptions.insert(\"*\");\n-\n-        for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n-        {\n-            // Don't overwrite existing settings so command line settings override bitcoin.conf\n-            std::string strKey = std::string(\"-\") + it->string_key;\n-            std::string strValue = it->value[0];\n-            InterpretNegativeSetting(strKey, strValue);\n-            if (mapArgs.count(strKey) == 0)\n-                mapArgs[strKey] = strValue;\n-            mapMultiArgs[strKey].push_back(strValue);\n+        ReadConfigStream(streamConfig);\n+        if (mapArgs.count(\"-includeconf\")) includeconf = mapArgs[\"-includeconf\"];\n+    }\n+    if (includeconf != \"\") {\n+        fs::path includeFile = GetConfigFile(includeconf);\n+        fs::ifstream includeConfig(includeFile);\n+        if (includeConfig.good()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119459000",
      "id" : 119459000,
      "original_commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "original_position" : 48,
      "path" : "src/util.cpp",
      "position" : 48,
      "pull_request_review_id" : 41338462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267",
      "updated_at" : "2017-05-31T20:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119459000",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119459007"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119459007"
         }
      },
      "body" : "Why not directly:\r\n\r\n```\r\nfs::ifstream includeConfig(GetConfigFile(includeconf));\r\n```\r\n\r\n(like above)\r\n",
      "commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "created_at" : "2017-05-31T20:02:41Z",
      "diff_hunk" : "@@ -592,26 +592,41 @@ fs::path GetConfigFile(const std::string& confPath)\n     return pathConfigFile;\n }\n \n+void ArgsManager::ReadConfigStream(fs::ifstream& streamConfig)\n+{\n+    std::set<std::string> setOptions;\n+    setOptions.insert(\"*\");\n+\n+    for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it) {\n+        // Don't overwrite existing settings so command line settings override bitcoin.conf\n+        std::string strKey = std::string(\"-\") + it->string_key;\n+        std::string strValue = it->value[0];\n+        InterpretNegativeSetting(strKey, strValue);\n+        if (mapArgs.count(strKey) == 0) {\n+            mapArgs[strKey] = strValue;\n+        }\n+        mapMultiArgs[strKey].push_back(strValue);\n+    }\n+}\n+\n void ArgsManager::ReadConfigFile(const std::string& confPath)\n {\n     fs::ifstream streamConfig(GetConfigFile(confPath));\n     if (!streamConfig.good())\n         return; // No bitcoin.conf file is OK\n \n+    std::string includeconf;\n     {\n         LOCK(cs_args);\n-        std::set<std::string> setOptions;\n-        setOptions.insert(\"*\");\n-\n-        for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n-        {\n-            // Don't overwrite existing settings so command line settings override bitcoin.conf\n-            std::string strKey = std::string(\"-\") + it->string_key;\n-            std::string strValue = it->value[0];\n-            InterpretNegativeSetting(strKey, strValue);\n-            if (mapArgs.count(strKey) == 0)\n-                mapArgs[strKey] = strValue;\n-            mapMultiArgs[strKey].push_back(strValue);\n+        ReadConfigStream(streamConfig);\n+        if (mapArgs.count(\"-includeconf\")) includeconf = mapArgs[\"-includeconf\"];\n+    }\n+    if (includeconf != \"\") {\n+        fs::path includeFile = GetConfigFile(includeconf);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119459007",
      "id" : 119459007,
      "original_commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "original_position" : 46,
      "path" : "src/util.cpp",
      "position" : 46,
      "pull_request_review_id" : 41338462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267",
      "updated_at" : "2017-05-31T20:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119459007",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119459369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119459369"
         }
      },
      "body" : "Is it possible to add a log to this function to output which file it's reading, or is it too early to start logging?\r\n\r\nSorry - by my earlier comment, I didn't mean you should remove the logging on failure, just that the structure of the function suggested to me that it shouldn't be called recursively.",
      "commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "created_at" : "2017-05-31T20:04:15Z",
      "diff_hunk" : "@@ -592,26 +592,41 @@ fs::path GetConfigFile(const std::string& confPath)\n     return pathConfigFile;\n }\n \n+void ArgsManager::ReadConfigStream(fs::ifstream& streamConfig)\n+{\n+    std::set<std::string> setOptions;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119459369",
      "id" : 119459369,
      "original_commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "original_position" : 6,
      "path" : "src/util.cpp",
      "position" : 6,
      "pull_request_review_id" : 41338462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267",
      "updated_at" : "2017-05-31T20:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119459369",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460309"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119460309"
         }
      },
      "body" : "not required. `setup_network()` in the base class just calls `setup_nodes()` when there's only one node.",
      "commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "created_at" : "2017-05-31T20:08:27Z",
      "diff_hunk" : "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the -includeconf directive.\"\"\"\n+\n+import os\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class IncludeConfTest(BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        super().setup_chain()\n+        # Create additional config file\n+        # - tmpdir/node0/relative.conf\n+        with open(os.path.join(self.options.tmpdir+\"/node0\", \"relative.conf\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(\"uacomment=relative\\n\")\n+        with open(os.path.join(self.options.tmpdir+\"/node0\", \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"uacomment=main\\nincludeconf=relative.conf\\n\")\n+        # subversion should end with \"(main; relative)/\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def setup_network(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460309",
      "id" : 119460309,
      "original_commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "original_position" : 27,
      "path" : "test/functional/includeconf.py",
      "position" : 27,
      "pull_request_review_id" : 41338462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267",
      "updated_at" : "2017-05-31T20:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119460309",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119460371"
         }
      },
      "body" : "no space before open parentheses please. ",
      "commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "created_at" : "2017-05-31T20:08:46Z",
      "diff_hunk" : "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the -includeconf directive.\"\"\"\n+\n+import os\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class IncludeConfTest(BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        super().setup_chain()\n+        # Create additional config file\n+        # - tmpdir/node0/relative.conf\n+        with open(os.path.join(self.options.tmpdir+\"/node0\", \"relative.conf\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(\"uacomment=relative\\n\")\n+        with open(os.path.join(self.options.tmpdir+\"/node0\", \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"uacomment=main\\nincludeconf=relative.conf\\n\")\n+        # subversion should end with \"(main; relative)/\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test (self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460371",
      "id" : 119460371,
      "original_commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "original_position" : 30,
      "path" : "test/functional/includeconf.py",
      "position" : 30,
      "pull_request_review_id" : 41338462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267",
      "updated_at" : "2017-05-31T20:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119460371",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119460418"
         }
      },
      "body" : "nit: spaces around `+` please",
      "commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "created_at" : "2017-05-31T20:08:56Z",
      "diff_hunk" : "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the -includeconf directive.\"\"\"\n+\n+import os\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class IncludeConfTest(BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        super().setup_chain()\n+        # Create additional config file\n+        # - tmpdir/node0/relative.conf\n+        with open(os.path.join(self.options.tmpdir+\"/node0\", \"relative.conf\"), \"w\", encoding=\"utf8\") as f:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460418",
      "id" : 119460418,
      "original_commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "original_position" : 16,
      "path" : "test/functional/includeconf.py",
      "position" : 16,
      "pull_request_review_id" : 41338462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267",
      "updated_at" : "2017-05-31T20:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119460418",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119460514"
         }
      },
      "body" : "My personal preference is to have the description of the test in the module-level doc string (since that's the first thing people see when they open the file).",
      "commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "created_at" : "2017-05-31T20:09:28Z",
      "diff_hunk" : "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the -includeconf directive.\"\"\"\n+\n+import os\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class IncludeConfTest(BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        super().setup_chain()\n+        # Create additional config file\n+        # - tmpdir/node0/relative.conf\n+        with open(os.path.join(self.options.tmpdir+\"/node0\", \"relative.conf\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(\"uacomment=relative\\n\")\n+        with open(os.path.join(self.options.tmpdir+\"/node0\", \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"uacomment=main\\nincludeconf=relative.conf\\n\")\n+        # subversion should end with \"(main; relative)/\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test (self):\n+        '''",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460514",
      "id" : 119460514,
      "original_commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "original_position" : 31,
      "path" : "test/functional/includeconf.py",
      "position" : 31,
      "pull_request_review_id" : 41338462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267",
      "updated_at" : "2017-05-31T20:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119460514",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460768"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119460768"
         }
      },
      "body" : "It'd be nice to have a couple of other subtests:\r\n\r\n- including `--includeconf` in the command line argument has no effect\r\n- including `includeconf` in an includeconf file has no effect.",
      "commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "created_at" : "2017-05-31T20:10:43Z",
      "diff_hunk" : "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460768",
      "id" : 119460768,
      "original_commit_id" : "9c20870eaef5d3dc11512d78215189df720ef471",
      "original_position" : 1,
      "path" : "test/functional/includeconf.py",
      "position" : 1,
      "pull_request_review_id" : 41338462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10267",
      "updated_at" : "2017-05-31T20:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119460768",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
