[
   {
      "body" : "Concept ACK",
      "created_at" : "2016-08-11T19:56:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-239273140",
      "id" : 239273140,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8499",
      "updated_at" : "2016-08-11T19:56:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/239273140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "I think this is only a temporary solution to protect some of the most common script types. It's easy for P2WPKH. For P2WSH, it could only be done on a case-by-case basis. This approach won't work for more complicated scripts like MAST ",
      "created_at" : "2016-08-12T00:50:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-239335582",
      "id" : 239335582,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8499",
      "updated_at" : "2016-08-12T00:50:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/239335582",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8403418?v=3",
         "events_url" : "https://api.github.com/users/jl2012/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jl2012/followers",
         "following_url" : "https://api.github.com/users/jl2012/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jl2012/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jl2012",
         "id" : 8403418,
         "login" : "jl2012",
         "organizations_url" : "https://api.github.com/users/jl2012/orgs",
         "received_events_url" : "https://api.github.com/users/jl2012/received_events",
         "repos_url" : "https://api.github.com/users/jl2012/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jl2012/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jl2012"
      }
   },
   {
      "body" : "`*segwit.py` tests fail.",
      "created_at" : "2016-08-12T11:33:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-239424171",
      "id" : 239424171,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8499",
      "updated_at" : "2016-08-12T11:33:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/239424171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "body" : "Updated to do more sanity checks:\r\n1. If the public key in P2WPKH is bigger than 33 bytes, make sure it matches the witness program\r\n2. Make sure the witnessScript is <= 10000 bytes and matches the witness program",
      "created_at" : "2016-08-19T03:51:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-240921201",
      "id" : 240921201,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8499",
      "updated_at" : "2016-08-19T03:51:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/240921201",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8403418?v=3",
         "events_url" : "https://api.github.com/users/jl2012/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jl2012/followers",
         "following_url" : "https://api.github.com/users/jl2012/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jl2012/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jl2012",
         "id" : 8403418,
         "login" : "jl2012",
         "organizations_url" : "https://api.github.com/users/jl2012/orgs",
         "received_events_url" : "https://api.github.com/users/jl2012/received_events",
         "repos_url" : "https://api.github.com/users/jl2012/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jl2012/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jl2012"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75657219"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8499"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75657219"
         }
      },
      "body" : "Why only when the size is above 33 bytes?",
      "commit_id" : "47335e4b401cd51765bd8e21f0a9ba2471cbb5b7",
      "created_at" : "2016-08-22T10:58:04Z",
      "diff_hunk" : "@@ -154,6 +154,75 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool IsBadWitness(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return false; // Coinbases are skipped\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        std::vector<std::vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        CScript prevScript = prev.scriptPubKey;\n+        Solver(prevScript, whichType, vSolutions);\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            std::vector<std::vector<unsigned char> > stack;\n+            // convert the scriptSig into a stack, so we can inspect the redeemScript\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+                return true;\n+            if (stack.empty())\n+                return true;\n+            prevScript = CScript(stack.back().begin(), stack.back().end());\n+        }\n+\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+\n+        // Non-witness program must not be associated with any witness\n+        if (!prevScript.IsWitnessProgram(witnessversion, witnessprogram) && !tx.wit.vtxinwit[i].IsNull())\n+            return true;\n+\n+        // Witness for P2WPKH must have 2 stack items. Signature must be <= 73 bytes.\n+        // Pubkey must be <= 65 bytes.\n+        // If pubkey size > 33 bytes, make sure it matches witness program.\n+        if (witnessversion == 0 && witnessprogram.size() == 20) {\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack.size() != 2)\n+                return true;\n+            std::vector<unsigned char> hashPubKey(20);\n+            std::vector<unsigned char> pubKey = tx.wit.vtxinwit[i].scriptWitness.stack[1];\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack[0].size() > 73 || pubKey.size() > 65)\n+                return true;\n+            if (pubKey.size() > 33) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75657219",
      "id" : 75657219,
      "original_commit_id" : "47335e4b401cd51765bd8e21f0a9ba2471cbb5b7",
      "original_position" : 47,
      "path" : "src/policy/policy.cpp",
      "position" : 47,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8499",
      "updated_at" : "2016-08-22T10:58:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75657219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75660562"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8499"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75660562"
         }
      },
      "body" : "The main objective of this PR is to detect extra witness data in some known forms of scripts, and DoS ban if found.\r\n\r\nThe normal size for compressed key is 33. If the size is 33, we are sure that no extra data is added. Whether the provided key matches the hash or not will be tested later in script evaluation. Testing here is just duplicated work.\r\n\r\nIf the size is bigger than 33, we don't know whether it is legit (uncompressed key) or not (malleated witness). To exclude the invalid case we must compare the hash early, and DoS ban if it does not match. If we don't compare the hash here, an attacker may increase the key size up to 65 bytes, get the transaction rejected due to insufficient fee, and not get banned",
      "commit_id" : "47335e4b401cd51765bd8e21f0a9ba2471cbb5b7",
      "created_at" : "2016-08-22T11:28:01Z",
      "diff_hunk" : "@@ -154,6 +154,75 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool IsBadWitness(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return false; // Coinbases are skipped\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        std::vector<std::vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        CScript prevScript = prev.scriptPubKey;\n+        Solver(prevScript, whichType, vSolutions);\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            std::vector<std::vector<unsigned char> > stack;\n+            // convert the scriptSig into a stack, so we can inspect the redeemScript\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+                return true;\n+            if (stack.empty())\n+                return true;\n+            prevScript = CScript(stack.back().begin(), stack.back().end());\n+        }\n+\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+\n+        // Non-witness program must not be associated with any witness\n+        if (!prevScript.IsWitnessProgram(witnessversion, witnessprogram) && !tx.wit.vtxinwit[i].IsNull())\n+            return true;\n+\n+        // Witness for P2WPKH must have 2 stack items. Signature must be <= 73 bytes.\n+        // Pubkey must be <= 65 bytes.\n+        // If pubkey size > 33 bytes, make sure it matches witness program.\n+        if (witnessversion == 0 && witnessprogram.size() == 20) {\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack.size() != 2)\n+                return true;\n+            std::vector<unsigned char> hashPubKey(20);\n+            std::vector<unsigned char> pubKey = tx.wit.vtxinwit[i].scriptWitness.stack[1];\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack[0].size() > 73 || pubKey.size() > 65)\n+                return true;\n+            if (pubKey.size() > 33) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75660562",
      "id" : 75660562,
      "original_commit_id" : "47335e4b401cd51765bd8e21f0a9ba2471cbb5b7",
      "original_position" : 47,
      "path" : "src/policy/policy.cpp",
      "position" : 47,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8499",
      "updated_at" : "2016-08-22T11:28:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75660562",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8403418?v=3",
         "events_url" : "https://api.github.com/users/jl2012/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jl2012/followers",
         "following_url" : "https://api.github.com/users/jl2012/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jl2012/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jl2012",
         "id" : 8403418,
         "login" : "jl2012",
         "organizations_url" : "https://api.github.com/users/jl2012/orgs",
         "received_events_url" : "https://api.github.com/users/jl2012/received_events",
         "repos_url" : "https://api.github.com/users/jl2012/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jl2012/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jl2012"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75686509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8499"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75686509"
         }
      },
      "body" : "More tests could be added here to protect some common scripts. For example, canonical n-of-m multisig must have exactly n + 1 stack items (excluding the witnessScript). The first one must be empty (assuming BIP146) and the followings must be <= 73 bytes. Otherwise we kick the peer. Some common HTLC could be protected in a similar way, until there is a more permanent solution\r\n\r\nNon-canonical scripts are still accepted but they could be vulnerable to malleated witness attack",
      "commit_id" : "47335e4b401cd51765bd8e21f0a9ba2471cbb5b7",
      "created_at" : "2016-08-22T14:23:31Z",
      "diff_hunk" : "@@ -154,6 +154,75 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool IsBadWitness(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return false; // Coinbases are skipped\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        std::vector<std::vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        CScript prevScript = prev.scriptPubKey;\n+        Solver(prevScript, whichType, vSolutions);\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            std::vector<std::vector<unsigned char> > stack;\n+            // convert the scriptSig into a stack, so we can inspect the redeemScript\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+                return true;\n+            if (stack.empty())\n+                return true;\n+            prevScript = CScript(stack.back().begin(), stack.back().end());\n+        }\n+\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+\n+        // Non-witness program must not be associated with any witness\n+        if (!prevScript.IsWitnessProgram(witnessversion, witnessprogram) && !tx.wit.vtxinwit[i].IsNull())\n+            return true;\n+\n+        // Witness for P2WPKH must have 2 stack items. Signature must be <= 73 bytes.\n+        // Pubkey must be <= 65 bytes.\n+        // If pubkey size > 33 bytes, make sure it matches witness program.\n+        if (witnessversion == 0 && witnessprogram.size() == 20) {\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack.size() != 2)\n+                return true;\n+            std::vector<unsigned char> hashPubKey(20);\n+            std::vector<unsigned char> pubKey = tx.wit.vtxinwit[i].scriptWitness.stack[1];\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack[0].size() > 73 || pubKey.size() > 65)\n+                return true;\n+            if (pubKey.size() > 33) {\n+                CHash160().Write(begin_ptr(pubKey), pubKey.size()).Finalize(begin_ptr(hashPubKey));\n+                if (hashPubKey != witnessprogram)\n+                    return true;\n+            }\n+        }\n+\n+        // Witness for P2WSH must not be empty.\n+        // Make sure the witnessScript size is <= 10000 bytes and matches witness program.\n+        if (witnessversion == 0 && witnessprogram.size() == 32) {\n+            if (tx.wit.vtxinwit[i].IsNull())\n+                return true;\n+            CScript witnessScript = CScript(tx.wit.vtxinwit[i].scriptWitness.stack.back().begin(), tx.wit.vtxinwit[i].scriptWitness.stack.back().end());\n+            uint256 hashWitnessScript;\n+            if (witnessScript.size() > 10000)\n+                return true;\n+            CSHA256().Write(begin_ptr(witnessScript), witnessScript.size()).Finalize(hashWitnessScript.begin());\n+            if (memcmp(hashWitnessScript.begin(), &witnessprogram[0], 32))\n+                return true;\n+            // more P2WSH tests could be added here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75686509",
      "id" : 75686509,
      "original_commit_id" : "47335e4b401cd51765bd8e21f0a9ba2471cbb5b7",
      "original_position" : 66,
      "path" : "src/policy/policy.cpp",
      "position" : 66,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8499",
      "updated_at" : "2016-08-22T14:23:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75686509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8403418?v=3",
         "events_url" : "https://api.github.com/users/jl2012/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jl2012/followers",
         "following_url" : "https://api.github.com/users/jl2012/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jl2012/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jl2012",
         "id" : 8403418,
         "login" : "jl2012",
         "organizations_url" : "https://api.github.com/users/jl2012/orgs",
         "received_events_url" : "https://api.github.com/users/jl2012/received_events",
         "repos_url" : "https://api.github.com/users/jl2012/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jl2012/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jl2012"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75686929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8499"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75686929"
         }
      },
      "body" : "Comparing the hash here guarantees that the script size and sigOpCount must be correct. And we could further observe the script with static analysis",
      "commit_id" : "47335e4b401cd51765bd8e21f0a9ba2471cbb5b7",
      "created_at" : "2016-08-22T14:25:36Z",
      "diff_hunk" : "@@ -154,6 +154,75 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool IsBadWitness(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return false; // Coinbases are skipped\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        std::vector<std::vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        CScript prevScript = prev.scriptPubKey;\n+        Solver(prevScript, whichType, vSolutions);\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            std::vector<std::vector<unsigned char> > stack;\n+            // convert the scriptSig into a stack, so we can inspect the redeemScript\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+                return true;\n+            if (stack.empty())\n+                return true;\n+            prevScript = CScript(stack.back().begin(), stack.back().end());\n+        }\n+\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+\n+        // Non-witness program must not be associated with any witness\n+        if (!prevScript.IsWitnessProgram(witnessversion, witnessprogram) && !tx.wit.vtxinwit[i].IsNull())\n+            return true;\n+\n+        // Witness for P2WPKH must have 2 stack items. Signature must be <= 73 bytes.\n+        // Pubkey must be <= 65 bytes.\n+        // If pubkey size > 33 bytes, make sure it matches witness program.\n+        if (witnessversion == 0 && witnessprogram.size() == 20) {\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack.size() != 2)\n+                return true;\n+            std::vector<unsigned char> hashPubKey(20);\n+            std::vector<unsigned char> pubKey = tx.wit.vtxinwit[i].scriptWitness.stack[1];\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack[0].size() > 73 || pubKey.size() > 65)\n+                return true;\n+            if (pubKey.size() > 33) {\n+                CHash160().Write(begin_ptr(pubKey), pubKey.size()).Finalize(begin_ptr(hashPubKey));\n+                if (hashPubKey != witnessprogram)\n+                    return true;\n+            }\n+        }\n+\n+        // Witness for P2WSH must not be empty.\n+        // Make sure the witnessScript size is <= 10000 bytes and matches witness program.\n+        if (witnessversion == 0 && witnessprogram.size() == 32) {\n+            if (tx.wit.vtxinwit[i].IsNull())\n+                return true;\n+            CScript witnessScript = CScript(tx.wit.vtxinwit[i].scriptWitness.stack.back().begin(), tx.wit.vtxinwit[i].scriptWitness.stack.back().end());\n+            uint256 hashWitnessScript;\n+            if (witnessScript.size() > 10000)\n+                return true;\n+            CSHA256().Write(begin_ptr(witnessScript), witnessScript.size()).Finalize(hashWitnessScript.begin());\n+            if (memcmp(hashWitnessScript.begin(), &witnessprogram[0], 32))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75686929",
      "id" : 75686929,
      "original_commit_id" : "47335e4b401cd51765bd8e21f0a9ba2471cbb5b7",
      "original_position" : 64,
      "path" : "src/policy/policy.cpp",
      "position" : 64,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8499",
      "updated_at" : "2016-08-22T14:25:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75686929",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8403418?v=3",
         "events_url" : "https://api.github.com/users/jl2012/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jl2012/followers",
         "following_url" : "https://api.github.com/users/jl2012/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jl2012/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jl2012",
         "id" : 8403418,
         "login" : "jl2012",
         "organizations_url" : "https://api.github.com/users/jl2012/orgs",
         "received_events_url" : "https://api.github.com/users/jl2012/received_events",
         "repos_url" : "https://api.github.com/users/jl2012/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jl2012/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jl2012"
      }
   },
   {
      "body" : "I don't think this belongs in policy. It detects witness transaction inputs that are unambiguously invalid by consensus rules, so I think it belongs in script/interpreter.cpp, but for that it can't depend on CCoinsView. Would it be possible to just have a function per input, that just takes the prevout, scriptsig, and scriptwitness?",
      "created_at" : "2016-08-23T11:34:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-241703701",
      "id" : 241703701,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8499",
      "updated_at" : "2016-08-23T11:34:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/241703701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa: can I still use `Solver` and `txnouttype` after moving to interpreter.cpp? That'd would useful when we define more common script types (e.g. HTLC)\r\n\r\nThe `IsBadWitness` function is only a very small subset of consensus rules and it should never be used in the consensus critical path. Actually, we don't need `IsBadWitness` if we fully execute the script before doing any size related policy check. So it may be reasonable to consider this as part of policy.\r\n\r\nThis is more like an \"assertion\" for the following policy checking, rather than for consensus purpose",
      "created_at" : "2016-08-23T17:44:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-241814932",
      "id" : 241814932,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8499",
      "updated_at" : "2016-08-23T17:54:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/241814932",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8403418?v=3",
         "events_url" : "https://api.github.com/users/jl2012/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jl2012/followers",
         "following_url" : "https://api.github.com/users/jl2012/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jl2012/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jl2012",
         "id" : 8403418,
         "login" : "jl2012",
         "organizations_url" : "https://api.github.com/users/jl2012/orgs",
         "received_events_url" : "https://api.github.com/users/jl2012/received_events",
         "repos_url" : "https://api.github.com/users/jl2012/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jl2012/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jl2012"
      }
   }
]
