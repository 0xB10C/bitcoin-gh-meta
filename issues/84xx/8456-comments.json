[
   {
      "body" : "Thanks! Looks good.\r\nConcept ACK will review and test soon.",
      "created_at" : "2016-08-05T10:56:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-237822346",
      "id" : 237822346,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8456",
      "updated_at" : "2016-08-05T10:56:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/237822346",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73769322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73769322"
         }
      },
      "body" : "nit: Double negation makes it hards to read. I suggest to replace by\r\n\r\n```\r\n CAmount nOldFee = wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0;\r\n```",
      "commit_id" : "41572b183d33080602b8522ff7085f472ef3e4a7",
      "created_at" : "2016-08-05T22:39:53Z",
      "diff_hunk" : "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73769322",
      "id" : 73769322,
      "original_commit_id" : "41572b183d33080602b8522ff7085f472ef3e4a7",
      "original_position" : 113,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 113,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456",
      "updated_at" : "2016-08-05T22:39:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73769322",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   }
]
