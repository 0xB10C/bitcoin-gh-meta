[
   {
      "author_association" : "MEMBER",
      "body" : "Which GCC version should I use to get those warnings?",
      "created_at" : "2020-06-12T07:57:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19256#issuecomment-643131478",
      "id" : 643131478,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19256",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzEzMTQ3OA==",
      "updated_at" : "2020-06-12T07:57:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643131478",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Which GCC version should I use to get those warnings?\r\n\r\nI'd assume any recent GCC will produce them. I was testing with 8.3.0:\r\n```bash\r\ngcc --version               \r\ngcc (Debian 8.3.0-6) 8.3.0\r\n\r\n./autogen.sh\r\n./configure --prefix=/bitcoin/depends/x86_64-pc-linux-gnu/ CXXFLAGS=\"-Wuninitialized\" \r\n...\r\n  CXX           = g++ -m64 -std=c++11\r\n  CXXFLAGS      =   -fstack-reuse=none -Wstack-protector -fstack-protector-all     -pipe -O2 -Wuninitialized -fno-extended-identifiers\r\n...\r\nmake src/bitcoind -j6\r\n...\r\n  CXX      libbitcoin_common_a-core_write.o\r\nIn file included from ui_interface.cpp:9:\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp: In member function 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]':\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp:54:36: warning: '*((void*)& value +1)' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n         if(value) return value.get();\r\n                                    ^\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp:43:21: note: '*((void*)& value +1)' was declared here\r\n         optional<T> value;\r\n                     ^~~~~\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp: In member function 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]':\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp:54:36: warning: '*((void*)& value +1)' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n         if(value) return value.get();\r\n                                    ^\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp:43:21: note: '*((void*)& value +1)' was declared here\r\n         optional<T> value;\r\n                     ^~~~~\r\n  CXX      libbitcoin_common_a-key.o\r\n```",
      "created_at" : "2020-06-12T08:12:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19256#issuecomment-643138548",
      "id" : 643138548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19256",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzEzODU0OA==",
      "updated_at" : "2020-06-12T08:12:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643138548",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think this change is fine. I'd prefer to call it what it is though \"Change combiner for GUI signals to optional_last_value\". This does have a subtle change of functionality: namely that not registering any GUI signals is no longer a run-time error and message boxes could potentially end up ignored when no one registers a handler. Fixing the warning is only a by-effect.",
      "created_at" : "2020-06-12T10:42:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19256#issuecomment-643204975",
      "id" : 643204975,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19256",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzIwNDk3NQ==",
      "updated_at" : "2020-06-12T10:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643204975",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
