[
   {
      "author_association" : "MEMBER",
      "body" : "If it is impossible to return a nullptr, then why not return a plain `CBlockTemplate`?\r\n\r\n\r\n\r\n<!--\r\n\r\ndiff --git a/src/miner.cpp b/src/miner.cpp\r\nindex d9dcbe8a70..9569ab3ffb 100644\r\n--- a/src/miner.cpp\r\n+++ b/src/miner.cpp\r\n@@ -109,6 +109,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\r\n \r\n     if(!pblocktemplate.get())\r\n         return nullptr;\r\n+    CBlock* pblock;\r\n     pblock = &pblocktemplate->block; // pointer for convenience\r\n \r\n     // Add dummy coinbase tx as first transaction\r\n@@ -226,7 +227,7 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa\r\n \r\n void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\r\n {\r\n-    pblock->vtx.emplace_back(iter->GetSharedTx());\r\n+    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\r\n     pblocktemplate->vTxFees.push_back(iter->GetFee());\r\n     pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\r\n     nBlockWeight += iter->GetTxWeight();\r\ndiff --git a/src/miner.h b/src/miner.h\r\nindex 69296f9078..096585dfe4 100644\r\n--- a/src/miner.h\r\n+++ b/src/miner.h\r\n@@ -128,8 +128,6 @@ class BlockAssembler\r\n private:\r\n     // The constructed block template\r\n     std::unique_ptr<CBlockTemplate> pblocktemplate;\r\n-    // A convenience pointer that always refers to the CBlock in pblocktemplate\r\n-    CBlock* pblock;\r\n \r\n     // Configuration parameters for the block size\r\n     bool fIncludeWitness;\r\n",
      "created_at" : "2020-06-14T12:48:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643762257",
      "id" : 643762257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc2MjI1Nw==",
      "updated_at" : "2020-06-14T12:50:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643762257",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@MarcoFalke Good question.  I'm not sure what the motivation is behind the `BlockAssembler` class and its design.  Outside of tests, it's only ever used in `getblocktemplate` and `generateBlocks` in `rpc/mining.cpp`.  It is always created as an ephemeral object on the stack and then after it is done creating a `CBlockTemplate`, it is immediately destroyed after the stack frame ends. \r\n\r\nWhy it allocates a `CBlockTemplate` as a pointer and then returns it via a `unique_ptr` is a good question.  I guess because a block template is potentially very \"heavy\" and the people designing the subsystem didn't want to mess with `std::move` and/or rvalue reference `&&` semantics, and `unique_ptr` is just easier to think about for some people?  Or maybe this evolved from some older code that did it with raw pointers?  I don't know...  If I had done it perhaps I would have just used a `CBlockTemplate` and ensured it had proper `std::move` semantics and returned it directly by value, leveraging RVO and `&&` move semantics.\r\n",
      "created_at" : "2020-06-14T13:05:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643764116",
      "id" : 643764116,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc2NDExNg==",
      "updated_at" : "2020-06-14T13:06:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643764116",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "What I meant is that simply removing nullptr checks is scary and will also fail to compile on some compilers/sanitizers/static analysers with warnings and errors enabled. Also, if the template ever only exists on the stack, then I don't see why it should live in the heap.\r\n\r\nI am not sure if there is a way in C++ to ensure an object can be efficiently moved, but a pre-C++11 alternative would be:\r\n\r\n```cpp\r\nCBlockTemplate on_the_stack;\r\nBlockAssembler().CreateNewBlock(coinbase_script, on_the_stack);",
      "created_at" : "2020-06-14T13:25:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643766357",
      "id" : 643766357,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc2NjM1Nw==",
      "updated_at" : "2020-06-14T13:25:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643766357",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Yeah that was the pre-C++11 canonical way to do it.  Also just returning the value was pretty much always guaranteed to not produce any copies and be equivalent to the \"pass down a non-const ref\" way..  (RVO/copy elision basically does that for you internally anyway).  \r\n\r\nThe example you show is the cheapest way (as is a proper RVO return by value), for sure.  Move semantics are \"almost free\" too -- you just have to pay the extra cost of swapping pointers, etc (CBlockTemplate's heaviest members are the vector of tx refs and other stuff and so you pay the cost of that pointer swap...).\r\n\r\n> What I meant is that simply removing nullptr checks is scary and will also fail to compile\r\n\r\n:) It is only scary if you are thinking about it as just a fancy `malloc`. In C, definitely, not checking `NULL` is scary.  \r\n\r\nHowever, in C++, `new` can never return `nullptr` (at least not the  `new` used in this entire codebase).  It's guaranteed to throw or succeed.  Those are its only two postconditions.  In light of that, there are no sanitizers or compilers that will error out on it or  complain -- since the standard in C++  specifies exactly what new does...\r\n \r\nIf you find this PR useless or scary, feel free to close it.  I figured rather than complain I could help out and fix the little nits here and there.\r\n\r\nNo worries either way.\r\n",
      "created_at" : "2020-06-14T13:37:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643767759",
      "id" : 643767759,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc2Nzc1OQ==",
      "updated_at" : "2020-06-14T13:37:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643767759",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> new can never return nullptr\r\n\r\nOh, I meant that compilers can't know that `CreateNewBlock` never returns a nullptr.\r\n\r\n```cpp\r\nconst auto b = CreateNewBlock();\r\nb->Get();  // <-- Warning/Error here\r\n```\r\n\r\n> If you find this PR useless\r\n\r\nWe do appreciate refactoring changes that improve the code base. My feedback was about the current version of the pull request, which I believe can not be merged as-is.",
      "created_at" : "2020-06-14T14:11:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643771888",
      "id" : 643771888,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc3MTg4OA==",
      "updated_at" : "2020-06-14T14:11:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643771888",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
