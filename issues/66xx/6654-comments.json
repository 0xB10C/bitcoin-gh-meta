[
   {
      "body" : "@sipa  I did end up reworking the tracking of in-mempool parents/children to use iterators rather than hashes as you had suggested (which I never pushed up to #6557).",
      "created_at" : "2015-09-09T01:31:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-138748338",
      "id" : 138748338,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
      "updated_at" : "2015-09-09T01:31:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138748338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "@laanwj looks like travis crapped out on one of the jobs and needs restarting.",
      "created_at" : "2015-09-09T03:11:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-138764516",
      "id" : 138764516,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
      "updated_at" : "2015-09-09T03:11:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138764516",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "@btcdrak Actually I think this is some kind of problem with the unit test code -- not sure why it fails to compile only in that one job but I was just able to reproduce locally. Working on a fix...",
      "created_at" : "2015-09-09T12:35:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-138895713",
      "id" : 138895713,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
      "updated_at" : "2015-09-09T12:35:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138895713",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "@btcdrak Fixed and pushed back up, travis is happy now...",
      "created_at" : "2015-09-09T13:09:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-138904329",
      "id" : 138904329,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
      "updated_at" : "2015-09-09T13:09:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138904329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39434359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39434359"
         }
      },
      "body" : "Will move this to not be an internal code (so we send a reject message back).",
      "commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "created_at" : "2015-09-14T19:13:25Z",
      "diff_hunk" : "@@ -466,5 +474,7 @@ static const unsigned int REJECT_HIGHFEE = 0x100;\n static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n /** Transaction conflicts with a transaction already known */\n static const unsigned int REJECT_CONFLICT = 0x102;\n+/** Transaction would result in too long in-mempool chain */\n+static const unsigned int REJECT_LONGCHAIN = 0x103;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39434359",
      "id" : 39434359,
      "original_commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "original_position" : 20,
      "path" : "src/main.h",
      "position" : 20,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
      "updated_at" : "2015-09-14T19:13:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39434359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "In general, it'd be good to think about separating the reorg case entirely from the main mempool codebase. For instance, keep a simple linear list of reorged transactions, and after a reorg attempt to add them back the mempool one-by-one. This separate code could also handle cases where we might want to remine transactions that we otherwise wouldn't, as a \"goodwill\" gesture to reduce the impact of large reorgs.",
      "created_at" : "2015-09-14T19:42:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140186250",
      "id" : 140186250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
      "updated_at" : "2015-09-14T19:42:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140186250",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39437909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39437909"
         }
      },
      "body" : "trailing whitespace",
      "commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "created_at" : "2015-09-14T19:45:54Z",
      "diff_hunk" : "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39437909",
      "id" : 39437909,
      "original_commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "original_position" : 32,
      "path" : "src/txmempool.cpp",
      "position" : 32,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
      "updated_at" : "2015-09-14T19:45:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39437909",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Needs a comment defining ancestor/descendant. ",
      "created_at" : "2015-09-14T19:54:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140188867",
      "id" : 140188867,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
      "updated_at" : "2015-09-14T19:54:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140188867",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39438792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39438792"
         }
      },
      "body" : "trailing whitespace",
      "commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "created_at" : "2015-09-14T19:54:28Z",
      "diff_hunk" : "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);\n+            // We can skip updating entries we've encountered before or that\n+            // are in the block (which are already accounted for).\n+            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n+                UpdateChild(it, childIter, true);\n+                UpdateParent(childIter, it, true);\n+            }\n+        }\n+        if (!UpdateForDescendants(it, 100, mapMemPoolDescendantsToUpdate, setAlreadyIncluded)) {\n+            // Mark as dirty if we can't do the calculation.\n+            mapTx.modify(it, set_dirty());\n+        }\n+    }\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString)\n+{\n+    setEntries parentHashes;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    // Get parents of this transaction that are in the mempool\n+    // entry may or may not already be in the mempool, so we iterate mapTx\n+    // to find parents, rather than try GetMemPoolParents(entry)\n+    // TODO: optimize this so that we only check limits and walk\n+    // tx.vin when called on entries not already in the mempool.\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n+        if (piter != mapTx.end()) {\n+            parentHashes.insert(piter);\n+            if (parentHashes.size() + 1 > limitAncestorCount) {\n+                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    size_t totalSizeWithAncestors = entry.GetTxSize();\n+\n+    while (!parentHashes.empty()) {\n+        setAncestors.insert(parentHashes.begin(), parentHashes.end());\n+        setEntries stageParentSet; ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39438792",
      "id" : 39438792,
      "original_commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "original_position" : 164,
      "path" : "src/txmempool.cpp",
      "position" : 164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
      "updated_at" : "2015-09-14T19:54:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39438792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39438992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39438992"
         }
      },
      "body" : "trailing whitespace",
      "commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "created_at" : "2015-09-14T19:56:25Z",
      "diff_hunk" : "@@ -48,6 +53,246 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+// Update the given tx for any in-mempool descendants.\n+// Assumes that setMemPoolChildren is correct for the given tx and all\n+// descendants.\n+bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n+    // Track the number of entries (outside setExclude) that we'd need to visit\n+    // (will bail out if it exceeds maxDescendantsToVisit)\n+    int nChildrenToVisit = 0; \n+\n+    setEntries stageEntries, setAllDescendants;\n+    stageEntries = GetMemPoolChildren(updateIt);\n+\n+    while (!stageEntries.empty()) {\n+        setAllDescendants.insert(stageEntries.begin(), stageEntries.end());\n+\n+        setEntries entriesToAdd;\n+        BOOST_FOREACH(const txiter cit, stageEntries) {\n+            if (cit->IsDirty()) {\n+                // Don't consider any more children if any descendant is dirty\n+                return false;\n+            }\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            BOOST_FOREACH(const txiter childEntry, setChildren) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                        // update visit count only for new child transactions\n+                        // (outside of setExclude and entriesToAdd)\n+                        if (setAllDescendants.insert(cacheEntry).second &&\n+                                !setExclude.count(cacheEntry->GetTx().GetHash()) &&\n+                                !entriesToAdd.count(cacheEntry)) {\n+                            nChildrenToVisit++;\n+                        }\n+                    }\n+                } else if (!setAllDescendants.count(childEntry)) {\n+                    // Try adding to entriesToAdd, and update our visit count\n+                    if (entriesToAdd.insert(childEntry).second && !setExclude.count(childEntry->GetTx().GetHash())) {\n+                        nChildrenToVisit++;\n+                    }\n+                }\n+                if (nChildrenToVisit > maxDescendantsToVisit) {\n+                    return false;\n+                }\n+            }\n+        }\n+        stageEntries = entriesToAdd;\n+    }\n+    // setAllDescendants now contains all in-mempool descendants of updateIt.\n+    // Update and add to cached descendant map\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+        }\n+    }\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    return true;\n+}\n+\n+// vHashesToUpdate is the set of transaction hashes from a disconnected block\n+// which has been re-added to the mempool.\n+// for each entry, look for descendants that are outside hashesToUpdate, and\n+// add fee/size information for such descendants to the parent.\n+void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n+{\n+    // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n+    // in-vHashesToUpdate transactions, so that we don't have to recalculate\n+    // descendants when we come across a previously seen entry.\n+    cacheMap mapMemPoolDescendantsToUpdate;\n+\n+    // Use a set for lookups into vHashesToUpdate (these entries are already\n+    // accounted for in the state of their ancestors)\n+    std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n+\n+    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // we are sure that all in-mempool descendants have already been processed.\n+    // This maximizes the benefit of the descendant cache and guarantees that\n+    // setMemPoolChildren will be updated, an assumption made in\n+    // UpdateForDescendants.\n+    BOOST_REVERSE_FOREACH(const uint256 &hash, vHashesToUpdate) {\n+        // we cache the in-mempool children to avoid duplicate updates\n+        setEntries setChildren;\n+        // calculate children from mapNextTx\n+        txiter it = mapTx.find(hash);\n+        if (it == mapTx.end()) {\n+            continue;\n+        }\n+        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        // First calculate the children, and update setMemPoolChildren to\n+        // include them, and update their setMemPoolParents to include this tx.\n+        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+            const uint256 &childHash = iter->second.ptx->GetHash();\n+            txiter childIter = mapTx.find(childHash);\n+            // We can skip updating entries we've encountered before or that\n+            // are in the block (which are already accounted for).\n+            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n+                UpdateChild(it, childIter, true);\n+                UpdateParent(childIter, it, true);\n+            }\n+        }\n+        if (!UpdateForDescendants(it, 100, mapMemPoolDescendantsToUpdate, setAlreadyIncluded)) {\n+            // Mark as dirty if we can't do the calculation.\n+            mapTx.modify(it, set_dirty());\n+        }\n+    }\n+}\n+\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString)\n+{\n+    setEntries parentHashes;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    // Get parents of this transaction that are in the mempool\n+    // entry may or may not already be in the mempool, so we iterate mapTx\n+    // to find parents, rather than try GetMemPoolParents(entry)\n+    // TODO: optimize this so that we only check limits and walk\n+    // tx.vin when called on entries not already in the mempool.\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n+        if (piter != mapTx.end()) {\n+            parentHashes.insert(piter);\n+            if (parentHashes.size() + 1 > limitAncestorCount) {\n+                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                return false;\n+            }\n+        }\n+    }\n+\n+    size_t totalSizeWithAncestors = entry.GetTxSize();\n+\n+    while (!parentHashes.empty()) {\n+        setAncestors.insert(parentHashes.begin(), parentHashes.end());\n+        setEntries stageParentSet; \n+        BOOST_FOREACH(const txiter &stageit, parentHashes) {\n+            assert(stageit != mapTx.end());\n+\n+            totalSizeWithAncestors += stageit->GetTxSize();\n+            if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+                errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantSize);\n+                return false;\n+            } else if (uint64_t(stageit->GetCountWithDescendants() + 1) > limitDescendantCount) {\n+                errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString().substr(0,10), limitDescendantCount);\n+                return false;\n+            } else if (totalSizeWithAncestors > limitAncestorSize) {\n+                errString = strprintf(\"exceeds ancestor size limit [limit: %u]\", limitAncestorSize);\n+                return false;\n+            }\n+\n+            const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n+            BOOST_FOREACH(const txiter &phash, setMemPoolParents) {\n+                // If this is a new ancestor, add it.\n+                if (setAncestors.count(phash) == 0) {\n+                    stageParentSet.insert(phash);\n+                }\n+                if (stageParentSet.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39438992",
      "id" : 39438992,
      "original_commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "original_position" : 190,
      "path" : "src/txmempool.cpp",
      "position" : 190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
      "updated_at" : "2015-09-14T19:56:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39438992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39440454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39440454"
         }
      },
      "body" : "trailing whitespace",
      "commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "created_at" : "2015-09-14T20:10:06Z",
      "diff_hunk" : "@@ -89,34 +334,106 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n     nTransactionsUpdated += n;\n }\n \n-\n-bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate)\n+bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate)\n {\n     // Add to memory pool without checking anything.\n     // Used by main.cpp AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     LOCK(cs);\n-    mapTx[hash] = entry;\n-    const CTransaction& tx = mapTx[hash].GetTx();\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n+    mapLinks.insert(make_pair(newit, TxLinks()));\n+\n+    // Update cachedInnerUsage to include contained transaction's usage.\n+    // (When we update the entry for in-mempool parents, memory usage will be\n+    // further updated.)\n+    cachedInnerUsage += entry.DynamicMemoryUsage();\n+\n+    const CTransaction& tx = newit->GetTx();\n+    std::set<uint256> setParentTransactions;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n+        setParentTransactions.insert(tx.vin[i].prevout.hash);\n+    }\n+    // Don't bother worrying about child transactions of this one.\n+    // Normal case of a new transaction arriving is that there can't be any\n+    // children, because such children would be orphans.\n+    // An exception to that is if a transaction enters that used to be in a block.\n+    // In that case, our disconnect block logic will call UpdateTransactionsFromBlock\n+    // to clean up the mess we're leaving here.\n+\n+    // Update ancestors with information about this tx\n+    BOOST_FOREACH (const uint256 &phash, setParentTransactions) {\n+        txiter pit = mapTx.find(phash);\n+        if (pit != mapTx.end()) {\n+            UpdateParent(newit, pit, true);\n+        }\n+    }\n+    UpdateAncestorsOf(true, hash, setAncestors);\n+\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n-    cachedInnerUsage += entry.DynamicMemoryUsage();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n \n     return true;\n }\n \n+// TODO: replace this hash with an iterator?\n+void CTxMemPool::removeUnchecked(const uint256& hash)\n+{\n+    indexed_transaction_set::iterator it = mapTx.find(hash);\n+\n+    BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n+        mapNextTx.erase(txin.prevout);\n+\n+    totalTxSize -= it->GetTxSize();\n+    cachedInnerUsage -= it->DynamicMemoryUsage();\n+    cachedInnerUsage -= memusage::DynamicUsage(mapLinks[it].parents) + memusage::DynamicUsage(mapLinks[it].children);\n+    mapLinks.erase(it);\n+    mapTx.erase(it);\n+    nTransactionsUpdated++;\n+    minerPolicyEstimator->removeTx(hash);\n+}\n+\n+// Calculates descendants of hash that are not already in setDescendants, and adds to ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39440454",
      "id" : 39440454,
      "original_commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "original_position" : 338,
      "path" : "src/txmempool.cpp",
      "position" : 338,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
      "updated_at" : "2015-09-14T20:10:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39440454",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39441365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39441365"
         }
      },
      "body" : "trailing whitespace",
      "commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "created_at" : "2015-09-14T20:18:35Z",
      "diff_hunk" : "@@ -247,19 +554,23 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n-        checkTotal += it->second.GetTxSize();\n-        innerUsage += it->second.DynamicMemoryUsage();\n-        const CTransaction& tx = it->second.GetTx();\n+        checkTotal += it->GetTxSize();\n+        innerUsage += it->DynamicMemoryUsage(); ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39441365",
      "id" : 39441365,
      "original_commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "original_position" : 476,
      "path" : "src/txmempool.cpp",
      "position" : 476,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
      "updated_at" : "2015-09-14T20:18:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39441365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39443752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443752"
         }
      },
      "body" : "Need to document what RemoveStaged() is.",
      "commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "created_at" : "2015-09-14T20:39:14Z",
      "diff_hunk" : "@@ -138,6 +363,29 @@ class CTxMemPool\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n+public:\n+    void RemoveStaged(std::set<uint256>& stage);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39443752",
      "id" : 39443752,
      "original_commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "original_position" : 304,
      "path" : "src/txmempool.h",
      "position" : 304,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
      "updated_at" : "2015-09-14T20:39:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443752",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39443903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443903"
         }
      },
      "body" : "Would prefer if comments like this are written as \"Name()\" rather than just \"Name\" to make it clear what's a variable and what's a function.",
      "commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "created_at" : "2015-09-14T20:40:29Z",
      "diff_hunk" : "@@ -138,6 +363,29 @@ class CTxMemPool\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n+public:\n+    void RemoveStaged(std::set<uint256>& stage);\n+\n+    /** When adding transactions from a disconnected block back to the mempool,\n+     *  new mempool entries may have children in the mempool (which is generally\n+     *  not the case when otherwise adding transactions).\n+     *  UpdateTransactionsFromBlock will find child transactions and update the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39443903",
      "id" : 39443903,
      "original_commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "original_position" : 309,
      "path" : "src/txmempool.h",
      "position" : 309,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
      "updated_at" : "2015-09-14T20:40:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39443986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443986"
         }
      },
      "body" : "Double-space after periods? Obvs you're actually Satoshi.",
      "commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "created_at" : "2015-09-14T20:41:20Z",
      "diff_hunk" : "@@ -169,6 +417,48 @@ class CTxMemPool\n     bool ReadFeeEstimates(CAutoFile& filein);\n \n     size_t DynamicMemoryUsage() const;\n+\n+private:\n+    /** UpdateForDescendants is used by UpdateTransactionsFromBlock to update\n+     *  the descendants for a single transaction that has been added to the\n+     *  mempool but may have child transactions in the mempool, eg during a\n+     *  chain reorg.  setExclude is the set of descendant transactions in the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39443986",
      "id" : 39443986,
      "original_commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "original_position" : 338,
      "path" : "src/txmempool.h",
      "position" : 338,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
      "updated_at" : "2015-09-14T20:41:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39443986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39444131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39444131"
         }
      },
      "body" : "This comment doesn't make it clear whether or not transactions in hashesToUpdate are or are not already in the mempool. :)",
      "commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "created_at" : "2015-09-14T20:42:34Z",
      "diff_hunk" : "@@ -138,6 +363,29 @@ class CTxMemPool\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n+public:\n+    void RemoveStaged(std::set<uint256>& stage);\n+\n+    /** When adding transactions from a disconnected block back to the mempool,\n+     *  new mempool entries may have children in the mempool (which is generally\n+     *  not the case when otherwise adding transactions).\n+     *  UpdateTransactionsFromBlock will find child transactions and update the\n+     *  descendant state for each transaction in hashesToUpdate (excluding any\n+     *  child transactions present in hashesToUpdate, which are already accounted\n+     *  for).\n+     */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#discussion_r39444131",
      "id" : 39444131,
      "original_commit_id" : "d6401c1547cbc39e55e71328e809e54a8bef4442",
      "original_position" : 313,
      "path" : "src/txmempool.h",
      "position" : 313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6654",
      "updated_at" : "2015-09-14T20:42:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39444131",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Concept ACK.",
      "created_at" : "2015-09-14T20:45:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140200727",
      "id" : 140200727,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
      "updated_at" : "2015-09-14T20:45:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140200727",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "utACK, modulo nits.",
      "created_at" : "2015-09-14T20:54:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140203389",
      "id" : 140203389,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
      "updated_at" : "2015-09-14T20:54:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140203389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Concept ACK / code review ACK.\r\nPasses gitian/osx/debian build/unit-tests/rpc-tests.",
      "created_at" : "2015-09-14T21:00:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140204729",
      "id" : 140204729,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
      "updated_at" : "2015-09-14T21:00:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140204729",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Tested with my FSS and Full RBF stress tests and -checkmempool, no unexpected failures. (this pull-req of course doesn't enable any RBF behavior, so replacements failed!)",
      "created_at" : "2015-09-14T21:16:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6654#issuecomment-140208052",
      "id" : 140208052,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6654",
      "updated_at" : "2015-09-14T21:16:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140208052",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   }
]
