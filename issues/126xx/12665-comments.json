[
   {
      "author_association" : "MEMBER",
      "body" : "WIP: Will move annotations to header files where appropriate.",
      "created_at" : "2018-03-11T09:30:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372101487",
      "id" : 372101487,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665",
      "updated_at" : "2018-03-11T09:30:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372101487",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12665#discussion_r173670354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173670354"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This 1 line diff should be a separate pull request",
      "commit_id" : "7443c0126bed45120d8914dfef38d62d38d67970",
      "created_at" : "2018-03-11T21:26:00Z",
      "diff_hunk" : "@@ -502,10 +502,10 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n     }\n }\n \n-void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs, mempool.cs)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n-    LOCK(cs);\n+    AssertLockHeld(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665#discussion_r173670354",
      "id" : 173670354,
      "original_commit_id" : "aa224a20d6a018afeb847a28cd09ee5cdd9b95e9",
      "original_position" : 9,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 102896904,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12665",
      "updated_at" : "2018-03-11T23:01:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173670354",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2018-03-11T21:27:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372150790",
      "id" : 372150790,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665",
      "updated_at" : "2018-03-11T21:27:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372150790",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12665#discussion_r173672583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173672583"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That assertion does not seem to hold, so I think it should be removed. I'll investigate.",
      "commit_id" : "7443c0126bed45120d8914dfef38d62d38d67970",
      "created_at" : "2018-03-11T22:31:23Z",
      "diff_hunk" : "@@ -502,10 +502,10 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n     }\n }\n \n-void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs, mempool.cs)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n-    LOCK(cs);\n+    AssertLockHeld(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665#discussion_r173672583",
      "id" : 173672583,
      "in_reply_to_id" : 173670354,
      "original_commit_id" : "aa224a20d6a018afeb847a28cd09ee5cdd9b95e9",
      "original_position" : 9,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 102899069,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12665",
      "updated_at" : "2018-03-11T23:01:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173672583",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Updated! Please review :-)",
      "created_at" : "2018-03-12T06:59:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372210389",
      "id" : 372210389,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665",
      "updated_at" : "2018-03-12T06:59:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372210389",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Concept ACK - Unlike the title implies, not all the added run time checking requirements have an associated AssertLockHeld/AssertLockNotHeld (e.g. CoinSelection) is this on purpose?",
      "created_at" : "2018-03-13T11:49:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372638788",
      "id" : 372638788,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665",
      "updated_at" : "2018-03-13T11:49:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372638788",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Thanks for reporting. The annotations for `CoinSelection` and two other functions were incorrect. That is now fixed.\r\n\r\nThe intention is that literally all `EXCLUSIVE_LOCKS_REQUIRED`/`LOCKS_EXCLUDED`:s added in this PR should follow either directly or indirectly from `AssertLockHeld(Ã¢ÂÂ¦)`/`AssertLockNotHeld(Ã¢ÂÂ¦)`:s already existing in the repo.\r\n\r\nConsider the case where function `A(Ã¢ÂÂ¦)` contains `AssertLockHeld(cs_foo)` (without\r\nfirst locking `cs_foo` in `A`), and that `B(Ã¢ÂÂ¦)` calls `A(Ã¢ÂÂ¦)` (without first locking `cs_main`):\r\n* It _directly_ follows that: `A(Ã¢ÂÂ¦)` should have an `EXCLUSIVE_LOCKS_REQUIRED(cs_foo)` annotation.\r\n* It _indirectly_ follows that: `B(Ã¢ÂÂ¦)` should have an `EXCLUSIVE_LOCKS_REQUIRED(cs_foo)` annotation.\r\n\r\nI'll run through all annotations again to verify that they all follow directly or indirectly from `AssertLockHeld(Ã¢ÂÂ¦)`/`AssertLockNotHeld(Ã¢ÂÂ¦)`:s.\r\n\r\nThese are the annotations added Ã¢ÂÂ let me know if something sticks out/looks weird:\r\n\r\n```\r\nsrc/init.cpp\r\n  void ThreadImport(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/keystore.h\r\n  void ImplicitlyLearnRelatedKeyScripts(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore)\r\n\r\nsrc/net_processing.cpp\r\n  void MaybeSetPeerAsAnnouncingHeaderAndIDs(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool TipMayBeStale(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  static bool BlockRequestAllowed(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void static ProcessGetBlockData(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  void static ProcessGetData(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs) LOCKS_EXCLUDED(cs_main)\r\n  bool static ProcessMessage(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  static bool SendRejectsAndCheckIfBanned(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool PeerLogicValidation::ProcessMessages(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/net_processing.h\r\n  void ConsiderEviction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\nsrc/policy/rbf.h\r\n  RBFTransactionState IsRBFOptIn(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\r\n\r\nsrc/qt/transactiondesc.h\r\n  static QString FormatTxStatus(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\nsrc/qt/transactionrecord.h\r\n  static QList<TransactionRecord> decomposeTransaction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void updateStatus(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool statusUpdateNeeded() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\nsrc/rpc/blockchain.cpp\r\n  UniValue blockheaderToJSON(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void entryToJSON(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  UniValue preciousblock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  UniValue invalidateblock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  UniValue reconsiderblock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/rpc/blockchain.h\r\n  UniValue blockToJSON(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  UniValue blockheaderToJSON(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\nsrc/rpc/mining.cpp\r\n  UniValue generatetoaddress(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  UniValue submitblock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/rpc/mining.h\r\n  UniValue generateBlocks(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/rpc/rawtransaction.cpp\r\n  UniValue sendrawtransaction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/test/miner_tests.cpp\r\n  bool TestSequenceLocks(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  BOOST_AUTO_TEST_CASE(CreateNewBlock_validity) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/test/test_bitcoin.cpp\r\n  TestChain100Setup::CreateAndProcessBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/test/txvalidation_tests.cpp\r\n  BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/test/txvalidationcache_tests.cpp\r\n  ToMemPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/txmempool.cpp\r\n  void CTxMemPool::removeForReorg(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n\r\nsrc/txmempool.h\r\n  void trackPackageRemoved(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs)\r\n  std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs)\r\n  void RemoveStaged(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs)\r\n\r\nsrc/validation.cpp\r\n  bool PreciousBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  bool InvalidateBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void UpdateMempoolForReorg(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  static bool CheckInputsFromMempoolAndCache(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  static bool AcceptToMemoryPoolWorker(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  static bool AcceptToMemoryPoolWithTime(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  bool AcceptToMemoryPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  static void CheckForkWarningConditionsOnNewFork(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void static InvalidChainFound(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void CChainState::InvalidBlockFound(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CheckInputs(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  static unsigned int GetBlockScriptFlags(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CChainState::ConnectBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CChainState::ConnectTip(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CChainState::ActivateBestChainStep(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  CChainState::ActivateBestChain(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  bool CChainState::AcceptBlockHeader(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CChainState::AcceptBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool LoadChainTip(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/validation.h\r\n  bool ProcessNewBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs) LOCKS_EXCLUDED(cs_main)\r\n  bool LoadExternalBlockFile(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  bool ActivateBestChain(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs) LOCKS_EXCLUDED(cs_main)\r\n  bool AcceptToMemoryPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  bool CheckFinalTx(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool TestLockPointValidity(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CheckSequenceLocks(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  bool TestBlockValidity(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool PreciousBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  bool InvalidateBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  bool ResetBlockFailureFlags(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool LoadMempool() EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/validationinterface.h\r\n  void SyncWithValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main)\r\n\r\nsrc/wallet/feebumper.cpp\r\n  static feebumper::Result PreconditionChecks(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, wallet->cs_wallet)\r\n\r\nsrc/wallet/rpcdump.cpp\r\n  void ImportScript(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n  void ImportAddress(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n  UniValue ProcessImport(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n\r\nsrc/wallet/rpcwallet.cpp\r\n  void WalletTxToJSON(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  UniValue ListReceived(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void ListTransactions(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  UniValue generate(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/wallet/test/wallet_tests.cpp\r\n  BOOST_AUTO_TEST_CASE(coin_selection_tests) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  BOOST_AUTO_TEST_CASE(ApproximateBestSubset) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\nsrc/wallet/wallet.cpp\r\n  bool CWalletTx::AcceptToMemoryPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n\r\nsrc/wallet/wallet.h\r\n  int GetDepthInMainChain(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  int GetDepthInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool IsInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  int GetBlocksToMaturity() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  CAmount GetCredit(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  CAmount GetImmatureCredit(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  CAmount GetAvailableCredit(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  CAmount GetImmatureWatchOnlyCredit(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  CAmount GetAvailableWatchOnlyCredit(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool IsTrusted() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool RelayWalletTransaction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool AcceptToMemoryPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool SelectCoins(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void SyncTransaction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void DeriveNewChildKey(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AddWatchOnly(Ã¢ÂÂ¦) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void LoadKeyPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool CanSupportFeature(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void AvailableCoins(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet)\r\n  bool IsSpent(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool IsLockedCoin(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void LockCoin(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void UnlockCoin(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void UnlockAllCoins() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void ListLockedCoins(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  CPubKey GenerateNewKey(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AddKeyPubKey(Ã¢ÂÂ¦) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AddKeyPubKeyWithDB(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool LoadKeyMetadata(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool LoadScriptMetadata(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool LoadMinVersion(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void UpdateTimeFirstKey(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AddWatchOnly(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool RemoveWatchOnly(Ã¢ÂÂ¦) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void GetKeyBirthTimes(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  int64_t IncOrderPosNext(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AccountMove(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AddToWalletIfInvolvingMe(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void ResendWalletTransactions(Ã¢ÂÂ¦) override EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  std::vector<uint256> ResendWalletTransactionsBefore(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool SignTransaction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void MarkReserveKeysAsUsed(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  std::set<std::set<CTxDestination>> GetAddressGroupings() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  std::map<CTxDestination, CAmount> GetAddressBalances() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  DBErrors ZapSelectTx(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool HasWalletSpend(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void BlockUntilSyncedToCurrentChain() LOCKS_EXCLUDED(cs_main, cs_wallet)\r\n\r\nsrc/wallet/walletdb.cpp\r\n  bool ReadKeyValue(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n```",
      "created_at" : "2018-03-13T13:52:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372671990",
      "id" : 372671990,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665",
      "updated_at" : "2018-03-13T14:08:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372671990",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Sadly that still didn't catch my [mistake here](https://github.com/bitcoin/bitcoin/pull/12565/files#r171235800), but I assume this is a step in that direction.\r\n\r\nLightly tested on macOS (no change, as expected).\r\n\r\n@practicalswift maybe you can put that overview and additional explanation (\"directly follows that...\") in the commit message or PR description?\r\n\r\nI didn't see a `EXCLUSIVE_LOCKS_REQUIRED ` in `LoadChainTip`; I assume that's done in a some dependent function? Maybe that can be made explicit in your overview if it's not too tedious?\r\n\r\nThe `EXLCUSIVE_LOCKS...` stuff in `validation.h` is not repeated in `validation.cpp`, that's intentional?\r\n\r\nShould violations merely throw warnings?",
      "created_at" : "2018-03-13T20:57:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372815880",
      "id" : 372815880,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665",
      "updated_at" : "2018-03-13T21:06:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372815880",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2018-03-13T21:11:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372819980",
      "id" : 372819980,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665",
      "updated_at" : "2018-03-13T21:11:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372819980",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   }
]
