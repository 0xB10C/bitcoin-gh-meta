{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Add compile time checking for all run time locking assertions.\r\n\r\nThe intention is that literally all `EXCLUSIVE_LOCKS_REQUIRED`/`LOCKS_EXCLUDED`:s added in this PR should follow either directly or indirectly from `AssertLockHeld(Ã¢ÂÂ¦)`/`AssertLockNotHeld(Ã¢ÂÂ¦)`:s already existing in the repo.\r\n\r\nConsider the case where function `A(Ã¢ÂÂ¦)` contains `AssertLockHeld(cs_foo)` (without\r\nfirst locking `cs_foo` in `A`), and that `B(Ã¢ÂÂ¦)` calls `A(Ã¢ÂÂ¦)` (without first locking `cs_main`):\r\n* It _directly_ follows that: `A(Ã¢ÂÂ¦)` should have an `EXCLUSIVE_LOCKS_REQUIRED(cs_foo)` annotation.\r\n* It _indirectly_ follows that: `B(Ã¢ÂÂ¦)` should have an `EXCLUSIVE_LOCKS_REQUIRED(cs_foo)` annotation.\r\n\r\nThese are the annotations added Ã¢ÂÂ let me know if something sticks out/looks weird:\r\n\r\n```\r\nsrc/init.cpp\r\n  void ThreadImport(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/keystore.h\r\n  void ImplicitlyLearnRelatedKeyScripts(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore)\r\n\r\nsrc/net_processing.cpp\r\n  void MaybeSetPeerAsAnnouncingHeaderAndIDs(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool TipMayBeStale(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  static bool BlockRequestAllowed(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void static ProcessGetBlockData(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  void static ProcessGetData(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs) LOCKS_EXCLUDED(cs_main)\r\n  bool static ProcessMessage(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  static bool SendRejectsAndCheckIfBanned(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool PeerLogicValidation::ProcessMessages(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/net_processing.h\r\n  void ConsiderEviction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\nsrc/policy/rbf.h\r\n  RBFTransactionState IsRBFOptIn(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\r\n\r\nsrc/qt/transactiondesc.h\r\n  static QString FormatTxStatus(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\nsrc/qt/transactionrecord.h\r\n  static QList<TransactionRecord> decomposeTransaction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void updateStatus(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool statusUpdateNeeded() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\nsrc/rpc/blockchain.cpp\r\n  UniValue blockheaderToJSON(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void entryToJSON(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  UniValue preciousblock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  UniValue invalidateblock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  UniValue reconsiderblock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/rpc/blockchain.h\r\n  UniValue blockToJSON(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  UniValue blockheaderToJSON(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\nsrc/rpc/mining.cpp\r\n  UniValue generatetoaddress(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  UniValue submitblock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/rpc/mining.h\r\n  UniValue generateBlocks(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/rpc/rawtransaction.cpp\r\n  UniValue sendrawtransaction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/test/miner_tests.cpp\r\n  bool TestSequenceLocks(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  BOOST_AUTO_TEST_CASE(CreateNewBlock_validity) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/test/test_bitcoin.cpp\r\n  TestChain100Setup::CreateAndProcessBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/test/txvalidation_tests.cpp\r\n  BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/test/txvalidationcache_tests.cpp\r\n  ToMemPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/txmempool.cpp\r\n  void CTxMemPool::removeForReorg(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n\r\nsrc/txmempool.h\r\n  void trackPackageRemoved(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs)\r\n  std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs)\r\n  void RemoveStaged(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs)\r\n\r\nsrc/validation.cpp\r\n  bool PreciousBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  bool InvalidateBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void UpdateMempoolForReorg(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  static bool CheckInputsFromMempoolAndCache(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  static bool AcceptToMemoryPoolWorker(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  static bool AcceptToMemoryPoolWithTime(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  bool AcceptToMemoryPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  static void CheckForkWarningConditionsOnNewFork(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void static InvalidChainFound(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void CChainState::InvalidBlockFound(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CheckInputs(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  static unsigned int GetBlockScriptFlags(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CChainState::ConnectBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CChainState::ConnectTip(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CChainState::ActivateBestChainStep(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  CChainState::ActivateBestChain(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  bool CChainState::AcceptBlockHeader(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CChainState::AcceptBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool LoadChainTip(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/validation.h\r\n  bool ProcessNewBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs) LOCKS_EXCLUDED(cs_main)\r\n  bool LoadExternalBlockFile(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  bool ActivateBestChain(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs) LOCKS_EXCLUDED(cs_main)\r\n  bool AcceptToMemoryPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  bool CheckFinalTx(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool TestLockPointValidity(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool CheckSequenceLocks(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  bool TestBlockValidity(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool PreciousBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n  bool InvalidateBlock(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n  bool ResetBlockFailureFlags(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool LoadMempool() EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/validationinterface.h\r\n  void SyncWithValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main)\r\n\r\nsrc/wallet/feebumper.cpp\r\n  static feebumper::Result PreconditionChecks(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, wallet->cs_wallet)\r\n\r\nsrc/wallet/rpcdump.cpp\r\n  void ImportScript(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n  void ImportAddress(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n  UniValue ProcessImport(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n\r\nsrc/wallet/rpcwallet.cpp\r\n  void WalletTxToJSON(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  UniValue ListReceived(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void ListTransactions(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  UniValue generate(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\r\n\r\nsrc/wallet/test/wallet_tests.cpp\r\n  BOOST_AUTO_TEST_CASE(coin_selection_tests) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  BOOST_AUTO_TEST_CASE(ApproximateBestSubset) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\nsrc/wallet/wallet.cpp\r\n  bool CWalletTx::AcceptToMemoryPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\r\n\r\nsrc/wallet/wallet.h\r\n  int GetDepthInMainChain(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  int GetDepthInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool IsInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  int GetBlocksToMaturity() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  CAmount GetCredit(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  CAmount GetImmatureCredit(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  CAmount GetAvailableCredit(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  CAmount GetImmatureWatchOnlyCredit(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  CAmount GetAvailableWatchOnlyCredit(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool IsTrusted() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool RelayWalletTransaction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool AcceptToMemoryPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool SelectCoins(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  void SyncTransaction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void DeriveNewChildKey(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AddWatchOnly(Ã¢ÂÂ¦) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void LoadKeyPool(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool CanSupportFeature(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void AvailableCoins(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet)\r\n  bool IsSpent(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool IsLockedCoin(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void LockCoin(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void UnlockCoin(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void UnlockAllCoins() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void ListLockedCoins(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  CPubKey GenerateNewKey(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AddKeyPubKey(Ã¢ÂÂ¦) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AddKeyPubKeyWithDB(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool LoadKeyMetadata(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool LoadScriptMetadata(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool LoadMinVersion(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void UpdateTimeFirstKey(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AddWatchOnly(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool RemoveWatchOnly(Ã¢ÂÂ¦) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void GetKeyBirthTimes(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  int64_t IncOrderPosNext(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AccountMove(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool AddToWalletIfInvolvingMe(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void ResendWalletTransactions(Ã¢ÂÂ¦) override EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  std::vector<uint256> ResendWalletTransactionsBefore(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  bool SignTransaction(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void MarkReserveKeysAsUsed(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  std::set<std::set<CTxDestination>> GetAddressGroupings() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  std::map<CTxDestination, CAmount> GetAddressBalances() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n  DBErrors ZapSelectTx(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  bool HasWalletSpend(Ã¢ÂÂ¦) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\r\n  void BlockUntilSyncedToCurrentChain() LOCKS_EXCLUDED(cs_main, cs_wallet)\r\n\r\nsrc/wallet/walletdb.cpp\r\n  bool ReadKeyValue(Ã¢ÂÂ¦) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\r\n```",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 16,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665/comments",
   "created_at" : "2018-03-10T17:17:32Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665",
   "id" : 304087126,
   "labels" : [
      {
         "color" : "E6F6D6",
         "default" : false,
         "id" : 135961,
         "name" : "Refactoring",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 12665,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/12665.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12665",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/12665.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12665"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Add compile time checking for run time locking assertions",
   "updated_at" : "2018-04-11T11:18:56Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12665",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
