[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24602#discussion_r831575175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24602"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831575175"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the waste should be computed for this result as well.",
      "commit_id" : "e21d0b9df86d9878e9a4e9380c3ebbfa6932ba5e",
      "created_at" : "2022-03-21T21:54:58Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <wallet/coinselection.h>\n+\n+#include <vector>\n+\n+namespace wallet {\n+\n+static void AddCoin(std::vector<CInputCoin>& input_coins, const CAmount& nValue, const int nInput, const int nInputBytes, const int lockTime)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    tx.nLockTime = lockTime; // all transactions get different hashes\n+    CInputCoin coin(MakeTransactionRef(tx), nInput);\n+    coin.m_input_bytes = nInputBytes;\n+    input_coins.push_back(coin);\n+}\n+\n+// Randomly distribute coins to OutputGroups\n+static void GroupCoins(FuzzedDataProvider& fuzzed_data_provider, std::vector<OutputGroup>& output_groups, const std::vector<CInputCoin>& coins, const CoinSelectionParams& coin_params, const bool positive_only)\n+{\n+    auto output_group = OutputGroup(coin_params);\n+    bool valid_outputgroup{false};\n+    for (auto& coin : coins) {\n+        output_group.Insert(coin, /*depth=*/0, /*from_me=*/true, /*ancestors=*/0, /*descendants=*/0, positive_only);\n+        valid_outputgroup = !positive_only || output_group.GetSelectionAmount() > 0;\n+        if (valid_outputgroup && fuzzed_data_provider.ConsumeBool()) {\n+            output_groups.push_back(output_group);\n+            output_group = OutputGroup(coin_params);\n+            valid_outputgroup = false;\n+        }\n+    }\n+    if (valid_outputgroup) output_groups.push_back(output_group);\n+    return;\n+}\n+\n+FUZZ_TARGET(coinselection)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CInputCoin> utxo_pool;\n+\n+    const CFeeRate long_term_fee_rate{CFeeRate(ConsumeMoney(fuzzed_data_provider, /*max=*/COIN))};\n+    const CFeeRate effective_fee_rate{CFeeRate(ConsumeMoney(fuzzed_data_provider, /*max=*/COIN))};\n+    const CAmount cost_of_change{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+    const bool subtract_fee_outputs{fuzzed_data_provider.ConsumeBool()};\n+\n+    auto coin_params = CoinSelectionParams();\n+    coin_params.m_subtract_fee_outputs = subtract_fee_outputs;\n+    coin_params.m_long_term_feerate = long_term_fee_rate;\n+    coin_params.m_effective_feerate = effective_fee_rate;\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    int nextLockTime{0};\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        const int nInput{fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 10)};\n+        const int nInputBytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(100, 10000)};\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        AddCoin(utxo_pool, amount, nInput, nInputBytes, ++nextLockTime);\n+        total_balance += amount;\n+    }\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, group_pos, utxo_pool, coin_params, /*positive_only=*/true);\n+    std::vector<OutputGroup> group_all;\n+    GroupCoins(fuzzed_data_provider, group_all, utxo_pool, coin_params, /*positive_only=*/false);\n+\n+    // Run coinselection algorithms\n+    const auto result_bnb = SelectCoinsBnB(group_pos, target, cost_of_change);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24602#discussion_r831575175",
      "id" : 831575175,
      "line" : 80,
      "node_id" : "PRRC_kwDOABII584xkNSH",
      "original_commit_id" : "e21d0b9df86d9878e9a4e9380c3ebbfa6932ba5e",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 80,
      "pull_request_review_id" : 916400892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24602",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831575175/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-21T21:55:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831575175",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24602#discussion_r831590427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24602"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831590427"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The call was moved inside of `SelectCoinsBnB()` with #24530 so it is being computed already and wouldn't add coverage - or do you mean another explicit call from the fuzz test?",
      "commit_id" : "e21d0b9df86d9878e9a4e9380c3ebbfa6932ba5e",
      "created_at" : "2022-03-21T22:22:40Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <wallet/coinselection.h>\n+\n+#include <vector>\n+\n+namespace wallet {\n+\n+static void AddCoin(std::vector<CInputCoin>& input_coins, const CAmount& nValue, const int nInput, const int nInputBytes, const int lockTime)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    tx.nLockTime = lockTime; // all transactions get different hashes\n+    CInputCoin coin(MakeTransactionRef(tx), nInput);\n+    coin.m_input_bytes = nInputBytes;\n+    input_coins.push_back(coin);\n+}\n+\n+// Randomly distribute coins to OutputGroups\n+static void GroupCoins(FuzzedDataProvider& fuzzed_data_provider, std::vector<OutputGroup>& output_groups, const std::vector<CInputCoin>& coins, const CoinSelectionParams& coin_params, const bool positive_only)\n+{\n+    auto output_group = OutputGroup(coin_params);\n+    bool valid_outputgroup{false};\n+    for (auto& coin : coins) {\n+        output_group.Insert(coin, /*depth=*/0, /*from_me=*/true, /*ancestors=*/0, /*descendants=*/0, positive_only);\n+        valid_outputgroup = !positive_only || output_group.GetSelectionAmount() > 0;\n+        if (valid_outputgroup && fuzzed_data_provider.ConsumeBool()) {\n+            output_groups.push_back(output_group);\n+            output_group = OutputGroup(coin_params);\n+            valid_outputgroup = false;\n+        }\n+    }\n+    if (valid_outputgroup) output_groups.push_back(output_group);\n+    return;\n+}\n+\n+FUZZ_TARGET(coinselection)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CInputCoin> utxo_pool;\n+\n+    const CFeeRate long_term_fee_rate{CFeeRate(ConsumeMoney(fuzzed_data_provider, /*max=*/COIN))};\n+    const CFeeRate effective_fee_rate{CFeeRate(ConsumeMoney(fuzzed_data_provider, /*max=*/COIN))};\n+    const CAmount cost_of_change{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+    const bool subtract_fee_outputs{fuzzed_data_provider.ConsumeBool()};\n+\n+    auto coin_params = CoinSelectionParams();\n+    coin_params.m_subtract_fee_outputs = subtract_fee_outputs;\n+    coin_params.m_long_term_feerate = long_term_fee_rate;\n+    coin_params.m_effective_feerate = effective_fee_rate;\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    int nextLockTime{0};\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        const int nInput{fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 10)};\n+        const int nInputBytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(100, 10000)};\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        AddCoin(utxo_pool, amount, nInput, nInputBytes, ++nextLockTime);\n+        total_balance += amount;\n+    }\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, group_pos, utxo_pool, coin_params, /*positive_only=*/true);\n+    std::vector<OutputGroup> group_all;\n+    GroupCoins(fuzzed_data_provider, group_all, utxo_pool, coin_params, /*positive_only=*/false);\n+\n+    // Run coinselection algorithms\n+    const auto result_bnb = SelectCoinsBnB(group_pos, target, cost_of_change);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24602#discussion_r831590427",
      "id" : 831590427,
      "in_reply_to_id" : 831575175,
      "line" : 80,
      "node_id" : "PRRC_kwDOABII584xkRAb",
      "original_commit_id" : "e21d0b9df86d9878e9a4e9380c3ebbfa6932ba5e",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 80,
      "pull_request_review_id" : 916420167,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24602",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831590427/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-21T22:22:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831590427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24602#discussion_r831594209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24602"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831594209"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oh yeah, forgot about that.",
      "commit_id" : "e21d0b9df86d9878e9a4e9380c3ebbfa6932ba5e",
      "created_at" : "2022-03-21T22:30:11Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <wallet/coinselection.h>\n+\n+#include <vector>\n+\n+namespace wallet {\n+\n+static void AddCoin(std::vector<CInputCoin>& input_coins, const CAmount& nValue, const int nInput, const int nInputBytes, const int lockTime)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    tx.nLockTime = lockTime; // all transactions get different hashes\n+    CInputCoin coin(MakeTransactionRef(tx), nInput);\n+    coin.m_input_bytes = nInputBytes;\n+    input_coins.push_back(coin);\n+}\n+\n+// Randomly distribute coins to OutputGroups\n+static void GroupCoins(FuzzedDataProvider& fuzzed_data_provider, std::vector<OutputGroup>& output_groups, const std::vector<CInputCoin>& coins, const CoinSelectionParams& coin_params, const bool positive_only)\n+{\n+    auto output_group = OutputGroup(coin_params);\n+    bool valid_outputgroup{false};\n+    for (auto& coin : coins) {\n+        output_group.Insert(coin, /*depth=*/0, /*from_me=*/true, /*ancestors=*/0, /*descendants=*/0, positive_only);\n+        valid_outputgroup = !positive_only || output_group.GetSelectionAmount() > 0;\n+        if (valid_outputgroup && fuzzed_data_provider.ConsumeBool()) {\n+            output_groups.push_back(output_group);\n+            output_group = OutputGroup(coin_params);\n+            valid_outputgroup = false;\n+        }\n+    }\n+    if (valid_outputgroup) output_groups.push_back(output_group);\n+    return;\n+}\n+\n+FUZZ_TARGET(coinselection)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<CInputCoin> utxo_pool;\n+\n+    const CFeeRate long_term_fee_rate{CFeeRate(ConsumeMoney(fuzzed_data_provider, /*max=*/COIN))};\n+    const CFeeRate effective_fee_rate{CFeeRate(ConsumeMoney(fuzzed_data_provider, /*max=*/COIN))};\n+    const CAmount cost_of_change{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\n+    const CAmount target{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+    const bool subtract_fee_outputs{fuzzed_data_provider.ConsumeBool()};\n+\n+    auto coin_params = CoinSelectionParams();\n+    coin_params.m_subtract_fee_outputs = subtract_fee_outputs;\n+    coin_params.m_long_term_feerate = long_term_fee_rate;\n+    coin_params.m_effective_feerate = effective_fee_rate;\n+\n+    // Create some coins\n+    CAmount total_balance{0};\n+    int nextLockTime{0};\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n+    {\n+        const int nInput{fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 10)};\n+        const int nInputBytes{fuzzed_data_provider.ConsumeIntegralInRange<int>(100, 10000)};\n+        const CAmount amount{fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(1, MAX_MONEY)};\n+        AddCoin(utxo_pool, amount, nInput, nInputBytes, ++nextLockTime);\n+        total_balance += amount;\n+    }\n+\n+    std::vector<OutputGroup> group_pos;\n+    GroupCoins(fuzzed_data_provider, group_pos, utxo_pool, coin_params, /*positive_only=*/true);\n+    std::vector<OutputGroup> group_all;\n+    GroupCoins(fuzzed_data_provider, group_all, utxo_pool, coin_params, /*positive_only=*/false);\n+\n+    // Run coinselection algorithms\n+    const auto result_bnb = SelectCoinsBnB(group_pos, target, cost_of_change);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24602#discussion_r831594209",
      "id" : 831594209,
      "in_reply_to_id" : 831575175,
      "line" : 80,
      "node_id" : "PRRC_kwDOABII584xkR7h",
      "original_commit_id" : "e21d0b9df86d9878e9a4e9380c3ebbfa6932ba5e",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/wallet/test/fuzz/coinselection.cpp",
      "position" : 80,
      "pull_request_review_id" : 916425398,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24602",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831594209/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-21T22:30:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831594209",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Nice, concept ACK",
      "created_at" : "2022-03-22T11:30:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24602#issuecomment-1075060966",
      "id" : 1075060966,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24602",
      "node_id" : "IC_kwDOABII585AFCDm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1075060966/reactions"
      },
      "updated_at" : "2022-03-22T11:30:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1075060966",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
