[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Changing the `Assert` macro to something like:\r\n\r\n```c++\r\nvoid assertion_fail(const char* file, int line, const char* func, const char* assertion)\r\n{\r\n    auto str = strprintf(\"%s:%s %s: Assertion `%s' failed.\\n\", file, line, func, assertion);\r\n    fwrite(str.data(), 1, str.size(), stderr);\r\n    std::abort();\r\n}\r\n\r\ntemplate <typename T>\r\ninline T inline_assertion_check(T&& val, const char* file, int line, const char* func, const char* assertion)\r\n{\r\n    if (!val) assertion_fail(file, line, func, assertion);\r\n    return std::forward<T>(val);\r\n}\r\n\r\n#define Assert(val) inline_assertion_check(val, __FILE__, __LINE__, __func__, #val)\r\n```\r\n\r\nmight work to avoid this -- that way `val` is evaluated in the original context where all the locks and this pointers are already known about. I'm not sure if this handles all C++'s various copy/move rules as well as the current Assert does though. It also gives up on re-using `assert()` and just manually reports file/line/function.",
      "created_at" : "2022-03-24T02:50:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24654#issuecomment-1077013976",
      "id" : 1077013976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24654",
      "node_id" : "IC_kwDOABII585AMe3Y",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1077013976/reactions"
      },
      "updated_at" : "2022-03-24T02:51:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1077013976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   }
]
