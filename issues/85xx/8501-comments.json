[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74680851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74680851"
         }
      },
      "body" : "is this semicolon unintentional?",
      "commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "created_at" : "2016-08-13T03:35:42Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"stats/stats.h\"\n+\n+#include \"memusage.h\"\n+#include \"utiltime.h\"\n+\n+#include \"util.h\"\n+\n+const uint32_t CStats::SAMPLE_MIN_DELTA_IN_SEC = 2;\n+const int CStats::CLEANUP_SAMPLES_THRESHOLD = 100;\n+size_t CStats::maxStatsMemory = 0;\n+const size_t CStats::DEFAULT_MAX_STATS_MEMORY = 10 * 1024 * 1024; //10 MB\n+const bool CStats::DEFAULT_STATISTICS_ENABLED = false;\n+std::atomic<bool> CStats::statsEnabled(false); //disable stats by default\n+\n+CStats defaultStats;\n+\n+CStats* CStats::sharedInstance = NULL;\n+\n+CStats* CStats::DefaultStats()\n+{\n+    if (!sharedInstance)\n+        sharedInstance = new CStats();\n+\n+    return sharedInstance;\n+}\n+\n+void CStats::addMempoolSample(int64_t txcount, int64_t dynUsage, int64_t currentMinRelayFee)\n+{\n+    if (!statsEnabled)\n+        return;\n+\n+    uint64_t now = GetTime();\n+    {\n+        LOCK(cs_stats);\n+\n+        // set the mempool stats start time if this is the first sample\n+        if (mempoolStats.startTime == 0)\n+            mempoolStats.startTime = now;\n+\n+        // ensure the minimum time delta between samples\n+        if (mempoolStats.vSamples.size() && mempoolStats.vSamples.back().timeDelta + SAMPLE_MIN_DELTA_IN_SEC >= now - mempoolStats.startTime)\n+            return;\n+\n+        // calculate the current time detla and add a sample\n+        uint32_t timeDelta = now - mempoolStats.startTime; //truncate to uint32_t should be sufficient\n+        mempoolStats.vSamples.push_back({timeDelta, txcount, dynUsage, currentMinRelayFee});\n+        mempoolStats.cleanupCounter++;\n+\n+        // check if we should cleanup the container\n+        if (mempoolStats.cleanupCounter >= CLEANUP_SAMPLES_THRESHOLD) {\n+            //check memory usage\n+            int32_t memDelta = memusage::DynamicUsage(mempoolStats.vSamples) - maxStatsMemory;\n+            if (memDelta > 0 && mempoolStats.vSamples.size()) {\n+                // only shrink if the vector.capacity() is > the target for performance reasons\n+                mempoolStats.vSamples.shrink_to_fit();\n+                int32_t memUsage = memusage::DynamicUsage(mempoolStats.vSamples);\n+                // calculate the amount of samples we need to remove\n+                size_t itemsToRemove = ceil((memUsage - maxStatsMemory) / sizeof(mempoolStats.vSamples[0]));\n+\n+                // make sure the vector contains more items then we'd like to remove\n+                if (mempoolStats.vSamples.size() > itemsToRemove)\n+                    mempoolStats.vSamples.erase(mempoolStats.vSamples.begin(), mempoolStats.vSamples.begin() + itemsToRemove);\n+            }\n+            // shrink vector\n+            mempoolStats.vSamples.shrink_to_fit();\n+            mempoolStats.cleanupCounter = 0;\n+        }\n+\n+        // fire signal\n+        MempoolStatsDidChange();\n+    }\n+}\n+\n+mempoolSamples_t CStats::mempoolGetValuesInRange(uint64_t& fromTime, uint64_t& toTime)\n+{\n+    if (!statsEnabled)\n+        return mempoolSamples_t();\n+\n+    LOCK(cs_stats);\n+\n+    // if empty, return directly\n+    if (!mempoolStats.vSamples.size())\n+        return mempoolStats.vSamples;\n+\n+\n+    if (!(fromTime == 0 && toTime == 0) && (fromTime > mempoolStats.startTime + mempoolStats.vSamples.front().timeDelta || toTime < mempoolStats.startTime + mempoolStats.vSamples.back().timeDelta)) {\n+        mempoolSamples_t::iterator fromSample = mempoolStats.vSamples.begin();\n+        mempoolSamples_t::iterator toSample = std::prev(mempoolStats.vSamples.end());\n+\n+        // create subset of samples\n+        bool fromSet = false;\n+        for (mempoolSamples_t::iterator it = mempoolStats.vSamples.begin(); it != mempoolStats.vSamples.end(); ++it) {\n+            if (mempoolStats.startTime + (*it).timeDelta >= fromTime && !fromSet) {\n+                fromSample = it;\n+                fromSet = true;\n+            }\n+            if (mempoolStats.startTime + (*it).timeDelta > toTime) {\n+                toSample = std::prev(it);\n+                break;\n+            }\n+        }\n+\n+        mempoolSamples_t subset(fromSample, toSample + 1);\n+\n+        // set the fromTime and toTime pass-by-ref parameters\n+        fromTime = mempoolStats.startTime + (*fromSample).timeDelta;\n+        toTime = mempoolStats.startTime + (*toSample).timeDelta;\n+\n+        // return subset\n+        return subset;\n+    }\n+\n+    // return all available samples\n+    fromTime = mempoolStats.startTime + mempoolStats.vSamples.front().timeDelta;\n+    ;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74680851",
      "id" : 74680851,
      "original_commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "original_position" : 119,
      "path" : "src/stats/stats.cpp",
      "position" : 119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501",
      "updated_at" : "2016-08-13T03:35:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74680851",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/20916903?v=3",
         "events_url" : "https://api.github.com/users/isle2983/events{/privacy}",
         "followers_url" : "https://api.github.com/users/isle2983/followers",
         "following_url" : "https://api.github.com/users/isle2983/following{/other_user}",
         "gists_url" : "https://api.github.com/users/isle2983/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/isle2983",
         "id" : 20916903,
         "login" : "isle2983",
         "organizations_url" : "https://api.github.com/users/isle2983/orgs",
         "received_events_url" : "https://api.github.com/users/isle2983/received_events",
         "repos_url" : "https://api.github.com/users/isle2983/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/isle2983/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/isle2983"
      }
   }
]
