[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74680851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74680851"
         }
      },
      "body" : "is this semicolon unintentional?",
      "commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "created_at" : "2016-08-13T03:35:42Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"stats/stats.h\"\n+\n+#include \"memusage.h\"\n+#include \"utiltime.h\"\n+\n+#include \"util.h\"\n+\n+const uint32_t CStats::SAMPLE_MIN_DELTA_IN_SEC = 2;\n+const int CStats::CLEANUP_SAMPLES_THRESHOLD = 100;\n+size_t CStats::maxStatsMemory = 0;\n+const size_t CStats::DEFAULT_MAX_STATS_MEMORY = 10 * 1024 * 1024; //10 MB\n+const bool CStats::DEFAULT_STATISTICS_ENABLED = false;\n+std::atomic<bool> CStats::statsEnabled(false); //disable stats by default\n+\n+CStats defaultStats;\n+\n+CStats* CStats::sharedInstance = NULL;\n+\n+CStats* CStats::DefaultStats()\n+{\n+    if (!sharedInstance)\n+        sharedInstance = new CStats();\n+\n+    return sharedInstance;\n+}\n+\n+void CStats::addMempoolSample(int64_t txcount, int64_t dynUsage, int64_t currentMinRelayFee)\n+{\n+    if (!statsEnabled)\n+        return;\n+\n+    uint64_t now = GetTime();\n+    {\n+        LOCK(cs_stats);\n+\n+        // set the mempool stats start time if this is the first sample\n+        if (mempoolStats.startTime == 0)\n+            mempoolStats.startTime = now;\n+\n+        // ensure the minimum time delta between samples\n+        if (mempoolStats.vSamples.size() && mempoolStats.vSamples.back().timeDelta + SAMPLE_MIN_DELTA_IN_SEC >= now - mempoolStats.startTime)\n+            return;\n+\n+        // calculate the current time detla and add a sample\n+        uint32_t timeDelta = now - mempoolStats.startTime; //truncate to uint32_t should be sufficient\n+        mempoolStats.vSamples.push_back({timeDelta, txcount, dynUsage, currentMinRelayFee});\n+        mempoolStats.cleanupCounter++;\n+\n+        // check if we should cleanup the container\n+        if (mempoolStats.cleanupCounter >= CLEANUP_SAMPLES_THRESHOLD) {\n+            //check memory usage\n+            int32_t memDelta = memusage::DynamicUsage(mempoolStats.vSamples) - maxStatsMemory;\n+            if (memDelta > 0 && mempoolStats.vSamples.size()) {\n+                // only shrink if the vector.capacity() is > the target for performance reasons\n+                mempoolStats.vSamples.shrink_to_fit();\n+                int32_t memUsage = memusage::DynamicUsage(mempoolStats.vSamples);\n+                // calculate the amount of samples we need to remove\n+                size_t itemsToRemove = ceil((memUsage - maxStatsMemory) / sizeof(mempoolStats.vSamples[0]));\n+\n+                // make sure the vector contains more items then we'd like to remove\n+                if (mempoolStats.vSamples.size() > itemsToRemove)\n+                    mempoolStats.vSamples.erase(mempoolStats.vSamples.begin(), mempoolStats.vSamples.begin() + itemsToRemove);\n+            }\n+            // shrink vector\n+            mempoolStats.vSamples.shrink_to_fit();\n+            mempoolStats.cleanupCounter = 0;\n+        }\n+\n+        // fire signal\n+        MempoolStatsDidChange();\n+    }\n+}\n+\n+mempoolSamples_t CStats::mempoolGetValuesInRange(uint64_t& fromTime, uint64_t& toTime)\n+{\n+    if (!statsEnabled)\n+        return mempoolSamples_t();\n+\n+    LOCK(cs_stats);\n+\n+    // if empty, return directly\n+    if (!mempoolStats.vSamples.size())\n+        return mempoolStats.vSamples;\n+\n+\n+    if (!(fromTime == 0 && toTime == 0) && (fromTime > mempoolStats.startTime + mempoolStats.vSamples.front().timeDelta || toTime < mempoolStats.startTime + mempoolStats.vSamples.back().timeDelta)) {\n+        mempoolSamples_t::iterator fromSample = mempoolStats.vSamples.begin();\n+        mempoolSamples_t::iterator toSample = std::prev(mempoolStats.vSamples.end());\n+\n+        // create subset of samples\n+        bool fromSet = false;\n+        for (mempoolSamples_t::iterator it = mempoolStats.vSamples.begin(); it != mempoolStats.vSamples.end(); ++it) {\n+            if (mempoolStats.startTime + (*it).timeDelta >= fromTime && !fromSet) {\n+                fromSample = it;\n+                fromSet = true;\n+            }\n+            if (mempoolStats.startTime + (*it).timeDelta > toTime) {\n+                toSample = std::prev(it);\n+                break;\n+            }\n+        }\n+\n+        mempoolSamples_t subset(fromSample, toSample + 1);\n+\n+        // set the fromTime and toTime pass-by-ref parameters\n+        fromTime = mempoolStats.startTime + (*fromSample).timeDelta;\n+        toTime = mempoolStats.startTime + (*toSample).timeDelta;\n+\n+        // return subset\n+        return subset;\n+    }\n+\n+    // return all available samples\n+    fromTime = mempoolStats.startTime + mempoolStats.vSamples.front().timeDelta;\n+    ;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74680851",
      "id" : 74680851,
      "original_commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "original_position" : 119,
      "path" : "src/stats/stats.cpp",
      "position" : 119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501",
      "updated_at" : "2016-08-13T03:35:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74680851",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/20916903?v=3",
         "events_url" : "https://api.github.com/users/isle2983/events{/privacy}",
         "followers_url" : "https://api.github.com/users/isle2983/followers",
         "following_url" : "https://api.github.com/users/isle2983/following{/other_user}",
         "gists_url" : "https://api.github.com/users/isle2983/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/isle2983",
         "id" : 20916903,
         "login" : "isle2983",
         "organizations_url" : "https://api.github.com/users/isle2983/orgs",
         "received_events_url" : "https://api.github.com/users/isle2983/received_events",
         "repos_url" : "https://api.github.com/users/isle2983/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/isle2983/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/isle2983"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74693795"
         }
      },
      "body" : "s/memmory/memory/",
      "commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "created_at" : "2016-08-14T00:03:56Z",
      "diff_hunk" : "@@ -0,0 +1,79 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STATS_H\n+#define BITCOIN_STATS_H\n+\n+#include <sync.h>\n+\n+#include <atomic>\n+#include <stdlib.h>\n+#include <vector>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CStatsMempoolSample {\n+    uint32_t timeDelta;  //use 32bit time delta to save memmory",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693795",
      "id" : 74693795,
      "original_commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "original_position" : 17,
      "path" : "src/stats/stats.h",
      "position" : 17,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501",
      "updated_at" : "2016-08-14T00:03:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74693795",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/20916903?v=3",
         "events_url" : "https://api.github.com/users/isle2983/events{/privacy}",
         "followers_url" : "https://api.github.com/users/isle2983/followers",
         "following_url" : "https://api.github.com/users/isle2983/following{/other_user}",
         "gists_url" : "https://api.github.com/users/isle2983/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/isle2983",
         "id" : 20916903,
         "login" : "isle2983",
         "organizations_url" : "https://api.github.com/users/isle2983/orgs",
         "received_events_url" : "https://api.github.com/users/isle2983/received_events",
         "repos_url" : "https://api.github.com/users/isle2983/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/isle2983/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/isle2983"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693828"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74693828"
         }
      },
      "body" : "s/statictis/statistics/",
      "commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "created_at" : "2016-08-14T00:07:37Z",
      "diff_hunk" : "@@ -0,0 +1,79 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STATS_H\n+#define BITCOIN_STATS_H\n+\n+#include <sync.h>\n+\n+#include <atomic>\n+#include <stdlib.h>\n+#include <vector>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CStatsMempoolSample {\n+    uint32_t timeDelta;  //use 32bit time delta to save memmory\n+    int64_t txCount;     //transaction count\n+    int64_t dynMemUsage; //dynamic mempool usage\n+    int64_t minFeePerK;  //min fee per K\n+};\n+\n+typedef std::vector<struct CStatsMempoolSample> mempoolSamples_t;\n+\n+// simple mempool stats container\n+class CStatsMempool\n+{\n+public:\n+    uint64_t startTime; //start time\n+    mempoolSamples_t vSamples;\n+    uint64_t cleanupCounter; //internal counter for cleanups\n+\n+    CStatsMempool()\n+    {\n+        startTime = 0;\n+        cleanupCounter = 0;\n+    }\n+};\n+\n+// Class that manages various types of statistics and its memory consumption\n+class CStats\n+{\n+private:\n+    static const uint32_t SAMPLE_MIN_DELTA_IN_SEC; //minimum delta in seconds between samples\n+    static const int CLEANUP_SAMPLES_THRESHOLD;    //amount of samples until we perform a cleanup (remove old samples)\n+    static size_t maxStatsMemory;                  //maximum amount of memory to use for the stats\n+\n+    static CStats* sharedInstance;\n+    mutable CCriticalSection cs_stats;\n+\n+    CStatsMempool mempoolStats; //mempool stats container\n+\n+public:\n+    static const size_t DEFAULT_MAX_STATS_MEMORY; //default maximum of memory to use\n+    static const bool DEFAULT_STATISTICS_ENABLED; //default value for enabling statistics\n+\n+    static std::atomic<bool> statsEnabled;\n+    static CStats* DefaultStats(); //shared instance\n+\n+    /* signals */\n+    boost::signals2::signal<void(void)> MempoolStatsDidChange; //mempool signal\n+\n+    /* add a mempool stats sample */\n+    void addMempoolSample(int64_t txcount, int64_t dynUsage, int64_t currentMinRelayFee);\n+\n+    /* get all mempool samples (non interpolated) */\n+    mempoolSamples_t mempoolGetValuesInRange(uint64_t& fromTime, uint64_t& toTime);\n+\n+    /* set the target for the maximum memory consuption (in bytes) */\n+    void setMaxMemoryUsageTarget(size_t maxMem);\n+\n+    /* get the statictis module help strings */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693828",
      "id" : 74693828,
      "original_commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "original_position" : 72,
      "path" : "src/stats/stats.h",
      "position" : 72,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501",
      "updated_at" : "2016-08-14T00:07:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74693828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/20916903?v=3",
         "events_url" : "https://api.github.com/users/isle2983/events{/privacy}",
         "followers_url" : "https://api.github.com/users/isle2983/followers",
         "following_url" : "https://api.github.com/users/isle2983/following{/other_user}",
         "gists_url" : "https://api.github.com/users/isle2983/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/isle2983",
         "id" : 20916903,
         "login" : "isle2983",
         "organizations_url" : "https://api.github.com/users/isle2983/orgs",
         "received_events_url" : "https://api.github.com/users/isle2983/received_events",
         "repos_url" : "https://api.github.com/users/isle2983/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/isle2983/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/isle2983"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693833"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74693833"
         }
      },
      "body" : "s/consuption/consumption/",
      "commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "created_at" : "2016-08-14T00:08:06Z",
      "diff_hunk" : "@@ -0,0 +1,79 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STATS_H\n+#define BITCOIN_STATS_H\n+\n+#include <sync.h>\n+\n+#include <atomic>\n+#include <stdlib.h>\n+#include <vector>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CStatsMempoolSample {\n+    uint32_t timeDelta;  //use 32bit time delta to save memmory\n+    int64_t txCount;     //transaction count\n+    int64_t dynMemUsage; //dynamic mempool usage\n+    int64_t minFeePerK;  //min fee per K\n+};\n+\n+typedef std::vector<struct CStatsMempoolSample> mempoolSamples_t;\n+\n+// simple mempool stats container\n+class CStatsMempool\n+{\n+public:\n+    uint64_t startTime; //start time\n+    mempoolSamples_t vSamples;\n+    uint64_t cleanupCounter; //internal counter for cleanups\n+\n+    CStatsMempool()\n+    {\n+        startTime = 0;\n+        cleanupCounter = 0;\n+    }\n+};\n+\n+// Class that manages various types of statistics and its memory consumption\n+class CStats\n+{\n+private:\n+    static const uint32_t SAMPLE_MIN_DELTA_IN_SEC; //minimum delta in seconds between samples\n+    static const int CLEANUP_SAMPLES_THRESHOLD;    //amount of samples until we perform a cleanup (remove old samples)\n+    static size_t maxStatsMemory;                  //maximum amount of memory to use for the stats\n+\n+    static CStats* sharedInstance;\n+    mutable CCriticalSection cs_stats;\n+\n+    CStatsMempool mempoolStats; //mempool stats container\n+\n+public:\n+    static const size_t DEFAULT_MAX_STATS_MEMORY; //default maximum of memory to use\n+    static const bool DEFAULT_STATISTICS_ENABLED; //default value for enabling statistics\n+\n+    static std::atomic<bool> statsEnabled;\n+    static CStats* DefaultStats(); //shared instance\n+\n+    /* signals */\n+    boost::signals2::signal<void(void)> MempoolStatsDidChange; //mempool signal\n+\n+    /* add a mempool stats sample */\n+    void addMempoolSample(int64_t txcount, int64_t dynUsage, int64_t currentMinRelayFee);\n+\n+    /* get all mempool samples (non interpolated) */\n+    mempoolSamples_t mempoolGetValuesInRange(uint64_t& fromTime, uint64_t& toTime);\n+\n+    /* set the target for the maximum memory consuption (in bytes) */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693833",
      "id" : 74693833,
      "original_commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "original_position" : 69,
      "path" : "src/stats/stats.h",
      "position" : 69,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501",
      "updated_at" : "2016-08-14T00:08:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74693833",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/20916903?v=3",
         "events_url" : "https://api.github.com/users/isle2983/events{/privacy}",
         "followers_url" : "https://api.github.com/users/isle2983/followers",
         "following_url" : "https://api.github.com/users/isle2983/following{/other_user}",
         "gists_url" : "https://api.github.com/users/isle2983/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/isle2983",
         "id" : 20916903,
         "login" : "isle2983",
         "organizations_url" : "https://api.github.com/users/isle2983/orgs",
         "received_events_url" : "https://api.github.com/users/isle2983/received_events",
         "repos_url" : "https://api.github.com/users/isle2983/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/isle2983/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/isle2983"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74693876"
         }
      },
      "body" : "s/detla/delta/",
      "commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "created_at" : "2016-08-14T00:12:58Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"stats/stats.h\"\n+\n+#include \"memusage.h\"\n+#include \"utiltime.h\"\n+\n+#include \"util.h\"\n+\n+const uint32_t CStats::SAMPLE_MIN_DELTA_IN_SEC = 2;\n+const int CStats::CLEANUP_SAMPLES_THRESHOLD = 100;\n+size_t CStats::maxStatsMemory = 0;\n+const size_t CStats::DEFAULT_MAX_STATS_MEMORY = 10 * 1024 * 1024; //10 MB\n+const bool CStats::DEFAULT_STATISTICS_ENABLED = false;\n+std::atomic<bool> CStats::statsEnabled(false); //disable stats by default\n+\n+CStats defaultStats;\n+\n+CStats* CStats::sharedInstance = NULL;\n+\n+CStats* CStats::DefaultStats()\n+{\n+    if (!sharedInstance)\n+        sharedInstance = new CStats();\n+\n+    return sharedInstance;\n+}\n+\n+void CStats::addMempoolSample(int64_t txcount, int64_t dynUsage, int64_t currentMinRelayFee)\n+{\n+    if (!statsEnabled)\n+        return;\n+\n+    uint64_t now = GetTime();\n+    {\n+        LOCK(cs_stats);\n+\n+        // set the mempool stats start time if this is the first sample\n+        if (mempoolStats.startTime == 0)\n+            mempoolStats.startTime = now;\n+\n+        // ensure the minimum time delta between samples\n+        if (mempoolStats.vSamples.size() && mempoolStats.vSamples.back().timeDelta + SAMPLE_MIN_DELTA_IN_SEC >= now - mempoolStats.startTime)\n+            return;\n+\n+        // calculate the current time detla and add a sample",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74693876",
      "id" : 74693876,
      "original_commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "original_position" : 48,
      "path" : "src/stats/stats.cpp",
      "position" : 48,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501",
      "updated_at" : "2016-08-14T00:12:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74693876",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/20916903?v=3",
         "events_url" : "https://api.github.com/users/isle2983/events{/privacy}",
         "followers_url" : "https://api.github.com/users/isle2983/followers",
         "following_url" : "https://api.github.com/users/isle2983/following{/other_user}",
         "gists_url" : "https://api.github.com/users/isle2983/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/isle2983",
         "id" : 20916903,
         "login" : "isle2983",
         "organizations_url" : "https://api.github.com/users/isle2983/orgs",
         "received_events_url" : "https://api.github.com/users/isle2983/received_events",
         "repos_url" : "https://api.github.com/users/isle2983/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/isle2983/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/isle2983"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74694040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74694040"
         }
      },
      "body" : "This 'defaultStats' instance is not used.",
      "commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "created_at" : "2016-08-14T00:33:20Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"stats/stats.h\"\n+\n+#include \"memusage.h\"\n+#include \"utiltime.h\"\n+\n+#include \"util.h\"\n+\n+const uint32_t CStats::SAMPLE_MIN_DELTA_IN_SEC = 2;\n+const int CStats::CLEANUP_SAMPLES_THRESHOLD = 100;\n+size_t CStats::maxStatsMemory = 0;\n+const size_t CStats::DEFAULT_MAX_STATS_MEMORY = 10 * 1024 * 1024; //10 MB\n+const bool CStats::DEFAULT_STATISTICS_ENABLED = false;\n+std::atomic<bool> CStats::statsEnabled(false); //disable stats by default\n+\n+CStats defaultStats;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8501#discussion_r74694040",
      "id" : 74694040,
      "original_commit_id" : "4149b34c0a70a298a312180b2c8aea69399a6cea",
      "original_position" : 19,
      "path" : "src/stats/stats.cpp",
      "position" : 19,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8501",
      "updated_at" : "2016-08-14T00:33:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74694040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/20916903?v=3",
         "events_url" : "https://api.github.com/users/isle2983/events{/privacy}",
         "followers_url" : "https://api.github.com/users/isle2983/followers",
         "following_url" : "https://api.github.com/users/isle2983/following{/other_user}",
         "gists_url" : "https://api.github.com/users/isle2983/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/isle2983",
         "id" : 20916903,
         "login" : "isle2983",
         "organizations_url" : "https://api.github.com/users/isle2983/orgs",
         "received_events_url" : "https://api.github.com/users/isle2983/received_events",
         "repos_url" : "https://api.github.com/users/isle2983/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/isle2983/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/isle2983"
      }
   },
   {
      "body" : "Hi Jonas,\r\n\r\nI understand the concern in your description for the addMempoolSample() stat\r\nbookkeeping designed to be as lightweight as possible in the critical execution\r\npath. However, I have a few (perhaps under-informed, neophyte) questions which\r\nwould help me understand the design considerations better:\r\n\r\n1) the comment in rpc_stats.cpp hints that the overhead of the JSON string\r\ngeneration is best optimized to be this 'flat' encoding as opposed to some\r\nencoding like:\r\n\r\n`\r\n{\r\n\"fieldNames\" : [\"delta_in_secs\", \"tx_count\",\r\n               \"dynamic_mem_usage\", \"min_fee_per_k\"],\r\n\"samples\" : [[val1, val2, val3, val4],\r\n           [val1, val2, val3, val4],\r\n          ]\r\n}\r\n`\r\n\r\nIs the 'flat' encoding strictly needed? or is there some other concern with\r\noutputting a slightly more convenient format than 'flat'?\r\n\r\n2) It appears possible to set the maximum memory target very hight such that\r\nmany, many samples are collected and the overhead of the computation\r\nmempoolGetValuesInRange() inside the lock might become onerus (assuming I am\r\ncorrectly understanding how the lock works and the implications of holding it\r\ntoo long). Have you considered taking a copy of 'mempoolStats' in a way that\r\nlets you return the lock earlier, and doing the dataset computation outside the\r\nlock? (Is that even currently possible under the current execution model?)\r\n\r\nCheers,\r\n\r\nIsle",
      "created_at" : "2016-08-15T04:03:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-239725630",
      "id" : 239725630,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8501",
      "updated_at" : "2016-08-15T04:03:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/239725630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/20916903?v=3",
         "events_url" : "https://api.github.com/users/isle2983/events{/privacy}",
         "followers_url" : "https://api.github.com/users/isle2983/followers",
         "following_url" : "https://api.github.com/users/isle2983/following{/other_user}",
         "gists_url" : "https://api.github.com/users/isle2983/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/isle2983",
         "id" : 20916903,
         "login" : "isle2983",
         "organizations_url" : "https://api.github.com/users/isle2983/orgs",
         "received_events_url" : "https://api.github.com/users/isle2983/received_events",
         "repos_url" : "https://api.github.com/users/isle2983/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/isle2983/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/isle2983"
      }
   },
   {
      "body" : "@isle2983 Welcome to github.\r\nThanks for your feedback and your nitpicks. I really appreciate this and i'll process them during the next hours.\r\n\r\nFor your questions/inputs:\r\n1) My idea with the JSON flat output was to bypass the JSON encoding/decoding.`[val1, val2, val3, val4], [val1, val2, val3, val4], ` should also work. I just though a single string would result in faster encoding and decoding performance. But your approach seems to be the better choice, although not sure if we want to use `UniValue` for encoding or just appending strings... maybe we should start with the first and use a more optimized encoding if the JSON overhead is a problem.\r\n\r\n2) Yes. That's a good point. Copying the samples vector could result in a memory peak when using large amount of `-maxmemorytarget`.",
      "created_at" : "2016-08-15T12:03:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8501#issuecomment-239786592",
      "id" : 239786592,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8501",
      "updated_at" : "2016-08-15T12:03:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/239786592",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
