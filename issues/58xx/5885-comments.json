[
   {
      "body" : "I'm happy about this approach.\r\n\r\nWe've seen operating system RNG's fail silently in really frightening ways several times over the last few years,  a belt-and-suspenders approach where silent failure at least gets a best effort bit of entropy-snake-oil (or maybe not so snakeoil: after going and writing a bunch of entropy collecting code I'm more impressed with the performance than I expected) seems to be a clear improvement.  OpenSSL's (and libressl's) system entropy randomness generator is also pretty scary (it can fail silently back to snakeoil entropy much weaker than what this code does).\r\n\r\nWe'll want to take good care to make sure GetOSEntropy is portable and safe.  Maybe we should introduce a startup time test to get GetOSEntropy that just checks that it's not outputting a constant. I wouldn't expect an _actual_ OS failure to do that, but e.g. if some massive screwup has replaced /dev/urandom with a file (easier than you might think...) it could be helpful.\r\n\r\nRight now this code has no fork safety.  A fork() will end up with a clone of the pool state. That StrongRandom always goes to the OS helps add confidence that total doom is unlikely, but we might want to deal with this case even though we never fork just in case someone adds something that forks later and doesn't think about it.  A PID vs last_pid test in the random calls that triggers a GetSystemRand(slow=0) would I think be all that it would take.\r\n\r\nBeyond the nits I am adding the only big obvious gaps were that there is no facility to roll entropy from the pool forward across restarts. We should probably GetStrongRandom() on clean shutdown and write out a entropy file that gets fed back in at startup.  Perhaps system rand can take an argument, and thats how the config environment could also be passed in?\r\n\r\nThere are plenty of missed opportunities to collect extra entropy (e.g. from UI events; UPNP real-IP, other hosts provided ping nonces) that don't fit into line level patches, as those files aren't even touched.",
      "created_at" : "2015-03-12T20:50:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-78611027",
      "id" : 78611027,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-12T20:52:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/78611027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Concept ACK, although as discussed I'd prefer it as a subtree'd external library like secp256k1 and leveldb - so that other (wallet) software which needs a good random source can use it too, and it receives more testing and review than an internal module in Bitcoin Core.",
      "created_at" : "2015-03-13T12:21:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-78947335",
      "id" : 78947335,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-13T12:21:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/78947335",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Good idea.  I thought about this when implementing random numbers for the ping nonce.  They don't need to be cryptographically secure, just random enough to serve their purpose.  At the time, thought about calling the OpenSSL insecure rand, but its API was not orthogonal to secure rand, unfortunately.  It had side effects I wasn't happy with, so just stuck with the regular OpenSSL secure rand, even though I wasn't happy about it needlessly consuming the entropy pool, which is a somewhat precious resource.  Would it be worth changing the ping nonce to use insecure rand instead, or keep it secure and await this fine new implementation?\r\n",
      "created_at" : "2015-03-15T08:58:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-80925946",
      "id" : 80925946,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-15T08:58:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/80925946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4563817?v=3",
         "events_url" : "https://api.github.com/users/Krellan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Krellan/followers",
         "following_url" : "https://api.github.com/users/Krellan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Krellan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Krellan",
         "id" : 4563817,
         "login" : "Krellan",
         "organizations_url" : "https://api.github.com/users/Krellan/orgs",
         "received_events_url" : "https://api.github.com/users/Krellan/received_events",
         "repos_url" : "https://api.github.com/users/Krellan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Krellan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Krellan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Krellan"
      }
   },
   {
      "body" : "@Krellan There is nothing \"consumed\" in the entropy pool. ",
      "created_at" : "2015-03-15T09:04:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-80927318",
      "id" : 80927318,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-15T09:04:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/80927318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@Krellan After this pull the insecure random is certainly good enough to use for ping nonces.",
      "created_at" : "2015-03-18T12:14:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-82942767",
      "id" : 82942767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-18T12:14:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/82942767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Running the Fortuna implementation's output through http://csrc.nist.gov/groups/ST/toolkit/rng/documentation_software.html would be spiffy. Or maybe the Python port of that:  http://gerhardt.ch/random.php\r\n\r\n",
      "created_at" : "2015-03-18T19:02:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-83122968",
      "id" : 83122968,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-18T19:02:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/83122968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "@sipa Very nice work.\r\n\r\nTaking advantage of the aes classes introduced here, I've added cbc functionality on top to replace our usage of openssl for wallet encryption/decryption and passphrase usage. See here: https://github.com/theuni/bitcoin/commits/aes-keys. This is a WIP; it still needs loads more testing.\r\n\r\nI'll submit a PR to discuss that after this is merged, but in the meantime you may want https://github.com/theuni/bitcoin/commit/a22fcf2d2835d4f50e357ca0125d55b54a0ccb15 and https://github.com/theuni/bitcoin/commit/a4d109e33cc247430054fe1a81bdc668456338c8.\r\n\r\nI'm not sure if my test failures were due to other local changes or not, but either way I don't think it would hurt.\r\n\r\nSide-node: I think that (along with the fortuna stuff here, @laanwj's libevent stuff, and libsecp256k1) is the last of the openssl stuff that needed to be re-implemented.",
      "created_at" : "2015-03-20T05:52:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-83921828",
      "id" : 83921828,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-20T05:56:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/83921828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "This sounds good, but I have to play devils advocate here. The problems with OS randomness on Android was caused by exactly this kind of logic:   \"we can do better than the kernel with a spiffy userspace RNG\". And then they screwed it up.\r\n\r\nNow, I trust sipa and gmaxwell to not screw things up. I am much less sure about the faceless unknowable individuals who will come later in the years after sipa has moved on, or who will patch Bitcoin as it gets packaged into distributions, etc. I do not trust them.\r\n\r\nI especially do not trust that crypto code that is Windows specific will be well tested and will never break, given the extreme bias towards Linux and Mac that exists in the Bitcoin developer community.\r\n\r\nIf there is no Bitcoin Core RNG, then people will not be tempted to \"improve\" it and break it in the process. If there is, they will.\r\n\r\nRandomness theory says we cannot beat the kernel. The kernel has all the sources of entropy available to it that a userspace app does, plus more that we don't have access to. Kernel RNGs are also rare and carefully monitored: I trust the Linux, Darwin and Windows kernel teams a lot more than I trust userspace RNG developers. Kernels are unlikely to ship in a broken state. So, reading from /dev/urandom or CryptoAPI should be all that is required. Why add more complexity on top?\r\n\r\nI am especially unkeen on things like \"let's mix in the current time or the value of CPUID\", because mixing in uselessly low value pieces of entropy is how both the Debian and Android randomness flaws evaded detection for so long - the output *looked* random but only had ~16 bits of entropy in it from the PID counter. Everything else broke but the PID kept the illusion alive for longer than should have been possible.\r\n\r\nSo - why go further than /dev/urandom?",
      "created_at" : "2015-04-10T11:24:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91521871",
      "id" : 91521871,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-10T11:24:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91521871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=3",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "body" : "The primary reason is because the kernel has repeatedly screwed it up too on various systems, both due to OS bugs (e.g. recent Netbsd and Freebsd examples) and because of things like running in virtual machines where the environment was just too deterministic.  These are not hypothetical problems, but have been observed in practice and recently too.\r\n\r\n> Kernels are unlikely to ship in a broken state.\r\n\r\nKernels have shipped in a broken state, and they've been \"broken in the field\" by poor use, like use in a VPS that denied them adequate access to randomness; by hypervisor checkpoint and restore, and by other issue.\r\n\r\n> or who will patch Bitcoin as it gets packaged into distributions, etc. I do not trust them\r\n\r\nI don't trust distributors either, (though I do trust future contributions as much as ourselves, all bets are off if they're malicious or even more foolish than we are). It is obvious that the utmost care is required in structuring things not just so its correct, but so that the result is easy to audit, testable, and hard to break; for sure. This includes the above comment about incorporating the system RNG in key generation in the final step in a transparent and hard to break way. If someone wants to twiddle the rest, then great. The potential for harm is bounded when whatever gets done is just getting xored with /dev/urandom.  \r\n\r\n(Though unlike OpenSSL we would not consider using undefined behavior ... almost guaranteeing the result would get broken, if not by a helpful packager than by a future spec compliant compiler)\r\n\r\n\"Just use /dev/random\" is also fraught with peril on its own, it requires a file descriptor, if one isn't available you cannot get to the device. It's also slow and if you use the blocking form it will reliably block on Linux systems which are often entropy starved (due to a campaign of removing low quality entropy sources in the kernel in the last that Linux hasn't yet recovered from); the blocking is fine for our highly critical long term key generation, but other places where we might need non-determinism it isn't really. If the non-blocking /dev/urandom is used, you are exposed to getting non-random bits even when the kernel knows better (e.g. near bootup time).   There is no escaping peril, we can only seek to understand and control the risks.\r\n\r\n> the output looked random but\r\n\r\nSadly this problem also exists with the kernel itself.  Our setup must be such that if the kernel fails in a detectable way, we fail. Regardless; all the rest is for the cases where the kernel has failed undetectably.\r\n\r\n> Randomness theory says we cannot beat the kernel\r\n\r\nI'm not aware of any such theory. What I am aware of is that we have entirely different constraints; when the kernel RNGs have failed none of them have managed to still emit output which was machine specific, though its not hard to do so in userspace.  In some abstract sense the kernel has access to more data, but operates under different constraints and so we know it doesn't actually make use of that data (at least in Linux and the BSDs; the windows source is not generally available, so I don't know what it does internally).  As another example, we're also able to use a huge amount of hardening; so even if the kernel has failed in an undetectable way and there is only a moderate amount of non-determinism from other sources there is a chance that the user will be secure regardless. Likewise, we can roll state forward between runs, so even if the system state is only intermittently random the user can be practically secure; something else that is not generally available in the kernel.\r\n\r\nFor some time it looked like Linux /dev/u?random was going to be replaced with rdrand, and I think our users wouldn't have appreciated that. I think it's fair to say that when we're generating keys our demands as we're creating long term keys for public use which thousands to millions of dollars can be immediately lost if they're insecure, is unlike 99.999% of the kernel random use.\r\n\r\nLikewise, if our ability to read OS entropy silently breaks on windows then those users are in trouble regardless of what else we've done. So we must assure we don't, and that we detect and fail if we do if detection is even possible. This is true regardless of whatever else we're doing.\r\n\r\nA further consideration is that OpenSSL already does this, and so it would be arguably unwise in the \"what were you thinking??!?? sense to replace it something with more known total failure modes. The OpenSSL implementation is inherently more fragile than anything we'd consider using (including silent failure when it knows the OS rng is failing for it); OpenSSL's \"more secure fork\" LibreSSL replaces the code but also includes a similar fallback.\r\n",
      "created_at" : "2015-04-10T14:34:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91576653",
      "id" : 91576653,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-10T14:38:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91576653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   }
]
