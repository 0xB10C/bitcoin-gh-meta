[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-05-31T02:56:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#issuecomment-1569422917",
      "id" : 1569422917,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27790",
      "node_id" : "IC_kwDOABII585di35F",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1569422917/reactions"
      },
      "updated_at" : "2023-05-31T02:56:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1569422917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1211714690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211714690"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (011087176e8aa3ec86f032c3e4c6bac432d0ac3e)\r\n\r\nThis change seems like it might belong in the previous commit \"walletdb: Consistently clear key and value streams before writing\" (5b5c131f9665e21f6dcf109e400926d054dd1fb5)",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-05-31T13:24:16Z",
      "diff_hunk" : "@@ -496,6 +497,9 @@ DatabaseCursor::Status SQLiteCursor::Next(DataStream& key, DataStream& value)\n         return Status::FAIL;\n     }\n \n+    key.clear();\n+    value.clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1211714690",
      "id" : 1211714690,
      "line" : 505,
      "node_id" : "PRRC_kwDOABII585IOUyC",
      "original_commit_id" : "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "original_line" : 505,
      "original_position" : 13,
      "original_start_line" : 500,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 34,
      "pull_request_review_id" : 1453211063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211714690/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 504,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-05-31T19:11:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211714690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1211727420"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211727420"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"walletdb: Consistently clear key and value streams before writing\" (5d74d702c16f4e34c96e9573049a2fe930ac935c)\r\n\r\nRight now it seems like there is not test coverage for calling GetNewPrefixCursor with an empty prefix. Also, the `\\xff\\xff` test case I previously suggested is not testing what I originally thought it would test. Because of the way strings are serialized, there's a compact int value before the prefix so the prefix has other characters beside `\\xff`.\r\n\r\nSeeing these things, I wrote a new test case to add more coverage, and wound up finding two corner case bugs in bdb and sqlite code when empty spans are passed around. I think the bugs cannot have real-world side effects, but I'm not sure about this, and think they are probably worth fixing to avoid surprises in the future.\r\n\r\nHere are all the changes I would suggest including the new test and two bugfixes\r\n\r\n```diff\r\ndiff --git a/src/wallet/bdb.cpp b/src/wallet/bdb.cpp\r\nindex 8d764911ca5b..68abdcd81e9e 100644\r\n--- a/src/wallet/bdb.cpp\r\n+++ b/src/wallet/bdb.cpp\r\n@@ -698,7 +698,7 @@ DatabaseCursor::Status BerkeleyCursor::Next(DataStream& ssKey, DataStream& ssVal\r\n     if (ret == DB_NOTFOUND) {\r\n         return Status::DONE;\r\n     }\r\n-    if (ret != 0 || datKey.get_data() == nullptr || datValue.get_data() == nullptr) {\r\n+    if (ret != 0) {\r\n         return Status::FAIL;\r\n     }\r\n \r\ndiff --git a/src/wallet/db.h b/src/wallet/db.h\r\nindex 9d684225c343..9d7bceb893f3 100644\r\n--- a/src/wallet/db.h\r\n+++ b/src/wallet/db.h\r\n@@ -49,6 +49,7 @@ private:\r\n     virtual bool WriteKey(DataStream&& key, DataStream&& value, bool overwrite = true) = 0;\r\n     virtual bool EraseKey(DataStream&& key) = 0;\r\n     virtual bool HasKey(DataStream&& key) = 0;\r\n+    friend class DatabaseBatchTest;\r\n \r\n public:\r\n     explicit DatabaseBatch() {}\r\ndiff --git a/src/wallet/sqlite.cpp b/src/wallet/sqlite.cpp\r\nindex 9c7ec9721ce2..fe10f911c4ce 100644\r\n--- a/src/wallet/sqlite.cpp\r\n+++ b/src/wallet/sqlite.cpp\r\n@@ -40,7 +40,11 @@ static bool BindBlobToStatement(sqlite3_stmt* stmt,\r\n                                 Span<const std::byte> blob,\r\n                                 const std::string& description)\r\n {\r\n-    int res = sqlite3_bind_blob(stmt, index, blob.data(), blob.size(), SQLITE_STATIC);\r\n+    // Pass a pointer to the empty string \"\" below instead of passing the\r\n+    // blob.data() pointer if the blob.data() pointer is null. Passing a null\r\n+    // data pointer to bind_blob would cause sqlite to bind the SQL NULL value\r\n+    // instead of the empty blob value X'', which would mess up SQL comparisons.\r\n+    int res = sqlite3_bind_blob(stmt, index, blob.data() ? static_cast<const void*>(blob.data()) : \"\", blob.size(), SQLITE_STATIC);\r\n     if (res != SQLITE_OK) {\r\n         LogPrintf(\"Unable to bind %s to statement: %s\\n\", description, sqlite3_errstr(res));\r\n         sqlite3_clear_bindings(stmt);\r\ndiff --git a/src/wallet/test/db_tests.cpp b/src/wallet/test/db_tests.cpp\r\nindex 14272e2fe441..a22e1381437c 100644\r\n--- a/src/wallet/test/db_tests.cpp\r\n+++ b/src/wallet/test/db_tests.cpp\r\n@@ -20,7 +20,52 @@\r\n #include <memory>\r\n #include <string>\r\n \r\n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\r\n+{\r\n+    Span key{kv.first}, value{kv.second};\r\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\r\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\r\n+    return os;\r\n+}\r\n+\r\n namespace wallet {\r\n+\r\n+class DatabaseBatchTest\r\n+{\r\n+public:\r\n+    static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\r\n+                           bool overwrite = true)\r\n+    {\r\n+        return batch.Write(DataStream{key}, DataStream{value}, overwrite);\r\n+    }\r\n+};\r\n+\r\n+static Span<const std::byte> StringBytes(std::string_view str)\r\n+{\r\n+    return AsBytes<const char>({str.data(), str.size()});\r\n+}\r\n+\r\n+static SerializeData StringData(std::string_view str)\r\n+{\r\n+    auto bytes = StringBytes(str);\r\n+    return SerializeData{bytes.begin(), bytes.end()};\r\n+}\r\n+\r\n+static void CheckPrefix(DatabaseBatch& batch, Span<const std::byte> prefix, MockableData expected)\r\n+{\r\n+    std::unique_ptr<DatabaseCursor> cursor = batch.GetNewPrefixCursor(prefix);\r\n+    MockableData actual;\r\n+    while (true) {\r\n+        DataStream key, value;\r\n+        DatabaseCursor::Status status = cursor->Next(key, value);\r\n+        if (status == DatabaseCursor::Status::DONE) break;\r\n+        BOOST_CHECK(status == DatabaseCursor::Status::MORE);\r\n+        BOOST_CHECK(\r\n+            actual.emplace(SerializeData(key.begin(), key.end()), SerializeData(value.begin(), value.end())).second);\r\n+    }\r\n+    BOOST_CHECK_EQUAL_COLLECTIONS(actual.begin(), actual.end(), expected.begin(), expected.end());\r\n+}\r\n+\r\n BOOST_FIXTURE_TEST_SUITE(db_tests, BasicTestingSetup)\r\n \r\n static std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& path, fs::path& database_filename)\r\n@@ -86,28 +131,29 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\r\n     BOOST_CHECK(env_2_a == env_2_b);\r\n }\r\n \r\n-BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\r\n+static std::vector<std::unique_ptr<WalletDatabase>> TestDatabases(const fs::path& path_root)\r\n {\r\n     std::vector<std::unique_ptr<WalletDatabase>> dbs;\r\n-\r\n-    // Create dbs\r\n     DatabaseOptions options;\r\n     DatabaseStatus status;\r\n     bilingual_str error;\r\n-    std::vector<bilingual_str> warnings;\r\n #ifdef USE_BDB\r\n-    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\r\n+    dbs.emplace_back(MakeBerkeleyDatabase(path_root / \"bdb\", options, status, error));\r\n #endif\r\n #ifdef USE_SQLITE\r\n-    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\r\n+    dbs.emplace_back(MakeSQLiteDatabase(path_root / \"sqlite\", options, status, error));\r\n #endif\r\n     dbs.emplace_back(CreateMockableWalletDatabase());\r\n+    return dbs;\r\n+}\r\n \r\n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\r\n+{\r\n     // Test each supported db\r\n-    for (const auto& database : dbs) {\r\n+    for (const auto& database : TestDatabases(m_path_root)) {\r\n         BOOST_ASSERT(database);\r\n \r\n-        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\r\n+        std::vector<std::string> prefixes = {\"\", \"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\r\n \r\n         // Write elements to it\r\n         std::unique_ptr<DatabaseBatch> handler = database->MakeBatch();\r\n@@ -143,5 +189,31 @@ BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\r\n     }\r\n }\r\n \r\n+// Lower level DatabaseBase::GetNewPrefixCursor test, to cover cases that aren't\r\n+// covered in the higher level test above. The higher level test uses\r\n+// serialized strings which are prefixed with string length, so it doesn't test\r\n+// truly empty prefixes or prefixes that begin with \\xff\r\n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_byte_test)\r\n+{\r\n+    const MockableData::value_type\r\n+        e{StringData(\"\"), StringData(\"e\")},\r\n+        p{StringData(\"prefix\"), StringData(\"p\")},\r\n+        ps{StringData(\"prefixsuffix\"), StringData(\"ps\")},\r\n+        f{StringData(\"\\xff\"), StringData(\"f\")},\r\n+        fs{StringData(\"\\xffsuffix\"), StringData(\"fs\")},\r\n+        ff{StringData(\"\\xff\\xff\"), StringData(\"ff\")},\r\n+        ffs{StringData(\"\\xff\\xffsuffix\"), StringData(\"ffs\")};\r\n+    for (const auto& database : TestDatabases(m_path_root)) {\r\n+        std::unique_ptr<DatabaseBatch> batch = database->MakeBatch();\r\n+        for (const auto& [k, v] : {e, p, ps, f, fs, ff, ffs}) {\r\n+            DatabaseBatchTest::WriteBytes(*batch, k, v);\r\n+        }\r\n+        CheckPrefix(*batch, StringBytes(\"\"), {e, p, ps, f, fs, ff, ffs});\r\n+        CheckPrefix(*batch, StringBytes(\"prefix\"), {p, ps});\r\n+        CheckPrefix(*batch, StringBytes(\"\\xff\"), {f, fs, ff, ffs});\r\n+        CheckPrefix(*batch, StringBytes(\"\\xff\\xff\"), {ff, ffs});\r\n+    }\r\n+}\r\n+\r\n BOOST_AUTO_TEST_SUITE_END()\r\n } // namespace wallet\r\n\r\n```",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-05-31T13:32:50Z",
      "diff_hunk" : "@@ -78,5 +86,62 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+\n+    // Test each supported db\n+    for (const auto& database : dbs) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1211727420",
      "id" : 1211727420,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IOX48",
      "original_commit_id" : "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "original_line" : 110,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1453211063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211727420/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-31T19:11:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211727420",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1211828935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211828935"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"walletdb: Consistently clear key and value streams before writing\" (5d74d702c16f4e34c96e9573049a2fe930ac935c)\r\n\r\nThis test case seems to rely on getting values back in a particular order, but I don't think the sqlite implementation actually guarantees rows will be returned in any particular order, since no sorting is requested.",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-05-31T14:37:56Z",
      "diff_hunk" : "@@ -78,5 +86,62 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+\n+    // Test each supported db\n+    for (const auto& database : dbs) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\n+\n+        // Write elements to it\n+        std::unique_ptr<DatabaseBatch> handler = database->MakeBatch();\n+        for (unsigned int i = 0; i < 10; i++) {\n+            for (const auto& prefix : prefixes) {\n+                BOOST_CHECK(handler->Write(std::make_pair(prefix, i), i));\n+            }\n+        }\n+\n+        // Now read all the items by prefix and verify that each element gets parsed correctly\n+        for (const auto& prefix : prefixes) {\n+            DataStream s_prefix;\n+            s_prefix << prefix;\n+            std::unique_ptr<DatabaseCursor> cursor = handler->GetNewPrefixCursor(s_prefix);\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+            for (int i = 0; i < 10; i++) {\n+                DatabaseCursor::Status status = cursor->Next(key, value);\n+                BOOST_ASSERT(status == DatabaseCursor::Status::MORE);\n+\n+                std::string key_back;\n+                key >> key_back;\n+                BOOST_CHECK_EQUAL(key_back, prefix);\n+\n+                unsigned int value_back;\n+                value >> value_back;\n+                BOOST_CHECK_EQUAL(value_back, i);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1211828935",
      "id" : 1211828935,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IOwrH",
      "original_commit_id" : "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "original_line" : 137,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1453211063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211828935/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-31T19:11:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1211828935",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212219391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212219391"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-05-31T19:34:32Z",
      "diff_hunk" : "@@ -496,6 +497,9 @@ DatabaseCursor::Status SQLiteCursor::Next(DataStream& key, DataStream& value)\n         return Status::FAIL;\n     }\n \n+    key.clear();\n+    value.clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212219391",
      "id" : 1212219391,
      "in_reply_to_id" : 1211714690,
      "line" : 505,
      "node_id" : "PRRC_kwDOABII585IQP__",
      "original_commit_id" : "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "original_line" : 505,
      "original_position" : 13,
      "original_start_line" : 500,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 34,
      "pull_request_review_id" : 1454018938,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212219391/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 504,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-05-31T19:34:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212219391",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212219741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212219741"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Adopted these suggestions. I've put the bug fixes in an separate commit.",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-05-31T19:34:54Z",
      "diff_hunk" : "@@ -78,5 +86,62 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+\n+    // Test each supported db\n+    for (const auto& database : dbs) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212219741",
      "id" : 1212219741,
      "in_reply_to_id" : 1211727420,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IQQFd",
      "original_commit_id" : "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "original_line" : 110,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1454019786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212219741/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-31T19:34:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212219741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212220552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212220552"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hmm, indeed. I've changed the test to check against the `i` stored in the key.",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-05-31T19:35:30Z",
      "diff_hunk" : "@@ -78,5 +86,62 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+\n+    // Create dbs\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(m_path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(m_path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+\n+    // Test each supported db\n+    for (const auto& database : dbs) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\n+\n+        // Write elements to it\n+        std::unique_ptr<DatabaseBatch> handler = database->MakeBatch();\n+        for (unsigned int i = 0; i < 10; i++) {\n+            for (const auto& prefix : prefixes) {\n+                BOOST_CHECK(handler->Write(std::make_pair(prefix, i), i));\n+            }\n+        }\n+\n+        // Now read all the items by prefix and verify that each element gets parsed correctly\n+        for (const auto& prefix : prefixes) {\n+            DataStream s_prefix;\n+            s_prefix << prefix;\n+            std::unique_ptr<DatabaseCursor> cursor = handler->GetNewPrefixCursor(s_prefix);\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);\n+            for (int i = 0; i < 10; i++) {\n+                DatabaseCursor::Status status = cursor->Next(key, value);\n+                BOOST_ASSERT(status == DatabaseCursor::Status::MORE);\n+\n+                std::string key_back;\n+                key >> key_back;\n+                BOOST_CHECK_EQUAL(key_back, prefix);\n+\n+                unsigned int value_back;\n+                value >> value_back;\n+                BOOST_CHECK_EQUAL(value_back, i);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212220552",
      "id" : 1212220552,
      "in_reply_to_id" : 1211828935,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IQQSI",
      "original_commit_id" : "011087176e8aa3ec86f032c3e4c6bac432d0ac3e",
      "original_line" : 137,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1454020832,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212220552/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-05-31T19:35:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212220552",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212315030"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212315030"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"wallet: Add GetPrefixCursor to DatabaseBatch\" (13476fe7bebdbf51e09821850b2c808c8ecf116a)\r\n\r\nMaybe add a comment above the batch.Write() call like \"Convert the key and value to DataStream objects in order to bypass serialization. We want raw bytes to be written to the database, not serialized byte strings. The DatabaseBatch::Write template method normally serializes its arguments, but because DataStream has a Serialize method that does concatenation instead of serialization, it can be used to bypass serialization.\"\r\n\r\nI was very surprised that this worked and it took me a while to figure out what was happening. I do think it would probably be more straightforward to call the private `DatabaseBatch::WriteKey` method instead of `DatabaseBatch::Write` which is why I added the friend class in my earlier suggestion. But I guess this approach should be ok as long it is explained.\r\n\r\nIt does seem pretty crazy to me that DataStream has a Serialize method that concatenates instead of serializing, and can't be unserialized. But I guess it is handy in this situation and maybe others.",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-05-31T21:07:26Z",
      "diff_hunk" : "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212315030",
      "id" : 1212315030,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IQnWW",
      "original_commit_id" : "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "original_line" : 37,
      "original_position" : 32,
      "original_start_line" : 33,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1454166240,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212315030/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-05-31T21:12:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212315030",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212664168"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212664168"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is the same not true for span itself? The only reason it doesn't work is that it is missing a `std::byte` specialization?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/3a83d4417b35cb0173286b6da97315be861901bc/src/serialize.h#L202-L206",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-06-01T06:44:52Z",
      "diff_hunk" : "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212664168",
      "id" : 1212664168,
      "in_reply_to_id" : 1212315030,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IR8lo",
      "original_commit_id" : "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "original_line" : 37,
      "original_position" : 32,
      "original_start_line" : 33,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1454699609,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212664168/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-06-01T06:44:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212664168",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212665991"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212665991"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            DataStream value;\r\n```\r\n\r\nnit (feel free to ignore)",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-06-01T06:46:46Z",
      "diff_hunk" : "@@ -78,5 +127,90 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+static std::vector<std::unique_ptr<WalletDatabase>> TestDatabases(const fs::path& path_root)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+    return dbs;\n+}\n+\n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    // Test each supported db\n+    for (const auto& database : TestDatabases(m_path_root)) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"\", \"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\n+\n+        // Write elements to it\n+        std::unique_ptr<DatabaseBatch> handler = database->MakeBatch();\n+        for (unsigned int i = 0; i < 10; i++) {\n+            for (const auto& prefix : prefixes) {\n+                BOOST_CHECK(handler->Write(std::make_pair(prefix, i), i));\n+            }\n+        }\n+\n+        // Now read all the items by prefix and verify that each element gets parsed correctly\n+        for (const auto& prefix : prefixes) {\n+            DataStream s_prefix;\n+            s_prefix << prefix;\n+            std::unique_ptr<DatabaseCursor> cursor = handler->GetNewPrefixCursor(s_prefix);\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1212665991",
      "id" : 1212665991,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IR9CH",
      "original_commit_id" : "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "original_line" : 168,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1454702008,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212665991/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-01T06:46:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1212665991",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213206571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213206571"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Is the same not true for span itself? \r\n\r\nNo because `Span<char>` is fixed length and can be deserialized, while `DataStream` is variable length and can't be deserialized.\r\n\r\nReasons why I think it would be good to get rid of `DataStream::Serialize` method:\r\n\r\n- `DataStream` has no `Unserialize` method and no reasonable way of adding one that would be consistent with the existing `Serialize` implementation.\r\n- The `Serialize` method has surprising behavior. If `DataStream` was going to have a serialize method I would expect to behave same was as serialize methods as other variable length objects (strings, vectors, maps) and be prefixed with a size field and be deserializable into an empty object. I suggested adding a comment here because code using it was not working the way I expected it to, and it took me a while to figure out how it was working at all.\r\n- No need or use-case for this `Serialize` method. If we want a concatenation operator, `+=` should work perfectly well. `<<` is good to use for serialization and formatting, and should in principle be reversible with `>>`. Concatenation is a different thing.\r\n\r\nIf I remove `DataStream::Serialize` method in master there are only a few compilation errors, so I think I should be able to make a simple PR to clean things up",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-06-01T14:01:17Z",
      "diff_hunk" : "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213206571",
      "id" : 1213206571,
      "in_reply_to_id" : 1212315030,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IUBAr",
      "original_commit_id" : "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "original_line" : 37,
      "original_position" : 32,
      "original_start_line" : 33,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1455558115,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213206571/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-06-01T14:01:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213206571",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213277212"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213277212"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think @MarcoFalke's point was that `Span`s are serialized without length prefixes, so this function could just pass `key` and `value` directly to `DatabaseBatch::Write` rather than going through a `DataStream`, as long as there is a `Serialize` method for `Span<const std::byte>`. This seems like a more intuitive solution, so I've implemented that.",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-06-01T14:48:56Z",
      "diff_hunk" : "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213277212",
      "id" : 1213277212,
      "in_reply_to_id" : 1212315030,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IUSQc",
      "original_commit_id" : "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "original_line" : 37,
      "original_position" : 32,
      "original_start_line" : 33,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1455668741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213277212/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-06-01T14:48:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213277212",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213277344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213277344"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "61e118e6d4cf417786e792bceae9cefb6c0887fb",
      "created_at" : "2023-06-01T14:49:03Z",
      "diff_hunk" : "@@ -78,5 +127,90 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n     BOOST_CHECK(env_2_a == env_2_b);\n }\n \n+static std::vector<std::unique_ptr<WalletDatabase>> TestDatabases(const fs::path& path_root)\n+{\n+    std::vector<std::unique_ptr<WalletDatabase>> dbs;\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+#ifdef USE_BDB\n+    dbs.emplace_back(MakeBerkeleyDatabase(path_root / \"bdb\", options, status, error));\n+#endif\n+#ifdef USE_SQLITE\n+    dbs.emplace_back(MakeSQLiteDatabase(path_root / \"sqlite\", options, status, error));\n+#endif\n+    dbs.emplace_back(CreateMockableWalletDatabase());\n+    return dbs;\n+}\n+\n+BOOST_AUTO_TEST_CASE(db_cursor_prefix_range_test)\n+{\n+    // Test each supported db\n+    for (const auto& database : TestDatabases(m_path_root)) {\n+        BOOST_ASSERT(database);\n+\n+        std::vector<std::string> prefixes = {\"\", \"FIRST\", \"SECOND\", \"P\\xfe\\xff\", \"P\\xff\\x01\", \"\\xff\\xff\"};\n+\n+        // Write elements to it\n+        std::unique_ptr<DatabaseBatch> handler = database->MakeBatch();\n+        for (unsigned int i = 0; i < 10; i++) {\n+            for (const auto& prefix : prefixes) {\n+                BOOST_CHECK(handler->Write(std::make_pair(prefix, i), i));\n+            }\n+        }\n+\n+        // Now read all the items by prefix and verify that each element gets parsed correctly\n+        for (const auto& prefix : prefixes) {\n+            DataStream s_prefix;\n+            s_prefix << prefix;\n+            std::unique_ptr<DatabaseCursor> cursor = handler->GetNewPrefixCursor(s_prefix);\n+            DataStream key;\n+            CDataStream value(SER_DISK, CLIENT_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213277344",
      "id" : 1213277344,
      "in_reply_to_id" : 1212665991,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IUSSg",
      "original_commit_id" : "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "original_line" : 168,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1455668976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213277344/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-01T14:49:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213277344",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213432081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213432081"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oops, I guess I was objecting to a point Marco wasn't making. But I think I would still like to avoid overloading Serialize for std::byte spans. The whole point of std::byte is that it's supposed to be a very safe type which requires you to be deliberate and explicit about conversions. So I'm not sure it would be great to serialize std::byte spans (or types which can be converted to byte spans) as raw bytes without requiring a more explicit cast.\r\n\r\nMaybe it would make sense to change serialize.h in the future, but I think it would be best to leave it alone in this PR. Would suggest reverting serialize.h and just doing:\r\n\r\n```diff\r\n--- a/src/wallet/test/db_tests.cpp\r\n+++ b/src/wallet/test/db_tests.cpp\r\n@@ -30,12 +30,6 @@ inline std::ostream& operator<<(std::ostream& os, const std::pair<const Serializ\r\n \r\n namespace wallet {\r\n \r\n-static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\r\n-                       bool overwrite = true)\r\n-{\r\n-    return batch.Write(key, value, overwrite);\r\n-}\r\n-\r\n static Span<const std::byte> StringBytes(std::string_view str)\r\n {\r\n     return AsBytes<const char>({str.data(), str.size()});\r\n@@ -203,7 +197,7 @@ BOOST_AUTO_TEST_CASE(db_cursor_prefix_byte_test)\r\n     for (const auto& database : TestDatabases(m_path_root)) {\r\n         std::unique_ptr<DatabaseBatch> batch = database->MakeBatch();\r\n         for (const auto& [k, v] : {e, p, ps, f, fs, ff, ffs}) {\r\n-            WriteBytes(*batch, k, v);\r\n+            batch->Write(MakeUCharSpan(k), MakeUCharSpan(v));\r\n         }\r\n         CheckPrefix(*batch, StringBytes(\"\"), {e, p, ps, f, fs, ff, ffs});\r\n         CheckPrefix(*batch, StringBytes(\"prefix\"), {p, ps});\r\n\r\n```",
      "commit_id" : "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "created_at" : "2023-06-01T16:51:43Z",
      "diff_hunk" : "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213432081",
      "id" : 1213432081,
      "in_reply_to_id" : 1212315030,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IU4ER",
      "original_commit_id" : "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "original_line" : 37,
      "original_position" : 32,
      "original_start_line" : 33,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1455917373,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213432081/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-06-01T16:51:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213432081",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213449316"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213449316"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point, done as suggested.",
      "commit_id" : "ba616b932cb9e9adb7eb9f1826caa62ce422a22d",
      "created_at" : "2023-06-01T17:09:22Z",
      "diff_hunk" : "@@ -6,13 +6,62 @@\n \n #include <test/util/setup_common.h>\n #include <util/fs.h>\n+#include <util/translation.h>\n+#ifdef USE_BDB\n #include <wallet/bdb.h>\n+#endif\n+#ifdef USE_SQLITE\n+#include <wallet/sqlite.h>\n+#endif\n+#include <wallet/test/util.h>\n+#include <wallet/walletutil.h> // for WALLET_FLAG_DESCRIPTORS\n \n #include <fstream>\n #include <memory>\n #include <string>\n \n+inline std::ostream& operator<<(std::ostream& os, const std::pair<const SerializeData, SerializeData>& kv)\n+{\n+    Span key{kv.first}, value{kv.second};\n+    os << \"(\\\"\" << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\", \\\"\"\n+       << std::string_view{reinterpret_cast<const char*>(key.data()), key.size()} << \"\\\")\";\n+    return os;\n+}\n+\n namespace wallet {\n+\n+static bool WriteBytes(DatabaseBatch& batch, Span<const std::byte> key, Span<const std::byte> value,\n+                       bool overwrite = true)\n+{\n+    return batch.Write(DataStream{key}, DataStream{value}, overwrite);\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27790#discussion_r1213449316",
      "id" : 1213449316,
      "in_reply_to_id" : 1212315030,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585IU8Rk",
      "original_commit_id" : "13476fe7bebdbf51e09821850b2c808c8ecf116a",
      "original_line" : 37,
      "original_position" : 32,
      "original_start_line" : 33,
      "path" : "src/wallet/test/db_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1455944306,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27790",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213449316/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-06-01T17:09:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213449316",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
