[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [theuni](https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1557129134) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27746](https://github.com/bitcoin/bitcoin/pull/27746) (Draft: rework validation logic for assumeutxo by sdaftuar)\n* [#27708](https://github.com/bitcoin/bitcoin/pull/27708) (Return EXIT_FAILURE on post-init fatal errors by furszy)\n* [#27607](https://github.com/bitcoin/bitcoin/pull/27607) (index: improve initialization and pruning violation check by furszy)\n* [#27596](https://github.com/bitcoin/bitcoin/pull/27596) (assumeutxo (2) by jamesob)\n* [#27576](https://github.com/bitcoin/bitcoin/pull/27576) (kernel: Remove args, settings, chainparams, chainparamsbase from kernel library by TheCharlatan)\n* [#26966](https://github.com/bitcoin/bitcoin/pull/26966) (index: blockfilter initial sync speedup, parallelize process by furszy)\n* [#26762](https://github.com/bitcoin/bitcoin/pull/26762) (refactor: Make `CCheckQueue` RAII-styled by hebasto)\n* [#10443](https://github.com/bitcoin/bitcoin/pull/10443) (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-05-21T11:20:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1556152994",
      "id" : 1556152994,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585cwQKi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1556152994/reactions"
      },
      "updated_at" : "2023-06-01T04:19:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1556152994",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "cc @theuni ",
      "created_at" : "2023-05-22T09:06:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1556839009",
      "id" : 1556839009,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585cy3ph",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1556839009/reactions"
      },
      "updated_at" : "2023-05-22T09:06:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1556839009",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Nice! Huge concept ACK. Haven't looked at the approach/code yet but will review.",
      "created_at" : "2023-05-22T12:24:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1557129134",
      "id" : 1557129134,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585cz-eu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1557129134/reactions"
      },
      "updated_at" : "2023-05-22T12:24:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1557129134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I spent some time reviving my clang-tidy transform plugin which is able to force bubble-ups of fatal errors and decorations of functions which may call them. I'm not suggesting that we use this approach (I mentioned at core-dev that it works but I find it pretty ugly), though it's useful to point out our current shutdown behavior.\r\n\r\nNote that the plugin is self-written, so it's not flawless. It does produce compiling code though, so I have a reasonable amount of confidence.\r\n\r\n[See here for the transform of the current master branch](https://github.com/theuni/bitcoin/commit/8054f8b204ae30c781768133da7e2b308e5b7ad1).\r\n\r\nA quick guide:\r\n- Any functions/assignments/declarations which may call shutdown is wrapped in a macro like `MAYBE_EXIT`, `EXIT_OR_IF`, etc.\r\n- Any function containing one of those gets a return type of ``MaybeEarlyExit<real_return_type>`` in order to bubble it up the call-stack.\r\n- This repeats recursively until the topmost functions have had their return type modified.\r\n\r\nThis provides an easy way to see whether or not a high-level function may call shutdown from some deeply nested function.\r\n\r\nIt also provides an easy way to see when calls to shutdown are made _without_ returning to the calling function.\r\n\r\nI haven't looked at the actual result yet at all. I suspect it will [point out several things for us to fix](https://github.com/bitcoin/bitcoin/pull/27636#discussion_r1200547867).",
      "created_at" : "2023-05-25T22:07:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1563561502",
      "id" : 1563561502,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585dMg4e",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1563561502/reactions"
      },
      "updated_at" : "2023-05-25T22:07:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1563561502",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It also provides an easy way to see when calls to shutdown are made without returning to the calling function.\r\n\r\nCan you explain this? Am I correct when guessing that any added EXIT* macro, and not the BUBBLE* macros are indicating a missing return?",
      "created_at" : "2023-05-26T05:56:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1563846514",
      "id" : 1563846514,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585dNmdy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1563846514/reactions"
      },
      "updated_at" : "2023-05-26T05:56:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1563846514",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > It also provides an easy way to see when calls to shutdown are made without returning to the calling function.\r\n> \r\n> Can you explain this? Am I correct when guessing that any added EXIT* macro, and not the BUBBLE* macros are indicating a missing return?\r\n\r\n@MarcoFalke Right, the `BUBBLE_UP` is kinda like a cast, it's not so interesting. The others introduce conditional returns to pass any errors back up the stack. So the problem cases are ones where we don't already have that behavior.\r\n\r\nThe main complication comes from the fact that the callstack might look like:\r\n```\r\nvoid foo()\r\n  int bar()\r\n    std::string baz()\r\n```\r\nWhere `baz()` returns a fatal error. The solution implemented here is to wrap everything in a variant:\r\n```\r\nMaybeEarlyExit<void> foo()\r\n  MaybeEarlyExit<int> bar()\r\n    MaybeEarlyExit<std::string> baz()\r\n```\r\nWhere: `MaybeEarlyExit : std::variant<T, FatalError, UserInterrupted>` (and those are simple enum classes)\r\n\r\nSo basically if the call resulted in an error, pass an error type back up immediately rather than a real return value. These [macros are defined here](https://github.com/theuni/bitcoin/commit/1fb1e7c632ccf5cd9e8a64cccfa490c688e3dbaa) and do that as necessary (you can largely think of them of different notations of try/catch/rethrow). In fact, this model forces that invariant: you get a return value or a fatal error but never both.\r\n\r\n---\r\n\r\n[BlockManager::WriteUndoDataForBlock](https://github.com/theuni/bitcoin/commit/8054f8b204ae30c781768133da7e2b308e5b7ad1#diff-114c2880ec1ff2c5293ac65ceda0637bf92c05745b74b58410585a549464a33fL718) is a good example of correct/incorrect:\r\n- FindUndoPos: potential error caught and passed back up (what callers do with it is a different question)\r\n- UndoWriteToDisk: aborts and returns immediately as needed\r\n- [FlushUndoFile](https://github.com/theuni/bitcoin/commit/8054f8b204ae30c781768133da7e2b308e5b7ad1#diff-114c2880ec1ff2c5293ac65ceda0637bf92c05745b74b58410585a549464a33fR738): this one is (I believe) an example of a missed return in master that could cause problems with changes like these. Not necessarily this one in particular, but it's clearly not alone. Edit: to be clear, the problem here is that `FlushUndoFile` may call `AbortNode`, but we don't react to that in `WriteUndoDataForBlock`.\r\n\r\nI'm not sure how to proceed. @ryanofsky mentioned maybe fixing them up as part of this shutdown callback effort?",
      "created_at" : "2023-05-30T15:12:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1568618485",
      "id" : 1568618485,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585dfzf1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1568618485/reactions"
      },
      "updated_at" : "2023-05-30T15:16:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1568618485",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Edit: to be clear, the problem here is that FlushUndoFile may call AbortNode, but we don't react to that in WriteUndoDataForBlock.\r\n\r\nDo we have to react there?  `AbortNode` starts a shutdown, and the shutdown is later checked in ABC: https://github.com/bitcoin/bitcoin/blob/71300489af362c3fed4736de6bffab4d758b6a84/src/validation.cpp#L3193\r\n\r\nSure, better annotations are better, but then why not use the existing `Result` class over the `MaybeEarlyExit` type?",
      "created_at" : "2023-05-30T15:49:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1568675044",
      "id" : 1568675044,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585dgBTk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1568675044/reactions"
      },
      "updated_at" : "2023-05-30T15:49:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1568675044",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-05-30T15:49:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1568675104",
      "id" : 1568675104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585dgBUg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1568675104/reactions"
      },
      "updated_at" : "2023-05-30T15:49:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1568675104",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > Edit: to be clear, the problem here is that FlushUndoFile may call AbortNode, but we don't react to that in WriteUndoDataForBlock.\r\n> \r\n> Do we have to react there? `AbortNode` starts a shutdown, and the shutdown is later checked in ABC:\r\n> \r\n> https://github.com/bitcoin/bitcoin/blob/71300489af362c3fed4736de6bffab4d758b6a84/src/validation.cpp#L3193\r\n> \r\n\r\nYes, looks like I picked this example too hastily. You're correct that this one is caught higher up.\r\n\r\n> Sure, better annotations are better, but then why not use the existing `Result` class over the `MaybeEarlyExit` type?\r\n\r\nAgain, I'm not suggesting that we use `MaybeEarlyExit`. Only suggesting analyzing the above transformation to see if there are true bugs hiding.",
      "created_at" : "2023-05-30T16:07:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1568701692",
      "id" : 1568701692,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585dgHz8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1568701692/reactions"
      },
      "updated_at" : "2023-05-30T16:07:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1568701692",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think I agree with Cory, and think it is a problem even if it is not a bug for `BlockManager::FlushBlockFile` and `BlockManager::FlushUndoFile` methods to call `Notifications::fatalError` without returning errors themselves. The fatal errors there seem different than other fatal errors, and the contradict the \"whatever function triggered the error should also return an error code or raise an exception\" documention.\r\n\r\nI would suggest making one (or both) of the following changes to this PR:\r\n\r\n1. Changing `FlushBlockFile` and `FlushUndoFile` to send a different \"flush failed\" notification rather than \"fatal error\". The node's KernelNotifications handler could treat this just like a fatal error to keep current behavior the same. Other applications using libbitcoinkernel might choose to handle the error in a different way for example by sending a notification or trying to free up disk space, rather than shutting down the service right away.\r\n2. Changing `FlushBlockFile` and `FlushUndoFile` to return `[[nodiscard]] bool`, and changing calls to these functions either bubble up the error or have comments about why the error is safe to ignore in that particular context.",
      "created_at" : "2023-06-01T17:30:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1572503569",
      "id" : 1572503569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585duoAR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572503569/reactions"
      },
      "updated_at" : "2023-06-01T17:31:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572503569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27711#discussion_r1213477846"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213477846"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"kernel: Pass reference of global shutdown requested atomic\" (978c05d58cea9f96f2713667663af35b43905701)\r\n\r\nI don't think I understand what the purpose of this option is at a high level. If I am writing an application which uses libbitcoinkernel, the thing I would want from the kernel library is a cancel() function I could call to cancel potentially slow operations. I don't want to have to mirror my application state to an `atomic<bool>` and be give the kernel read/write access to the bool as a more awkward way of cancelling.\r\n\r\nSo it seems to me the approach here is not very friendly to potential libbitcoinkernel applications, and is not even very friendly to our own application since it exposes the fRequestShutdown global more broadly and makes it harder to get rid of.\r\n\r\nI think a better approach would be to get rid of the `fRequestShutdown` global and replace it with a `CThreadInterrupt cancel` member in `kernel::Context`. I think this should not be too hard to do, and would still be compatible with most other changes in the PR.",
      "commit_id" : "a6a3c3245303d05917c04460e71790e33241f3b5",
      "created_at" : "2023-06-01T17:36:47Z",
      "diff_hunk" : "@@ -25,6 +26,7 @@ struct BlockManagerOpts {\n     bool fast_prune{false};\n     bool stop_after_block_import{DEFAULT_STOPAFTERBLOCKIMPORT};\n     const fs::path blocks_dir;\n+    std::atomic<bool>& shutdown_requested;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#discussion_r1213477846",
      "id" : 1213477846,
      "line" : 30,
      "node_id" : "PRRC_kwDOABII585IVDPW",
      "original_commit_id" : "978c05d58cea9f96f2713667663af35b43905701",
      "original_line" : 29,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/kernel/blockmanager_opts.h",
      "position" : 15,
      "pull_request_review_id" : 1455988697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213477846/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-01T18:15:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213477846",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">    Changing `FlushBlockFile` and `FlushUndoFile` to return `[[nodiscard]] bool`, and changing calls to these  functions either bubble up the error or have comments about why the error is safe to ignore in that particular context.\r\n\r\nI learned while working on the bubble-up stuff that a _type_ can be `[[nodiscard]]` too. [You can see an example of it here ](https://github.com/theuni/bitcoin/blob/clang-tidy-shutdown-rebase/src/early_exit.h#L45)to force bubble-up warnings.\r\n\r\nRather than returning `bool`, maybe return a custom `[[nodiscard]]` result type? That way if the caller wants to bubble-up the result, the use-checking bubbles up as well. Of course that starts breaking down as soon as something actually needs its return value, so maybe it's not useful. Just throwing it out there because imo it's neat :)",
      "created_at" : "2023-06-01T19:25:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1572651644",
      "id" : 1572651644,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585dvMJ8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572651644/reactions"
      },
      "updated_at" : "2023-06-01T19:25:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572651644",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27711#discussion_r1213631522"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213631522"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you for taking a look!\r\n\r\n> So it seems to me the approach here is not very friendly to potential libbitcoinkernel applications, and is not even very friendly to our own application since it exposes the fRequestShutdown global more broadly and makes it harder to get rid of.\r\n\r\nI was trying this out today on my proof of concept branch and got the same impression. It is unwieldy and the naming is bad.\r\n\r\n> I think a better approach would be to get rid of the fRequestShutdown global and replace it with a CThreadInterrupt cancel member in kernel::Context. I think this should not be too hard to do, and would still be compatible with most other changes in the PR.\r\n\r\nJust for clarity: This would imply passing a reference of the kernel context to the validation and blockstorage code? Giving the kernel ownership over this interrupt state seems a bit weird to me at first glance, since it is shared with all the other components that we have. Thinking of it as a pure execution interrupt, and not a kill signal makes this a bit more palatable though. ",
      "commit_id" : "a6a3c3245303d05917c04460e71790e33241f3b5",
      "created_at" : "2023-06-01T20:11:31Z",
      "diff_hunk" : "@@ -25,6 +26,7 @@ struct BlockManagerOpts {\n     bool fast_prune{false};\n     bool stop_after_block_import{DEFAULT_STOPAFTERBLOCKIMPORT};\n     const fs::path blocks_dir;\n+    std::atomic<bool>& shutdown_requested;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#discussion_r1213631522",
      "id" : 1213631522,
      "in_reply_to_id" : 1213477846,
      "line" : 30,
      "node_id" : "PRRC_kwDOABII585IVowi",
      "original_commit_id" : "978c05d58cea9f96f2713667663af35b43905701",
      "original_line" : 29,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/kernel/blockmanager_opts.h",
      "position" : 15,
      "pull_request_review_id" : 1456233246,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27711",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213631522/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-01T20:11:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1213631522",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Re https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1572503569\r\n\r\n> The node's KernelNotifications handler could treat this just like a fatal error to keep current behavior the same. Other applications using libbitcoinkernel might choose to handle the error in a different way for example by sending a notification or trying to free up disk space, rather than shutting down the service right away.\r\n\r\nIs there really a qualitative difference between the errors? Instead of adding multiple functions, it feels like a better approach here might be to encode some common error reasons into an enum and let the user then decide how to handle them.  I don't understand why these abort calls were ignored so far (the code was introduced [here](https://github.com/bitcoin/bitcoin/commit/ac94141af0c16161afa68de1c3720f254ae4e12c)).",
      "created_at" : "2023-06-01T21:19:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1572800909",
      "id" : 1572800909,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585dvwmN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572800909/reactions"
      },
      "updated_at" : "2023-06-01T21:19:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572800909",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Is there really a qualitative difference between the errors?\r\n\r\nI didn't dig into the actual errors, but the qualitative difference here seems to be that the other AbortNode errors actually need to be fatal and should try to shut down to prevent getting into a worse state. But an error flushing state in memory to disk does not need to be fatal, as long the state in memory is kept and can be saved later. There are lots of ways an application could handle a failed flush notification, and I think it would be better to avoid using fatal error callback for any notification that does not have to be fatal.\r\n\r\nThe choice of whether to use separate methods or enums is basically just aesthetic. And I didn't dig into whether these particular flush errors need to fatal or not. I think you can decide what to do here or whether to do anything at all. My reason for suggesting \"flushFailed\" as an alternative to \"nodiscard bool\" was that latter change might be more invasive and require changing more sensitive code.",
      "created_at" : "2023-06-01T21:50:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27711#issuecomment-1572835701",
      "id" : 1572835701,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27711",
      "node_id" : "IC_kwDOABII585dv5F1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572835701/reactions"
      },
      "updated_at" : "2023-06-01T21:50:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1572835701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
