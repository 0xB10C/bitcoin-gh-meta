[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22290 by glozow\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-04-29T05:26:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-828948454",
      "id" : 828948454,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyODk0ODQ1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-24T16:02:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828948454",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Treating every transaction in the package as each other's ancestor and descendant is a good, conservative heuristic to use, since it can never underestimate the true number of ancestors/descendants. If it's too limiting, we could potentially implement looser limits in future.",
      "created_at" : "2021-06-07T17:03:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-856107966",
      "id" : 856107966,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1NjEwNzk2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-07T17:03:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856107966",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r647068181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647068181"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In \"[mempool] extend CalculateMemPoolAncestors for packages\"\r\n\r\nFeels a bit wrong to me to return the same \"too many (ancestors|descendants) for tx %s [limit: %u]\" error message when we're basing that conclusion on a heuristic rather than a full evaluation.  Maybe return a slightly different string like \"too many *possible* (ancestors|descendants)...\" if `total_count > 1`.  ",
      "commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "created_at" : "2021-06-08T02:39:50Z",
      "diff_hunk" : "@@ -187,10 +201,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.\n+        if (stageit->GetSizeWithDescendants() + total_virtual_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;\n-        } else if (stageit->GetCountWithDescendants() + 1 > limitDescendantCount) {\n+        } else if (stageit->GetCountWithDescendants() + total_count > limitDescendantCount) {\n             errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantCount);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r647068181",
      "id" : 647068181,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzA2ODE4MQ==",
      "original_commit_id" : "7d0e9c1970ee14032a2be3ee283511f8c85904c5",
      "original_line" : 211,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 678037341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-08T08:40:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647068181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/61096?v=4",
         "events_url" : "https://api.github.com/users/harding/events{/privacy}",
         "followers_url" : "https://api.github.com/users/harding/followers",
         "following_url" : "https://api.github.com/users/harding/following{/other_user}",
         "gists_url" : "https://api.github.com/users/harding/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/harding",
         "id" : 61096,
         "login" : "harding",
         "node_id" : "MDQ6VXNlcjYxMDk2",
         "organizations_url" : "https://api.github.com/users/harding/orgs",
         "received_events_url" : "https://api.github.com/users/harding/received_events",
         "repos_url" : "https://api.github.com/users/harding/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/harding/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/harding/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/harding"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@harding thank you for the review!!!\r\n\r\n> However, the more the results returned by TMPA diverge from the results we'd get from submitting each transaction to our mempool individually, the more I think package validation should be using a different interface than individual transaction validation (e.g., a different parameter to TMPA or a different RPC altogether).\r\n\r\nI agree, and they will likely continue to diverge if we add `bypass_timelocks` and such... Perhaps we can have a regtest-only rawpackage RPC with a `test_accept` parameter (in my opinion users should never have to interact with packages)? And testmempoolaccept can be for users / L2 testing?",
      "created_at" : "2021-06-08T09:07:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-856597823",
      "id" : 856597823,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1NjU5NzgyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-08T09:07:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856597823",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@glozow \r\n\r\n> Perhaps we can have a regtest-only rawpackage RPC with a `test_accept` parameter (in my opinion users should never have to interact with packages)?\r\n\r\nThere's certainly no need for users to interact with packages before there's a reliable package relay mechanism, so starting with regtest-only seems like a good idea to me.  If someone later comes along with a reason it should be user-facing, they can put in the (probably trivial) amount of work to make the RPC available on mainnet and the other networks.\r\n\r\n>  And testmempoolaccept can be for users / L2 testing?\r\n\r\nFor users, yes.  I don't think anyone is using it today for L2 testing and I'm not sure it's really well suited to that---testmempoolaccept tells you whether your transaction would be accepted into the current mempool, but L2 testers really want to know whether the transaction will be accepted into a future mempool; a failure now is a reliable harbinger of failure later, but a success now doesn't guarantee success in the future (even ignoring that relay policy can be made more restrictive).",
      "created_at" : "2021-06-08T18:13:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-856986331",
      "id" : 856986331,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1Njk4NjMzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-08T18:13:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856986331",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/61096?v=4",
         "events_url" : "https://api.github.com/users/harding/events{/privacy}",
         "followers_url" : "https://api.github.com/users/harding/followers",
         "following_url" : "https://api.github.com/users/harding/following{/other_user}",
         "gists_url" : "https://api.github.com/users/harding/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/harding",
         "id" : 61096,
         "login" : "harding",
         "node_id" : "MDQ6VXNlcjYxMDk2",
         "organizations_url" : "https://api.github.com/users/harding/orgs",
         "received_events_url" : "https://api.github.com/users/harding/received_events",
         "repos_url" : "https://api.github.com/users/harding/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/harding/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/harding/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/harding"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648467544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648467544"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, double negations are real brain teasers.",
      "commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "created_at" : "2021-06-09T16:13:53Z",
      "diff_hunk" : "@@ -472,8 +472,10 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n-        /** Disable BIP125 RBFing; disallow all conflicts with mempool transactions. */\n-        const bool disallow_mempool_conflicts;\n+        /** Whether we allow transactions to replace mempool transactions by BIP125 rules. If false,\n+         * any transaction spending the same inputs as a transaction in the mempool is considered\n+         * a conflict. */\n+        const bool m_allow_bip125_replacement{true};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648467544",
      "id" : 648467544,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQ2NzU0NA==",
      "original_commit_id" : "5496b25b6a75f3c4cd65e298f841c7e8b316046f",
      "original_line" : 478,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 679872945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-09T23:26:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648467544",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648471295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648471295"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Optionally, in the same vein as @harding mentioned in his review:\r\n```suggestion\r\n                        errString = strprintf(\"potentially too many unconfirmed parents [limit: %u]\", limitAncestorCount);\r\n```",
      "commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "created_at" : "2021-06-09T16:18:40Z",
      "diff_hunk" : "@@ -151,33 +152,46 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648471295",
      "id" : 648471295,
      "line" : 180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQ3MTI5NQ==",
      "original_commit_id" : "7d0e9c1970ee14032a2be3ee283511f8c85904c5",
      "original_line" : 180,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 50,
      "pull_request_review_id" : 679872945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-09T23:26:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648471295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> For users, yes. I don't think anyone is using it today for L2 testing and I'm not sure it's really well suited to that---testmempoolaccept tells you whether your transaction would be accepted into the current mempool, but L2 testers really want to know whether the transaction will be accepted into a future mempool; a failure now is a reliable harbinger of failure later, but a success now doesn't guarantee success in the future (even ignoring that relay policy can be made more restrictive).\r\n\r\nI'm not convinced this is true. It is impossible for L2 testers to know whether the package would be accepted into a future mempool as fee levels could theoretically be anything up to infinite. So there is nothing to test. The L2 testing would be for checking that the package would be accepted at the current fee levels (e.g. possibly just before broadcasting the package or for general testing at current fee levels) ",
      "created_at" : "2021-06-09T16:21:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-857845044",
      "id" : 857845044,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1Nzg0NTA0NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-09T16:23:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857845044",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648484989"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648484989"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is it fair to assume that all instances of `SIZE` now refer to virtualsize? Otherwise, this should perhaps be explicitly \"vsize\".",
      "commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "created_at" : "2021-06-09T16:36:17Z",
      "diff_hunk" : "@@ -14,6 +15,7 @@\n static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n /** Default maximum total virtual size of transactions in a package in KvB. */\n static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+static_assert(MAX_PACKAGE_SIZE * 4 * 1000 >= MAX_STANDARD_TX_WEIGHT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648484989",
      "id" : 648484989,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQ4NDk4OQ==",
      "original_commit_id" : "0feb2a65e4ca55f9b469c31d3d7d94287328c5f9",
      "original_line" : 18,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 679872945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-09T23:26:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648484989",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073219"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649073219"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added a \"possibly\" to the beginning of the error strings, gated on `total_count > 1`, so that the existing tests that assert expected error messages don't need to be changed.",
      "commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "created_at" : "2021-06-10T10:53:44Z",
      "diff_hunk" : "@@ -187,10 +201,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.\n+        if (stageit->GetSizeWithDescendants() + total_virtual_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;\n-        } else if (stageit->GetCountWithDescendants() + 1 > limitDescendantCount) {\n+        } else if (stageit->GetCountWithDescendants() + total_count > limitDescendantCount) {\n             errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantCount);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073219",
      "id" : 649073219,
      "in_reply_to_id" : 647068181,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTA3MzIxOQ==",
      "original_commit_id" : "7d0e9c1970ee14032a2be3ee283511f8c85904c5",
      "original_line" : 211,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 680634416,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-10T10:53:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649073219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649073470"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done, see https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073219",
      "commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "created_at" : "2021-06-10T10:54:06Z",
      "diff_hunk" : "@@ -151,33 +152,46 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073470",
      "id" : 649073470,
      "in_reply_to_id" : 648471295,
      "line" : 180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTA3MzQ3MA==",
      "original_commit_id" : "7d0e9c1970ee14032a2be3ee283511f8c85904c5",
      "original_line" : 180,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 50,
      "pull_request_review_id" : 680634737,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-10T10:54:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649073470",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Incorporated doc suggestions from #22084 (to make it mergeable) and some review comments here, working on adding more edge casey tests that were discussed in PR Review Club last night.",
      "created_at" : "2021-06-10T10:55:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-858522666",
      "id" : 858522666,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1ODUyMjY2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-10T10:55:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/858522666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649848551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649848551"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You may find #22097 of interest :)",
      "commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "created_at" : "2021-06-11T09:52:37Z",
      "diff_hunk" : "@@ -14,6 +15,7 @@\n static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n /** Default maximum total virtual size of transactions in a package in KvB. */\n static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+static_assert(MAX_PACKAGE_SIZE * 4 * 1000 >= MAX_STANDARD_TX_WEIGHT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649848551",
      "id" : 649848551,
      "in_reply_to_id" : 648484989,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTg0ODU1MQ==",
      "original_commit_id" : "0feb2a65e4ca55f9b469c31d3d7d94287328c5f9",
      "original_line" : 18,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 681656247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-11T09:52:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649848551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579050"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579050"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you think about `CalculateMemPoolAncestorsSet` to disambiguate clearly from `CalculateMemPoolAncestors` ? Also add a param comment for `entries` (and the fact they might not been inter-dependent) ?",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-13T21:21:41Z",
      "diff_hunk" : "@@ -681,6 +681,29 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in,out]   setAncestors            Set of in-mempool ancestors. Updated to include\n+     *                                          any new ancestors found.\n+     * @param[in]       limitAncestorCount      Max number of txns including ancestors.\n+     * @param[in]       limitAncestorSize       Max virtual size including ancestors.\n+     * @param[in]       limitDescendantCount    Max number of txns including descendants.\n+     * @param[in]       limitDescendantSize     Max virtual size including descendants.\n+     * @param[out]      errString               Populated with error reason if a limit is hit.\n+     * @param[in]       fSearchForParents       Whether to search for entries' in-mempool parents.\n+     *                                          Must be true if any entries are not already in mempool.\n+     */\n+    bool CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579050",
      "id" : 650579050,
      "line" : 703,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU3OTA1MA==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 703,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : 23,
      "pull_request_review_id" : 682446051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-13T23:10:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579050",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579493"
         }
      },
      "author_association" : "MEMBER",
      "body" : "by \"inclusive\" do you mean \"for package limits evaluation, assume that the union of ancestors/descendants of each transaction is an ancestor/descendant of every transaction\" or something else?",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-13T21:26:41Z",
      "diff_hunk" : "@@ -681,6 +681,29 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579493",
      "id" : 650579493,
      "line" : 685,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU3OTQ5Mw==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 685,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : 5,
      "pull_request_review_id" : 682446051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-13T23:10:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579493",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do you mean `PreChecks()` and under?",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-13T21:30:36Z",
      "diff_hunk" : "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579921",
      "id" : 650579921,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU3OTkyMQ==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 1118,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 682446051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-13T23:10:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579949"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe `package_ancestors` to dissociate?",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-13T21:30:52Z",
      "diff_hunk" : "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().\n+    {\n+        std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> _entries;\n+        std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(_entries),\n+                       [](const auto& ws) { return std::cref(*ws.m_entry); });\n+        // We won't use the set of ancestors returned for calling Finalize().\n+        CTxMemPool::setEntries _ancestors;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579949",
      "id" : 650579949,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU3OTk0OQ==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 1124,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 682446051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-13T23:10:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650579949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650580150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650580150"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Reject reason could be `package-ancestors/descendants limits`? I think \"too-long\" masks that it can be also a size issue.",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-13T21:32:41Z",
      "diff_hunk" : "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().\n+    {\n+        std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> _entries;\n+        std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(_entries),\n+                       [](const auto& ws) { return std::cref(*ws.m_entry); });\n+        // We won't use the set of ancestors returned for calling Finalize().\n+        CTxMemPool::setEntries _ancestors;\n+        std::string err_string;\n+        if (!m_pool.CalculateMemPoolAncestors(_entries,\n+                                              _ancestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n+                                              m_limit_descendant_size, err_string, /* fSearchForParents */ true)) {\n+            // All transactions must have individually passed mempool ancestor and descendant limits\n+            // inside of PreChecks(). Figuring out which transaction to attribute this failure to may\n+            // be implementation-dependent, and it's likely to be multiple transactions because we\n+            // evaluated all of them together. Return the same failure for all transactions.\n+            for (auto& ws : workspaces) {\n+                ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", err_string);\n+                results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            }\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-long-mempool-chain\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650580150",
      "id" : 650580150,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU4MDE1MA==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 1137,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 682446051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-13T23:10:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650580150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I agree, and they will likely continue to diverge if we add bypass_timelocks and such... Perhaps we can have a regtest-only rawpackage RPC with a test_accept parameter (in my opinion users should never have to interact with packages)? And testmempoolaccept can be for users / L2 testing?\r\n\r\nSounds a good idea to introduce a `rawpackage` test-only RPC. I believe switching it to mainet is going to be function of which p2p package version we decide on (either sender-initiated or relay-initiated). W.r.t to `bypass_timelocks`/`bypass_feerate` I think that's ultimately different from the package interface as you can be interested by the mempool acceptance of individual transactions, so we can leave them on `testmempoolaccept` for now ?\r\n\r\n@michaelfolkson \r\n\r\n> I'm not convinced this is true. It is impossible for L2 testers to know whether the package would be accepted into a future mempool as fee levels could theoretically be anything up to infinite. So there is nothing to test. The L2 testing would be for checking that the package would be accepted at the current fee levels (e.g. possibly just before broadcasting the package or for general testing at current fee levels)\r\n\r\nYour point is valid, but note in #20833 we had the discussion to introduce `bypass_feerate` to remedy this pitfall (somewhere in the GH comments, yeah I know it's messy...)",
      "created_at" : "2021-06-13T23:15:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-860283889",
      "id" : 860283889,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDI4Mzg4OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-13T23:28:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860283889",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650994842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650994842"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I should clarify this comment - I mean when we call `addUnchecked` in real package mempool accept, we'll need to recalculate the ancestors for each one as input",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-14T14:23:44Z",
      "diff_hunk" : "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650994842",
      "id" : 650994842,
      "in_reply_to_id" : 650579921,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDk5NDg0Mg==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 1118,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 682978497,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-14T14:23:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650994842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651017757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651017757"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's documenting the way we apply the limits, e.g. if `ancestorcount` is 25, it means the total number of ancestors, including itself, must be within 25.",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-14T14:49:04Z",
      "diff_hunk" : "@@ -681,6 +681,29 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651017757",
      "id" : 651017757,
      "in_reply_to_id" : 650579493,
      "line" : 685,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTAxNzc1Nw==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 685,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : 5,
      "pull_request_review_id" : 683009636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-14T14:49:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651017757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651072189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651072189"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-14T15:52:21Z",
      "diff_hunk" : "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().\n+    {\n+        std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> _entries;\n+        std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(_entries),\n+                       [](const auto& ws) { return std::cref(*ws.m_entry); });\n+        // We won't use the set of ancestors returned for calling Finalize().\n+        CTxMemPool::setEntries _ancestors;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651072189",
      "id" : 651072189,
      "in_reply_to_id" : 650579949,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTA3MjE4OQ==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 1124,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 683082102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-14T15:52:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651072189",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651072541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651072541"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "changed the tx error to `exceeds-ancestor-descendant-limits` and the package error `package-mempool-limits`",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-14T15:52:47Z",
      "diff_hunk" : "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().\n+    {\n+        std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> _entries;\n+        std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(_entries),\n+                       [](const auto& ws) { return std::cref(*ws.m_entry); });\n+        // We won't use the set of ancestors returned for calling Finalize().\n+        CTxMemPool::setEntries _ancestors;\n+        std::string err_string;\n+        if (!m_pool.CalculateMemPoolAncestors(_entries,\n+                                              _ancestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n+                                              m_limit_descendant_size, err_string, /* fSearchForParents */ true)) {\n+            // All transactions must have individually passed mempool ancestor and descendant limits\n+            // inside of PreChecks(). Figuring out which transaction to attribute this failure to may\n+            // be implementation-dependent, and it's likely to be multiple transactions because we\n+            // evaluated all of them together. Return the same failure for all transactions.\n+            for (auto& ws : workspaces) {\n+                ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", err_string);\n+                results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            }\n+            package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-long-mempool-chain\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651072541",
      "id" : 651072541,
      "in_reply_to_id" : 650580150,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTA3MjU0MQ==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 1137,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 683082585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-14T15:52:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651072541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651073468"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651073468"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added doxygen comment for `entries` param, but my intention was to overload the `CalculateMemPoolAncestors` function (the fact that the first argument is a vector instead of a single entry should suffice?)",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-14T15:53:53Z",
      "diff_hunk" : "@@ -681,6 +681,29 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in,out]   setAncestors            Set of in-mempool ancestors. Updated to include\n+     *                                          any new ancestors found.\n+     * @param[in]       limitAncestorCount      Max number of txns including ancestors.\n+     * @param[in]       limitAncestorSize       Max virtual size including ancestors.\n+     * @param[in]       limitDescendantCount    Max number of txns including descendants.\n+     * @param[in]       limitDescendantSize     Max virtual size including descendants.\n+     * @param[out]      errString               Populated with error reason if a limit is hit.\n+     * @param[in]       fSearchForParents       Whether to search for entries' in-mempool parents.\n+     *                                          Must be true if any entries are not already in mempool.\n+     */\n+    bool CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651073468",
      "id" : 651073468,
      "in_reply_to_id" : 650579050,
      "line" : 703,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTA3MzQ2OA==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 703,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : 23,
      "pull_request_review_id" : 683083800,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-14T15:53:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651073468",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651073759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651073759"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "fixed",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-06-14T15:54:14Z",
      "diff_hunk" : "@@ -1114,6 +1114,31 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Limit the scope of _entries and _ancestors. We should calculate ancestors for each\n+    // transaction individually when we call Finalize().",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651073759",
      "id" : 651073759,
      "in_reply_to_id" : 650579921,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTA3Mzc1OQ==",
      "original_commit_id" : "1061cf457b021ccf24f394dbb5cc00af575598ba",
      "original_line" : 1118,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 683084170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-14T15:54:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651073759",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@ariard thanks for the review, I'm very much looking forward to the IRC discussions to better understand what packages we want to support. In your domino bumping example, I'm not entirely sure why we couldn't use several packages of size 2 to bump them?\r\n\r\n> MAX_PACKAGE_COUNT to 2 transactions for the initial deployement of package-relay\r\n\r\nWe're still a few PRs from package accept with submission to mempool - will put some things up soon - and then a few PRs from package relay but sounds good to me. I personally believe that the P2P requirements can be more stringent than individual transaction mempool policy - I also think it's fine for peers to negotiate their maximum package size they're willing to receive in a `SENDPACKAGES` message. Starting with a default of 2 sounds good to me. However, I don't think package ancestor/descendant limits should be explicitly less than individual ones within a node, because I think it could give an adversary the chance to prevent a package from being accepted by submitting a very large descendant to the top transaction.\r\n\r\n> implementing \"intersection-dedup\" evaluation, where duplicated ancestors/descendants aren't accounted for package limits ?\r\n\r\nI'm not sure I understand, could you elaborate? The `setAncestors` used in `CalculateMemPoolAncestors()` is not duplicated between transactions. I am working on a branch to \"trim\" packages when it overlaps with mempool (i.e. one or more transactions are already in the mempool), and will add test cases for ancestor/descendant limits with it.\r\n\r\n(Recent push addresses inline review comments)",
      "created_at" : "2021-06-14T17:08:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-860846503",
      "id" : 860846503,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDg0NjUwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-14T17:08:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860846503",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> If you already have {A,B,C,D} in the mempools, and try to broadcast {E,F,G,H,I,J,K,L) in a single package it's going to be rejected (4 * 8 > DEFAULT_ANCESTOR_LIMITS), though if you broadcast components by pair, it will be accepted.\r\n\r\n@ariard: I don't understand the reasoning that leads to \"4 * 8\" here.",
      "created_at" : "2021-06-16T18:34:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-862616983",
      "id" : 862616983,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MjYxNjk4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-16T18:34:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862616983",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Bump, this is the next step for package validation logic.\r\n\r\nThe heuristic used in this implementation still results in an exact calculation of in-mempool and in-package ancestors for packages of parent + child (the MVP/basic package use case as discussed in the IRC meetings). It can be slightly more restrictive in scenarios such as batched fee bumping, but is extensible if we want to implement something more granular in the future.",
      "created_at" : "2021-07-06T16:49:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-874921861",
      "id" : 874921861,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21800",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3NDkyMTg2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-06T16:49:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/874921861",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665238840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665238840"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This generic helper function is used for more than mempool acceptance (eg the `getmempoolancestors` RPC calls `CalculateMempoolAncestors(const CTxMemPoolEntry& entry, ...)`, which calls `CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries, ...)`. I suggest you remove the reference to \"acceptance to mempool\" here.",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T10:17:29Z",
      "diff_hunk" : "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665238840",
      "id" : 665238840,
      "line" : 689,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTIzODg0MA==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 689,
      "original_position" : 9,
      "original_start_line" : 688,
      "path" : "src/txmempool.h",
      "position" : 9,
      "pull_request_review_id" : 700830368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : 688,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-07T11:21:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665238840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665239317"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665239317"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't understand the \"if there are multiple\" part of this sentence. This function can be called with a single tx, and in that case the tx must not already be in the mempool.",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T10:18:12Z",
      "diff_hunk" : "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are\n+     *                                          multiple, they must not already be in the mempool.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665239317",
      "id" : 665239317,
      "line" : 690,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTIzOTMxNw==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 690,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : 10,
      "pull_request_review_id" : 700830368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T11:21:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665239317",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665240182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665240182"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this is actually just an out param. The caller shouldn't be calling this function with `setAncestors` already populated. Perhaps an assert should be added to the top of the function that `setAncestors` is empty?",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T10:19:32Z",
      "diff_hunk" : "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are\n+     *                                          multiple, they must not already be in the mempool.\n+     *                                          They need not be direct ancestors/descendants of\n+     *                                          each other, though they will be treated as such.\n+     * @param[in,out]   setAncestors            Set of in-mempool ancestors. Updated to include\n+     *                                          any new ancestors found.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665240182",
      "id" : 665240182,
      "line" : 694,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI0MDE4Mg==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 694,
      "original_position" : 14,
      "original_start_line" : 693,
      "path" : "src/txmempool.h",
      "position" : 14,
      "pull_request_review_id" : 700830368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : 693,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-07T11:21:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665240182",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665258130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665258130"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There's a silent merge conflict with master: `CTransaction` is no longer imported into rpc_packages.py (since 2ce7b47958c4a10ba20dc86c011d71cda4b070a5).\r\n\r\nThis should fix it:\r\n\r\n```diff\r\ndiff --git a/test/functional/rpc_packages.py b/test/functional/rpc_packages.py\r\nindex 447c3cb08f..a084d0d9cb 100755\r\n--- a/test/functional/rpc_packages.py\r\n+++ b/test/functional/rpc_packages.py\r\n@@ -12,6 +12,7 @@ from test_framework.test_framework import BitcoinTestFramework\r\n from test_framework.messages import (\r\n     BIP125_SEQUENCE_NUMBER,\r\n     COIN,\r\n+    CTransaction,\r\n     CTxInWitness,\r\n     tx_from_hex,\r\n )\r\n@@ -256,7 +257,7 @@ class RPCPackagesTest(BitcoinTestFramework):\r\n         parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\r\n         parent_tx = CTransaction()\r\n         assert parent_signed[\"complete\"]\r\n-        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\r\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\r\n         parent_txid = parent_tx.rehash()\r\n         node.sendrawtransaction(parent_signed[\"hex\"])\r\n \r\n@@ -278,7 +279,7 @@ class RPCPackagesTest(BitcoinTestFramework):\r\n         value = parent_value - Decimal(\"0.0001\")\r\n         rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\r\n         tx_child_b = CTransaction() # M2b\r\n-        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\r\n+        tx_child_b = tx_from_hex(rawtx_b)\r\n         tx_child_b.wit.vtxinwit = [CTxInWitness()]\r\n         tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\r\n         tx_child_b_hex = tx_child_b.serialize().hex()\r\n```",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T10:47:29Z",
      "diff_hunk" : "@@ -187,6 +190,178 @@ def test_chain(self):\n         # Clean up by clearing the mempool\n         node.generate(1)\n \n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665258130",
      "id" : 665258130,
      "line" : 263,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI1ODEzMA==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 263,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 84,
      "pull_request_review_id" : 700830368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T11:21:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665258130",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665264021"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665264021"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this (and other instances) would need to be:\r\n\r\n```suggestion\r\n                                  total_count > 1 ? \"possibly \" : \"\",\r\n```\r\n\r\notherwise the log would be `possiblyexceeds descendant ...`",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T10:57:00Z",
      "diff_hunk" : "@@ -187,14 +202,22 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n-            errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.\n+        if (stageit->GetSizeWithDescendants() + total_virtual_size > limitDescendantSize) {\n+            errString = strprintf(\"%sexceeds descendant size limit for tx %s [limit: %u]\",\n+                                  total_count > 1 ? \"possibly\" : \"\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665264021",
      "id" : 665264021,
      "line" : 210,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI2NDAyMQ==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 210,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 85,
      "pull_request_review_id" : 700830368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T11:21:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665264021",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665268971"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665268971"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What happened to the `Const` here? This used to be `GetMemPoolParentsConst()`.",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T11:05:06Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);\n+        txiter it = mapTx.iterator_to(entries[0].get());\n+        staged_ancestors = it->GetMemPoolParents();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665268971",
      "id" : 665268971,
      "line" : 192,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI2ODk3MQ==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 192,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 66,
      "pull_request_review_id" : 700830368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T11:21:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665268971",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665272611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665272611"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think that `CalculateMemPoolAncestors()` was already doing too much, and this adds just a little bit more complication. Instead of overloading CMPA and having CMPA(tx) call CMPA(package), what do you think about the splitting it into two parts:\r\n\r\n- calculate parents (two different functions - one for a single transaction which may have fSearchForParents=false, and one for a package)\r\n- check package limits (everything from `while (!staged_ancestors.empty())` downwards, which is the same function for an individual transaction and a package if parametrized correctly)\r\n\r\nand then roughly:\r\n\r\n```\r\nCMPA(tx) {\r\n    set_ancestors = CalculateParents(tx);\r\n    CheckPackageLimits(set_ancestors);\r\n}\r\n\r\nCMPA(package) {\r\n    set_ancestors = CalculateParents(package);\r\n    CheckPackageLimits(set_ancestors);\r\n}\r\n```",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T11:11:03Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665272611",
      "id" : 665272611,
      "line" : 155,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI3MjYxMQ==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 155,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 13,
      "pull_request_review_id" : 700830368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T11:21:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665272611",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665275481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665275481"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you think about not making these const, and then decrementing from them and checking that we don't go below zero? That would avoid the need for the local variables and make the logic for individual txs and packages more similar.",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T11:15:50Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665275481",
      "id" : 665275481,
      "line" : 160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTI3NTQ4MQ==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 160,
      "original_position" : 18,
      "original_start_line" : 157,
      "path" : "src/txmempool.cpp",
      "position" : 18,
      "pull_request_review_id" : 700830368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : 157,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-07T11:21:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665275481",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665671316"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665671316"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: use function signatures with spans when passing a const vec, removes the need to allocate for passing a single tx (can span without allocating from pointer).",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T20:05:17Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665671316",
      "id" : 665671316,
      "in_reply_to_id" : 665272611,
      "line" : 155,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3MTMxNg==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 155,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 13,
      "pull_request_review_id" : 701401155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T20:05:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665671316",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665674868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665674868"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it is clearer to make these as const personally, decrement until 0 is always confusing to me (is it at 0 or below zero that the error comes in? These are currently uint64_t, so we'd also need to either convert to int64_t or detect wraparound...).",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T20:11:00Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665674868",
      "id" : 665674868,
      "in_reply_to_id" : 665275481,
      "line" : 160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3NDg2OA==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 160,
      "original_position" : 18,
      "original_start_line" : 157,
      "path" : "src/txmempool.cpp",
      "position" : 18,
      "pull_request_review_id" : 701405814,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : 157,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-07T20:11:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665674868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665676930"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665676930"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Never? Why is this new constraint present? I thought it's safe to use as long as we aren't searching for parents?",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T20:14:31Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665676930",
      "id" : 665676930,
      "line" : 188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3NjkzMA==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 188,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 62,
      "pull_request_review_id" : 701408475,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T20:14:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665676930",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665677347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665677347"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this assert is pretty scary? why do we not permit >1?",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T20:15:14Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665677347",
      "id" : 665677347,
      "line" : 190,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3NzM0Nw==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 190,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 64,
      "pull_request_review_id" : 701408997,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T20:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665677347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665677948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665677948"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: @jnewbery's feedback to split, I think that might be right if fsearchforparents should never be used as false with a package? the asserts confuse me...",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T20:16:18Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665677948",
      "id" : 665677948,
      "in_reply_to_id" : 665272611,
      "line" : 155,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3Nzk0OA==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 155,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 13,
      "pull_request_review_id" : 701409789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T20:16:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665677948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665678189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665678189"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What if it's a package of size 1? Is this code safe? Or only if it's called in non package contexts?",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T20:16:42Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665678189",
      "id" : 665678189,
      "in_reply_to_id" : 665677347,
      "line" : 190,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3ODE4OQ==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 190,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 64,
      "pull_request_review_id" : 701410097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T20:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665678189",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665678766"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665678766"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "if you update to a span, you get rid of an allocation here!",
      "commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "created_at" : "2021-07-07T20:17:39Z",
      "diff_hunk" : "@@ -216,6 +240,17 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors,\n+                                           uint64_t limitAncestorCount, uint64_t limitAncestorSize,\n+                                           uint64_t limitDescendantCount, uint64_t limitDescendantSize,\n+                                           std::string &errString, bool fSearchForParents /* = true */) const\n+{\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> entry_vec{std::cref(entry)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665678766",
      "id" : 665678766,
      "line" : 248,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTY3ODc2Ng==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 248,
      "original_position" : 123,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 123,
      "pull_request_review_id" : 701410882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T20:17:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665678766",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666235253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666235253"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sorry, I've clarified this now. CMPA for a vector of transactions always searches for parents. If we call CMPA with multiple transactions (also handling the case if called with a vector of size 1), those transactions shouldn't already be in the mempool.",
      "commit_id" : "9d90a5d44cc4f14aa8a020e2b2f9ebe9bc294b2e",
      "created_at" : "2021-07-08T14:15:57Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666235253",
      "id" : 666235253,
      "in_reply_to_id" : 665677347,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzNTI1Mw==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 190,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 702121199,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T14:15:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666235253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666235587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666235587"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "GONE! ð ",
      "commit_id" : "9d90a5d44cc4f14aa8a020e2b2f9ebe9bc294b2e",
      "created_at" : "2021-07-08T14:16:18Z",
      "diff_hunk" : "@@ -216,6 +240,17 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors,\n+                                           uint64_t limitAncestorCount, uint64_t limitAncestorSize,\n+                                           uint64_t limitDescendantCount, uint64_t limitDescendantSize,\n+                                           std::string &errString, bool fSearchForParents /* = true */) const\n+{\n+    std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef> entry_vec{std::cref(entry)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666235587",
      "id" : 666235587,
      "in_reply_to_id" : 665678766,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzNTU4Nw==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 248,
      "original_position" : 123,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 702121652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T14:16:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666235587",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666236601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666236601"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(Same idea) if we're calling this with multiple transactions, they shouldn't already be in the mempool.",
      "commit_id" : "9d90a5d44cc4f14aa8a020e2b2f9ebe9bc294b2e",
      "created_at" : "2021-07-08T14:17:24Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666236601",
      "id" : 666236601,
      "in_reply_to_id" : 665676930,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzNjYwMQ==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 188,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 702123026,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T14:17:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666236601",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666238907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666238907"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done, with Span :D\r\n\r\nI've made it so that the CMPA with a vector of transactions doesn't have a `fSearchForParents` param, we just always search for parents. The only call site (other than tests) should be in `MemPoolAccept::AcceptMultipleTransactions()` so the transactions shouldn't already be in the mempool. It wouldn't make sense to use this heuristic on transactions that are already in the mempool, since it's potentially stricter.",
      "commit_id" : "9d90a5d44cc4f14aa8a020e2b2f9ebe9bc294b2e",
      "created_at" : "2021-07-08T14:19:59Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666238907",
      "id" : 666238907,
      "in_reply_to_id" : 665272611,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzODkwNw==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 155,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 702126182,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T14:19:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666238907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666238986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666238986"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "9d90a5d44cc4f14aa8a020e2b2f9ebe9bc294b2e",
      "created_at" : "2021-07-08T14:20:04Z",
      "diff_hunk" : "@@ -187,14 +202,22 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n-            errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.\n+        if (stageit->GetSizeWithDescendants() + total_virtual_size > limitDescendantSize) {\n+            errString = strprintf(\"%sexceeds descendant size limit for tx %s [limit: %u]\",\n+                                  total_count > 1 ? \"possibly\" : \"\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666238986",
      "id" : 666238986,
      "in_reply_to_id" : 665264021,
      "line" : 180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzODk4Ng==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 180,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 58,
      "pull_request_review_id" : 702126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T14:20:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666238986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239406"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "9d90a5d44cc4f14aa8a020e2b2f9ebe9bc294b2e",
      "created_at" : "2021-07-08T14:20:29Z",
      "diff_hunk" : "@@ -151,33 +152,47 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.get().GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.get().GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + total_count > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        // We should never use CalculateMemPoolAncestors on a set of transactions that are already\n+        // in the mempool.\n+        assert(entries.size() == 1);\n+        txiter it = mapTx.iterator_to(entries[0].get());\n+        staged_ancestors = it->GetMemPoolParents();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239406",
      "id" : 666239406,
      "in_reply_to_id" : 665268971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzOTQwNg==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 192,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 702126827,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T14:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239507"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "9d90a5d44cc4f14aa8a020e2b2f9ebe9bc294b2e",
      "created_at" : "2021-07-08T14:20:37Z",
      "diff_hunk" : "@@ -187,6 +190,178 @@ def test_chain(self):\n         # Clean up by clearing the mempool\n         node.generate(1)\n \n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"exceeds-ancestor-descendant-limits\")\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239507",
      "id" : 666239507,
      "in_reply_to_id" : 665258130,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzOTUwNw==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 263,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 702126993,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T14:20:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239507",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239846"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239846"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You're right it's just an out param, fixed.",
      "commit_id" : "9d90a5d44cc4f14aa8a020e2b2f9ebe9bc294b2e",
      "created_at" : "2021-07-08T14:20:59Z",
      "diff_hunk" : "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are\n+     *                                          multiple, they must not already be in the mempool.\n+     *                                          They need not be direct ancestors/descendants of\n+     *                                          each other, though they will be treated as such.\n+     * @param[in,out]   setAncestors            Set of in-mempool ancestors. Updated to include\n+     *                                          any new ancestors found.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239846",
      "id" : 666239846,
      "in_reply_to_id" : 665240182,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjIzOTg0Ng==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 694,
      "original_position" : 14,
      "original_start_line" : 693,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 702127482,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-08T14:20:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666239846",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666240721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666240721"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Took it out. Also kind of different now that the two CMPAs are slightly different",
      "commit_id" : "9d90a5d44cc4f14aa8a020e2b2f9ebe9bc294b2e",
      "created_at" : "2021-07-08T14:21:54Z",
      "diff_hunk" : "@@ -681,6 +681,34 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Try to calculate all in-mempool ancestors of a set of entries, and check for ancestor and\n+     * descendant limits (all are inclusive of the transactions in entries). The same limits are\n+     * used no matter how many transactions are passed in. For example, if entries.size() = 3 and\n+     * the limit is 25, the union of all 3 sets of ancestors must be <= 22.\n+     * @param[in]       entries                 Entries corresponding to transaction(s) being\n+     *                                          evaluated for acceptance to mempool. If there are",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666240721",
      "id" : 666240721,
      "in_reply_to_id" : 665238840,
      "line" : 705,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjI0MDcyMQ==",
      "original_commit_id" : "ef6004ca88f8033074898687b18dc0b156702dc6",
      "original_line" : 705,
      "original_position" : 9,
      "original_start_line" : 688,
      "path" : "src/txmempool.h",
      "position" : 32,
      "pull_request_review_id" : 702128628,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21800",
      "side" : "RIGHT",
      "start_line" : 704,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-08T14:21:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666240721",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
