[
   {
      "author_association" : "MEMBER",
      "body" : "@sipsorcery Could you help with adding MSVC build config here?",
      "created_at" : "2021-05-05T02:04:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832366353",
      "id" : 832366353,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjM2NjM1Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T02:04:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832366353",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa will do.",
      "created_at" : "2021-05-05T07:23:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832472531",
      "id" : 832472531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjQ3MjUzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T07:23:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832472531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/197660?v=4",
         "events_url" : "https://api.github.com/users/sipsorcery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipsorcery/followers",
         "following_url" : "https://api.github.com/users/sipsorcery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipsorcery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipsorcery",
         "id" : 197660,
         "login" : "sipsorcery",
         "node_id" : "MDQ6VXNlcjE5NzY2MA==",
         "organizations_url" : "https://api.github.com/users/sipsorcery/orgs",
         "received_events_url" : "https://api.github.com/users/sipsorcery/received_events",
         "repos_url" : "https://api.github.com/users/sipsorcery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipsorcery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipsorcery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From ci:\r\n\r\n```\r\n\r\nSUMMARY: MemorySanitizer: use-of-uninitialized-value /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/minisketch/src/fields/clmul_common_impl.h:23:23 in unsigned int (anonymous namespace)::MulWithClMulReduce<unsigned int, 32, 141u>(unsigned int, unsigned int)\r\n  ORIGIN: invalid (0). Might be a bug in MemorySanitizer origin tracking.\r\n    This could still be a bug in your code, too!",
      "created_at" : "2021-05-05T07:28:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832474947",
      "id" : 832474947,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjQ3NDk0Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T07:28:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832474947",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke I believe it is simply msan not being able to reason through the intrinsics (see src/minisketch/src/field/clmul_common_impl.h).",
      "created_at" : "2021-05-05T07:31:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832476787",
      "id" : 832476787,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjQ3Njc4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T07:31:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832476787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r626504683"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626504683"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`ba` isn't used. Can it be removed?",
      "commit_id" : "7faf0937cf772a34794f1ad33c03fdee222252a7",
      "created_at" : "2021-05-05T12:04:35Z",
      "diff_hunk" : "@@ -0,0 +1,452 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Pieter Wuille, Greg Maxwell, Gleb Naumenko      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file LICENSE or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <new>\n+\n+#include \"../include/minisketch.h\"\n+\n+#include \"false_positives.h\"\n+#include \"sketch.h\"\n+\n+#ifdef HAVE_CLMUL\n+#include <cpuid.h>\n+#endif\n+\n+Sketch* ConstructGeneric1Byte(int bits, int implementation);\n+Sketch* ConstructGeneric2Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric3Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric4Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric5Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric6Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric7Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric8Bytes(int bits, int implementation);\n+\n+#ifdef HAVE_CLMUL\n+Sketch* ConstructClMul1Byte(int bits, int implementation);\n+Sketch* ConstructClMul2Bytes(int bits, int implementation);\n+Sketch* ConstructClMul3Bytes(int bits, int implementation);\n+Sketch* ConstructClMul4Bytes(int bits, int implementation);\n+Sketch* ConstructClMul5Bytes(int bits, int implementation);\n+Sketch* ConstructClMul6Bytes(int bits, int implementation);\n+Sketch* ConstructClMul7Bytes(int bits, int implementation);\n+Sketch* ConstructClMul8Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri1Byte(int bits, int implementation);\n+Sketch* ConstructClMulTri2Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri3Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri4Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri5Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri6Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri7Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri8Bytes(int bits, int implementation);\n+#endif\n+\n+namespace {\n+\n+enum class FieldImpl {\n+    GENERIC = 0,\n+#ifdef HAVE_CLMUL\n+    CLMUL,\n+    CLMUL_TRI,\n+#endif\n+};\n+\n+Sketch* Construct(int bits, int impl)\n+{\n+    switch (FieldImpl(impl)) {\n+    case FieldImpl::GENERIC:\n+        switch ((bits + 7) / 8) {\n+        case 1:\n+            return ConstructGeneric1Byte(bits, impl);\n+        case 2:\n+            return ConstructGeneric2Bytes(bits, impl);\n+        case 3:\n+            return ConstructGeneric3Bytes(bits, impl);\n+        case 4:\n+            return ConstructGeneric4Bytes(bits, impl);\n+        case 5:\n+            return ConstructGeneric5Bytes(bits, impl);\n+        case 6:\n+            return ConstructGeneric6Bytes(bits, impl);\n+        case 7:\n+            return ConstructGeneric7Bytes(bits, impl);\n+        case 8:\n+            return ConstructGeneric8Bytes(bits, impl);\n+        default:\n+            return nullptr;\n+        }\n+#ifdef HAVE_CLMUL\n+    case FieldImpl::CLMUL:\n+    case FieldImpl::CLMUL_TRI: {\n+        uint32_t eax, ebx, ecx, edx;\n+        if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & 0x2)) {\n+            switch ((bits + 7) / 8) {\n+            case 1:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul1Byte(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri1Byte(bits, impl);\n+            case 2:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul2Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri2Bytes(bits, impl);\n+            case 3:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul3Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri3Bytes(bits, impl);\n+            case 4:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul4Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri4Bytes(bits, impl);\n+            case 5:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul5Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri5Bytes(bits, impl);\n+            case 6:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul6Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri6Bytes(bits, impl);\n+            case 7:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul7Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri7Bytes(bits, impl);\n+            case 8:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul8Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri8Bytes(bits, impl);\n+            default:\n+                return nullptr;\n+            }\n+        }\n+    }\n+#endif\n+    }\n+    return nullptr;\n+}\n+\n+}\n+\n+extern \"C\" {\n+\n+int minisketch_bits_supported(uint32_t bits) {\n+#ifndef DISABLE_FIELD_2\n+    if (bits == 2) return true;\n+#endif\n+#ifndef DISABLE_FIELD_3\n+    if (bits == 3) return true;\n+#endif\n+#ifndef DISABLE_FIELD_4\n+    if (bits == 4) return true;\n+#endif\n+#ifndef DISABLE_FIELD_5\n+    if (bits == 5) return true;\n+#endif\n+#ifndef DISABLE_FIELD_6\n+    if (bits == 6) return true;\n+#endif\n+#ifndef DISABLE_FIELD_7\n+    if (bits == 7) return true;\n+#endif\n+#ifndef DISABLE_FIELD_8\n+    if (bits == 8) return true;\n+#endif\n+#ifndef DISABLE_FIELD_9\n+    if (bits == 9) return true;\n+#endif\n+#ifndef DISABLE_FIELD_10\n+    if (bits == 10) return true;\n+#endif\n+#ifndef DISABLE_FIELD_11\n+    if (bits == 11) return true;\n+#endif\n+#ifndef DISABLE_FIELD_12\n+    if (bits == 12) return true;\n+#endif\n+#ifndef DISABLE_FIELD_13\n+    if (bits == 13) return true;\n+#endif\n+#ifndef DISABLE_FIELD_14\n+    if (bits == 14) return true;\n+#endif\n+#ifndef DISABLE_FIELD_15\n+    if (bits == 15) return true;\n+#endif\n+#ifndef DISABLE_FIELD_16\n+    if (bits == 16) return true;\n+#endif\n+#ifndef DISABLE_FIELD_17\n+    if (bits == 17) return true;\n+#endif\n+#ifndef DISABLE_FIELD_18\n+    if (bits == 18) return true;\n+#endif\n+#ifndef DISABLE_FIELD_19\n+    if (bits == 19) return true;\n+#endif\n+#ifndef DISABLE_FIELD_20\n+    if (bits == 20) return true;\n+#endif\n+#ifndef DISABLE_FIELD_21\n+    if (bits == 21) return true;\n+#endif\n+#ifndef DISABLE_FIELD_22\n+    if (bits == 22) return true;\n+#endif\n+#ifndef DISABLE_FIELD_23\n+    if (bits == 23) return true;\n+#endif\n+#ifndef DISABLE_FIELD_24\n+    if (bits == 24) return true;\n+#endif\n+#ifndef DISABLE_FIELD_25\n+    if (bits == 25) return true;\n+#endif\n+#ifndef DISABLE_FIELD_26\n+    if (bits == 26) return true;\n+#endif\n+#ifndef DISABLE_FIELD_27\n+    if (bits == 27) return true;\n+#endif\n+#ifndef DISABLE_FIELD_28\n+    if (bits == 28) return true;\n+#endif\n+#ifndef DISABLE_FIELD_29\n+    if (bits == 29) return true;\n+#endif\n+#ifndef DISABLE_FIELD_30\n+    if (bits == 30) return true;\n+#endif\n+#ifndef DISABLE_FIELD_31\n+    if (bits == 31) return true;\n+#endif\n+#ifndef DISABLE_FIELD_32\n+    if (bits == 32) return true;\n+#endif\n+#ifndef DISABLE_FIELD_33\n+    if (bits == 33) return true;\n+#endif\n+#ifndef DISABLE_FIELD_34\n+    if (bits == 34) return true;\n+#endif\n+#ifndef DISABLE_FIELD_35\n+    if (bits == 35) return true;\n+#endif\n+#ifndef DISABLE_FIELD_36\n+    if (bits == 36) return true;\n+#endif\n+#ifndef DISABLE_FIELD_37\n+    if (bits == 37) return true;\n+#endif\n+#ifndef DISABLE_FIELD_38\n+    if (bits == 38) return true;\n+#endif\n+#ifndef DISABLE_FIELD_39\n+    if (bits == 39) return true;\n+#endif\n+#ifndef DISABLE_FIELD_40\n+    if (bits == 40) return true;\n+#endif\n+#ifndef DISABLE_FIELD_41\n+    if (bits == 41) return true;\n+#endif\n+#ifndef DISABLE_FIELD_42\n+    if (bits == 42) return true;\n+#endif\n+#ifndef DISABLE_FIELD_43\n+    if (bits == 43) return true;\n+#endif\n+#ifndef DISABLE_FIELD_44\n+    if (bits == 44) return true;\n+#endif\n+#ifndef DISABLE_FIELD_45\n+    if (bits == 45) return true;\n+#endif\n+#ifndef DISABLE_FIELD_46\n+    if (bits == 46) return true;\n+#endif\n+#ifndef DISABLE_FIELD_47\n+    if (bits == 47) return true;\n+#endif\n+#ifndef DISABLE_FIELD_48\n+    if (bits == 48) return true;\n+#endif\n+#ifndef DISABLE_FIELD_49\n+    if (bits == 49) return true;\n+#endif\n+#ifndef DISABLE_FIELD_50\n+    if (bits == 50) return true;\n+#endif\n+#ifndef DISABLE_FIELD_51\n+    if (bits == 51) return true;\n+#endif\n+#ifndef DISABLE_FIELD_52\n+    if (bits == 52) return true;\n+#endif\n+#ifndef DISABLE_FIELD_53\n+    if (bits == 53) return true;\n+#endif\n+#ifndef DISABLE_FIELD_54\n+    if (bits == 54) return true;\n+#endif\n+#ifndef DISABLE_FIELD_55\n+    if (bits == 55) return true;\n+#endif\n+#ifndef DISABLE_FIELD_56\n+    if (bits == 56) return true;\n+#endif\n+#ifndef DISABLE_FIELD_57\n+    if (bits == 57) return true;\n+#endif\n+#ifndef DISABLE_FIELD_58\n+    if (bits == 58) return true;\n+#endif\n+#ifndef DISABLE_FIELD_59\n+    if (bits == 59) return true;\n+#endif\n+#ifndef DISABLE_FIELD_60\n+    if (bits == 60) return true;\n+#endif\n+#ifndef DISABLE_FIELD_61\n+    if (bits == 61) return true;\n+#endif\n+#ifndef DISABLE_FIELD_62\n+    if (bits == 62) return true;\n+#endif\n+#ifndef DISABLE_FIELD_63\n+    if (bits == 63) return true;\n+#endif\n+#ifndef DISABLE_FIELD_64\n+    if (bits == 64) return true;\n+#endif\n+    return false;\n+}\n+\n+uint32_t minisketch_implementation_max() {\n+    uint32_t ret = 0;\n+#ifdef HAVE_CLMUL\n+    ret += 2;\n+#endif\n+    return ret;\n+}\n+\n+int minisketch_implementation_supported(uint32_t bits, uint32_t implementation) {\n+    if (!minisketch_bits_supported(bits) || implementation > minisketch_implementation_max()) {\n+        return 0;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            delete sketch;\n+            return 1;\n+        }\n+    } catch (std::bad_alloc& ba) {}\n+    return 0;\n+}\n+\n+minisketch* minisketch_create(uint32_t bits, uint32_t implementation, size_t capacity) {\n+    if (capacity == 0) {\n+        return nullptr;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            try {\n+                sketch->Init(capacity);\n+            } catch (std::bad_alloc& ba) {\n+                delete sketch;\n+                throw;\n+            }\n+            sketch->Ready();\n+        }\n+        return (minisketch*)sketch;\n+    } catch (std::bad_alloc& ba) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r626504683",
      "id" : 626504683,
      "line" : 355,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjUwNDY4Mw==",
      "original_commit_id" : "7faf0937cf772a34794f1ad33c03fdee222252a7",
      "original_line" : 355,
      "original_position" : 355,
      "original_start_line" : null,
      "path" : "src/minisketch/src/minisketch.cpp",
      "position" : 355,
      "pull_request_review_id" : 652222652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-05T12:04:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626504683",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/197660?v=4",
         "events_url" : "https://api.github.com/users/sipsorcery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipsorcery/followers",
         "following_url" : "https://api.github.com/users/sipsorcery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipsorcery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipsorcery",
         "id" : 197660,
         "login" : "sipsorcery",
         "node_id" : "MDQ6VXNlcjE5NzY2MA==",
         "organizations_url" : "https://api.github.com/users/sipsorcery/orgs",
         "received_events_url" : "https://api.github.com/users/sipsorcery/received_events",
         "repos_url" : "https://api.github.com/users/sipsorcery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipsorcery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipsorcery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r626505082"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626505082"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ba isn't used. Can it be removed?",
      "commit_id" : "7faf0937cf772a34794f1ad33c03fdee222252a7",
      "created_at" : "2021-05-05T12:05:23Z",
      "diff_hunk" : "@@ -0,0 +1,452 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Pieter Wuille, Greg Maxwell, Gleb Naumenko      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file LICENSE or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <new>\n+\n+#include \"../include/minisketch.h\"\n+\n+#include \"false_positives.h\"\n+#include \"sketch.h\"\n+\n+#ifdef HAVE_CLMUL\n+#include <cpuid.h>\n+#endif\n+\n+Sketch* ConstructGeneric1Byte(int bits, int implementation);\n+Sketch* ConstructGeneric2Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric3Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric4Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric5Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric6Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric7Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric8Bytes(int bits, int implementation);\n+\n+#ifdef HAVE_CLMUL\n+Sketch* ConstructClMul1Byte(int bits, int implementation);\n+Sketch* ConstructClMul2Bytes(int bits, int implementation);\n+Sketch* ConstructClMul3Bytes(int bits, int implementation);\n+Sketch* ConstructClMul4Bytes(int bits, int implementation);\n+Sketch* ConstructClMul5Bytes(int bits, int implementation);\n+Sketch* ConstructClMul6Bytes(int bits, int implementation);\n+Sketch* ConstructClMul7Bytes(int bits, int implementation);\n+Sketch* ConstructClMul8Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri1Byte(int bits, int implementation);\n+Sketch* ConstructClMulTri2Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri3Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri4Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri5Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri6Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri7Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri8Bytes(int bits, int implementation);\n+#endif\n+\n+namespace {\n+\n+enum class FieldImpl {\n+    GENERIC = 0,\n+#ifdef HAVE_CLMUL\n+    CLMUL,\n+    CLMUL_TRI,\n+#endif\n+};\n+\n+Sketch* Construct(int bits, int impl)\n+{\n+    switch (FieldImpl(impl)) {\n+    case FieldImpl::GENERIC:\n+        switch ((bits + 7) / 8) {\n+        case 1:\n+            return ConstructGeneric1Byte(bits, impl);\n+        case 2:\n+            return ConstructGeneric2Bytes(bits, impl);\n+        case 3:\n+            return ConstructGeneric3Bytes(bits, impl);\n+        case 4:\n+            return ConstructGeneric4Bytes(bits, impl);\n+        case 5:\n+            return ConstructGeneric5Bytes(bits, impl);\n+        case 6:\n+            return ConstructGeneric6Bytes(bits, impl);\n+        case 7:\n+            return ConstructGeneric7Bytes(bits, impl);\n+        case 8:\n+            return ConstructGeneric8Bytes(bits, impl);\n+        default:\n+            return nullptr;\n+        }\n+#ifdef HAVE_CLMUL\n+    case FieldImpl::CLMUL:\n+    case FieldImpl::CLMUL_TRI: {\n+        uint32_t eax, ebx, ecx, edx;\n+        if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & 0x2)) {\n+            switch ((bits + 7) / 8) {\n+            case 1:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul1Byte(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri1Byte(bits, impl);\n+            case 2:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul2Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri2Bytes(bits, impl);\n+            case 3:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul3Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri3Bytes(bits, impl);\n+            case 4:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul4Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri4Bytes(bits, impl);\n+            case 5:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul5Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri5Bytes(bits, impl);\n+            case 6:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul6Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri6Bytes(bits, impl);\n+            case 7:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul7Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri7Bytes(bits, impl);\n+            case 8:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul8Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri8Bytes(bits, impl);\n+            default:\n+                return nullptr;\n+            }\n+        }\n+    }\n+#endif\n+    }\n+    return nullptr;\n+}\n+\n+}\n+\n+extern \"C\" {\n+\n+int minisketch_bits_supported(uint32_t bits) {\n+#ifndef DISABLE_FIELD_2\n+    if (bits == 2) return true;\n+#endif\n+#ifndef DISABLE_FIELD_3\n+    if (bits == 3) return true;\n+#endif\n+#ifndef DISABLE_FIELD_4\n+    if (bits == 4) return true;\n+#endif\n+#ifndef DISABLE_FIELD_5\n+    if (bits == 5) return true;\n+#endif\n+#ifndef DISABLE_FIELD_6\n+    if (bits == 6) return true;\n+#endif\n+#ifndef DISABLE_FIELD_7\n+    if (bits == 7) return true;\n+#endif\n+#ifndef DISABLE_FIELD_8\n+    if (bits == 8) return true;\n+#endif\n+#ifndef DISABLE_FIELD_9\n+    if (bits == 9) return true;\n+#endif\n+#ifndef DISABLE_FIELD_10\n+    if (bits == 10) return true;\n+#endif\n+#ifndef DISABLE_FIELD_11\n+    if (bits == 11) return true;\n+#endif\n+#ifndef DISABLE_FIELD_12\n+    if (bits == 12) return true;\n+#endif\n+#ifndef DISABLE_FIELD_13\n+    if (bits == 13) return true;\n+#endif\n+#ifndef DISABLE_FIELD_14\n+    if (bits == 14) return true;\n+#endif\n+#ifndef DISABLE_FIELD_15\n+    if (bits == 15) return true;\n+#endif\n+#ifndef DISABLE_FIELD_16\n+    if (bits == 16) return true;\n+#endif\n+#ifndef DISABLE_FIELD_17\n+    if (bits == 17) return true;\n+#endif\n+#ifndef DISABLE_FIELD_18\n+    if (bits == 18) return true;\n+#endif\n+#ifndef DISABLE_FIELD_19\n+    if (bits == 19) return true;\n+#endif\n+#ifndef DISABLE_FIELD_20\n+    if (bits == 20) return true;\n+#endif\n+#ifndef DISABLE_FIELD_21\n+    if (bits == 21) return true;\n+#endif\n+#ifndef DISABLE_FIELD_22\n+    if (bits == 22) return true;\n+#endif\n+#ifndef DISABLE_FIELD_23\n+    if (bits == 23) return true;\n+#endif\n+#ifndef DISABLE_FIELD_24\n+    if (bits == 24) return true;\n+#endif\n+#ifndef DISABLE_FIELD_25\n+    if (bits == 25) return true;\n+#endif\n+#ifndef DISABLE_FIELD_26\n+    if (bits == 26) return true;\n+#endif\n+#ifndef DISABLE_FIELD_27\n+    if (bits == 27) return true;\n+#endif\n+#ifndef DISABLE_FIELD_28\n+    if (bits == 28) return true;\n+#endif\n+#ifndef DISABLE_FIELD_29\n+    if (bits == 29) return true;\n+#endif\n+#ifndef DISABLE_FIELD_30\n+    if (bits == 30) return true;\n+#endif\n+#ifndef DISABLE_FIELD_31\n+    if (bits == 31) return true;\n+#endif\n+#ifndef DISABLE_FIELD_32\n+    if (bits == 32) return true;\n+#endif\n+#ifndef DISABLE_FIELD_33\n+    if (bits == 33) return true;\n+#endif\n+#ifndef DISABLE_FIELD_34\n+    if (bits == 34) return true;\n+#endif\n+#ifndef DISABLE_FIELD_35\n+    if (bits == 35) return true;\n+#endif\n+#ifndef DISABLE_FIELD_36\n+    if (bits == 36) return true;\n+#endif\n+#ifndef DISABLE_FIELD_37\n+    if (bits == 37) return true;\n+#endif\n+#ifndef DISABLE_FIELD_38\n+    if (bits == 38) return true;\n+#endif\n+#ifndef DISABLE_FIELD_39\n+    if (bits == 39) return true;\n+#endif\n+#ifndef DISABLE_FIELD_40\n+    if (bits == 40) return true;\n+#endif\n+#ifndef DISABLE_FIELD_41\n+    if (bits == 41) return true;\n+#endif\n+#ifndef DISABLE_FIELD_42\n+    if (bits == 42) return true;\n+#endif\n+#ifndef DISABLE_FIELD_43\n+    if (bits == 43) return true;\n+#endif\n+#ifndef DISABLE_FIELD_44\n+    if (bits == 44) return true;\n+#endif\n+#ifndef DISABLE_FIELD_45\n+    if (bits == 45) return true;\n+#endif\n+#ifndef DISABLE_FIELD_46\n+    if (bits == 46) return true;\n+#endif\n+#ifndef DISABLE_FIELD_47\n+    if (bits == 47) return true;\n+#endif\n+#ifndef DISABLE_FIELD_48\n+    if (bits == 48) return true;\n+#endif\n+#ifndef DISABLE_FIELD_49\n+    if (bits == 49) return true;\n+#endif\n+#ifndef DISABLE_FIELD_50\n+    if (bits == 50) return true;\n+#endif\n+#ifndef DISABLE_FIELD_51\n+    if (bits == 51) return true;\n+#endif\n+#ifndef DISABLE_FIELD_52\n+    if (bits == 52) return true;\n+#endif\n+#ifndef DISABLE_FIELD_53\n+    if (bits == 53) return true;\n+#endif\n+#ifndef DISABLE_FIELD_54\n+    if (bits == 54) return true;\n+#endif\n+#ifndef DISABLE_FIELD_55\n+    if (bits == 55) return true;\n+#endif\n+#ifndef DISABLE_FIELD_56\n+    if (bits == 56) return true;\n+#endif\n+#ifndef DISABLE_FIELD_57\n+    if (bits == 57) return true;\n+#endif\n+#ifndef DISABLE_FIELD_58\n+    if (bits == 58) return true;\n+#endif\n+#ifndef DISABLE_FIELD_59\n+    if (bits == 59) return true;\n+#endif\n+#ifndef DISABLE_FIELD_60\n+    if (bits == 60) return true;\n+#endif\n+#ifndef DISABLE_FIELD_61\n+    if (bits == 61) return true;\n+#endif\n+#ifndef DISABLE_FIELD_62\n+    if (bits == 62) return true;\n+#endif\n+#ifndef DISABLE_FIELD_63\n+    if (bits == 63) return true;\n+#endif\n+#ifndef DISABLE_FIELD_64\n+    if (bits == 64) return true;\n+#endif\n+    return false;\n+}\n+\n+uint32_t minisketch_implementation_max() {\n+    uint32_t ret = 0;\n+#ifdef HAVE_CLMUL\n+    ret += 2;\n+#endif\n+    return ret;\n+}\n+\n+int minisketch_implementation_supported(uint32_t bits, uint32_t implementation) {\n+    if (!minisketch_bits_supported(bits) || implementation > minisketch_implementation_max()) {\n+        return 0;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            delete sketch;\n+            return 1;\n+        }\n+    } catch (std::bad_alloc& ba) {}\n+    return 0;\n+}\n+\n+minisketch* minisketch_create(uint32_t bits, uint32_t implementation, size_t capacity) {\n+    if (capacity == 0) {\n+        return nullptr;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            try {\n+                sketch->Init(capacity);\n+            } catch (std::bad_alloc& ba) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r626505082",
      "id" : 626505082,
      "line" : 348,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjUwNTA4Mg==",
      "original_commit_id" : "7faf0937cf772a34794f1ad33c03fdee222252a7",
      "original_line" : 348,
      "original_position" : 348,
      "original_start_line" : null,
      "path" : "src/minisketch/src/minisketch.cpp",
      "position" : 348,
      "pull_request_review_id" : 652223272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-05T12:05:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626505082",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/197660?v=4",
         "events_url" : "https://api.github.com/users/sipsorcery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipsorcery/followers",
         "following_url" : "https://api.github.com/users/sipsorcery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipsorcery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipsorcery",
         "id" : 197660,
         "login" : "sipsorcery",
         "node_id" : "MDQ6VXNlcjE5NzY2MA==",
         "organizations_url" : "https://api.github.com/users/sipsorcery/orgs",
         "received_events_url" : "https://api.github.com/users/sipsorcery/received_events",
         "repos_url" : "https://api.github.com/users/sipsorcery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipsorcery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipsorcery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Attached diff adds a `minisketch` project to the msvc build config. I did make a few small code changes to `minisketch.h` and `minisketch.cpp` to remove a warning and change the location for a header.\r\n\r\n[minisketch.diff.gz](https://github.com/bitcoin/bitcoin/files/6427858/minisketch.diff.gz)\r\n",
      "created_at" : "2021-05-05T14:31:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832736638",
      "id" : 832736638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjczNjYzOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T14:31:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832736638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/197660?v=4",
         "events_url" : "https://api.github.com/users/sipsorcery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipsorcery/followers",
         "following_url" : "https://api.github.com/users/sipsorcery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipsorcery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipsorcery",
         "id" : 197660,
         "login" : "sipsorcery",
         "node_id" : "MDQ6VXNlcjE5NzY2MA==",
         "organizations_url" : "https://api.github.com/users/sipsorcery/orgs",
         "received_events_url" : "https://api.github.com/users/sipsorcery/received_events",
         "repos_url" : "https://api.github.com/users/sipsorcery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipsorcery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipsorcery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-05T15:49:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832804020",
      "id" : 832804020,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjgwNDAyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T15:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832804020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Do minisketch's own tests get run when running `make check` from bitcoin's base directory? I think it'd be good to modify `make check` to only run the base bitcoin tests, and then have another build target (`make check_all`?) that also runs the subtree unit tests. Those subtrees only get updated every few months. I expect many developers run `make check` many times a day and it seems wasteful to rerun the same unmodified tests on the same unmodified subtrees every time.",
      "created_at" : "2021-05-06T09:56:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-833397513",
      "id" : 833397513,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMzM5NzUxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-06T09:56:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833397513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "CI would need to run them, though. As this is the only place where sanitizers are run regularly.",
      "created_at" : "2021-05-06T10:12:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-833407347",
      "id" : 833407347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMzQwNzM0Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-06T10:12:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833407347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
