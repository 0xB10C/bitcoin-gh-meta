[
   {
      "author_association" : "MEMBER",
      "body" : "@sipsorcery Could you help with adding MSVC build config here?",
      "created_at" : "2021-05-05T02:04:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832366353",
      "id" : 832366353,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjM2NjM1Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T02:04:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832366353",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa will do.",
      "created_at" : "2021-05-05T07:23:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832472531",
      "id" : 832472531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjQ3MjUzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T07:23:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832472531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/197660?v=4",
         "events_url" : "https://api.github.com/users/sipsorcery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipsorcery/followers",
         "following_url" : "https://api.github.com/users/sipsorcery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipsorcery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipsorcery",
         "id" : 197660,
         "login" : "sipsorcery",
         "node_id" : "MDQ6VXNlcjE5NzY2MA==",
         "organizations_url" : "https://api.github.com/users/sipsorcery/orgs",
         "received_events_url" : "https://api.github.com/users/sipsorcery/received_events",
         "repos_url" : "https://api.github.com/users/sipsorcery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipsorcery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipsorcery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From ci:\r\n\r\n```\r\n\r\nSUMMARY: MemorySanitizer: use-of-uninitialized-value /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/minisketch/src/fields/clmul_common_impl.h:23:23 in unsigned int (anonymous namespace)::MulWithClMulReduce<unsigned int, 32, 141u>(unsigned int, unsigned int)\r\n  ORIGIN: invalid (0). Might be a bug in MemorySanitizer origin tracking.\r\n    This could still be a bug in your code, too!",
      "created_at" : "2021-05-05T07:28:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832474947",
      "id" : 832474947,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjQ3NDk0Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T07:28:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832474947",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke I believe it is simply msan not being able to reason through the intrinsics (see src/minisketch/src/field/clmul_common_impl.h).",
      "created_at" : "2021-05-05T07:31:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832476787",
      "id" : 832476787,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjQ3Njc4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T07:31:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832476787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r626504683"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626504683"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`ba` isn't used. Can it be removed?",
      "commit_id" : "7faf0937cf772a34794f1ad33c03fdee222252a7",
      "created_at" : "2021-05-05T12:04:35Z",
      "diff_hunk" : "@@ -0,0 +1,452 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Pieter Wuille, Greg Maxwell, Gleb Naumenko      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file LICENSE or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <new>\n+\n+#include \"../include/minisketch.h\"\n+\n+#include \"false_positives.h\"\n+#include \"sketch.h\"\n+\n+#ifdef HAVE_CLMUL\n+#include <cpuid.h>\n+#endif\n+\n+Sketch* ConstructGeneric1Byte(int bits, int implementation);\n+Sketch* ConstructGeneric2Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric3Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric4Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric5Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric6Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric7Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric8Bytes(int bits, int implementation);\n+\n+#ifdef HAVE_CLMUL\n+Sketch* ConstructClMul1Byte(int bits, int implementation);\n+Sketch* ConstructClMul2Bytes(int bits, int implementation);\n+Sketch* ConstructClMul3Bytes(int bits, int implementation);\n+Sketch* ConstructClMul4Bytes(int bits, int implementation);\n+Sketch* ConstructClMul5Bytes(int bits, int implementation);\n+Sketch* ConstructClMul6Bytes(int bits, int implementation);\n+Sketch* ConstructClMul7Bytes(int bits, int implementation);\n+Sketch* ConstructClMul8Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri1Byte(int bits, int implementation);\n+Sketch* ConstructClMulTri2Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri3Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri4Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri5Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri6Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri7Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri8Bytes(int bits, int implementation);\n+#endif\n+\n+namespace {\n+\n+enum class FieldImpl {\n+    GENERIC = 0,\n+#ifdef HAVE_CLMUL\n+    CLMUL,\n+    CLMUL_TRI,\n+#endif\n+};\n+\n+Sketch* Construct(int bits, int impl)\n+{\n+    switch (FieldImpl(impl)) {\n+    case FieldImpl::GENERIC:\n+        switch ((bits + 7) / 8) {\n+        case 1:\n+            return ConstructGeneric1Byte(bits, impl);\n+        case 2:\n+            return ConstructGeneric2Bytes(bits, impl);\n+        case 3:\n+            return ConstructGeneric3Bytes(bits, impl);\n+        case 4:\n+            return ConstructGeneric4Bytes(bits, impl);\n+        case 5:\n+            return ConstructGeneric5Bytes(bits, impl);\n+        case 6:\n+            return ConstructGeneric6Bytes(bits, impl);\n+        case 7:\n+            return ConstructGeneric7Bytes(bits, impl);\n+        case 8:\n+            return ConstructGeneric8Bytes(bits, impl);\n+        default:\n+            return nullptr;\n+        }\n+#ifdef HAVE_CLMUL\n+    case FieldImpl::CLMUL:\n+    case FieldImpl::CLMUL_TRI: {\n+        uint32_t eax, ebx, ecx, edx;\n+        if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & 0x2)) {\n+            switch ((bits + 7) / 8) {\n+            case 1:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul1Byte(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri1Byte(bits, impl);\n+            case 2:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul2Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri2Bytes(bits, impl);\n+            case 3:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul3Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri3Bytes(bits, impl);\n+            case 4:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul4Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri4Bytes(bits, impl);\n+            case 5:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul5Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri5Bytes(bits, impl);\n+            case 6:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul6Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri6Bytes(bits, impl);\n+            case 7:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul7Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri7Bytes(bits, impl);\n+            case 8:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul8Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri8Bytes(bits, impl);\n+            default:\n+                return nullptr;\n+            }\n+        }\n+    }\n+#endif\n+    }\n+    return nullptr;\n+}\n+\n+}\n+\n+extern \"C\" {\n+\n+int minisketch_bits_supported(uint32_t bits) {\n+#ifndef DISABLE_FIELD_2\n+    if (bits == 2) return true;\n+#endif\n+#ifndef DISABLE_FIELD_3\n+    if (bits == 3) return true;\n+#endif\n+#ifndef DISABLE_FIELD_4\n+    if (bits == 4) return true;\n+#endif\n+#ifndef DISABLE_FIELD_5\n+    if (bits == 5) return true;\n+#endif\n+#ifndef DISABLE_FIELD_6\n+    if (bits == 6) return true;\n+#endif\n+#ifndef DISABLE_FIELD_7\n+    if (bits == 7) return true;\n+#endif\n+#ifndef DISABLE_FIELD_8\n+    if (bits == 8) return true;\n+#endif\n+#ifndef DISABLE_FIELD_9\n+    if (bits == 9) return true;\n+#endif\n+#ifndef DISABLE_FIELD_10\n+    if (bits == 10) return true;\n+#endif\n+#ifndef DISABLE_FIELD_11\n+    if (bits == 11) return true;\n+#endif\n+#ifndef DISABLE_FIELD_12\n+    if (bits == 12) return true;\n+#endif\n+#ifndef DISABLE_FIELD_13\n+    if (bits == 13) return true;\n+#endif\n+#ifndef DISABLE_FIELD_14\n+    if (bits == 14) return true;\n+#endif\n+#ifndef DISABLE_FIELD_15\n+    if (bits == 15) return true;\n+#endif\n+#ifndef DISABLE_FIELD_16\n+    if (bits == 16) return true;\n+#endif\n+#ifndef DISABLE_FIELD_17\n+    if (bits == 17) return true;\n+#endif\n+#ifndef DISABLE_FIELD_18\n+    if (bits == 18) return true;\n+#endif\n+#ifndef DISABLE_FIELD_19\n+    if (bits == 19) return true;\n+#endif\n+#ifndef DISABLE_FIELD_20\n+    if (bits == 20) return true;\n+#endif\n+#ifndef DISABLE_FIELD_21\n+    if (bits == 21) return true;\n+#endif\n+#ifndef DISABLE_FIELD_22\n+    if (bits == 22) return true;\n+#endif\n+#ifndef DISABLE_FIELD_23\n+    if (bits == 23) return true;\n+#endif\n+#ifndef DISABLE_FIELD_24\n+    if (bits == 24) return true;\n+#endif\n+#ifndef DISABLE_FIELD_25\n+    if (bits == 25) return true;\n+#endif\n+#ifndef DISABLE_FIELD_26\n+    if (bits == 26) return true;\n+#endif\n+#ifndef DISABLE_FIELD_27\n+    if (bits == 27) return true;\n+#endif\n+#ifndef DISABLE_FIELD_28\n+    if (bits == 28) return true;\n+#endif\n+#ifndef DISABLE_FIELD_29\n+    if (bits == 29) return true;\n+#endif\n+#ifndef DISABLE_FIELD_30\n+    if (bits == 30) return true;\n+#endif\n+#ifndef DISABLE_FIELD_31\n+    if (bits == 31) return true;\n+#endif\n+#ifndef DISABLE_FIELD_32\n+    if (bits == 32) return true;\n+#endif\n+#ifndef DISABLE_FIELD_33\n+    if (bits == 33) return true;\n+#endif\n+#ifndef DISABLE_FIELD_34\n+    if (bits == 34) return true;\n+#endif\n+#ifndef DISABLE_FIELD_35\n+    if (bits == 35) return true;\n+#endif\n+#ifndef DISABLE_FIELD_36\n+    if (bits == 36) return true;\n+#endif\n+#ifndef DISABLE_FIELD_37\n+    if (bits == 37) return true;\n+#endif\n+#ifndef DISABLE_FIELD_38\n+    if (bits == 38) return true;\n+#endif\n+#ifndef DISABLE_FIELD_39\n+    if (bits == 39) return true;\n+#endif\n+#ifndef DISABLE_FIELD_40\n+    if (bits == 40) return true;\n+#endif\n+#ifndef DISABLE_FIELD_41\n+    if (bits == 41) return true;\n+#endif\n+#ifndef DISABLE_FIELD_42\n+    if (bits == 42) return true;\n+#endif\n+#ifndef DISABLE_FIELD_43\n+    if (bits == 43) return true;\n+#endif\n+#ifndef DISABLE_FIELD_44\n+    if (bits == 44) return true;\n+#endif\n+#ifndef DISABLE_FIELD_45\n+    if (bits == 45) return true;\n+#endif\n+#ifndef DISABLE_FIELD_46\n+    if (bits == 46) return true;\n+#endif\n+#ifndef DISABLE_FIELD_47\n+    if (bits == 47) return true;\n+#endif\n+#ifndef DISABLE_FIELD_48\n+    if (bits == 48) return true;\n+#endif\n+#ifndef DISABLE_FIELD_49\n+    if (bits == 49) return true;\n+#endif\n+#ifndef DISABLE_FIELD_50\n+    if (bits == 50) return true;\n+#endif\n+#ifndef DISABLE_FIELD_51\n+    if (bits == 51) return true;\n+#endif\n+#ifndef DISABLE_FIELD_52\n+    if (bits == 52) return true;\n+#endif\n+#ifndef DISABLE_FIELD_53\n+    if (bits == 53) return true;\n+#endif\n+#ifndef DISABLE_FIELD_54\n+    if (bits == 54) return true;\n+#endif\n+#ifndef DISABLE_FIELD_55\n+    if (bits == 55) return true;\n+#endif\n+#ifndef DISABLE_FIELD_56\n+    if (bits == 56) return true;\n+#endif\n+#ifndef DISABLE_FIELD_57\n+    if (bits == 57) return true;\n+#endif\n+#ifndef DISABLE_FIELD_58\n+    if (bits == 58) return true;\n+#endif\n+#ifndef DISABLE_FIELD_59\n+    if (bits == 59) return true;\n+#endif\n+#ifndef DISABLE_FIELD_60\n+    if (bits == 60) return true;\n+#endif\n+#ifndef DISABLE_FIELD_61\n+    if (bits == 61) return true;\n+#endif\n+#ifndef DISABLE_FIELD_62\n+    if (bits == 62) return true;\n+#endif\n+#ifndef DISABLE_FIELD_63\n+    if (bits == 63) return true;\n+#endif\n+#ifndef DISABLE_FIELD_64\n+    if (bits == 64) return true;\n+#endif\n+    return false;\n+}\n+\n+uint32_t minisketch_implementation_max() {\n+    uint32_t ret = 0;\n+#ifdef HAVE_CLMUL\n+    ret += 2;\n+#endif\n+    return ret;\n+}\n+\n+int minisketch_implementation_supported(uint32_t bits, uint32_t implementation) {\n+    if (!minisketch_bits_supported(bits) || implementation > minisketch_implementation_max()) {\n+        return 0;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            delete sketch;\n+            return 1;\n+        }\n+    } catch (std::bad_alloc& ba) {}\n+    return 0;\n+}\n+\n+minisketch* minisketch_create(uint32_t bits, uint32_t implementation, size_t capacity) {\n+    if (capacity == 0) {\n+        return nullptr;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            try {\n+                sketch->Init(capacity);\n+            } catch (std::bad_alloc& ba) {\n+                delete sketch;\n+                throw;\n+            }\n+            sketch->Ready();\n+        }\n+        return (minisketch*)sketch;\n+    } catch (std::bad_alloc& ba) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r626504683",
      "id" : 626504683,
      "line" : 355,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjUwNDY4Mw==",
      "original_commit_id" : "7faf0937cf772a34794f1ad33c03fdee222252a7",
      "original_line" : 355,
      "original_position" : 355,
      "original_start_line" : null,
      "path" : "src/minisketch/src/minisketch.cpp",
      "position" : 355,
      "pull_request_review_id" : 652222652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-05T12:04:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626504683",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/197660?v=4",
         "events_url" : "https://api.github.com/users/sipsorcery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipsorcery/followers",
         "following_url" : "https://api.github.com/users/sipsorcery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipsorcery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipsorcery",
         "id" : 197660,
         "login" : "sipsorcery",
         "node_id" : "MDQ6VXNlcjE5NzY2MA==",
         "organizations_url" : "https://api.github.com/users/sipsorcery/orgs",
         "received_events_url" : "https://api.github.com/users/sipsorcery/received_events",
         "repos_url" : "https://api.github.com/users/sipsorcery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipsorcery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipsorcery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r626505082"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626505082"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ba isn't used. Can it be removed?",
      "commit_id" : "7faf0937cf772a34794f1ad33c03fdee222252a7",
      "created_at" : "2021-05-05T12:05:23Z",
      "diff_hunk" : "@@ -0,0 +1,452 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Pieter Wuille, Greg Maxwell, Gleb Naumenko      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file LICENSE or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <new>\n+\n+#include \"../include/minisketch.h\"\n+\n+#include \"false_positives.h\"\n+#include \"sketch.h\"\n+\n+#ifdef HAVE_CLMUL\n+#include <cpuid.h>\n+#endif\n+\n+Sketch* ConstructGeneric1Byte(int bits, int implementation);\n+Sketch* ConstructGeneric2Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric3Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric4Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric5Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric6Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric7Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric8Bytes(int bits, int implementation);\n+\n+#ifdef HAVE_CLMUL\n+Sketch* ConstructClMul1Byte(int bits, int implementation);\n+Sketch* ConstructClMul2Bytes(int bits, int implementation);\n+Sketch* ConstructClMul3Bytes(int bits, int implementation);\n+Sketch* ConstructClMul4Bytes(int bits, int implementation);\n+Sketch* ConstructClMul5Bytes(int bits, int implementation);\n+Sketch* ConstructClMul6Bytes(int bits, int implementation);\n+Sketch* ConstructClMul7Bytes(int bits, int implementation);\n+Sketch* ConstructClMul8Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri1Byte(int bits, int implementation);\n+Sketch* ConstructClMulTri2Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri3Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri4Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri5Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri6Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri7Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri8Bytes(int bits, int implementation);\n+#endif\n+\n+namespace {\n+\n+enum class FieldImpl {\n+    GENERIC = 0,\n+#ifdef HAVE_CLMUL\n+    CLMUL,\n+    CLMUL_TRI,\n+#endif\n+};\n+\n+Sketch* Construct(int bits, int impl)\n+{\n+    switch (FieldImpl(impl)) {\n+    case FieldImpl::GENERIC:\n+        switch ((bits + 7) / 8) {\n+        case 1:\n+            return ConstructGeneric1Byte(bits, impl);\n+        case 2:\n+            return ConstructGeneric2Bytes(bits, impl);\n+        case 3:\n+            return ConstructGeneric3Bytes(bits, impl);\n+        case 4:\n+            return ConstructGeneric4Bytes(bits, impl);\n+        case 5:\n+            return ConstructGeneric5Bytes(bits, impl);\n+        case 6:\n+            return ConstructGeneric6Bytes(bits, impl);\n+        case 7:\n+            return ConstructGeneric7Bytes(bits, impl);\n+        case 8:\n+            return ConstructGeneric8Bytes(bits, impl);\n+        default:\n+            return nullptr;\n+        }\n+#ifdef HAVE_CLMUL\n+    case FieldImpl::CLMUL:\n+    case FieldImpl::CLMUL_TRI: {\n+        uint32_t eax, ebx, ecx, edx;\n+        if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & 0x2)) {\n+            switch ((bits + 7) / 8) {\n+            case 1:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul1Byte(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri1Byte(bits, impl);\n+            case 2:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul2Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri2Bytes(bits, impl);\n+            case 3:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul3Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri3Bytes(bits, impl);\n+            case 4:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul4Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri4Bytes(bits, impl);\n+            case 5:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul5Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri5Bytes(bits, impl);\n+            case 6:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul6Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri6Bytes(bits, impl);\n+            case 7:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul7Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri7Bytes(bits, impl);\n+            case 8:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul8Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri8Bytes(bits, impl);\n+            default:\n+                return nullptr;\n+            }\n+        }\n+    }\n+#endif\n+    }\n+    return nullptr;\n+}\n+\n+}\n+\n+extern \"C\" {\n+\n+int minisketch_bits_supported(uint32_t bits) {\n+#ifndef DISABLE_FIELD_2\n+    if (bits == 2) return true;\n+#endif\n+#ifndef DISABLE_FIELD_3\n+    if (bits == 3) return true;\n+#endif\n+#ifndef DISABLE_FIELD_4\n+    if (bits == 4) return true;\n+#endif\n+#ifndef DISABLE_FIELD_5\n+    if (bits == 5) return true;\n+#endif\n+#ifndef DISABLE_FIELD_6\n+    if (bits == 6) return true;\n+#endif\n+#ifndef DISABLE_FIELD_7\n+    if (bits == 7) return true;\n+#endif\n+#ifndef DISABLE_FIELD_8\n+    if (bits == 8) return true;\n+#endif\n+#ifndef DISABLE_FIELD_9\n+    if (bits == 9) return true;\n+#endif\n+#ifndef DISABLE_FIELD_10\n+    if (bits == 10) return true;\n+#endif\n+#ifndef DISABLE_FIELD_11\n+    if (bits == 11) return true;\n+#endif\n+#ifndef DISABLE_FIELD_12\n+    if (bits == 12) return true;\n+#endif\n+#ifndef DISABLE_FIELD_13\n+    if (bits == 13) return true;\n+#endif\n+#ifndef DISABLE_FIELD_14\n+    if (bits == 14) return true;\n+#endif\n+#ifndef DISABLE_FIELD_15\n+    if (bits == 15) return true;\n+#endif\n+#ifndef DISABLE_FIELD_16\n+    if (bits == 16) return true;\n+#endif\n+#ifndef DISABLE_FIELD_17\n+    if (bits == 17) return true;\n+#endif\n+#ifndef DISABLE_FIELD_18\n+    if (bits == 18) return true;\n+#endif\n+#ifndef DISABLE_FIELD_19\n+    if (bits == 19) return true;\n+#endif\n+#ifndef DISABLE_FIELD_20\n+    if (bits == 20) return true;\n+#endif\n+#ifndef DISABLE_FIELD_21\n+    if (bits == 21) return true;\n+#endif\n+#ifndef DISABLE_FIELD_22\n+    if (bits == 22) return true;\n+#endif\n+#ifndef DISABLE_FIELD_23\n+    if (bits == 23) return true;\n+#endif\n+#ifndef DISABLE_FIELD_24\n+    if (bits == 24) return true;\n+#endif\n+#ifndef DISABLE_FIELD_25\n+    if (bits == 25) return true;\n+#endif\n+#ifndef DISABLE_FIELD_26\n+    if (bits == 26) return true;\n+#endif\n+#ifndef DISABLE_FIELD_27\n+    if (bits == 27) return true;\n+#endif\n+#ifndef DISABLE_FIELD_28\n+    if (bits == 28) return true;\n+#endif\n+#ifndef DISABLE_FIELD_29\n+    if (bits == 29) return true;\n+#endif\n+#ifndef DISABLE_FIELD_30\n+    if (bits == 30) return true;\n+#endif\n+#ifndef DISABLE_FIELD_31\n+    if (bits == 31) return true;\n+#endif\n+#ifndef DISABLE_FIELD_32\n+    if (bits == 32) return true;\n+#endif\n+#ifndef DISABLE_FIELD_33\n+    if (bits == 33) return true;\n+#endif\n+#ifndef DISABLE_FIELD_34\n+    if (bits == 34) return true;\n+#endif\n+#ifndef DISABLE_FIELD_35\n+    if (bits == 35) return true;\n+#endif\n+#ifndef DISABLE_FIELD_36\n+    if (bits == 36) return true;\n+#endif\n+#ifndef DISABLE_FIELD_37\n+    if (bits == 37) return true;\n+#endif\n+#ifndef DISABLE_FIELD_38\n+    if (bits == 38) return true;\n+#endif\n+#ifndef DISABLE_FIELD_39\n+    if (bits == 39) return true;\n+#endif\n+#ifndef DISABLE_FIELD_40\n+    if (bits == 40) return true;\n+#endif\n+#ifndef DISABLE_FIELD_41\n+    if (bits == 41) return true;\n+#endif\n+#ifndef DISABLE_FIELD_42\n+    if (bits == 42) return true;\n+#endif\n+#ifndef DISABLE_FIELD_43\n+    if (bits == 43) return true;\n+#endif\n+#ifndef DISABLE_FIELD_44\n+    if (bits == 44) return true;\n+#endif\n+#ifndef DISABLE_FIELD_45\n+    if (bits == 45) return true;\n+#endif\n+#ifndef DISABLE_FIELD_46\n+    if (bits == 46) return true;\n+#endif\n+#ifndef DISABLE_FIELD_47\n+    if (bits == 47) return true;\n+#endif\n+#ifndef DISABLE_FIELD_48\n+    if (bits == 48) return true;\n+#endif\n+#ifndef DISABLE_FIELD_49\n+    if (bits == 49) return true;\n+#endif\n+#ifndef DISABLE_FIELD_50\n+    if (bits == 50) return true;\n+#endif\n+#ifndef DISABLE_FIELD_51\n+    if (bits == 51) return true;\n+#endif\n+#ifndef DISABLE_FIELD_52\n+    if (bits == 52) return true;\n+#endif\n+#ifndef DISABLE_FIELD_53\n+    if (bits == 53) return true;\n+#endif\n+#ifndef DISABLE_FIELD_54\n+    if (bits == 54) return true;\n+#endif\n+#ifndef DISABLE_FIELD_55\n+    if (bits == 55) return true;\n+#endif\n+#ifndef DISABLE_FIELD_56\n+    if (bits == 56) return true;\n+#endif\n+#ifndef DISABLE_FIELD_57\n+    if (bits == 57) return true;\n+#endif\n+#ifndef DISABLE_FIELD_58\n+    if (bits == 58) return true;\n+#endif\n+#ifndef DISABLE_FIELD_59\n+    if (bits == 59) return true;\n+#endif\n+#ifndef DISABLE_FIELD_60\n+    if (bits == 60) return true;\n+#endif\n+#ifndef DISABLE_FIELD_61\n+    if (bits == 61) return true;\n+#endif\n+#ifndef DISABLE_FIELD_62\n+    if (bits == 62) return true;\n+#endif\n+#ifndef DISABLE_FIELD_63\n+    if (bits == 63) return true;\n+#endif\n+#ifndef DISABLE_FIELD_64\n+    if (bits == 64) return true;\n+#endif\n+    return false;\n+}\n+\n+uint32_t minisketch_implementation_max() {\n+    uint32_t ret = 0;\n+#ifdef HAVE_CLMUL\n+    ret += 2;\n+#endif\n+    return ret;\n+}\n+\n+int minisketch_implementation_supported(uint32_t bits, uint32_t implementation) {\n+    if (!minisketch_bits_supported(bits) || implementation > minisketch_implementation_max()) {\n+        return 0;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            delete sketch;\n+            return 1;\n+        }\n+    } catch (std::bad_alloc& ba) {}\n+    return 0;\n+}\n+\n+minisketch* minisketch_create(uint32_t bits, uint32_t implementation, size_t capacity) {\n+    if (capacity == 0) {\n+        return nullptr;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            try {\n+                sketch->Init(capacity);\n+            } catch (std::bad_alloc& ba) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r626505082",
      "id" : 626505082,
      "line" : 348,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjUwNTA4Mg==",
      "original_commit_id" : "7faf0937cf772a34794f1ad33c03fdee222252a7",
      "original_line" : 348,
      "original_position" : 348,
      "original_start_line" : null,
      "path" : "src/minisketch/src/minisketch.cpp",
      "position" : 348,
      "pull_request_review_id" : 652223272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-05T12:05:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626505082",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/197660?v=4",
         "events_url" : "https://api.github.com/users/sipsorcery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipsorcery/followers",
         "following_url" : "https://api.github.com/users/sipsorcery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipsorcery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipsorcery",
         "id" : 197660,
         "login" : "sipsorcery",
         "node_id" : "MDQ6VXNlcjE5NzY2MA==",
         "organizations_url" : "https://api.github.com/users/sipsorcery/orgs",
         "received_events_url" : "https://api.github.com/users/sipsorcery/received_events",
         "repos_url" : "https://api.github.com/users/sipsorcery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipsorcery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipsorcery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Attached diff adds a `minisketch` project to the msvc build config. I did make a few small code changes to `minisketch.h` and `minisketch.cpp` to remove a warning and change the location for a header.\r\n\r\n[minisketch.diff.gz](https://github.com/bitcoin/bitcoin/files/6427858/minisketch.diff.gz)\r\n",
      "created_at" : "2021-05-05T14:31:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832736638",
      "id" : 832736638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjczNjYzOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T14:31:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832736638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/197660?v=4",
         "events_url" : "https://api.github.com/users/sipsorcery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipsorcery/followers",
         "following_url" : "https://api.github.com/users/sipsorcery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipsorcery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipsorcery",
         "id" : 197660,
         "login" : "sipsorcery",
         "node_id" : "MDQ6VXNlcjE5NzY2MA==",
         "organizations_url" : "https://api.github.com/users/sipsorcery/orgs",
         "received_events_url" : "https://api.github.com/users/sipsorcery/received_events",
         "repos_url" : "https://api.github.com/users/sipsorcery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipsorcery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipsorcery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-05T15:49:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832804020",
      "id" : 832804020,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjgwNDAyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T15:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832804020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Do minisketch's own tests get run when running `make check` from bitcoin's base directory? I think it'd be good to modify `make check` to only run the base bitcoin tests, and then have another build target (`make check_all`?) that also runs the subtree unit tests. Those subtrees only get updated every few months. I expect many developers run `make check` many times a day and it seems wasteful to rerun the same unmodified tests on the same unmodified subtrees every time.",
      "created_at" : "2021-05-06T09:56:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-833397513",
      "id" : 833397513,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMzM5NzUxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-06T09:56:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833397513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "CI would need to run them, though. As this is the only place where sanitizers are run regularly.",
      "created_at" : "2021-05-06T10:12:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-833407347",
      "id" : 833407347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMzQwNzM0Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-06T10:12:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833407347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21837 ([POC] Rust based Cuckoo Filter for m_addr_known by fanquake)\n* #21573 (Update libsecp256k1 subtree to latest master by sipa)\n* #20980 (guix: Test security-check sanity before performing them by dongcarl)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-05-07T09:10:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834196929",
      "id" : 834196929,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNDE5NjkyOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-08T21:33:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/834196929",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Failure on arm: `./build-aux/test-driver: line 107: ./test-verify: cannot execute binary file: Exec format error`\r\n\r\nYou might have to modify the `./ci/test/wrap-qemu.sh` script.",
      "created_at" : "2021-05-07T09:18:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834202423",
      "id" : 834202423,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNDIwMjQyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-07T09:18:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/834202423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r628444294"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628444294"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed, removed.",
      "commit_id" : "f180d4ee571b1c3dc2395742aeb08deb16aa85fa",
      "created_at" : "2021-05-07T19:01:30Z",
      "diff_hunk" : "@@ -0,0 +1,452 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Pieter Wuille, Greg Maxwell, Gleb Naumenko      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file LICENSE or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <new>\n+\n+#include \"../include/minisketch.h\"\n+\n+#include \"false_positives.h\"\n+#include \"sketch.h\"\n+\n+#ifdef HAVE_CLMUL\n+#include <cpuid.h>\n+#endif\n+\n+Sketch* ConstructGeneric1Byte(int bits, int implementation);\n+Sketch* ConstructGeneric2Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric3Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric4Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric5Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric6Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric7Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric8Bytes(int bits, int implementation);\n+\n+#ifdef HAVE_CLMUL\n+Sketch* ConstructClMul1Byte(int bits, int implementation);\n+Sketch* ConstructClMul2Bytes(int bits, int implementation);\n+Sketch* ConstructClMul3Bytes(int bits, int implementation);\n+Sketch* ConstructClMul4Bytes(int bits, int implementation);\n+Sketch* ConstructClMul5Bytes(int bits, int implementation);\n+Sketch* ConstructClMul6Bytes(int bits, int implementation);\n+Sketch* ConstructClMul7Bytes(int bits, int implementation);\n+Sketch* ConstructClMul8Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri1Byte(int bits, int implementation);\n+Sketch* ConstructClMulTri2Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri3Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri4Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri5Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri6Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri7Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri8Bytes(int bits, int implementation);\n+#endif\n+\n+namespace {\n+\n+enum class FieldImpl {\n+    GENERIC = 0,\n+#ifdef HAVE_CLMUL\n+    CLMUL,\n+    CLMUL_TRI,\n+#endif\n+};\n+\n+Sketch* Construct(int bits, int impl)\n+{\n+    switch (FieldImpl(impl)) {\n+    case FieldImpl::GENERIC:\n+        switch ((bits + 7) / 8) {\n+        case 1:\n+            return ConstructGeneric1Byte(bits, impl);\n+        case 2:\n+            return ConstructGeneric2Bytes(bits, impl);\n+        case 3:\n+            return ConstructGeneric3Bytes(bits, impl);\n+        case 4:\n+            return ConstructGeneric4Bytes(bits, impl);\n+        case 5:\n+            return ConstructGeneric5Bytes(bits, impl);\n+        case 6:\n+            return ConstructGeneric6Bytes(bits, impl);\n+        case 7:\n+            return ConstructGeneric7Bytes(bits, impl);\n+        case 8:\n+            return ConstructGeneric8Bytes(bits, impl);\n+        default:\n+            return nullptr;\n+        }\n+#ifdef HAVE_CLMUL\n+    case FieldImpl::CLMUL:\n+    case FieldImpl::CLMUL_TRI: {\n+        uint32_t eax, ebx, ecx, edx;\n+        if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & 0x2)) {\n+            switch ((bits + 7) / 8) {\n+            case 1:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul1Byte(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri1Byte(bits, impl);\n+            case 2:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul2Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri2Bytes(bits, impl);\n+            case 3:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul3Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri3Bytes(bits, impl);\n+            case 4:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul4Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri4Bytes(bits, impl);\n+            case 5:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul5Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri5Bytes(bits, impl);\n+            case 6:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul6Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri6Bytes(bits, impl);\n+            case 7:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul7Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri7Bytes(bits, impl);\n+            case 8:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul8Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri8Bytes(bits, impl);\n+            default:\n+                return nullptr;\n+            }\n+        }\n+    }\n+#endif\n+    }\n+    return nullptr;\n+}\n+\n+}\n+\n+extern \"C\" {\n+\n+int minisketch_bits_supported(uint32_t bits) {\n+#ifndef DISABLE_FIELD_2\n+    if (bits == 2) return true;\n+#endif\n+#ifndef DISABLE_FIELD_3\n+    if (bits == 3) return true;\n+#endif\n+#ifndef DISABLE_FIELD_4\n+    if (bits == 4) return true;\n+#endif\n+#ifndef DISABLE_FIELD_5\n+    if (bits == 5) return true;\n+#endif\n+#ifndef DISABLE_FIELD_6\n+    if (bits == 6) return true;\n+#endif\n+#ifndef DISABLE_FIELD_7\n+    if (bits == 7) return true;\n+#endif\n+#ifndef DISABLE_FIELD_8\n+    if (bits == 8) return true;\n+#endif\n+#ifndef DISABLE_FIELD_9\n+    if (bits == 9) return true;\n+#endif\n+#ifndef DISABLE_FIELD_10\n+    if (bits == 10) return true;\n+#endif\n+#ifndef DISABLE_FIELD_11\n+    if (bits == 11) return true;\n+#endif\n+#ifndef DISABLE_FIELD_12\n+    if (bits == 12) return true;\n+#endif\n+#ifndef DISABLE_FIELD_13\n+    if (bits == 13) return true;\n+#endif\n+#ifndef DISABLE_FIELD_14\n+    if (bits == 14) return true;\n+#endif\n+#ifndef DISABLE_FIELD_15\n+    if (bits == 15) return true;\n+#endif\n+#ifndef DISABLE_FIELD_16\n+    if (bits == 16) return true;\n+#endif\n+#ifndef DISABLE_FIELD_17\n+    if (bits == 17) return true;\n+#endif\n+#ifndef DISABLE_FIELD_18\n+    if (bits == 18) return true;\n+#endif\n+#ifndef DISABLE_FIELD_19\n+    if (bits == 19) return true;\n+#endif\n+#ifndef DISABLE_FIELD_20\n+    if (bits == 20) return true;\n+#endif\n+#ifndef DISABLE_FIELD_21\n+    if (bits == 21) return true;\n+#endif\n+#ifndef DISABLE_FIELD_22\n+    if (bits == 22) return true;\n+#endif\n+#ifndef DISABLE_FIELD_23\n+    if (bits == 23) return true;\n+#endif\n+#ifndef DISABLE_FIELD_24\n+    if (bits == 24) return true;\n+#endif\n+#ifndef DISABLE_FIELD_25\n+    if (bits == 25) return true;\n+#endif\n+#ifndef DISABLE_FIELD_26\n+    if (bits == 26) return true;\n+#endif\n+#ifndef DISABLE_FIELD_27\n+    if (bits == 27) return true;\n+#endif\n+#ifndef DISABLE_FIELD_28\n+    if (bits == 28) return true;\n+#endif\n+#ifndef DISABLE_FIELD_29\n+    if (bits == 29) return true;\n+#endif\n+#ifndef DISABLE_FIELD_30\n+    if (bits == 30) return true;\n+#endif\n+#ifndef DISABLE_FIELD_31\n+    if (bits == 31) return true;\n+#endif\n+#ifndef DISABLE_FIELD_32\n+    if (bits == 32) return true;\n+#endif\n+#ifndef DISABLE_FIELD_33\n+    if (bits == 33) return true;\n+#endif\n+#ifndef DISABLE_FIELD_34\n+    if (bits == 34) return true;\n+#endif\n+#ifndef DISABLE_FIELD_35\n+    if (bits == 35) return true;\n+#endif\n+#ifndef DISABLE_FIELD_36\n+    if (bits == 36) return true;\n+#endif\n+#ifndef DISABLE_FIELD_37\n+    if (bits == 37) return true;\n+#endif\n+#ifndef DISABLE_FIELD_38\n+    if (bits == 38) return true;\n+#endif\n+#ifndef DISABLE_FIELD_39\n+    if (bits == 39) return true;\n+#endif\n+#ifndef DISABLE_FIELD_40\n+    if (bits == 40) return true;\n+#endif\n+#ifndef DISABLE_FIELD_41\n+    if (bits == 41) return true;\n+#endif\n+#ifndef DISABLE_FIELD_42\n+    if (bits == 42) return true;\n+#endif\n+#ifndef DISABLE_FIELD_43\n+    if (bits == 43) return true;\n+#endif\n+#ifndef DISABLE_FIELD_44\n+    if (bits == 44) return true;\n+#endif\n+#ifndef DISABLE_FIELD_45\n+    if (bits == 45) return true;\n+#endif\n+#ifndef DISABLE_FIELD_46\n+    if (bits == 46) return true;\n+#endif\n+#ifndef DISABLE_FIELD_47\n+    if (bits == 47) return true;\n+#endif\n+#ifndef DISABLE_FIELD_48\n+    if (bits == 48) return true;\n+#endif\n+#ifndef DISABLE_FIELD_49\n+    if (bits == 49) return true;\n+#endif\n+#ifndef DISABLE_FIELD_50\n+    if (bits == 50) return true;\n+#endif\n+#ifndef DISABLE_FIELD_51\n+    if (bits == 51) return true;\n+#endif\n+#ifndef DISABLE_FIELD_52\n+    if (bits == 52) return true;\n+#endif\n+#ifndef DISABLE_FIELD_53\n+    if (bits == 53) return true;\n+#endif\n+#ifndef DISABLE_FIELD_54\n+    if (bits == 54) return true;\n+#endif\n+#ifndef DISABLE_FIELD_55\n+    if (bits == 55) return true;\n+#endif\n+#ifndef DISABLE_FIELD_56\n+    if (bits == 56) return true;\n+#endif\n+#ifndef DISABLE_FIELD_57\n+    if (bits == 57) return true;\n+#endif\n+#ifndef DISABLE_FIELD_58\n+    if (bits == 58) return true;\n+#endif\n+#ifndef DISABLE_FIELD_59\n+    if (bits == 59) return true;\n+#endif\n+#ifndef DISABLE_FIELD_60\n+    if (bits == 60) return true;\n+#endif\n+#ifndef DISABLE_FIELD_61\n+    if (bits == 61) return true;\n+#endif\n+#ifndef DISABLE_FIELD_62\n+    if (bits == 62) return true;\n+#endif\n+#ifndef DISABLE_FIELD_63\n+    if (bits == 63) return true;\n+#endif\n+#ifndef DISABLE_FIELD_64\n+    if (bits == 64) return true;\n+#endif\n+    return false;\n+}\n+\n+uint32_t minisketch_implementation_max() {\n+    uint32_t ret = 0;\n+#ifdef HAVE_CLMUL\n+    ret += 2;\n+#endif\n+    return ret;\n+}\n+\n+int minisketch_implementation_supported(uint32_t bits, uint32_t implementation) {\n+    if (!minisketch_bits_supported(bits) || implementation > minisketch_implementation_max()) {\n+        return 0;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            delete sketch;\n+            return 1;\n+        }\n+    } catch (std::bad_alloc& ba) {}\n+    return 0;\n+}\n+\n+minisketch* minisketch_create(uint32_t bits, uint32_t implementation, size_t capacity) {\n+    if (capacity == 0) {\n+        return nullptr;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            try {\n+                sketch->Init(capacity);\n+            } catch (std::bad_alloc& ba) {\n+                delete sketch;\n+                throw;\n+            }\n+            sketch->Ready();\n+        }\n+        return (minisketch*)sketch;\n+    } catch (std::bad_alloc& ba) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r628444294",
      "id" : 628444294,
      "in_reply_to_id" : 626504683,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODQ0NDI5NA==",
      "original_commit_id" : "7faf0937cf772a34794f1ad33c03fdee222252a7",
      "original_line" : 355,
      "original_position" : 355,
      "original_start_line" : null,
      "path" : "src/minisketch/src/minisketch.cpp",
      "position" : null,
      "pull_request_review_id" : 654786960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-07T19:01:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628444294",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r628444409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628444409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed, removed.",
      "commit_id" : "f180d4ee571b1c3dc2395742aeb08deb16aa85fa",
      "created_at" : "2021-05-07T19:01:37Z",
      "diff_hunk" : "@@ -0,0 +1,452 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Pieter Wuille, Greg Maxwell, Gleb Naumenko      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file LICENSE or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include <new>\n+\n+#include \"../include/minisketch.h\"\n+\n+#include \"false_positives.h\"\n+#include \"sketch.h\"\n+\n+#ifdef HAVE_CLMUL\n+#include <cpuid.h>\n+#endif\n+\n+Sketch* ConstructGeneric1Byte(int bits, int implementation);\n+Sketch* ConstructGeneric2Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric3Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric4Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric5Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric6Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric7Bytes(int bits, int implementation);\n+Sketch* ConstructGeneric8Bytes(int bits, int implementation);\n+\n+#ifdef HAVE_CLMUL\n+Sketch* ConstructClMul1Byte(int bits, int implementation);\n+Sketch* ConstructClMul2Bytes(int bits, int implementation);\n+Sketch* ConstructClMul3Bytes(int bits, int implementation);\n+Sketch* ConstructClMul4Bytes(int bits, int implementation);\n+Sketch* ConstructClMul5Bytes(int bits, int implementation);\n+Sketch* ConstructClMul6Bytes(int bits, int implementation);\n+Sketch* ConstructClMul7Bytes(int bits, int implementation);\n+Sketch* ConstructClMul8Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri1Byte(int bits, int implementation);\n+Sketch* ConstructClMulTri2Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri3Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri4Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri5Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri6Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri7Bytes(int bits, int implementation);\n+Sketch* ConstructClMulTri8Bytes(int bits, int implementation);\n+#endif\n+\n+namespace {\n+\n+enum class FieldImpl {\n+    GENERIC = 0,\n+#ifdef HAVE_CLMUL\n+    CLMUL,\n+    CLMUL_TRI,\n+#endif\n+};\n+\n+Sketch* Construct(int bits, int impl)\n+{\n+    switch (FieldImpl(impl)) {\n+    case FieldImpl::GENERIC:\n+        switch ((bits + 7) / 8) {\n+        case 1:\n+            return ConstructGeneric1Byte(bits, impl);\n+        case 2:\n+            return ConstructGeneric2Bytes(bits, impl);\n+        case 3:\n+            return ConstructGeneric3Bytes(bits, impl);\n+        case 4:\n+            return ConstructGeneric4Bytes(bits, impl);\n+        case 5:\n+            return ConstructGeneric5Bytes(bits, impl);\n+        case 6:\n+            return ConstructGeneric6Bytes(bits, impl);\n+        case 7:\n+            return ConstructGeneric7Bytes(bits, impl);\n+        case 8:\n+            return ConstructGeneric8Bytes(bits, impl);\n+        default:\n+            return nullptr;\n+        }\n+#ifdef HAVE_CLMUL\n+    case FieldImpl::CLMUL:\n+    case FieldImpl::CLMUL_TRI: {\n+        uint32_t eax, ebx, ecx, edx;\n+        if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & 0x2)) {\n+            switch ((bits + 7) / 8) {\n+            case 1:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul1Byte(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri1Byte(bits, impl);\n+            case 2:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul2Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri2Bytes(bits, impl);\n+            case 3:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul3Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri3Bytes(bits, impl);\n+            case 4:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul4Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri4Bytes(bits, impl);\n+            case 5:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul5Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri5Bytes(bits, impl);\n+            case 6:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul6Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri6Bytes(bits, impl);\n+            case 7:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul7Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri7Bytes(bits, impl);\n+            case 8:\n+                if (FieldImpl(impl) == FieldImpl::CLMUL) return ConstructClMul8Bytes(bits, impl);\n+                if (FieldImpl(impl) == FieldImpl::CLMUL_TRI) return ConstructClMulTri8Bytes(bits, impl);\n+            default:\n+                return nullptr;\n+            }\n+        }\n+    }\n+#endif\n+    }\n+    return nullptr;\n+}\n+\n+}\n+\n+extern \"C\" {\n+\n+int minisketch_bits_supported(uint32_t bits) {\n+#ifndef DISABLE_FIELD_2\n+    if (bits == 2) return true;\n+#endif\n+#ifndef DISABLE_FIELD_3\n+    if (bits == 3) return true;\n+#endif\n+#ifndef DISABLE_FIELD_4\n+    if (bits == 4) return true;\n+#endif\n+#ifndef DISABLE_FIELD_5\n+    if (bits == 5) return true;\n+#endif\n+#ifndef DISABLE_FIELD_6\n+    if (bits == 6) return true;\n+#endif\n+#ifndef DISABLE_FIELD_7\n+    if (bits == 7) return true;\n+#endif\n+#ifndef DISABLE_FIELD_8\n+    if (bits == 8) return true;\n+#endif\n+#ifndef DISABLE_FIELD_9\n+    if (bits == 9) return true;\n+#endif\n+#ifndef DISABLE_FIELD_10\n+    if (bits == 10) return true;\n+#endif\n+#ifndef DISABLE_FIELD_11\n+    if (bits == 11) return true;\n+#endif\n+#ifndef DISABLE_FIELD_12\n+    if (bits == 12) return true;\n+#endif\n+#ifndef DISABLE_FIELD_13\n+    if (bits == 13) return true;\n+#endif\n+#ifndef DISABLE_FIELD_14\n+    if (bits == 14) return true;\n+#endif\n+#ifndef DISABLE_FIELD_15\n+    if (bits == 15) return true;\n+#endif\n+#ifndef DISABLE_FIELD_16\n+    if (bits == 16) return true;\n+#endif\n+#ifndef DISABLE_FIELD_17\n+    if (bits == 17) return true;\n+#endif\n+#ifndef DISABLE_FIELD_18\n+    if (bits == 18) return true;\n+#endif\n+#ifndef DISABLE_FIELD_19\n+    if (bits == 19) return true;\n+#endif\n+#ifndef DISABLE_FIELD_20\n+    if (bits == 20) return true;\n+#endif\n+#ifndef DISABLE_FIELD_21\n+    if (bits == 21) return true;\n+#endif\n+#ifndef DISABLE_FIELD_22\n+    if (bits == 22) return true;\n+#endif\n+#ifndef DISABLE_FIELD_23\n+    if (bits == 23) return true;\n+#endif\n+#ifndef DISABLE_FIELD_24\n+    if (bits == 24) return true;\n+#endif\n+#ifndef DISABLE_FIELD_25\n+    if (bits == 25) return true;\n+#endif\n+#ifndef DISABLE_FIELD_26\n+    if (bits == 26) return true;\n+#endif\n+#ifndef DISABLE_FIELD_27\n+    if (bits == 27) return true;\n+#endif\n+#ifndef DISABLE_FIELD_28\n+    if (bits == 28) return true;\n+#endif\n+#ifndef DISABLE_FIELD_29\n+    if (bits == 29) return true;\n+#endif\n+#ifndef DISABLE_FIELD_30\n+    if (bits == 30) return true;\n+#endif\n+#ifndef DISABLE_FIELD_31\n+    if (bits == 31) return true;\n+#endif\n+#ifndef DISABLE_FIELD_32\n+    if (bits == 32) return true;\n+#endif\n+#ifndef DISABLE_FIELD_33\n+    if (bits == 33) return true;\n+#endif\n+#ifndef DISABLE_FIELD_34\n+    if (bits == 34) return true;\n+#endif\n+#ifndef DISABLE_FIELD_35\n+    if (bits == 35) return true;\n+#endif\n+#ifndef DISABLE_FIELD_36\n+    if (bits == 36) return true;\n+#endif\n+#ifndef DISABLE_FIELD_37\n+    if (bits == 37) return true;\n+#endif\n+#ifndef DISABLE_FIELD_38\n+    if (bits == 38) return true;\n+#endif\n+#ifndef DISABLE_FIELD_39\n+    if (bits == 39) return true;\n+#endif\n+#ifndef DISABLE_FIELD_40\n+    if (bits == 40) return true;\n+#endif\n+#ifndef DISABLE_FIELD_41\n+    if (bits == 41) return true;\n+#endif\n+#ifndef DISABLE_FIELD_42\n+    if (bits == 42) return true;\n+#endif\n+#ifndef DISABLE_FIELD_43\n+    if (bits == 43) return true;\n+#endif\n+#ifndef DISABLE_FIELD_44\n+    if (bits == 44) return true;\n+#endif\n+#ifndef DISABLE_FIELD_45\n+    if (bits == 45) return true;\n+#endif\n+#ifndef DISABLE_FIELD_46\n+    if (bits == 46) return true;\n+#endif\n+#ifndef DISABLE_FIELD_47\n+    if (bits == 47) return true;\n+#endif\n+#ifndef DISABLE_FIELD_48\n+    if (bits == 48) return true;\n+#endif\n+#ifndef DISABLE_FIELD_49\n+    if (bits == 49) return true;\n+#endif\n+#ifndef DISABLE_FIELD_50\n+    if (bits == 50) return true;\n+#endif\n+#ifndef DISABLE_FIELD_51\n+    if (bits == 51) return true;\n+#endif\n+#ifndef DISABLE_FIELD_52\n+    if (bits == 52) return true;\n+#endif\n+#ifndef DISABLE_FIELD_53\n+    if (bits == 53) return true;\n+#endif\n+#ifndef DISABLE_FIELD_54\n+    if (bits == 54) return true;\n+#endif\n+#ifndef DISABLE_FIELD_55\n+    if (bits == 55) return true;\n+#endif\n+#ifndef DISABLE_FIELD_56\n+    if (bits == 56) return true;\n+#endif\n+#ifndef DISABLE_FIELD_57\n+    if (bits == 57) return true;\n+#endif\n+#ifndef DISABLE_FIELD_58\n+    if (bits == 58) return true;\n+#endif\n+#ifndef DISABLE_FIELD_59\n+    if (bits == 59) return true;\n+#endif\n+#ifndef DISABLE_FIELD_60\n+    if (bits == 60) return true;\n+#endif\n+#ifndef DISABLE_FIELD_61\n+    if (bits == 61) return true;\n+#endif\n+#ifndef DISABLE_FIELD_62\n+    if (bits == 62) return true;\n+#endif\n+#ifndef DISABLE_FIELD_63\n+    if (bits == 63) return true;\n+#endif\n+#ifndef DISABLE_FIELD_64\n+    if (bits == 64) return true;\n+#endif\n+    return false;\n+}\n+\n+uint32_t minisketch_implementation_max() {\n+    uint32_t ret = 0;\n+#ifdef HAVE_CLMUL\n+    ret += 2;\n+#endif\n+    return ret;\n+}\n+\n+int minisketch_implementation_supported(uint32_t bits, uint32_t implementation) {\n+    if (!minisketch_bits_supported(bits) || implementation > minisketch_implementation_max()) {\n+        return 0;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            delete sketch;\n+            return 1;\n+        }\n+    } catch (std::bad_alloc& ba) {}\n+    return 0;\n+}\n+\n+minisketch* minisketch_create(uint32_t bits, uint32_t implementation, size_t capacity) {\n+    if (capacity == 0) {\n+        return nullptr;\n+    }\n+    try {\n+        Sketch* sketch = Construct(bits, implementation);\n+        if (sketch) {\n+            try {\n+                sketch->Init(capacity);\n+            } catch (std::bad_alloc& ba) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#discussion_r628444409",
      "id" : 628444409,
      "in_reply_to_id" : 626505082,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODQ0NDQwOQ==",
      "original_commit_id" : "7faf0937cf772a34794f1ad33c03fdee222252a7",
      "original_line" : 348,
      "original_position" : 348,
      "original_start_line" : null,
      "path" : "src/minisketch/src/minisketch.cpp",
      "position" : null,
      "pull_request_review_id" : 654787045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21859",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-07T19:01:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628444409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipsorcery Thanks, I've incorporated some of your changes (see https://github.com/sipa/minisketch/pull/36), and MSVC build/test works now.\r\n\r\nAt least one issue remains: when running the minisketch tests, wine can't find libgcc and other dlls. In minisketch's own CI that's worked around by passing `CXXFLAGS=-static -static-libgcc -static-libstdc++`, but it's a bit ugly to pass that through to the sub-configure (a) only for the win64 cirrus build and (b) without doing that for non-minisketch targets. Anyone have a suggestion?\r\n* Make wine find the necessary dll's somehow?\r\n* Just pass `CXXFLAGS=-static -static-libgcc -static-libstdc++` in general to the win64 cirrus configure?\r\n* I have no idea how `src/test/test_bitcoin.exe` avoids this problem, but perhaps its solution is usable too?\r\n",
      "created_at" : "2021-05-07T19:06:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834703011",
      "id" : 834703011,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNDcwMzAxMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-07T19:13:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/834703011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nVery nice work sipa, gmaxwell and naumenkogs!\r\n\r\nIs it mentioned somewhere in the documentation that `Minisketch::Add` is not an idempotent operation?\r\n\r\nIn other words that â¦\r\n\r\n```\r\nsketch.Add(i);\r\n```\r\n\r\nâ¦ does not have the same effect as â¦\r\n\r\n```\r\nsketch.Add(i);\r\nsketch.Add(i);\r\n```\r\n\r\nFWIW I couldn't find any such note in `src/minisketch/include/minisketch.h` :)",
      "created_at" : "2021-05-07T20:22:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834750354",
      "id" : 834750354,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNDc1MDM1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-07T20:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/834750354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift It's explained in https://github.com/sipa/minisketch/#readme at least, and inherent to symmetric set reconciliation. I don't think the header file should try to explain set reconciliation in detail, but if you have specific suggestions to improve the header, feel free to PR them (in the minisketch repo).",
      "created_at" : "2021-05-07T21:10:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834782141",
      "id" : 834782141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNDc4MjE0MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-07T21:10:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/834782141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @practicalswift It's explained in https://github.com/sipa/minisketch/#readme at least, and inherent to symmetric set reconciliation. I don't think the header file should try to explain set reconciliation in detail, but if you have specific suggestions to improve the header, feel free to PR them (in the minisketch repo).\r\n\r\nI think the following should be enough to help avoid unnecessary mistakes in calling code in the hypothetical scenario that the library user is not familiar with set reconciliation details. Submitted as https://github.com/sipa/minisketch/pull/38.\r\n\r\n```patch\r\ndiff --git a/include/minisketch.h b/include/minisketch.h\r\nindex d73123d..23af18f 100644\r\n--- a/include/minisketch.h\r\n+++ b/include/minisketch.h\r\n@@ -104,6 +104,8 @@ void minisketch_deserialize(minisketch* sketch, const unsigned char* input);\r\n  * If the element to be added is 0 (after potentially dropping the most significant\r\n  * bits), then this function is a no-op. Sketches cannot contain an element with\r\n  * the value 0.\r\n+ *\r\n+ * Note that adding the same element a second time removes it again.\r\n  */\r\n void minisketch_add_uint64(minisketch* sketch, uint64_t element);\r\n\r\n@@ -246,7 +248,7 @@ public:\r\n         return *this;\r\n     }\r\n\r\n-    /** See miniksetch_add_element(). */\r\n+    /** See minisketch_add_uint64(). */\r\n     Minisketch& Add(uint64_t element) noexcept\r\n     {\r\n         minisketch_add_uint64(m_minisketch.get(), element);\r\n```",
      "created_at" : "2021-05-07T21:57:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834807963",
      "id" : 834807963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNDgwNzk2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-07T21:57:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/834807963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Another interface design question:\r\n\r\nThe `Minisketch` constructor does not signal constructor failure by throwing.\r\n\r\nIs that intentional to allow for use in non-Bitcoin Core environments where using exceptions may not be an option?\r\n\r\nI'm a bit worried that the current design might introduce a gotcha/sharp edge which is probably best illustrated by the example below.\r\n\r\nTo be clear: I understand there is a trade-off here and perhaps this gotcha is a price worth paying for a potentially larger user base of the library outside of Bitcoin Core, but I just want to make sure I fully understand the rationale behind the current interface design :)\r\n\r\n---\r\n\r\n**Highly optional review club style quiz (target audience: reviewers and library users :))**\r\n\r\n\r\nAfter reading the documentation in `include/minisketch.h` a library user might write the following code:\r\n\r\n```c++\r\nconstexpr size_t FIELD_SIZE = 32;\r\nconstexpr size_t BYTES_PER_SKETCH_CAPACITY = FIELD_SIZE / 8;\r\nconstexpr size_t MAX_SKETCH_CAPACITY = 8192;\r\n\r\nvoid ProcessSketchMessage(const std::vector<uint8_t>& remote_sketch_serialized) {\r\n    const size_t remote_capacity = remote_sketch_serialized.size() / BYTES_PER_SKETCH_CAPACITY;\r\n    if (remote_capacity > MAX_SKETCH_CAPACITY) {\r\n        // Sketch too large. Skip processing.\r\n        return;\r\n    }\r\n    Minisketch remote_sketch{FIELD_SIZE, 0, remote_capacity};\r\n    if (remote_sketch_serialized.size() != remote_sketch.GetSerializedSize()) {\r\n        // Unexpected sketch size. Skip processing.\r\n        return;\r\n    }\r\n    remote_sketch.Deserialize(remote_sketch_serialized);\r\n    // â¦\r\n    // Do something useful.\r\n    // â¦\r\n}\r\n```\r\n\r\nLooks quite reasonable? :)\r\n\r\nThe library user is happy with his/her code: he/she gets the expected results when testing it using a couple of thousand normal test cases. Symmetric set reconciliation is fun! :)\r\n\r\nHowever, the library user becomes a bit sad when an attacker shows up and provides a carefully crafted input which causes a `nullptr` dereference.\r\n\r\nReview club style quiz questions:\r\n* What is the attacker input that caused the `nullptr` dereference?\r\n* Where does the `nullptr` dereference take place?\r\n* Did the library user miss anything of importance when reading the documentation in `include/minisketch.h`?\r\n* What is the conventional approach to construction failure and what is the \"zombie object\" approach? When/why is the latter approach used?\r\n",
      "created_at" : "2021-05-08T15:12:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835397936",
      "id" : 835397936,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTM5NzkzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-08T15:12:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835397936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift You mean because the construction internally OOMs? If that happens you have bigger problems, I think, as you'd generally use this with capacities of 10s to maybe 1000s. Beyond that, O(n^2) decoding cost starts to make it unusable.",
      "created_at" : "2021-05-08T15:19:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835399963",
      "id" : 835399963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTM5OTk2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-08T15:19:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835399963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> You mean because the construction internally OOMs? If that happens you have bigger problems, I think, as you'd generally use this with capacities of 10s to maybe 1000s. Beyond that, O(n^2) decoding cost starts to make it unusable.\r\n\r\n@sipa No, note that the user code in the example is very careful about not processing large inputs, so memory exhaustion or excessive run-time is not the problem here.\r\n\r\nThe `if (remote_capacity > MAX_SKETCH_CAPACITY) {` guards against large inputs:\r\n\r\n```c++\r\nconstexpr size_t FIELD_SIZE = 32;\r\nconstexpr size_t BYTES_PER_SKETCH_CAPACITY = FIELD_SIZE / 8;\r\nconstexpr size_t MAX_SKETCH_CAPACITY = 8192;\r\n\r\nvoid ProcessSketchMessage(const std::vector<uint8_t>& remote_sketch_serialized) {\r\n    const size_t remote_capacity = remote_sketch_serialized.size() / BYTES_PER_SKETCH_CAPACITY;\r\n    if (remote_capacity > MAX_SKETCH_CAPACITY) {\r\n        // Sketch too large. Skip processing.\r\n        return;\r\n    }\r\n    Minisketch remote_sketch{FIELD_SIZE, 0, remote_capacity};\r\n    if (remote_sketch_serialized.size() != remote_sketch.GetSerializedSize()) {\r\n        // Unexpected sketch size. Skip processing.\r\n        return;\r\n    }\r\n    remote_sketch.Deserialize(remote_sketch_serialized);\r\n    // â¦\r\n    // Do something useful.\r\n    // â¦\r\n}\r\n```\r\n\r\n**WARNING! Spoiler alert! WARNING!**\r\n\r\n<details>\r\n<summary>Click to show spoiler</summary>\r\nConsider what happens when the attacker submits a \"mini-minisketch\": in other words a tiny tiny input... :)\r\n</details>\r\n\r\n",
      "created_at" : "2021-05-08T17:41:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835442997",
      "id" : 835442997,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTQ0Mjk5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-08T17:41:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835442997",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift You can use `if (sketch)` to detect if a sketch is usable, which may be the case for several reasons (field not implemented, implementation number too high or incompatible with field, illegal capacity, OOM, ...).\r\n\r\nSee https://github.com/sipa/minisketch/pull/39 for some improvements to the documentation.",
      "created_at" : "2021-05-08T17:47:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835445069",
      "id" : 835445069,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTQ0NTA2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-08T18:39:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835445069",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa \r\n\r\n> You can use `if (sketch)` to detect if a sketch is usable, which may be the case for several reasons (field not implemented, implementation number too high or incompatible with field, illegal capacity, OOM, ...).\r\n>\r\n> See [sipa/minisketch#39](https://github.com/sipa/minisketch/pull/39) for some improvements to the documentation.\r\n\r\nThanks for updating the documentation. Now the gotcha is documented: that is better :)\r\n\r\nI'm aware that `operator bool()` can be used to check if a `Minisketch` object is a valid object or a zombie object: I'm just afraid that there is a real risk of \"use-before-zombie-check\" errors.\r\n\r\nMy experience is that signalling constructor failure by silently creating a zombie object (instead of throwing) leads to fragile code. Most C++ programmers are used to constructors that either create a fully valid object or throw. Even if the programmer is aware that the somewhat unusual \"zombie check idiom\" is used it is very easy to miss checking it in at least some code path.\r\n\r\nSee the current Erlay code [`txreconciliation.cpp`](https://github.com/bitcoin/bitcoin/blob/1d8d43ed095ef7abade4d62ddc2ede34d4a1a59b/src/txreconciliation.cpp) (#21515) as an example. Not all code paths do \"zombie checking\" using `operator bool()` before using a newly created `Minisketch` object.\r\n\r\nConsider this example:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/1d8d43ed095ef7abade4d62ddc2ede34d4a1a59b/src/txreconciliation.cpp#L559\r\n\r\nIf we were throwing instead of creating a zombie object in case of constructor failure we wouldn't have to worry about a potential `nullptr` dereference here.\r\n\r\nThat's why I'm curious about this interface design choice to better understand the trade-offs considered: are we intentionally avoiding throwing to allow for use in non-Bitcoin Core environments where using exceptions may not be an option, or am I missing some other reason for this design choice? :)",
      "created_at" : "2021-05-08T22:36:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835550512",
      "id" : 835550512,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTU1MDUxMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-08T22:36:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835550512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Many environments [prohibit exceptions or greatly restrict their use](https://google.github.io/styleguide/cppguide.html#Exceptions) as they are a regular source of latent serious bugs.  You need error handling. Punting by soft-crashing and hoping something even *further* away from the source of the error is somehow better able to handle it is often not an improvement.  Especially when you're talking about handling bad input (as opposed to something like malloc failure) exceptions are not particularly appropriate.\r\n\r\n> If we were throwing instead of creating a zombie object in case of constructor failure we wouldn't have to worry about a potential nullptr dereference here.\r\n\r\nNo, instead you end up with bugs like \"minisketch gets used for blockpropagation and ends up erroneously marking the block invalid, rather than harmlessly discarding a corrupt message\" because there was a hidden exception that could be thrown which got handled in the wrong place by the wrong thing.  A null pointer dereference would be safe by comparison, and a lack of checking for it can also easily be found by static analysis (e.g. coverity will warn if you inconsistently null check the pointer output of specific functions).",
      "created_at" : "2021-05-08T23:18:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835568120",
      "id" : 835568120,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTU2ODEyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-08T23:39:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835568120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift Exceptions in my opinion are for exceptional situations - things that couldn't have been reasonably prevented by the programmer (things like I/O failure, for example), as they can be deep down in a function call stack, and dealing with them along the way there is both inconvenient and pointless. Except for OOM perhaps, none of the cases where Minisketch construction fails are like this - they all indicate the programmer is doing something wrong. It wouldn't be unreasonable to have assertions for them instead, I guess. OOM is a bit different as it is an exceptional situation, but it's also one that can't occur realistically (due to the size of sketches libminisketch can work with) and is almost always a nothing-can-be-done-about-this situation (you'd just terminate as ~all allocations will fail).",
      "created_at" : "2021-05-09T00:15:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835587369",
      "id" : 835587369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTU4NzM2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-09T00:16:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835587369",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa\r\n\r\nAssuming that we really don't want to throw in the constructor:\r\n\r\nPerhaps an alternative could be to use the named constructor idiom and return `std::optional<Minisketch>`? (With `std::nullopt` being returned if a valid/usable `Minisketch` object could not constructed.)\r\n\r\nSomething along the lines of:\r\n\r\n```c++\r\nclass Minisketch {\r\nprivate:\r\n    Minisketch(uint32_t bits, uint32_t implementation, size_t capacity) noexcept;\r\n    â¦\r\npublic:\r\n    static std::optional<Minisketch> Create(uint32_t bits, uint32_t implementation, size_t capacity) noexcept;\r\n    â¦\r\n}\r\n```\r\n\r\nTo be precise the situation I'm worried about with the current design is when `capacity` in `Minisketch(uint32_t bits, uint32_t implementation, size_t capacity)` is indirectly attacker controlled via the attacker provided serialized sketch, and the programmer forgets to check the possibility of a zombie state `Minisketch` object before using it. Note that if `capacity` is `0` then an invalid zombie state `Minisketch` object is created, and using such an invalid `Minisketch` object will cause a `nullptr` dereference as the library is currently written.\r\n\r\nNote that the programmer is likely to check for a \"too large\" sketch: he/she is likely to intuitively understand that such a thing might be dangerous, but the fact that a \"too small\" sketch is dangerous too is a real gotcha IMO :)\r\n\r\n> Exceptions in my opinion are for exceptional situations - things that couldn't have been reasonably prevented by the programmer (things like I/O failure, for example), as they can be deep down in a function call stack, and dealing with them along the way there is both inconvenient and pointless.\r\n\r\nThanks for sharing your perspective. I know you're well aware of all the usual counterarguments, but I'm sharing some links to other perspectives for reviewers who might be unaware :)\r\n\r\n* C++ Core Guidelines: [C.42: If a constructor cannot construct a valid object, throw an exception. Leaving behind an invalid object is asking for trouble.](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c42-if-a-constructor-cannot-construct-a-valid-object-throw-an-exception)\r\n* C++ Core Guidelines: [C.41: A constructor should create a fully initialized object. A constructor establishes the invariant for a class. A user of a class should be able to assume that a constructed object is usable.](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c41-a-constructor-should-create-a-fully-initialized-object)\r\n* The Standard C++ Foundation's C++ FAQ: [How can I handle a constructor that fails? Throw an exception. [â¦] The idea of a âzombieâ object has a lot of down-side.](https://isocpp.org/wiki/faq/exceptions#ctors-can-throw)",
      "created_at" : "2021-05-09T22:31:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835912345",
      "id" : 835912345,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTkxMjM0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-09T22:31:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835912345",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Perhaps an alternative could be to use the named constructor idiom and return std::optional<Minisketch>\r\n\r\nI think that's rather silly, because that's effectively what a Minisketch object already is. It is a simple wrapper around std::unique_ptr<internal type>, and behaves exactly like that (except that the internal object is not accessible).",
      "created_at" : "2021-05-09T22:35:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835913660",
      "id" : 835913660,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTkxMzY2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-09T22:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835913660",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa \r\n\r\nI think you're missing my point.\r\n\r\nPerhaps my point is better explained in code.\r\n\r\nExecuting â¦\r\n\r\n```\r\nMinisketch sketch{32, 0, /* likely to be attacker controlled */ 0};\r\nsketch.GetCapacity(); // or really any operation on the invalid Minisketch zombie object\r\n```\r\n\r\nâ¦ currently yields â¦\r\n\r\n```\r\n==30177==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x55a2bc704dcb bp 0x7ffe524b6070 sp 0x7ffe524b6040 T0)\r\n==30177==The signal is caused by a READ memory access.\r\n==30177==Hint: address points to the zero page.\r\n    #0 0x55a2bc704dcb in Sketch::Check() const /home/thomas/bitcoin/src/minisketch/src/sketch.h:24:39\r\n    #1 0x55a2bc704dcb in minisketch_capacity /home/thomas/bitcoin/src/minisketch/src/minisketch.cpp:368:8\r\n    #2 0x55a2bb3fc61b in Minisketch::GetCapacity() const ./minisketch/include/minisketch.h:239:50\r\nâ¦\r\n```\r\n\r\nIs that how we want it to work? :)",
      "created_at" : "2021-05-09T22:49:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835918711",
      "id" : 835918711,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTkxODcxMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-09T22:50:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835918711",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift I understand your point, but I don't think there is a big difference with what you're suggesting.\r\n\r\n```c++\r\nstd::optional<Minisketch> sketch = Minisketch::Create(32, 0, 0);\r\nsketch->GetCapacity();\r\n```\r\n\r\nis equally going to cause problems, if the API user isn't aware the create call can fail. And when those problems appear, it'll be obvious where the problem is.\r\n\r\nPerhaps a better question is: would removing the capacity==0 edge case not solve more problems?",
      "created_at" : "2021-05-09T23:28:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835937493",
      "id" : 835937493,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21859",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNTkzNzQ5Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-09T23:45:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/835937493",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
