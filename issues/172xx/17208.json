{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Make all tests pass UBSan (`-fsanitize=undefined`) without using any UBSan suppressions.\r\n\r\nNote that the commit c8c393b149f975f13e3ac7e4be17196d7c482b69 needs to be cherry-picked in from PR #17156 to get rid of the two alignment related suppressions :)\r\n\r\nBefore this PR:\r\n\r\n```\r\n$ ./configure --with-sanitizers=undefined\r\n$ make\r\n$ UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1\" src/test/test_bitcoin\r\nâ¦\r\nvalidation.cpp:2563:164: runtime error: division by zero\r\nvalidation.cpp:2568:138: runtime error: division by zero\r\nvalidation.cpp:2573:161: runtime error: division by zero\r\nvalidation.cpp:2582:164: runtime error: division by zero\r\nvalidation.cpp:2583:144: runtime error: division by zero\r\npolicy/fees.cpp:347:44: runtime error: division by zero\r\npolicy/fees.cpp:344:44: runtime error: division by zero\r\nwallet/wallet.cpp:2049:67: runtime error: division by zero\r\nwallet/wallet.cpp:3280:51: runtime error: division by zero\r\nwallet/wallet.cpp:3283:51: runtime error: division by zero\r\nâ¦\r\n$ echo $?\r\n1\r\n$ UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1\" test/functional/test_runner.py\r\nâ¦\r\nAssertionError: Unexpected stderr validation.cpp:2563:164: runtime error: division by zero\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior validation.cpp:2563:164 in\r\nvalidation.cpp:2568:138: runtime error: division by zero\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior validation.cpp:2568:138 in\r\nvalidation.cpp:2573:161: runtime error: division by zero\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior validation.cpp:2573:161 in\r\nvalidation.cpp:2582:164: runtime error: division by zero\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior validation.cpp:2582:164 in\r\nvalidation.cpp:2583:144: runtime error: division by zero\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior validation.cpp:2583:144 in !=\r\nâ¦\r\n$ echo $?\r\n1\r\n```\r\n\r\nAfter this PR (with cherry-pick as described above):\r\n\r\n```\r\n$ ./configure --with-sanitizers=undefined\r\n$ make\r\n$ UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1\" src/test/test_bitcoin\r\n$ echo $?\r\n0\r\n$ UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1\" test/functional/test_runner.py\r\n$ echo $?\r\n0\r\n```\r\n\r\nNote: This PR is not a bug fix (there is no bug to fix!). We assume the floating-point types to fulfil the requirements of IEC 559 (IEEE 754) standard: floating-point division by zero is thus well-defined.\r\n\r\nThe IEC 559 (IEEE 754) assumption is made explicitly in `assumptions.h` and also checked at compile-time:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/a22b62481aae95747830bd3c0db3227860b12d8e/src/compat/assumptions.h#L31-L36\r\n\r\nHowever, UBSan is not aware of that assumption we're making.\r\n\r\nThis PR uses `std::numeric_limits<double>::infinity()` explicitly in places where we would otherwise compute `something/0.0`.\r\n\r\nThis is enough to get rid of the UBSan warnings.\r\n\r\nContext:\r\n\r\n```\r\n$ cling\r\n[cling]$ #include <limits>\r\n[cling]$ 1.0 / 0.0\r\n(double) inf\r\n[cling]$ std::numeric_limits<double>::infinity()\r\n(double) inf\r\n[cling]$ 1.0 / 0.0 == std::numeric_limits<double>::infinity()\r\n(bool) true\r\n[cling]$ #include <cstdio>\r\n[cling]$ printf(\"inf: %f\\n\", 1.0/0.0);\r\ninf: inf\r\n[cling]$ printf(\"inf: %f\\n\", std::numeric_limits<double>::infinity());\r\ninf: inf\r\n[cling]$ printf(\"inf: %.2f\\n\", 1.0/0.0);\r\ninf: inf\r\n[cling]$ printf(\"inf: %.2f\\n\", std::numeric_limits<double>::infinity());\r\ninf: inf\r\n```\r\n\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17208/comments",
   "created_at" : "2019-10-21T17:17:03Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17208/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/17208",
   "id" : 510134234,
   "labels" : [
      {
         "color" : "E6F6D6",
         "default" : false,
         "id" : 135961,
         "name" : "Refactoring",
         "node_id" : "MDU6TGFiZWwxMzU5NjE=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17208/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0MzMwNTUyODc1",
   "number" : 17208,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/17208.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17208",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/17208.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17208"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Make all tests pass UBSan without using any UBSan suppressions",
   "updated_at" : "2019-10-21T18:20:11Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17208",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
