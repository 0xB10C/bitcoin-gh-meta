[
   {
      "author_association" : "MEMBER",
      "body" : "ACK 50037e97d11356218c4b36767232e47b74742b0b - tested on on macOS, will wait for the gitian build.\r\n\r\nThis came up as part of the discussion in #16392, which was going to bump our Clang version from `3.7.1` to `6.0.1`. Cory suggested moving straight to latest (`9.0.0`), and we discovered that Boost wouldn't build.\r\n\r\nFor a long time, Clangs `-dumpversion` has been hardcoded to return `4.2.1` (for compatibility with GCC), this was changed with Clang 9.0.0 ([details here](https://reviews.llvm.org/D56803)).\r\n\r\nThis breaks our Boost compilation when using [`toolset=darwin-4.2.1`](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/boost.mk#L13). You can see how Boost is currently being configured on macOS in [darwin.jam](https://github.com/boostorg/build/blob/develop/src/tools/darwin.jam). The new profile is [clang-darwin.jam](https://github.com/boostorg/build/blob/develop/src/tools/clang-darwin.jam).\r\n\r\n> Also switch to using ar rather than libtool for archiving, as it's what the clang-darwin profile expects to be using.\r\n\r\nThe clang-darwin config [does expect `ar`](https://github.com/boostorg/build/blob/develop/src/tools/clang-darwin.jam#L118).\r\nThe darwin config [used to use libtool](https://github.com/boostorg/build/blob/develop/src/tools/darwin.jam#L615).\r\n\r\n> Note that because this is using a different profile, some of the final command-line arguments end up changing. Those changes look sane at a glance.\r\n\r\nFrom what I can see, the changed options between the two configurations are:\r\n\r\nWe've lost `-gdwarf-2 -fexceptions -Wno-long-long -fpermissive -pedantic`:\r\n\r\n`-gdwarf-2` `Produce debugging information in DWARF version 2 format`\r\n`-fexceptions` `Enable exception handling.`\r\n`-fpermissive` `Downgrade some diagnostics about nonconformant code from errors to warnings.`\r\n`-Wpedantic` `Issue warnings needed for strict compliance to the standard.`\r\n\r\nand picked up `-x c++ -Wno-variadic-macros`:\r\n\r\n`-x <language>` `Treat subsequent input files as having type <language>`\r\n`-Wvariadic-macros` `Warn about using variadic macros.`\r\n\r\nNote that `-Wno-long-long` is still being passed, it just used to be passed twice. Example full commands are below.\r\n\r\n`toolset=darwin-4.2.1`:\r\n```\r\ndarwin.compile.c++ bin.v2/libs/thread/build/darwin-4.2.1/release/link-static/threadapi-pthread/threading-multi/visibility-hidden/future.o\r\n\r\n    \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++\" \"-mmacosx-version-min=10.10\" \"-stdlib=libc++\" \"--sysroot\" \"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\"   -fvisibility-inlines-hidden -std=c++11 -fvisibility=hidden     -I/Users/michael/github/bitcoin/depends/x86_64-apple-darwin18.7.0/include     -m64 -O3 -Wall -fvisibility=hidden -gdwarf-2 -fexceptions -Wno-long-long -Wno-inline -Wextra -Wno-long-long -Wno-unused-parameter -Wunused-function -fpermissive -pedantic -DBOOST_ALL_NO_LIB=1 -DBOOST_THREAD_BUILD_LIB=1 -DBOOST_THREAD_DONT_USE_CHRONO -DBOOST_THREAD_POSIX -DNDEBUG  -I\".\" -c -o \"bin.v2/libs/thread/build/darwin-4.2.1/release/link-static/threadapi-pthread/threading-multi/visibility-hidden/future.o\" \"libs/thread/src/future.cpp\"\r\n```\r\n\r\n`clang-darwin`:\r\n```\r\nclang-darwin.compile.c++ bin.v2/libs/thread/build/clang-darwin-11.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden/future.o\r\n\r\n    \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++\" \"-mmacosx-version-min=10.10\" \"-stdlib=libc++\" \"--sysroot\" \"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\" -x c++ -fvisibility-inlines-hidden -std=c++11 -fvisibility=hidden     -I/Users/michael/github/bitcoin/depends/x86_64-apple-darwin18.7.0/include     -m64 -O3 -Wall -fvisibility=hidden -Wno-inline -Wextra -Wno-long-long -Wno-unused-parameter -Wno-variadic-macros -Wunused-function -DBOOST_ALL_NO_LIB=1 -DBOOST_THREAD_BUILD_LIB=1 -DBOOST_THREAD_DONT_USE_CHRONO -DBOOST_THREAD_POSIX -DNDEBUG -I\".\" -c -o \"bin.v2/libs/thread/build/clang-darwin-11.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden/future.o\" \"libs/thread/src/future.cpp\"\r\n```\r\n\r\n\r\n",
      "created_at" : "2019-10-24T13:39:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17231#issuecomment-545922753",
      "id" : 545922753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17231",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTkyMjc1Mw==",
      "updated_at" : "2019-10-24T13:39:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545922753",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : " > This came up as part of the discussion in #16392, which was going to bump our Clang version from `3.7.1` to `6.0.1`. Cory suggested moving straight to latest (`9.0.0`), and we discovered that Boost wouldn't build.\r\n\r\nJust a slight clarification: I suggested that if we're bumping clang, maybe we should bump higher than 6.0. I jumped straight to 9.0 first, just to make sure we still work with the most recent release.\r\n\r\nThis change will be necessary eventually, and should work fine with older clang builds as well.\r\n\r\nNow that we can (presumably) pick anything between 3.7 and 9.0, we can evaluate and choose whatever makes the most sense.",
      "created_at" : "2019-10-24T14:01:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17231#issuecomment-545932068",
      "id" : 545932068,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17231",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTkzMjA2OA==",
      "updated_at" : "2019-10-24T14:01:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545932068",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   }
]
