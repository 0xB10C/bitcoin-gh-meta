[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17232#discussion_r338231140"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17232"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338231140"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "While touching this code, it may be nice to hoist the various `512` magic values in this test (described in one place, the comment in line 461) to a well-named constant and move the comment to its definition. Perhaps also fix the uneven code spacing at the beginning of the comments.",
      "commit_id" : "ddad4b086fa7f6b7defeff249ea02bcafca4407f",
      "created_at" : "2019-10-23T19:15:53Z",
      "diff_hunk" : "@@ -453,11 +453,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n-    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++) {\n+        CBlockIndex* ancestor = ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i);\n+        assert(ancestor != nullptr);\n+        ancestor->nTime += 512; //Trick the MedianTimePast",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17232#discussion_r338231140",
      "id" : 338231140,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODIzMTE0MA==",
      "original_commit_id" : "ddad4b086fa7f6b7defeff249ea02bcafca4407f",
      "original_position" : 9,
      "path" : "src/test/miner_tests.cpp",
      "position" : 9,
      "pull_request_review_id" : 306128505,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17232",
      "updated_at" : "2019-10-23T19:17:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338231140",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17232#discussion_r338261820"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17232"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338261820"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If this assertion did not hold we wouldn't necessarily dereference any null pointer, would we? Could this assertion be moved to a place where it is obvious that an assertion failure is better than continued execution? Unlike the other cases it is not entirely obvious here.",
      "commit_id" : "ddad4b086fa7f6b7defeff249ea02bcafca4407f",
      "created_at" : "2019-10-23T20:28:30Z",
      "diff_hunk" : "@@ -303,6 +303,7 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n                 }\n             }\n             lp->maxInputBlock = tip->GetAncestor(maxInputHeight);\n+            assert(lp->maxInputBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17232#discussion_r338261820",
      "id" : 338261820,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODI2MTgyMA==",
      "original_commit_id" : "ddad4b086fa7f6b7defeff249ea02bcafca4407f",
      "original_position" : 4,
      "path" : "src/validation.cpp",
      "position" : 4,
      "pull_request_review_id" : 306169423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17232",
      "updated_at" : "2019-10-23T20:37:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338261820",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nExplicit is better than implicit.\r\n\r\nIn case the assumptions do not hold then a predictable assertion failure is the better alternative.",
      "created_at" : "2019-10-23T20:31:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17232#issuecomment-545623000",
      "id" : 545623000,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17232",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTYyMzAwMA==",
      "updated_at" : "2019-10-23T20:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545623000",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
