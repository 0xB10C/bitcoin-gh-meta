[
   {
      "author_association" : "MEMBER",
      "body" : "Needs a rebase.",
      "created_at" : "2017-11-30T01:26:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348052948",
      "id" : 348052948,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
      "updated_at" : "2017-11-30T01:26:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348052948",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased",
      "created_at" : "2017-11-30T03:33:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348072720",
      "id" : 348072720,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
      "updated_at" : "2017-11-30T03:33:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348072720",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased and made slight improvements to the P2PStub class.",
      "created_at" : "2017-12-02T16:23:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348702632",
      "id" : 348702632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
      "updated_at" : "2017-12-02T16:23:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348702632",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r154506637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154506637"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Unnecessary comment?",
      "commit_id" : "0d5cfa3074c4fe4467f512a09e2d386f42852821",
      "created_at" : "2017-12-02T20:50:45Z",
      "diff_hunk" : "@@ -412,3 +414,110 @@ def run(self):\n             [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        # current_block_header = super(current_tip)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r154506637",
      "id" : 154506637,
      "original_commit_id" : "f4c080ff63ae819d794fb11634af00397714f844",
      "original_position" : 67,
      "path" : "test/functional/test_framework/mininode.py",
      "position" : null,
      "pull_request_review_id" : 80684762,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
      "updated_at" : "2017-12-13T18:30:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154506637",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r154508628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154508628"
         }
      },
      "author_association" : "MEMBER",
      "body" : "duh. Vestigial garbage. I'll remove.",
      "commit_id" : "0d5cfa3074c4fe4467f512a09e2d386f42852821",
      "created_at" : "2017-12-02T22:19:43Z",
      "diff_hunk" : "@@ -412,3 +414,110 @@ def run(self):\n             [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        # current_block_header = super(current_tip)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r154508628",
      "id" : 154508628,
      "in_reply_to_id" : 154506637,
      "original_commit_id" : "f4c080ff63ae819d794fb11634af00397714f844",
      "original_position" : 67,
      "path" : "test/functional/test_framework/mininode.py",
      "position" : null,
      "pull_request_review_id" : 80686571,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
      "updated_at" : "2017-12-13T18:30:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154508628",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review @jamesob . I've removed the errant comment, and improved comments for the P2PStub methods.",
      "created_at" : "2017-12-02T22:20:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348724367",
      "id" : 348724367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
      "updated_at" : "2017-12-02T22:20:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348724367",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK https://github.com/bitcoin/bitcoin/pull/11771/commits/e72c94cda663102c7e188b80e9cdb76026c0b6a7",
      "created_at" : "2017-12-03T05:30:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348741681",
      "id" : 348741681,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
      "updated_at" : "2017-12-03T05:30:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348741681",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "...modulo the legitimate-looking test failure: \r\n```\r\n  File \"/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/functional/invalidtxrequest.py\", line 50, in run_test\r\n    node.p2p.send_txs_and_test([tx1], node, False, 16, b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')\r\n  File \"/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/functional/test_framework/mininode.py\", line 540, in send_txs_and_test\r\n    assert_equal(reject_code, self.reject_code_received)\r\n  File \"/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/functional/test_framework/util.py\", line 38, in assert_equal\r\n    raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\r\nAssertionError: not(16 == None)\r\n```",
      "created_at" : "2017-12-03T05:33:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348741769",
      "id" : 348741769,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
      "updated_at" : "2017-12-03T05:33:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348741769",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Great. Travis caught a race condition. I wasn't able to reproduce it locally.\r\n\r\nShould be fixed in the final commit. @jamesob - let me know when you've taken a look and I'll squash into the *Add P2PStub class* commit.",
      "created_at" : "2017-12-04T14:55:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348985760",
      "id" : 348985760,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
      "updated_at" : "2017-12-04T14:55:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348985760",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "squashed fix and rebased",
      "created_at" : "2017-12-11T14:32:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-350740471",
      "id" : 350740471,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
      "updated_at" : "2017-12-11T14:32:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350740471",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156986892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156986892"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mind to simplify the nested ifs?\r\n\r\n```py\r\nelif inv.type & MSG_TX and inv.hash in self.block_store.keys():\r\n    self.send...",
      "commit_id" : "0d5cfa3074c4fe4467f512a09e2d386f42852821",
      "created_at" : "2017-12-14T16:08:30Z",
      "diff_hunk" : "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156986892",
      "id" : 156986892,
      "original_commit_id" : "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "original_position" : 64,
      "path" : "test/functional/test_framework/mininode.py",
      "position" : 73,
      "pull_request_review_id" : 83554929,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
      "updated_at" : "2017-12-14T16:44:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156986892",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156988773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156988773"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Add a comment why this would ever be true and not dead code?",
      "commit_id" : "0d5cfa3074c4fe4467f512a09e2d386f42852821",
      "created_at" : "2017-12-14T16:14:41Z",
      "diff_hunk" : "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156988773",
      "id" : 156988773,
      "original_commit_id" : "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "original_position" : 75,
      "path" : "test/functional/test_framework/mininode.py",
      "position" : 84,
      "pull_request_review_id" : 83554929,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
      "updated_at" : "2017-12-14T16:44:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156988773",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156992833"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156992833"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since `getdata_requests` is written to with the mininode lock, why is a `lock=mininode_lock` not required when reading?",
      "commit_id" : "0d5cfa3074c4fe4467f512a09e2d386f42852821",
      "created_at" : "2017-12-14T16:27:51Z",
      "diff_hunk" : "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:\n+            return\n+\n+        response = msg_headers()\n+        headersList = [current_block_header]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headersList\n+            # as we go.\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            if prevBlockHash in self.block_store:\n+                prevBlockHeader = self.block_store[prevBlockHash]\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headersList = headersList[:maxheaders]\n+        hashList = [x.sha256 for x in headersList]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop) + 1\n+        response.headers = headersList[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the node's tip advances to the most recent block.\n+         - if success is False: assert that the node's tip doesn't advance.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156992833",
      "id" : 156992833,
      "original_commit_id" : "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "original_position" : 131,
      "path" : "test/functional/test_framework/mininode.py",
      "position" : 140,
      "pull_request_review_id" : 83554929,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
      "updated_at" : "2017-12-14T16:44:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156992833",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156996583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156996583"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The documentation states \"whether *they* are accepted\", but you only check one.",
      "commit_id" : "0d5cfa3074c4fe4467f512a09e2d386f42852821",
      "created_at" : "2017-12-14T16:39:49Z",
      "diff_hunk" : "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:\n+            return\n+\n+        response = msg_headers()\n+        headersList = [current_block_header]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headersList\n+            # as we go.\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            if prevBlockHash in self.block_store:\n+                prevBlockHeader = self.block_store[prevBlockHash]\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headersList = headersList[:maxheaders]\n+        hashList = [x.sha256 for x in headersList]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop) + 1\n+        response.headers = headersList[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the node's tip advances to the most recent block.\n+         - if success is False: assert that the node's tip doesn't advance.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+            if reject_code is not None:\n+                wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+            if reject_reason is not None:\n+                wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool.\"\"\"\n+\n+        for tx in txs:\n+            self.tx_store[tx.sha256] = tx\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        if success:\n+            assert tx.hash in rpc.getrawmempool()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156996583",
      "id" : 156996583,
      "original_commit_id" : "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "original_position" : 158,
      "path" : "test/functional/test_framework/mininode.py",
      "position" : 167,
      "pull_request_review_id" : 83554929,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
      "updated_at" : "2017-12-14T16:44:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156996583",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
