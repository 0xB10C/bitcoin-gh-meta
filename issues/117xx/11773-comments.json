[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11773#discussion_r153699992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11773"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153699992"
         }
      },
      "author_association" : "NONE",
      "body" : "Unsure if you guys adhere directly to PEP8 but this comment looks like it could be removed, seems redundant.",
      "commit_id" : "36cfdb9dbbb4a078590a4cd99e09e1136c59f317",
      "created_at" : "2017-11-29T06:04:18Z",
      "diff_hunk" : "@@ -10,74 +10,65 @@\n 3) Invalid block with bad coinbase value should be rejected and not\n re-requested.\n \"\"\"\n-\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n import copy\n-import time\n \n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidBlockRequestTest(ComparisonTestFramework):\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import NetworkThread, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n \n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+class InvalidBlockRequestTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n-        test.run()\n-\n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n-\n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n+        NetworkThread().start()  # Start up network handling in another thread",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11773#discussion_r153699992",
      "id" : 153699992,
      "original_commit_id" : "36cfdb9dbbb4a078590a4cd99e09e1136c59f317",
      "original_position" : 48,
      "path" : "test/functional/invalidblockrequest.py",
      "position" : 48,
      "pull_request_review_id" : 79743968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11773",
      "updated_at" : "2017-11-29T06:22:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153699992",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/18162779?v=4",
         "events_url" : "https://api.github.com/users/JohnVonNeumann/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JohnVonNeumann/followers",
         "following_url" : "https://api.github.com/users/JohnVonNeumann/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JohnVonNeumann/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JohnVonNeumann",
         "id" : 18162779,
         "login" : "JohnVonNeumann",
         "organizations_url" : "https://api.github.com/users/JohnVonNeumann/orgs",
         "received_events_url" : "https://api.github.com/users/JohnVonNeumann/received_events",
         "repos_url" : "https://api.github.com/users/JohnVonNeumann/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JohnVonNeumann/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JohnVonNeumann/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JohnVonNeumann"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11773#discussion_r153700278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11773"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153700278"
         }
      },
      "author_association" : "NONE",
      "body" : "Would imagine this would be best moved inline as opposed to on it's own line to keep convention with inline comments like on line 32 and 29.",
      "commit_id" : "36cfdb9dbbb4a078590a4cd99e09e1136c59f317",
      "created_at" : "2017-11-29T06:07:06Z",
      "diff_hunk" : "@@ -10,74 +10,65 @@\n 3) Invalid block with bad coinbase value should be rejected and not\n re-requested.\n \"\"\"\n-\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n import copy\n-import time\n \n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidBlockRequestTest(ComparisonTestFramework):\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import NetworkThread, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n \n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+class InvalidBlockRequestTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n-        test.run()\n-\n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n-\n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+        node.p2p.wait_for_verack()\n+\n+        best_block = node.getblock(node.getbestblockhash())\n+        tip = int(\"0x\" + node.getbestblockhash(), 0)\n+        height = best_block[\"height\"] + 1\n+        block_time = best_block[\"time\"] + 1\n+\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase\")\n+\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11773#discussion_r153700278",
      "id" : 153700278,
      "original_commit_id" : "36cfdb9dbbb4a078590a4cd99e09e1136c59f317",
      "original_position" : 64,
      "path" : "test/functional/invalidblockrequest.py",
      "position" : 64,
      "pull_request_review_id" : 79743968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11773",
      "updated_at" : "2017-11-29T06:22:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153700278",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/18162779?v=4",
         "events_url" : "https://api.github.com/users/JohnVonNeumann/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JohnVonNeumann/followers",
         "following_url" : "https://api.github.com/users/JohnVonNeumann/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JohnVonNeumann/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JohnVonNeumann",
         "id" : 18162779,
         "login" : "JohnVonNeumann",
         "organizations_url" : "https://api.github.com/users/JohnVonNeumann/orgs",
         "received_events_url" : "https://api.github.com/users/JohnVonNeumann/received_events",
         "repos_url" : "https://api.github.com/users/JohnVonNeumann/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JohnVonNeumann/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JohnVonNeumann/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JohnVonNeumann"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11773#discussion_r153701261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11773"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153701261"
         }
      },
      "author_association" : "NONE",
      "body" : "Would assume this block comment should be moved into a docstring block like in test/functional/test_framework/mininode.py P2PStub class. Seems like the standard are great in there, I'm assuming that's down to this section being a refactor.",
      "commit_id" : "36cfdb9dbbb4a078590a4cd99e09e1136c59f317",
      "created_at" : "2017-11-29T06:17:49Z",
      "diff_hunk" : "@@ -10,74 +10,65 @@\n 3) Invalid block with bad coinbase value should be rejected and not\n re-requested.\n \"\"\"\n-\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n import copy\n-import time\n \n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidBlockRequestTest(ComparisonTestFramework):\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import NetworkThread, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n \n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+class InvalidBlockRequestTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n-        test.run()\n-\n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n-\n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+        node.p2p.wait_for_verack()\n+\n+        best_block = node.getblock(node.getbestblockhash())\n+        tip = int(\"0x\" + node.getbestblockhash(), 0)\n+        height = best_block[\"height\"] + 1\n+        block_time = best_block[\"time\"] + 1\n+\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase\")\n+\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n-\n-        '''\n-        Now we need that block to mature so we can spend the coinbase.\n-        '''\n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n-\n-        '''\n-        Now we use merkle-root malleability to generate an invalid block with\n-        same blockheader.\n-        Manufacture a block with 3 transactions (coinbase, spend of prior\n-        coinbase, spend of that spend).  Duplicate the 3rd transaction to \n-        leave merkle root and blockheader unchanged but invalidate the block.\n-        '''\n-        block2 = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        node.p2p.send_blocks_and_test([block1], node, True)\n+\n+        self.log.info(\"Mature the block.\")\n+        node.generate(100)\n+\n+        best_block = node.getblock(node.getbestblockhash())\n+        tip = int(\"0x\" + node.getbestblockhash(), 0)\n+        height = best_block[\"height\"] + 1\n+        block_time = best_block[\"time\"] + 1\n+\n+        # Use merkle-root malleability to generate an invalid block with",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11773#discussion_r153701261",
      "id" : 153701261,
      "original_commit_id" : "36cfdb9dbbb4a078590a4cd99e09e1136c59f317",
      "original_position" : 104,
      "path" : "test/functional/invalidblockrequest.py",
      "position" : 104,
      "pull_request_review_id" : 79743968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11773",
      "updated_at" : "2017-11-29T06:22:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153701261",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/18162779?v=4",
         "events_url" : "https://api.github.com/users/JohnVonNeumann/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JohnVonNeumann/followers",
         "following_url" : "https://api.github.com/users/JohnVonNeumann/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JohnVonNeumann/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JohnVonNeumann",
         "id" : 18162779,
         "login" : "JohnVonNeumann",
         "organizations_url" : "https://api.github.com/users/JohnVonNeumann/orgs",
         "received_events_url" : "https://api.github.com/users/JohnVonNeumann/received_events",
         "repos_url" : "https://api.github.com/users/JohnVonNeumann/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JohnVonNeumann/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JohnVonNeumann/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JohnVonNeumann"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11773#discussion_r153701345"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11773"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153701345"
         }
      },
      "author_association" : "NONE",
      "body" : "Newly added whitespace can be removed.",
      "commit_id" : "36cfdb9dbbb4a078590a4cd99e09e1136c59f317",
      "created_at" : "2017-11-29T06:18:49Z",
      "diff_hunk" : "@@ -4,68 +4,50 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions.\n \n-In this test we connect to one node over p2p, and test tx requests.\n-\"\"\"\n-\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n+In this test we connect to one node over p2p, and test tx requests.\"\"\"\n import time\n \n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.mininode import NetworkThread, P2PStub\n+from test_framework.messages import COIN\n+from test_framework.test_framework import BitcoinTestFramework\n \n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidTxRequestTest(ComparisonTestFramework):\n-\n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n-        test.run()\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n+        NetworkThread().start()  # Start up network handling in another thread",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11773#discussion_r153701345",
      "id" : 153701345,
      "original_commit_id" : "36cfdb9dbbb4a078590a4cd99e09e1136c59f317",
      "original_position" : 41,
      "path" : "test/functional/invalidtxrequest.py",
      "position" : 41,
      "pull_request_review_id" : 79743968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11773",
      "updated_at" : "2017-11-29T06:22:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153701345",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/18162779?v=4",
         "events_url" : "https://api.github.com/users/JohnVonNeumann/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JohnVonNeumann/followers",
         "following_url" : "https://api.github.com/users/JohnVonNeumann/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JohnVonNeumann/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JohnVonNeumann",
         "id" : 18162779,
         "login" : "JohnVonNeumann",
         "organizations_url" : "https://api.github.com/users/JohnVonNeumann/orgs",
         "received_events_url" : "https://api.github.com/users/JohnVonNeumann/received_events",
         "repos_url" : "https://api.github.com/users/JohnVonNeumann/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JohnVonNeumann/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JohnVonNeumann/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JohnVonNeumann"
      }
   }
]
