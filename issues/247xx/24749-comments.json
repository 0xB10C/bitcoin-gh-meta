[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24749#discussion_r841402960"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24749"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/841402960"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the test checks that the wallet also submits the tx to the unbroadcast set, so you'd have to still check the removed code paths, conditionally on `is_wallet_compiled`",
      "commit_id" : "a89cad1ac93aa59108acc6eeb1cd8a7b8230cb36",
      "created_at" : "2022-04-04T06:31:43Z",
      "diff_hunk" : "@@ -9,60 +9,43 @@\n \n from test_framework.p2p import P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    create_confirmed_utxos,\n-)\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n MAX_INITIAL_BROADCAST_DELAY = 15 * 60 # 15 minutes in seconds\n \n class MempoolUnbroadcastTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.wallet.rescan_utxos()\n         self.test_broadcast()\n         self.test_txn_removal()\n \n     def test_broadcast(self):\n         self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n         node = self.nodes[0]\n \n-        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n-        utxos = create_confirmed_utxos(self, min_relay_fee, node, 10)\n-\n         self.disconnect_nodes(0, 1)\n \n         self.log.info(\"Generate transactions that only node 0 knows about\")\n \n-        # generate a wallet txn\n-        addr = node.getnewaddress()\n-        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n-\n         # generate a txn using sendrawtransaction\n-        us0 = utxos.pop()\n-        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n-        outputs = {addr: 0.0001}\n-        tx = node.createrawtransaction(inputs, outputs)\n-        node.settxfee(min_relay_fee)\n-        txF = node.fundrawtransaction(tx)\n-        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        txFS = self.wallet.create_self_transfer(from_node=node)\n         rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n \n         # check transactions are in unbroadcast using rpc\n         mempoolinfo = self.nodes[0].getmempoolinfo()\n-        assert_equal(mempoolinfo['unbroadcastcount'], 2)\n+        assert_equal(mempoolinfo['unbroadcastcount'], 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24749#discussion_r841402960",
      "id" : 841402960,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII584yJspQ",
      "original_commit_id" : "a89cad1ac93aa59108acc6eeb1cd8a7b8230cb36",
      "original_line" : 41,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "test/functional/mempool_unbroadcast.py",
      "position" : 55,
      "pull_request_review_id" : 929882779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24749",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/841402960/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-04T06:31:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/841402960",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
