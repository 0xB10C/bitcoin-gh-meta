[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123062378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123062378"
         }
      },
      "body" : "Have you filtered utxo_pool to exclude utxo's that have a net-neg value? Otherwise you're underestimating the lookahead here. To get an accurate figure for what you may still collect downtree, you should only add `utxo.txout.nValue >=0`",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T18:46:04Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123062378",
      "id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 48,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123062378",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123067487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123067487"
         }
      },
      "body" : "AFAICT utxo_pool has : 4, 3, 2, & 1. Since you're exploring randomly selecting 5 then has two possible solutions: 4+1, 3+2.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:05:57Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123067487",
      "id" : 123067487,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 144,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 150,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123067487",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123068150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123068150"
         }
      },
      "body" : "Under above assumptions, there is two solutions here as well: 5+4+1, or 5+3+2.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:08:54Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 11 Cent, not possible\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 10 Cent\n+    add_coin(5 * CENT, 5, utxo_pool);\n+    add_coin(5 * CENT, 5, actual_selection);\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123068150",
      "id" : 123068150,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 159,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 165,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123068150",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123069730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123069730"
         }
      },
      "body" : "It seems to me that you're also collecting coins that have a net-negative here. This will cause your lookahead to be underestimated, unless you cater to that case when calculating the remainder.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:16:06Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123069730",
      "id" : 123069730,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 224,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123069730",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071057"
         }
      },
      "body" : "I would perhaps add a test that checks what happens if the utxo_pool includes a UTXO that is more costly to spend than its own value. As far as I can tell, this would currently reduce your lookahead and may cause a premature search failure.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:22:13Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071057",
      "id" : 123071057,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 113,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071057",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071898"
         }
      },
      "body" : "@gmaxwell has concerns that Core wallet is only doing semi-sane utxo handling by spending these. With exact match + sane backoff algorithm this concern may be alleviated?",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:25:39Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071898",
      "id" : 123071898,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 48,
      "pull_request_review_id" : 45241765,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071898",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072635"
         }
      },
      "body" : "It is forced to be include first in these tests so the solution is deterministic.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:28:50Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072635",
      "id" : 123072635,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 144,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 150,
      "pull_request_review_id" : 45242560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072635",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072655"
         }
      },
      "body" : "It is forced to be include first in these tests so the solution is deterministic.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:28:56Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 11 Cent, not possible\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 10 Cent\n+    add_coin(5 * CENT, 5, utxo_pool);\n+    add_coin(5 * CENT, 5, actual_selection);\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072655",
      "id" : 123072655,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 159,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 165,
      "pull_request_review_id" : 45242584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072655",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123073108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123073108"
         }
      },
      "body" : "Indeed, that may be a problem. I will add that in as it is still good to have additional checks here even if done elsewhere.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:31:06Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123073108",
      "id" : 123073108,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 48,
      "pull_request_review_id" : 45243137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123073108",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "Have you tested the effect of random exploration vs largest first exploration? \r\n\r\n* Either way, BranchAndBound already guarantees that the global utxo set doesn't grow (for one output transactions) due to saving the change output.\r\n* LFE guarantees the creation of a minimal input set, and purposefully finds a possible solution. This should minimize the input set size variance. In my simulations BranchAndBound with LFE already caused a smaller average UTXO footprint than legacy Core selection.\r\n* Random Exploration could find a larger input set by skipping a key UTXO higher up in the tree. This could lead to the selection of a larger number of inputs, or in an edge case could even cause tries to be exhausted before a solution is found. This may increase input set variance, or could perhaps even exhaust small UTXOs too quickly for BnB to often find a viable solution.\r\n\r\nI am not sure there is a significant privacy benefit for Random Exploration as for either selection method an attacker would already need to know about another eligible input that would achieve an exact match when switched out for one of the input set.\r\n\r\nWhat benefit do you expect from using Random Exploration?",
      "created_at" : "2017-06-20T19:46:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309868437",
      "id" : 309868437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:28:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309868437",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077157"
         }
      },
      "body" : "I don't have much of a concern here about the 0/negative effective value inputs: Failing to select negative effective value inputs for an exact match won't lead to a UTXO count inflation, because changeless transactions are by definition strictly UTXO reducing.\r\n",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:49:19Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077157",
      "id" : 123077157,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 48,
      "pull_request_review_id" : 45247440,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077157",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077607"
         }
      },
      "body" : "@instagibbs: I'm not completely opposed to spending net-negative UTXO, my concern here is primarily that it actually may cause the lookahead to be underestimated causing valid solutions not to be found.\r\n\r\nI realize now that the knapsack algorithm would also not select uneconomic UTXO anymore, as if it had selected enough value before it reached them it would have already returned the set, and if it actually starts exploring them, cannot add more value in the first place.\r\n\r\nAdvocatus Diaboli: Would it be that terrible though, if UTXO were only considered when they actually have a net positive value? During times of low fees, they'd be used both during BnB and knapsack, during times of high fees, they wouldn't bloat the blocks and lose their owner money.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:51:04Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077607",
      "id" : 123077607,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 48,
      "pull_request_review_id" : 45247917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077607",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123079426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123079426"
         }
      },
      "body" : "I am not so concerned, was making sure concerns are brought up.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T19:58:50Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123079426",
      "id" : 123079426,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 48,
      "pull_request_review_id" : 45249806,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123079426",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@Xekyo I was thinking that Random Exploration would be better for privacy but I see that it probably wouldn't help. If you think it would be better to change to LFE, I can certainly do that.",
      "created_at" : "2017-06-20T20:25:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309880678",
      "id" : 309880678,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:25:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309880678",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "@achow101: I don't know how strong the effect is, but I'd expect Random Exploration to increase the required computational effort.",
      "created_at" : "2017-06-20T20:33:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309882818",
      "id" : 309882818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:33:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309882818",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "Noting that this PR has fairly heavy overlap with https://github.com/bitcoin/bitcoin/pull/10360 . \r\n\r\nFrom chatting with @achow101 the intention of this PR is to touch as little as possible while still getting BranchNBound coin selection.\r\n\r\nTo make this successful it should really only be run on first iteration of the loop in CreateTransaction, when `nFeeRet == 0` and only use effective value for the BnB coin selection step, rather than the knapsack as well. Once `nFeeRet` becomes more than zero, interactions start to get strange without a more complete overhaul like #10360.",
      "created_at" : "2017-06-20T20:52:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309887884",
      "id" : 309887884,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:52:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309887884",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "This PR I believe will still create just-over-dust change outputs when BnB finds an exact match. Whenever we are allowing BnB matches(first iteration) we should not make change outputs less than the exact match slack value.",
      "created_at" : "2017-06-20T20:59:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309889805",
      "id" : 309889805,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:59:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309889805",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094400"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094400"
         }
      },
      "body" : "This assumes that the input will be spent at a feerate at least as high as the current. This was a valid assumption in my thesis, as I was using a fixed fee rate. I'm not sure whether this a valid assumption for realnet transaction selection, as we've literally seen fees between 8-540 sat/byte in the past two weeks. We might want to consider discounting the cost of the input slightly.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T21:01:02Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+        vValue.push_back(coin);\n+    }\n+    if (!use_only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094400",
      "id" : 123094400,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 231,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45266285,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094400",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094567"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094567"
         }
      },
      "body" : "Depends on user time preferences. Could be an option that is set for those who regularly consolidate.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T21:01:42Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+        vValue.push_back(coin);\n+    }\n+    if (!use_only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094567",
      "id" : 123094567,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 231,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45266472,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094567",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@instagibbs: In fact, BnB is designed to only work when creating a transaction without a change output. If we were creating a change in the first place, the extensive search pattern would be unnecessarily wasteful.",
      "created_at" : "2017-06-20T21:04:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309891073",
      "id" : 309891073,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T21:04:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309891073",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "To append onto my previous comments, any effective value match attempt should account for the fees just obtained by `SelectCoins`. Currently it completely ignores the newly-obtained fees, keeping the previous loop's value, and then asks if `nFeeRet >= nFeeRequired` to break from the loop(which currently is 0 on the first go-around).",
      "created_at" : "2017-06-20T21:15:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309893923",
      "id" : 309893923,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T21:15:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309893923",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123122385"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123122385"
         }
      },
      "body" : "For now I think it is fine to use the current feerate.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-20T23:33:02Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+        vValue.push_back(coin);\n+    }\n+    if (!use_only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123122385",
      "id" : 123122385,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 231,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45295730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123122385",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "I have made the BnB selector to be only run on the first pass of the coin selection loop. It is now set so that effective value is only used for the BnB selector and not the knapsack one. I have also added the negative effective value check and test just as a belt-and-suspenders thing. I also made BnB use Largest First Exploration instead of Random Exploration.",
      "created_at" : "2017-06-21T00:32:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309929166",
      "id" : 309929166,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-21T00:32:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309929166",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123372860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123372860"
         }
      },
      "body" : "Here's a unexpected behavior in my algorithm: if there is a number of input combinations whose `value_ret` all exceed the target_value when `tries == 0` is passed, tries can go into the negative.\r\n\r\nThe tries check should be moved to the top of the checks.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-21T21:38:01Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (tries <= 0) { // Too many tries, exit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123372860",
      "id" : 123372860,
      "original_commit_id" : "1f4b03a33f8a747ce61f16104c5b6c0163acb704",
      "original_position" : 58,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45570354,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123372860",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123385119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123385119"
         }
      },
      "body" : "Done",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-21T22:49:17Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (tries <= 0) { // Too many tries, exit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123385119",
      "id" : 123385119,
      "original_commit_id" : "1f4b03a33f8a747ce61f16104c5b6c0163acb704",
      "original_position" : 58,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45583440,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123385119",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "Perhaps generically, we should never create change if the amount is less than the cost of creating + spending it (regardless of whether BnB was used to find the inputs or not)?",
      "created_at" : "2017-06-21T23:26:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310232689",
      "id" : 310232689,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-21T23:26:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310232689",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa one question is if we should allow the wallet to consider consolidation-level prices for that change. Perhaps the user is in a hurry now, but would consider spending that change at a much slower pace.\r\n\r\nMaybe for a first pass only consider the selected feerate, then Future Work allow a parameter which has more aggressive change protection given longer timescales.",
      "created_at" : "2017-06-22T14:05:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310390449",
      "id" : 310390449,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-22T14:05:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310390449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@instagibbs Yes, I agree; we should use long-eatimates for the spend part of change rather than the actual feerate the user is willing to pay now. Perhaps we can make it more conservative without doing that by using a factor 2 or 3 reduction?",
      "created_at" : "2017-06-22T16:26:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310431952",
      "id" : 310431952,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-22T16:26:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310431952",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123592418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123592418"
         }
      },
      "body" : "@xekyo we should assume that it would be terrible unless someone can show that it will not cause another massive UTXO bloat event... but thats offtopic here, as I don't think anyone has this concern with exact matches.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-22T18:45:22Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123592418",
      "id" : 123592418,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 48,
      "pull_request_review_id" : 45811882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123592418",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123594171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123594171"
         }
      },
      "body" : "not correct for segwit.    If this code ends up being changed to follow pieter's suggestion of dividing the rate by two or three it should be bounded by the min relay fee. (I'm not super fond of that suggestion).",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-22T18:53:42Z",
      "diff_hunk" : "@@ -2179,159 +2210,69 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, bool only_knapsack) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n-\n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n-\n-        const CWalletTx *pcoin = output.tx;\n-\n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+    if (!only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123594171",
      "id" : 123594171,
      "original_commit_id" : "12aa63abf1f8b4a2740b24055ca483c42a08f27a",
      "original_position" : 154,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45814017,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123594171",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@sipa @achow101  it would be very very easy in the current PR to ask for another estimate for the change, I think ~two loc addition, and minor addition to the selectcoins arguments to pass down a second fee.  I think this would be much more desirable than a fixed division.  Future work could do things like make that second confirmation target configurable. ",
      "created_at" : "2017-06-22T18:57:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310471041",
      "id" : 310471041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-22T18:57:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310471041",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123598122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123598122"
         }
      },
      "body" : "Using nFeeRet to signal BNB usage is ugly.  I think you shouldn't pass in nFeeRet at all, but have some explicit signal (e.g. boolean return) for BNB usage and if its set; after select coins set nFeeRet to nChange and use the same signal to bypass this branch.\r\n\r\nI also think this condition is slightly incorrect but benign in the current code, lets say our configured feerate were zero: now BNB could find a solution and leave nFeeRet==0.  (though nChange would currently be zero too, so it would be harmless but seems to me like the kind of thing to be brittle in future changes)",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-06-22T19:11:00Z",
      "diff_hunk" : "@@ -2562,7 +2562,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+                if (nChange > 0 && (!first_pass || nFeeRet == 0)) // nFeeRet is only 0 on the first pass if BnB was not used. ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123598122",
      "id" : 123598122,
      "original_commit_id" : "12aa63abf1f8b4a2740b24055ca483c42a08f27a",
      "original_position" : 5,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45818469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-06-23T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123598122",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Travis failure seems to be unrelated",
      "created_at" : "2017-06-23T17:32:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310726989",
      "id" : 310726989,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-23T17:32:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310726989",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125161070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125161070"
         }
      },
      "body" : "The utxos with negative effective values are filtered anyway in `wallet/wallet.cpp`, which is the only place (except for tests) from where `SelectCoinsBnB` is called.",
      "commit_id" : "19761499d5657b1f272a2fb04185dacf218fb104",
      "created_at" : "2017-07-01T11:50:14Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125161070",
      "id" : 125161070,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 48,
      "pull_request_review_id" : 47529103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-07-01T11:50:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125161070",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "just fyi, I have used your code as a reference for this code\r\n\r\nhttps://github.com/bitcoinjs/coinselect/pull/13",
      "created_at" : "2017-07-02T02:46:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312467396",
      "id" : 312467396,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T02:46:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312467396",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "I have to say, I don't understand the target size; maybe there is a bug there.\r\n\r\nIn wallet.cpp, in `CWallet::CreateTransaction`, you create `nValue`, which seems to be the sum of all the outputs. Because the BnB is used only at the first pass, `nFeeRet` is 0 and `nValueToSelect` is just the sum of all the outputs.\r\n\r\nThis is then used as the exact target in the BnB algorithm.\r\n\r\nHowever, you should add the cost of the outputs + the small cost of the tx overhead into the target (done here for the simple case on 1 output - https://github.com/Xekyo/CoinSelectionSimulator/blob/master/src/main/scala/one/murch/bitcoin/coinselection/StackEfficientTailRecursiveBnB.scala#L28 )\r\n\r\nMaybe it's done somewhere, but I don't see it.",
      "created_at" : "2017-07-02T20:14:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312514358",
      "id" : 312514358,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T20:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312514358",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@runn1ng BnB uses effective values for the inputs so the fee is accounted for when coins are selected. The effective values are calculated in `SelectCoinsMinConf` ",
      "created_at" : "2017-07-02T20:22:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312514781",
      "id" : 312514781,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312514781",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "That eff. value accounts for the *inputs* of the new transaction, but not for the *outputs* (plus the overhead of the tx itself, but that is only about 10 bytes).\r\n\r\nIn `SelectCoinsMinConf`, you already have the target, which does not account for that.",
      "created_at" : "2017-07-02T20:27:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312515053",
      "id" : 312515053,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T20:29:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312515053",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "Ah, yes. That is a bug. Thanks for finding that!",
      "created_at" : "2017-07-02T21:26:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312517972",
      "id" : 312517972,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T21:26:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312517972",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
