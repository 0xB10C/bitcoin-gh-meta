[
   {
      "body" : "Some ideas for additions:\r\n- Non-fee total output amount\r\n- Coinbase reward\r\n- Money supply including this block\r\n- Transaction weight `txweight` (it can be derived from existing fields, however)\r\n\r\nI would prefer to see both `time` and `mediantime` returned, since they are available.\r\n\r\nShould we return non-independent fields, such as `avgfee` when also including `totalfee` and `txs`?\r\n\r\nI find that for bitcoin-related data, the median is often more useful than the average of a distribution. Including `medianweight`, `medianfee`, `medianfeerate`, `medianoutput` etc would expose these useful quantities to the user.",
      "created_at" : "2017-07-07T15:03:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313707397",
      "id" : 313707397,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10757",
      "updated_at" : "2017-07-07T15:03:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313707397",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1562417?v=3",
         "events_url" : "https://api.github.com/users/clarkmoody/events{/privacy}",
         "followers_url" : "https://api.github.com/users/clarkmoody/followers",
         "following_url" : "https://api.github.com/users/clarkmoody/following{/other_user}",
         "gists_url" : "https://api.github.com/users/clarkmoody/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/clarkmoody",
         "id" : 1562417,
         "login" : "clarkmoody",
         "organizations_url" : "https://api.github.com/users/clarkmoody/orgs",
         "received_events_url" : "https://api.github.com/users/clarkmoody/received_events",
         "repos_url" : "https://api.github.com/users/clarkmoody/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/clarkmoody/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/clarkmoody/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/clarkmoody"
      }
   },
   {
      "body" : "> but once written, why not keep it?\r\n\r\nBecause more code => more bugs and more maintenance effort. I prefer:\r\n\r\nIf it's not really needed, why add it?\r\n\r\nThis is perhaps a nice-to-have, but since #8704, `getblock` can return all transactions in a block (without requiring `txindex`). Those can then be parsed and analysed offline.\r\n\r\nIs there a compelling use-case I'm missing here? This seems like a feature only a small subset of users would be interested in, in which case an offline tools seems more appropriate.\r\n\r\nSorry - not meaning to be negative, but my default reaction to new RPCs/arguments tends towards NACK unless I can see a compelling and widespread use-case.",
      "created_at" : "2017-07-07T15:28:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313714215",
      "id" : 313714215,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10757",
      "updated_at" : "2017-07-07T15:28:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313714215",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "> This is perhaps a nice-to-have, but since #8704, getblock can return all transactions in a block (without requiring txindex). Those can then be parsed and analysed offline.\r\n\r\nThis code pulls each transaction input's previous outpoint in order to compute transaction fees. Replicating that in RPC would require thousands of calls for most blocks.",
      "created_at" : "2017-07-07T15:50:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313720092",
      "id" : 313720092,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10757",
      "updated_at" : "2017-07-07T15:50:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313720092",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1562417?v=3",
         "events_url" : "https://api.github.com/users/clarkmoody/events{/privacy}",
         "followers_url" : "https://api.github.com/users/clarkmoody/followers",
         "following_url" : "https://api.github.com/users/clarkmoody/following{/other_user}",
         "gists_url" : "https://api.github.com/users/clarkmoody/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/clarkmoody",
         "id" : 1562417,
         "login" : "clarkmoody",
         "organizations_url" : "https://api.github.com/users/clarkmoody/orgs",
         "received_events_url" : "https://api.github.com/users/clarkmoody/received_events",
         "repos_url" : "https://api.github.com/users/clarkmoody/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/clarkmoody/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/clarkmoody/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/clarkmoody"
      }
   },
   {
      "body" : "> This code pulls each transaction input's previous outpoint\r\n\r\nAh yes, of course. Concept ACK in that case. Doing this with `getblock` / `getrawtransaction` is infeasible.",
      "created_at" : "2017-07-07T15:53:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313720976",
      "id" : 313720976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10757",
      "updated_at" : "2017-07-07T15:53:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313720976",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "> Because more code => more bugs and more maintenance effort. I prefer:\r\n\r\nSure, but I mean, removing for example the avgfee or avgfeerate won't  safe much code or testing code, just a few lines. Forget I said this, if there's specific functions to remove because nobody will want them, let's remove those and focus on the ones people want. Adding specific things only a few people want can also happen in their own branches, so it's no big deal.\r\n\r\nThe only use case is gather statistics, presumably to plot things, create charts. That is, at least, compelling to me, but I don't think that will have widespread usage. I also don't think all rpc calls have it. Is getchaintxstats, for example, a widespread use case?\r\n\r\nIf that's enough reason not to merge this, it's fine, I can maintain it as a separate branch that I periodically rebase, it is simple enough, so that won't be a big deal. On the other hand, if I can get it reviewed and merged it'll be less work for me in the long run and I also get the review.\r\n\r\n> Non-fee total output amount\r\n> Coinbase reward\r\n\r\nSounds good.\r\n\r\n> Money supply including this block\r\n\r\nMhmm, it would be simpler to calculate here from start to end here than from genesis. But it's pretty trivial to write a function in any language that returns the total supply for a given height without access to any historic data. Unless you are talking about discounting op_return outputs or something like that. I don't think this is very interesting here. Perhaps that can be done in getchaintxstats ?\r\n\r\n> Transaction weight txweight (it can be derived from existing fields, however)\r\n\r\nIn fact I'm using weight for everything. I should s/size/weight/ and probably also show size separately. \r\nMaybe separate feerates in by weight and serialize size? I don't know...\r\n\r\n> I would prefer to see both time and mediantime returned, since they are available.\r\n\r\nYeah, the mediantime takes a little bit longer to be calculated but not much and one can always disable anything. In fact, the height and time shouldn't be treated in any special way for being \"the x axis\" and should be allowed to be disabled like the rest.\r\n\r\n> Should we return non-independent fields, such as avgfee when also including totalfee and txs?\r\n\r\nThis is a good question. This is mostly what I meant by \"why not if it's this easy?\".\r\nBut yeah, I guess non-independent are good candidates to be removed.\r\n\r\nre median: yeah, that sounds interesting too, good idea!\r\n",
      "created_at" : "2017-07-07T16:29:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313729916",
      "id" : 313729916,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10757",
      "updated_at" : "2017-07-07T16:30:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313729916",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "> Mhmm, it would be simpler to calculate here from start to end here than from genesis. But it's pretty trivial to write a function in any language that returns the total supply for a given height without access to any historic data. Unless you are talking about discounting op_return outputs or something like that. I don't think this is very interesting here. Perhaps that can be done in getchaintxstats ?\r\n\r\nI was thinking of the more trivial version, rather than the `supply - provably_unspendable` version, so keeping that as external code makes more sense. Maintaining the sum of spendable outputs against block height is a much more ambitious idea, and it may make sense in the future. However, it is probably out of scope of this PR.",
      "created_at" : "2017-07-07T16:37:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#issuecomment-313731922",
      "id" : 313731922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10757",
      "updated_at" : "2017-07-07T16:37:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313731922",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1562417?v=3",
         "events_url" : "https://api.github.com/users/clarkmoody/events{/privacy}",
         "followers_url" : "https://api.github.com/users/clarkmoody/followers",
         "following_url" : "https://api.github.com/users/clarkmoody/following{/other_user}",
         "gists_url" : "https://api.github.com/users/clarkmoody/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/clarkmoody",
         "id" : 1562417,
         "login" : "clarkmoody",
         "organizations_url" : "https://api.github.com/users/clarkmoody/orgs",
         "received_events_url" : "https://api.github.com/users/clarkmoody/received_events",
         "repos_url" : "https://api.github.com/users/clarkmoody/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/clarkmoody/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/clarkmoody/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/clarkmoody"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126259127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126259127"
         }
      },
      "body" : "Remove.",
      "commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "created_at" : "2017-07-07T22:37:58Z",
      "diff_hunk" : "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126259127",
      "id" : 126259127,
      "original_commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "original_position" : 149,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 149,
      "pull_request_review_id" : 48733116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757",
      "updated_at" : "2017-07-07T23:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126259127",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126260721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126260721"
         }
      },
      "body" : "```cpp\r\nstd::set<std::string> allowed_plot_values = {\"minfee\", \"maxfee\", \"...\"};\r\n```",
      "commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "created_at" : "2017-07-07T22:52:25Z",
      "diff_hunk" : "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126260721",
      "id" : 126260721,
      "original_commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "original_position" : 150,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 150,
      "pull_request_review_id" : 48733116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757",
      "updated_at" : "2017-07-07T23:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126260721",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126260851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126260851"
         }
      },
      "body" : "Remove.",
      "commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "created_at" : "2017-07-07T22:53:29Z",
      "diff_hunk" : "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126260851",
      "id" : 126260851,
      "original_commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "original_position" : 151,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 151,
      "pull_request_review_id" : 48733116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757",
      "updated_at" : "2017-07-07T23:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126260851",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261000"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261000"
         }
      },
      "body" : "```cpp\r\n\"...\" + boost::join(allowed_plot_values, \",\")\r\n```",
      "commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "created_at" : "2017-07-07T22:54:32Z",
      "diff_hunk" : "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261000",
      "id" : 126261000,
      "original_commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "original_position" : 160,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 160,
      "pull_request_review_id" : 48733116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757",
      "updated_at" : "2017-07-07T23:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261000",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261085"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261085"
         }
      },
      "body" : "Missing result example.",
      "commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "created_at" : "2017-07-07T22:55:17Z",
      "diff_hunk" : "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261085",
      "id" : 126261085,
      "original_commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "original_position" : 163,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 163,
      "pull_request_review_id" : 48733116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757",
      "updated_at" : "2017-07-07T23:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261085",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261101"
         }
      },
      "body" : "Duplicate.",
      "commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "created_at" : "2017-07-07T22:55:25Z",
      "diff_hunk" : "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getperblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getperblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261101",
      "id" : 126261101,
      "original_commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "original_position" : 166,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 166,
      "pull_request_review_id" : 48733116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757",
      "updated_at" : "2017-07-07T23:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261101",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261710"
         }
      },
      "body" : "```cpp\r\nstd::set<std::string> plot_values;\r\nif (request.params.size() > 2) {\r\n  boost::split(plot_values, request.params[2].get_str(), boost::is_any_of(\",\"));\r\n\r\n  // only validate in this case\r\n  // ... \r\n} else {\r\n  plot_values = allowed_plot_values;\r\n}\r\n```",
      "commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "created_at" : "2017-07-07T23:00:26Z",
      "diff_hunk" : "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getperblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getperblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+    } else {\n+        end = chainActive.Height();\n+    }\n+    if (end < 0 || end > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"End block height out of range\");\n+    }\n+\n+    std::string str_plot_values = str_allowed_plot_values;\n+    if (request.params.size() > 2) {\n+        str_plot_values = request.params[2].get_str();\n+    }\n+    std::vector<std::string> plot_values;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126261710",
      "id" : 126261710,
      "original_commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "original_position" : 190,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 190,
      "pull_request_review_id" : 48733116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757",
      "updated_at" : "2017-07-07T23:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126261710",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126262049"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126262049"
         }
      },
      "body" : "Remove.",
      "commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "created_at" : "2017-07-07T23:03:29Z",
      "diff_hunk" : "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126262049",
      "id" : 126262049,
      "original_commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "original_position" : 137,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 137,
      "pull_request_review_id" : 48733116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757",
      "updated_at" : "2017-07-07T23:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126262049",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126262450"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126262450"
         }
      },
      "body" : "```cpp\r\nif (allowed_plot_values.count(plot_value) == 0) {\r\n```",
      "commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "created_at" : "2017-07-07T23:07:37Z",
      "diff_hunk" : "@@ -1532,6 +1539,178 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static CAmount RpcGetTxFee(const CTransaction& tx)\n+{\n+    CAmount in_amount_total = 0;\n+\n+    for (const CTxIn& in : tx.vin) {\n+        CTransactionRef tx_in;\n+        uint256 hashBlock;\n+        if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, true)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such mempool or blockchain transaction\"\n+                : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"));\n+        }\n+        in_amount_total += tx_in->vout[in.prevout.n].nValue;\n+    }\n+\n+    return in_amount_total - tx.GetValueOut();\n+}\n+\n+static void UpdateBlockStats(const CBlock& block, std::vector<std::string>& plot_values, std::map<std::string, UniValue>& map_stats)\n+{\n+    CAmount min = MAX_MONEY;\n+    CAmount max = 0;\n+    CAmount total = 0;\n+    CFeeRate minfeerate = CFeeRate(MAX_MONEY, 1);\n+    CFeeRate maxfeerate = CFeeRate(0);\n+    int64_t total_weight = 0;\n+    int64_t inputs = 0;\n+    int64_t outputs = 0;\n+\n+    for (const auto& tx : block.vtx) {\n+\n+        inputs += tx->vin.size();\n+        outputs += tx->vout.size();\n+\n+        if (tx->IsCoinBase()) {\n+            continue;\n+        }\n+\n+        CAmount txfee = RpcGetTxFee(*tx);\n+        assert(MoneyRange(txfee));\n+        int64_t weight = GetTransactionWeight(*tx);\n+        total_weight += weight;\n+        CFeeRate feerate = CFeeRate(txfee, weight);\n+        for (const std::string& plot_value : plot_values) {\n+            if (plot_value == \"minfee\") {\n+                min = std::min(min, txfee);\n+            } else if (plot_value == \"maxfee\") {\n+                max = std::max(max, txfee);\n+            } else if (plot_value == \"totalfee\") {\n+                total += txfee;\n+            } else if (plot_value == \"minfeerate\") {\n+                minfeerate = std::min(minfeerate, feerate);\n+            } else if (plot_value == \"maxfeerate\") {\n+                maxfeerate = std::max(maxfeerate, feerate);\n+            }\n+        }\n+    }\n+\n+    for (const std::string& plot_value : plot_values) {\n+        // Update map_stats\n+        if (plot_value == \"minfee\") {\n+            map_stats[plot_value].push_back((min == MAX_MONEY) ? 0 : min);\n+        } else if (plot_value == \"maxfee\") {\n+            map_stats[plot_value].push_back(max);\n+        } else if (plot_value == \"totalfee\") {\n+            map_stats[plot_value].push_back(total);\n+        } else if (plot_value == \"minfeerate\") {\n+            map_stats[plot_value].push_back((minfeerate == CFeeRate(MAX_MONEY, 1)) ? CFeeRate(0).GetFee(1) : minfeerate.GetFee(1));\n+        } else if (plot_value == \"maxfeerate\") {\n+            map_stats[plot_value].push_back(maxfeerate.GetFee(1));\n+        } else if (plot_value == \"avgfee\") {\n+            map_stats[plot_value].push_back((block.vtx.size() > 1) ? total / (block.vtx.size() - 1) : 0);\n+        } else if (plot_value == \"avgfeerate\") {\n+            map_stats[plot_value].push_back(CFeeRate(total, total_weight).GetFee(1));\n+        } else if (plot_value == \"txs\") {\n+            map_stats[plot_value].push_back((int64_t)block.vtx.size());\n+        } else if (plot_value == \"ins\") {\n+            map_stats[plot_value].push_back(inputs);\n+        } else if (plot_value == \"outs\") {\n+            map_stats[plot_value].push_back(outputs);\n+        }\n+    }\n+}\n+\n+static bool IsAllowedPlotValue(const std::string& plot_value, std::vector<std::string>& allowed_plot_values)\n+{\n+    for (const std::string& allowed_plot_value : allowed_plot_values) {\n+        if (allowed_plot_value == plot_value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+UniValue getperblockstats(const JSONRPCRequest& request)\n+{\n+    std::string str_allowed_plot_values = \"minfee,maxfee,totalfee,minfeerate,maxfeerate,avgfee,avgfeerate,txs,ins,outs\";\n+    std::vector<std::string> allowed_plot_values;\n+    boost::split(allowed_plot_values, str_allowed_plot_values, boost::is_any_of(\",\"));\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getperblockstats ( nStart nEnd plotValues )\\n\"\n+            \"\\nCompute per block statistics for a given window.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"start\\\"      (numeric, required) The height of the block that starts the window.\\n\"\n+            \"2. \\\"end\\\"        (numeric, optional) The height of the block that ends the window (default: current tip).\\n\"\n+            \"3. \\\"plotvalues\\\"  (string,  optional) Values to plot (comma separated), default(all): \" + str_allowed_plot_values +\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getperblockstats\", \"1000 1000 \\\"minfeerate,avgfeerate\\\"\")\n+            + HelpExampleRpc(\"getperblockstats\", \"1000 1000 \\\"maxfeerate,avgfeerate\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int start = request.params[0].get_int();\n+    if (start < 1 || start > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Start block height out of range\");\n+    }\n+\n+    int end;\n+    if (request.params.size() > 1) {\n+        end = request.params[1].get_int();\n+    } else {\n+        end = chainActive.Height();\n+    }\n+    if (end < 0 || end > chainActive.Height()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"End block height out of range\");\n+    }\n+\n+    std::string str_plot_values = str_allowed_plot_values;\n+    if (request.params.size() > 2) {\n+        str_plot_values = request.params[2].get_str();\n+    }\n+    std::vector<std::string> plot_values;\n+    boost::split(plot_values, str_plot_values, boost::is_any_of(\",\"));\n+    for (const std::string plot_value : plot_values) {\n+        if (!IsAllowedPlotValue(plot_value, allowed_plot_values)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10757#discussion_r126262450",
      "id" : 126262450,
      "original_commit_id" : "53ea4dea6f4532f19cd61ca93d1f17be22ed4828",
      "original_position" : 193,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 193,
      "pull_request_review_id" : 48733116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10757",
      "updated_at" : "2017-07-07T23:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126262450",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   }
]
