{
   "assignee" : null,
   "assignees" : [],
   "body" : "This PR improves correctness (removing potentially unsafe `const_casts`) and flexibility of the serialization code.\r\n\r\nThe main issue is that the current `ADD_SERIALIZE_METHODS` macro (which is the only way to not duplicate serialization and deserialization code) only expands to a single class method, and thus can only be qualified as const or non-const. Ideally, serialization happens in a `const` context while deserialization happens in a non-`const` context.\r\n\r\nTo deal with that, this PR introduces a new approach, `SERIALIZE_METHODS(obj)`, where `obj` is a variable name. It expands to some boiletplate and a static method to which the object itself is an argument. The advantage is that its type can be templated, and be `const` when serializing.\r\n\r\nAnother issue is the various serialization-wrapping macros (`VARINT`, `COMPACTSIZE`, `FLATDATA` and `LIMITED_STRING`). They all const-cast their argument in order to construct a wrapper object, which supports both serialization and deserialization. Change this by making these wrappers templated in the underlying data type (for example, `CompactSizeWrapper<uint64_t>`). This has the advantage that we can make the template type `const` when invoked on a `const` variable.\r\n\r\nA last issue is the `REF` macro that is invoked everywhere deal with temporary expressions being passed in. Since C++11, this is not needed anymore as temporaries are explicitly represented as rvalue references. Thus we can remove `REF` invocations and instead just make the various classes and helper functions deal correctly with references.\r\n\r\nThe above changes permit a fully const-correct version of all serialization code. However, it is cumbersome. Any existing `ADD_SERIALIZE_METHODS` instance in the code that does more than just (conditionally) serializing/deserializing some fields (in particular, it contains branches that assign to some of the variables) needs to be split up into an explicit `Serialize` and `Unserialize` method instead. In some cases it is inevitable (wallet serializers do some crazy transformations while serializing!), but in many cases it just annoying duplication.\r\n\r\nTo improve upon this, a few more primitives that are currently inlined are turned into serialization wrappers:\r\n* `BigEndianWrapper`: Serializes/deserializes an integer as big endian rather than little endian (only for 16-bit). This permits the CService serialization to become a oneliner.\r\n* `Uint48Wrapper`: Serializes/deserializes only the lower 48 bits of an integer (used in BIP152 code).\r\n* `VectorApplyWrapper`: Serializes/deserializes a vector while using a custom serializer for its elements. This simplifies the undo and blockencoding serializers a lot.\r\n\r\nBest of all, it removes 147 lines of while code adding a bunch of comments.\r\n\r\nThe commits are ordered into 3 sections:\r\n* First, introduce new classes that permit const-correct serialization.\r\n* Then one by one transform the various files to use the new serializers.\r\n* Finally, remove the old serializers.\r\n\r\nThis may be too much to go in at once. I'm happy to split things up as needed.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785/comments",
   "created_at" : "2017-07-10T18:29:33Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785",
   "id" : 241804122,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 10785,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/10785.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/10785.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Serialization improvements",
   "updated_at" : "2017-07-10T19:32:47Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
   "user" : {
      "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
      "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
      "followers_url" : "https://api.github.com/users/sipa/followers",
      "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/sipa",
      "id" : 548488,
      "login" : "sipa",
      "organizations_url" : "https://api.github.com/users/sipa/orgs",
      "received_events_url" : "https://api.github.com/users/sipa/received_events",
      "repos_url" : "https://api.github.com/users/sipa/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/sipa"
   }
}
