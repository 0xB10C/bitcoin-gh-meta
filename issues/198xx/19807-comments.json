[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Downloading arbitrary blocks is certainly possible (this is how neutrino clients work) however, downloading old blocks would not include their UNDO data. This means you might be able to download old blocks to (for example) rescan a wallet but you would not be able to handle a deeper chain reorg than the original prune depth.\r\n\r\nWhat might be possible is to increase the prune depth by 1 with every new incoming block, until a new desired prune depth is reached. The mechanism there would be to simply NOT delete the oldest block from disk until the new prune depth is reached. This would require no extra historical block downloads or weird half-validation.\r\n\r\nWould that be sufficient for you use-case, @ProofOfKeags ?",
      "created_at" : "2023-02-14T18:01:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19807#issuecomment-1430157210",
      "id" : 1430157210,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19807",
      "node_id" : "IC_kwDOABII585VPnea",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1430157210/reactions"
      },
      "updated_at" : "2023-02-14T18:01:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1430157210",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   }
]
