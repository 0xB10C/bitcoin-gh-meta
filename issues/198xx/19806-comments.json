[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20749 ([Bundle 1/n] Prune g_chainman usage related to ::LookupBlockIndex by dongcarl)\n* #20495 (sync: Use decltype(auto) return type for WITH_LOCK by dongcarl)\n* #20286 (rpc: deprecate `addresses` and `reqSigs` from rpc outputs by mjdietzx)\n* #20017 (rpc: Add RPCContext by promag)\n* #19888 (rpc: Fix getblockstats issues by fjahr)\n* #19652 (Avoid locking CTxMemPool::cs recursively in Mempool{Info}ToJSON() by hebasto)\n* #19521 (Coinstats Index (without UTXO set hash) by fjahr)\n* #19145 (Add hash_type MUHASH for gettxoutsetinfo by fjahr)\n* #13875 ([doc] nChainTx needs to become a 64-bit earlier due to SegWit by Sjors)\n* #9384 (CCoinsViewCache code cleanup & deduplication by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-08-26T01:08:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-680400991",
      "id" : 680400991,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MDQwMDk5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-07T11:09:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680400991",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-08-26T06:56:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-680696759",
      "id" : 680696759,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MDY5Njc1OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-26T06:56:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680696759",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626183"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What is your reasoning behind calling the utxo set hash `assumeutxo` here? It makes it harder for me to reason about but i may be in the minority and this is easier for the casual user. Was that your intention? If we have different hashes in the future and they might be used for assumeutxo as well it would be probably best to use the explicit name for this type of hash `hash_serialized_2`.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-29T08:35:22Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626183",
      "id" : 479626183,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyNjE4Mw==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5274,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478110745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626183",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626276"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This makes me a bit uncomfortable because we can't test the actual functionality of this function with this. Do you plan to keep this or change it in a follow-up with changes to the testing framework that allow for a better test?",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-29T08:36:46Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626276",
      "id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyNjI3Ng==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478110745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626276",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479634348"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479634348"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-29T10:16:09Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479634348",
      "id" : 479634348,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDM0OA==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5346,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478110745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479634348",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479636397"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479636397"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I assume it wouldn't work because of a divide by zero error in the progress function? Shouldn't that be rather dealt with at that layer?",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-29T10:42:35Z",
      "diff_hunk" : "@@ -407,3 +411,25 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+bool CCoinsViewDB::SetNChainTx(unsigned int n_chain_tx)\n+{\n+    return m_db->Write(DB_NCHAINTX, n_chain_tx, /*fsync*/ true);\n+}\n+\n+unsigned int CCoinsViewDB::GetNChainTx()\n+{\n+    // We choose 1 and not 0 because, in the unlikely event that we can't read\n+    // a value from this key, we don't want LoadBlockIndex() to malfunction for\n+    // snapshot chainstates being loaded. Returning 1 here will break the\n+    // progress= measure, but returning 0 would cause us to not be able to add\n+    // chain tips for the snapshot chainstate. This shouldn't happen and is",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479636397",
      "id" : 479636397,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNjM5Nw==",
      "original_commit_id" : "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "original_line" : 430,
      "original_position" : 27,
      "original_start_line" : 425,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 478110745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479636397",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479649888"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479649888"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "One alternative way would be hardcode a pre-mined chain into the test and use it, similar to what signet does here: https://github.com/bitcoin/bitcoin/pull/18267/commits/6206c2e8e87fcc70848e4a0fab871d5fd9ea6b16",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-29T13:28:00Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479649888",
      "id" : 479649888,
      "in_reply_to_id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTg4OA==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478128208,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479649888",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717530"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717530"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for the look. This is good feedback; I'll see if I can get a seed-based deterministic generation of a reg test chain and then add some values/tests based on that. When I originally wrote this I think I'd forgotten that we can mock time.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-30T03:50:48Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717530",
      "id" : 479717530,
      "in_reply_to_id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxNzUzMA==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478169500,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717530",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717700"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It was for consistency with `assumevalid` but I'm happy to rename it in lieu of something better.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-30T03:53:28Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717700",
      "id" : 479717700,
      "in_reply_to_id" : 479626183,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxNzcwMA==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5274,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478169595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717700",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264245"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit d6396c4be4\r\n\r\nFor pure-utility functions it would be good to pass in `params` instead of relying on the global",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:01:59Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264245",
      "id" : 480264245,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NDI0NQ==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5283,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264245",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264955"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree that regtest should have an assumeutxo hash baked in. Maybe we could even get the 200-blocks premine to be deterministic and use that?",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:03:25Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264955",
      "id" : 480264955,
      "in_reply_to_id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NDk1NQ==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264955",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480269550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480269550"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can't this be hardcoded beside the blockheight and assumeutxo hash in the chain params? \r\n\r\n(If not, I'll need to think more about how the txdb value for nchaintx interacts with major version upgrades, which bump the assumeutxo)",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:12:07Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.\n+static constexpr char DB_NCHAINTX = 'n';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480269550",
      "id" : 480269550,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2OTU1MA==",
      "original_commit_id" : "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "original_line" : 33,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480269550",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480270148"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480270148"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit: bdf182e81e\r\n\r\nforward decls right after the includes, pls. kthx",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:13:16Z",
      "diff_hunk" : "@@ -232,6 +233,9 @@ class CCoinsViewBacked : public CCoinsView\n };\n \n \n+class ChainstateManager;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480270148",
      "id" : 480270148,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MDE0OA==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 236,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480270148",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480272552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480272552"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit bdf182e81e\r\n\r\nthis can't be nullptr, so `&` seems more appropriate. Also the metadata should be read-only here?\r\n\r\n```suggestion\r\n        CAutoFile& coins_file, const SnapshotMetadata& metadata, bool in_memory);\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:18:14Z",
      "diff_hunk" : "@@ -829,6 +837,27 @@ class ChainstateManager\n     //! Get all chainstates currently being used.\n     std::vector<CChainState*> GetAll();\n \n+    //! Construct and activate a Chainstate on the basis of UTXO snapshot data.\n+    //!\n+    //! Steps:\n+    //!\n+    //! - Initialize an unused CChainState.\n+    //!\n+    //! - Load its `CoinsViews` contents from `coins_file`.\n+    //!\n+    //! - Verify that the hash of the resulting coinsdb matches the expected hash\n+    //!   per assumeutxo chain parameters.\n+    //!\n+    //! - Wait for our headers chain to include the base block of the snapshot.\n+    //!\n+    //! - \"Fast forward\" the tip of the new chainstate to the base of the snapshot,\n+    //!   faking nTx* block index data along the way.\n+    //!\n+    //! - Move the new chainstate to `m_snapshot_chainstate` and make it our\n+    //!   ChainstateActive().\n+    NODISCARD bool ActivateSnapshot(\n+        CAutoFile* coins_file, SnapshotMetadata metadata, bool in_memory);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480272552",
      "id" : 480272552,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjU1Mg==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 859,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480272552",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274008"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274008"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: compile time constants can be UPPER_CASE",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:21:03Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274008",
      "id" : 480274008,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDAwOA==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5315,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274008",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Please prefer the identical ChainstateManager::ActiveChainstate",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:22:04Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274541",
      "id" : 480274541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDU0MQ==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5328,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274541",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480275488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480275488"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    auto snapshot_chainstate = MakeUnique<CChainState>(mempool, m_blockman, base_blockhash);\r\n```\r\n\r\nneeds rebase",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:24:00Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480275488",
      "id" : 480275488,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NTQ4OA==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5337,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480275488",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480280231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480280231"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {/*TODO*/})) {\r\n```\r\n\r\ncould make sense to make this interruptible if it takes a long time",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:32:52Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480280231",
      "id" : 480280231,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MDIzMQ==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5463,
      "original_position" : 166,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480280231",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480281665"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480281665"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So in other words this will deadlock with `-nonetworkactive` or `-noconnect`?\r\n\r\nIf yes, what about including the preceding headers in the snapshot? I know we had a discussion about that, but I forget the result. Please remind me :sweat_smile:  ",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:35:28Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480281665",
      "id" : 480281665,
      "line" : 5409,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MTY2NQ==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5409,
      "original_position" : 183,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 243,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480281665",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480284080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480284080"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If nothing else, you can take the hash from `./test/functional/rpc_dumptxoutset.py`",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T17:40:02Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480284080",
      "id" : 480284080,
      "in_reply_to_id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NDA4MA==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478811744,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480284080",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432499"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've updated the regtest assumeutxo values for two separate heights and added some utilities to the unittest framework for generating a deterministic chain, so we now have some decent tests in place for this.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T22:25:06Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432499",
      "id" : 480432499,
      "in_reply_to_id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjQ5OQ==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 479010878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432499",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432847"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432847"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T22:25:36Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432847",
      "id" : 480432847,
      "in_reply_to_id" : 480264245,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjg0Nw==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5283,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 479011098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432847",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yup, good call. Done.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T22:26:07Z",
      "diff_hunk" : "@@ -829,6 +837,27 @@ class ChainstateManager\n     //! Get all chainstates currently being used.\n     std::vector<CChainState*> GetAll();\n \n+    //! Construct and activate a Chainstate on the basis of UTXO snapshot data.\n+    //!\n+    //! Steps:\n+    //!\n+    //! - Initialize an unused CChainState.\n+    //!\n+    //! - Load its `CoinsViews` contents from `coins_file`.\n+    //!\n+    //! - Verify that the hash of the resulting coinsdb matches the expected hash\n+    //!   per assumeutxo chain parameters.\n+    //!\n+    //! - Wait for our headers chain to include the base block of the snapshot.\n+    //!\n+    //! - \"Fast forward\" the tip of the new chainstate to the base of the snapshot,\n+    //!   faking nTx* block index data along the way.\n+    //!\n+    //! - Move the new chainstate to `m_snapshot_chainstate` and make it our\n+    //!   ChainstateActive().\n+    NODISCARD bool ActivateSnapshot(\n+        CAutoFile* coins_file, SnapshotMetadata metadata, bool in_memory);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433215",
      "id" : 480433215,
      "in_reply_to_id" : 480272552,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzIxNQ==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 859,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 479011341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433215",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433490"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oof, dumb move on my part. Thanks, fixed.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T22:26:30Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433490",
      "id" : 480433490,
      "in_reply_to_id" : 480274541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzQ5MA==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5328,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 479011530,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433490",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T22:26:39Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433603",
      "id" : 480433603,
      "in_reply_to_id" : 480275488,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzYwMw==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5337,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 479011600,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433603",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480435696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480435696"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well, if by \"deadlock\" you mean \"sleep-loop for ten minutes and then fail the activation,\" I guess so. But I wouldn't call this a deadlock personally.\r\n\r\nMaybe others can chime in here but IMO it still makes sense to obtain headers from the network, since ultimately what use is a snapshot without network connectivity and peers to get you to the tip of the chain? There may have been a more concrete reason but I can't remember it.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-08-31T22:29:43Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480435696",
      "id" : 480435696,
      "in_reply_to_id" : 480281665,
      "line" : 5409,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzNTY5Ng==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5409,
      "original_position" : 183,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 243,
      "pull_request_review_id" : 479012962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480435696",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480835783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480835783"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh I missed the `max_secs_to_wait_for_headers` :sleeping: ",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-01T05:34:47Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480835783",
      "id" : 480835783,
      "in_reply_to_id" : 480281665,
      "line" : 5409,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNTc4Mw==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5409,
      "original_position" : 183,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 243,
      "pull_request_review_id" : 479412104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480835783",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r481128165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481128165"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```\r\nThe test suite in file src/test/foo_tests.cpp should be named\r\n\"foo_tests\". Please make sure the following test suites follow\r\nthat convention:\r\nsrc/test/validation_tests.cpp:BOOST_FIXTURE_TEST_SUITE(validation_tests_regtest, RegTestingSetup)\r\n^---- failure generated from test/lint/lint-tests.sh\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-01T13:15:18Z",
      "diff_hunk" : "@@ -74,4 +74,43 @@ BOOST_AUTO_TEST_CASE(test_combiner_all)\n     Test.disconnect(&ReturnTrue);\n     BOOST_CHECK(Test());\n }\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_tests_regtest, RegTestingSetup)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r481128165",
      "id" : 481128165,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyODE2NQ==",
      "original_commit_id" : "1aa7b9137090d0021298a0e2696871dd21bfdefc",
      "original_line" : 81,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 479728652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481128165",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482332094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482332094"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"add allowed assumeutxo values\" (60bd91334a3654fe59dac0bd28fb8824b897edf7)\r\n\r\nMinor: Suggest s/XXX/Warning/. Some editors treat XXX like TODO",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-02T19:22:46Z",
      "diff_hunk" : "@@ -24,6 +24,9 @@ static uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n+//! XXX: be very careful when changing this! assumeutuxo and UTXO snapshot",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482332094",
      "id" : 482332094,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzMjA5NA==",
      "original_commit_id" : "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "original_line" : 27,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/node/coinstats.cpp",
      "position" : null,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482332094",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482426252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482426252"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"add allowed assumeutxo values\" (60bd91334a3654fe59dac0bd28fb8824b897edf7)\r\n\r\nNote: unit test coverage for this function is added in later commit \"tests: add unittest for ExpectedAssumeutxo\"\r\n\r\nJust a suggestion, but I think it would be nice to combine these two commits. Adding new tests along with code makes it easier to:\r\n\r\n- Understand the code change (seeing how a function is called can be even more helpful than seeing how it's defined)\r\n- Check that test coverage is adequate\r\n- Check that intermediate commits aren't broken",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-02T20:34:05Z",
      "diff_hunk" : "@@ -955,4 +955,14 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainParams& params);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482426252",
      "id" : 482426252,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyNjI1Mg==",
      "original_commit_id" : "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "original_line" : 966,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482426252",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482495858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482495858"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Can't this be hardcoded beside the blockheight and assumeutxo hash in the chain params?\r\n> \r\n> (If not, I'll need to think more about how the txdb value for nchaintx interacts with major version upgrades, which bump the assumeutxo)\r\n\r\nHardcoding this seems does seem like it might be a good simplification. It also seems like hardcoding might be useful for validating the snapshot? Otherwise, would a bad SnapshotMetadata::m_nchaintx value in the snapshot go undetected?\r\n\r\nAnother place this value could be stored might is in `chainstate_` directory name alongside the block hash, but maybe that is too verbose.\r\n\r\nAnyway, txdb does seem like a reasonable place to keep this number, especially if it can be checked and removed when the background sync completes.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-02T21:34:48Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.\n+static constexpr char DB_NCHAINTX = 'n';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482495858",
      "id" : 482495858,
      "in_reply_to_id" : 480269550,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5NTg1OA==",
      "original_commit_id" : "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "original_line" : 33,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482495858",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482518150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482518150"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"txdb: add nChainTx cache for snapshot chainstates\" (bc622c33ce925159906e3b00be77b11d598397ed)\r\n\r\n\"Only contains a value\" suggests the row may be present without a value. Would suggest saying something like \"This is not present in the normal coins database. It is only saved and used in in temporary UTXO snapshots.\"",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-02T22:02:18Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482518150",
      "id" : 482518150,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxODE1MA==",
      "original_commit_id" : "bc622c33ce925159906e3b00be77b11d598397ed",
      "original_line" : 32,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482518150",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482524613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482524613"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"txdb: add nChainTx cache for snapshot chainstates\" (bc622c33ce925159906e3b00be77b11d598397ed)\r\n\r\nCan you remind what this is used for? Just estimating sync progress, or other things too? Would also be good to make comment more specific, maybe \"Cached CBlockIndex::nChainTx value (number of transactions in chain) at the base block of a UTXO snapshot that is being imported. This is used to [...]\" ",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-02T22:10:52Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482524613",
      "id" : 482524613,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyNDYxMw==",
      "original_commit_id" : "bc622c33ce925159906e3b00be77b11d598397ed",
      "original_line" : 31,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482524613",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482532448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482532448"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I assume it wouldn't work because of a divide by zero error in the progress function? Shouldn't that be rather dealt with at that layer?\r\n\r\nWould agree that handling this in LoadBlockIndex would be preferable to having to hardcode 1's  here and in `ChainstateManager::GetSnapshotNChainTx` along with comments describing other layers of code. Both `CCoinsViewDB::GetNChainTx` and `ChainstateManager::GetSnapshotNChainTx` could return `Optional<int>` to avoid the need to hardcode something",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-02T22:21:08Z",
      "diff_hunk" : "@@ -407,3 +411,25 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+bool CCoinsViewDB::SetNChainTx(unsigned int n_chain_tx)\n+{\n+    return m_db->Write(DB_NCHAINTX, n_chain_tx, /*fsync*/ true);\n+}\n+\n+unsigned int CCoinsViewDB::GetNChainTx()\n+{\n+    // We choose 1 and not 0 because, in the unlikely event that we can't read\n+    // a value from this key, we don't want LoadBlockIndex() to malfunction for\n+    // snapshot chainstates being loaded. Returning 1 here will break the\n+    // progress= measure, but returning 0 would cause us to not be able to add\n+    // chain tips for the snapshot chainstate. This shouldn't happen and is",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482532448",
      "id" : 482532448,
      "in_reply_to_id" : 479636397,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUzMjQ0OA==",
      "original_commit_id" : "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "original_line" : 430,
      "original_position" : 27,
      "original_start_line" : 425,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482532448",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482595806"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482595806"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, I think @MarcoFalke's approach is the right one. Will implement tomorrow.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-02T23:24:18Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.\n+static constexpr char DB_NCHAINTX = 'n';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482595806",
      "id" : 482595806,
      "in_reply_to_id" : 480269550,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NTgwNg==",
      "original_commit_id" : "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "original_line" : 33,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 481378969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482595806",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483817973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483817973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"simplify ChainstateManager::SnapshotBlockhash() return semantics\" (75d1e7754274d3f015a49e71871c3a069cbe020b)\r\n\r\nThere doesn't seem to be any test coverage for this, or at least test seem to pass with change reverted. Would be good to have test coverage when changing a corner case.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-04T19:51:00Z",
      "diff_hunk" : "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483817973",
      "id" : 483817973,
      "line" : 5144,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxNzk3Mw==",
      "original_commit_id" : "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "original_line" : 5144,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 14,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483817973",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483846226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483846226"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nWould be good to use SetBestBlock so this is consistent and it's clear this is overwriting random value above. Also it would be good to move this next to the Flush call below for consistency with the sequence above.\r\n\r\nOn layer violation comment, IMO it would be reasonable to write a CAutoFile -> CCoinsViewCache function and do the loading in coins.cpp rather than validation.cpp, so validation changes are smaller and not as many assumptions about the coins cache implementation have to be made outside of coins.cpp.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-04T21:13:37Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483846226",
      "id" : 483846226,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0NjIyNg==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5435,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483846226",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483848478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483848478"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nProbably it makes sense for this function to take an interruption_point argument instead of defining its own internally.\r\n",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-04T21:20:45Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483848478",
      "id" : 483848478,
      "line" : 5386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0ODQ3OA==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5386,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 220,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483848478",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483851329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483851329"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nCan you add a comment explaining locking in this function. It's not clear to me why cs_main needs to be held at all while reading the snapshot file and populating the chainstate when the chainstate is still being constructed shouldn't be referenced externally. It's also not clear why it's safe to keep cs_main locked for up to 10 minutes below while downloading headers.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-04T21:30:38Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483851329",
      "id" : 483851329,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1MTMyOQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5375,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483851329",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483852578"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483852578"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nIs there a reason hash is being computed above before sleeping but only checked now after sleeping? It seems like it'd be good to return an error as early as possible and not wait for headers if this is going to fail.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-04T21:34:49Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483852578",
      "id" : 483852578,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1MjU3OA==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5503,
      "original_position" : 213,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483852578",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483857507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483857507"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nIdeally, we would not have to fake these things and external code would code better with missing data, right? Or do you disagree? It would be good if comment would say one way or the other what ultimate fate of faking should be.\r\n\r\nIt would also be good if comments in chain.h documenting CBlockIndex fields mentioned the fake values and said how to determine whether values are real or fake, to reduce likelihood of new bugs being introduced because of fake values.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-04T21:49:49Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            expected_contents_hash.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483857507",
      "id" : 483857507,
      "line" : 5445,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1NzUwNw==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5445,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 279,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483857507",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483858967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483858967"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nThis function and PopulateAndValidateSnapshot below are doing a lot of things, and I think might benefit from being split up into smaller functions:\r\n\r\n- Rebalance caches\r\n- Load snapshot file -> ccoinsview and verify expected hash\r\n- Wait for headers\r\n- Set chain tip and fake blockindex data\r\n\r\nSome of these could be marked EXCLUSIVE_LOCKS_REQUIRED(cs_main) to make locking requirements more explicit.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-04T21:51:39Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483858967",
      "id" : 483858967,
      "line" : 5203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1ODk2Nw==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5203,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 37,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483858967",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483860811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483860811"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nI don't understand implication of this comment. Maybe it should say why not to rebalance or flush. I'm not clear on what rebalancing would do here, and it seems like the PopulateAndValidateSnapshot call already flushes the snapshot chainstate, at least.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-04T21:57:53Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483860811",
      "id" : 483860811,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MDgxMQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5329,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483860811",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483865232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483865232"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"simplify ChainstateManager::SnapshotBlockhash() return semantics\" (75d1e7754274d3f015a49e71871c3a069cbe020b)\r\n\r\nI think if all the calling code is going to continue to do `.value_or(uint256())` it makes little sense for this to return an optional. Would be simpler to just use `Optional<uint256>` everywhere (make `m_from_snapshot_blockhash` an `Optional<uint256>` and stop treating zero hash specially) or use `uint256` everywhere and keep treating zero hash specially. But having back and forth nullopt <-> null hash conversions doesn't make sense over just picking one format and sticking with it.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-04T22:15:44Z",
      "diff_hunk" : "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483865232",
      "id" : 483865232,
      "line" : 5144,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NTIzMg==",
      "original_commit_id" : "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "original_line" : 5144,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 14,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483865232",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585151"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585151"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, you're right about this - I'll remove the lock acquisition. I had initially put this in to simplify testing, and had some vague rationale about snapshot load being the most important task and so meriting \"stopping\" everything else by holding cs_main, but that doesn't make much sense. Also probably good to keep cs_main free while deserializing the snapshot so that we have a better chance of having finished headers retrieval by the time we get to the related check below.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-07T23:26:48Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585151",
      "id" : 484585151,
      "in_reply_to_id" : 483851329,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NTE1MQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5375,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 483725550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585151",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585389"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Would be good to use SetBestBlock\r\n\r\nFixed, thanks.\r\n\r\n> it would be reasonable to write a CAutoFile -> CCoinsViewCache function\r\n\r\nHm yeah, this is definitely worth some consideration.\r\n\r\n",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-07T23:28:24Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585389",
      "id" : 484585389,
      "in_reply_to_id" : 483846226,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NTM4OQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5435,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 483725550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585389",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585738"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, that's a good point. Unfortunately we need the headers chain to [resolve the `base_height`](https://github.com/bitcoin/bitcoin/pull/19806/commits/9c1db71dbd82342b0a1d33401b329e34a7a6cee8#diff-24efdb00bfbe56b140fb006b562cc70bR5495) before retrieving the expected assumeutxo data.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-09-07T23:31:03Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585738",
      "id" : 484585738,
      "in_reply_to_id" : 483852578,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4NTczOA==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5503,
      "original_position" : 213,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 483725550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484585738",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Would it make sense to add the 110 and 210 block regtest snapshots to the repo, and then add a functional test to load them? That should demonstrate all the behavior we need without committing to a testnet or mainnet block.\r\n\r\nI can't compile on macOS.\r\n```\r\nvalidation.cpp:5334:67: error: passing variable 'm_blockman' by reference requires holding mutex 'cs_main' [-Werror,-Wthread-safety-reference]\r\n    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\r\n                                                                  ^\r\nvalidation.cpp:5375:56: error: calling function 'CoinsTip' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\r\n    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\r\n                                                       ^\r\nvalidation.cpp:5413:37: error: calling function 'GetCoinsCacheSizeState' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\r\n            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\r\n                                    ^\r\nvalidation.cpp:5462:44: error: calling function 'CoinsDB' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\r\n    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\r\n\r\n```",
      "created_at" : "2020-09-18T12:22:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-694835995",
      "id" : 694835995,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NDgzNTk5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-18T15:59:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694835995",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-09-22T17:06:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-696854625",
      "id" : 696854625,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5Njg1NDYyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-22T17:06:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696854625",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-10-08T20:05:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-705794512",
      "id" : 705794512,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwNTc5NDUxMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-08T20:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705794512",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504009619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504009619"
         }
      },
      "author_association" : "MEMBER",
      "body" : "After revisiting this comment, I don't understand it either! Seems like we should always `MaybeRebalanceCaches()` at the end of this function. It probably had something to do with not wanting to clear the coinscache of the new chainstate throughout the course of the flush, but since we're doing that anyway (#17487 doesn't look like it's going to get merged anytime soon) I'll just add that call to the end here.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-13T14:41:57Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504009619",
      "id" : 504009619,
      "in_reply_to_id" : 483860811,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwOTYxOQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5329,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 507512760,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504009619",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504014239"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504014239"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure what you mean here. I was a little confused when rebasing because afaict we don't have any remaining usages of interruption_point in the codebase (aside from the RpcInterruptionPoint).",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-13T14:47:25Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504014239",
      "id" : 504014239,
      "in_reply_to_id" : 483848478,
      "line" : 5386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNDIzOQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5386,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 220,
      "pull_request_review_id" : 507512760,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504014239",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504028114"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504028114"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ideally you're right here, but there's a lot of complexity in cleaning up the \"consumer\" side of this data. Take for example `nChainTx`; in order to avoid faking that value, there are various points of consumption in net_processing (by way of `HaveTxsDownloaded()`) that need to be addressed. What makes these sites complicated is that they lack the chainstate context, having access only to the CBlockIndex objects.\r\n\r\nI'm not saying it isn't possible to do what you're suggesting here, but I think it will probably involve some deep thinking about how much regions like net_processing should know about chainstate semantics. I'm going to leave this for someone else to think about unless there is a fundamental objection to fudging this data for snapshot chainstates.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-13T15:04:55Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            expected_contents_hash.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504028114",
      "id" : 504028114,
      "in_reply_to_id" : 483857507,
      "line" : 5445,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyODExNA==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5445,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 279,
      "pull_request_review_id" : 507512760,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504028114",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504030195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504030195"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not opposed, but I'm not sure I see a lot of benefit either. E.g. I don't think splitting this stuff up allows us to do a more comprehensive job of testing. I'm happy to apply a diff though.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-13T15:07:29Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504030195",
      "id" : 504030195,
      "in_reply_to_id" : 483858967,
      "line" : 5203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAzMDE5NQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5203,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 37,
      "pull_request_review_id" : 507512760,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504030195",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504031898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504031898"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah I don't disagree; initially had it that way but changed it at the request of a reviewer in a previous PR.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-13T15:09:47Z",
      "diff_hunk" : "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504031898",
      "id" : 504031898,
      "in_reply_to_id" : 483865232,
      "line" : 5144,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAzMTg5OA==",
      "original_commit_id" : "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "original_line" : 5144,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 14,
      "pull_request_review_id" : 507542406,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504031898",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665391"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-16T18:55:21Z",
      "diff_hunk" : "@@ -24,6 +24,9 @@ static uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n+//! XXX: be very careful when changing this! assumeutuxo and UTXO snapshot",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665391",
      "id" : 506665391,
      "in_reply_to_id" : 482332094,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NTM5MQ==",
      "original_commit_id" : "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "original_line" : 27,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/node/coinstats.cpp",
      "position" : null,
      "pull_request_review_id" : 510726011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665391",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665484"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665484"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-16T18:55:32Z",
      "diff_hunk" : "@@ -955,4 +955,14 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainParams& params);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665484",
      "id" : 506665484,
      "in_reply_to_id" : 482426252,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NTQ4NA==",
      "original_commit_id" : "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "original_line" : 966,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 510726110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665484",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665741"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, added test coverage in the same commit.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-16T18:56:07Z",
      "diff_hunk" : "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665741",
      "id" : 506665741,
      "in_reply_to_id" : 483817973,
      "line" : 5144,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NTc0MQ==",
      "original_commit_id" : "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "original_line" : 5144,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 14,
      "pull_request_review_id" : 510726454,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506665741",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506666210"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506666210"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Cleaned up the usages to actually make use of the option. Thanks.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-16T18:57:04Z",
      "diff_hunk" : "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506666210",
      "id" : 506666210,
      "in_reply_to_id" : 483865232,
      "line" : 5144,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NjIxMA==",
      "original_commit_id" : "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "original_line" : 5144,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 14,
      "pull_request_review_id" : 510727060,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506666210",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Okay, rebased. After a few days of fighting on CI with an apparent msan compiler bug (doesn't like `const` map values - thanks to @ryanofsky for the help) and a few macOS-specific sign comparison warnings (I'm beginning to understand why no one writes tests in C++), this thing is building on CI. The lock annotation warnings that @Sjors helpfully pointed out have been fixed (and were introduced when I removed the cs_main hold throughout snapshot activation).\r\n\r\nI spoke to Sjors offline per his recommendation about adding testnet snapshots and I think that's a good idea, but we can do it in a followup - especially given that the big benefit of doing that would be the ability to use the snapshot files in functional tests, but since the behavior here isn't accessible via RPC (and really can't be until the remaining assumeutxo changes are in), I think we can wait to do that until later.\r\n\r\nI think I've addressed all the feedback here, thanks to everyone so far for that.",
      "created_at" : "2020-10-16T19:02:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-710438957",
      "id" : 710438957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMDQzODk1Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-16T19:03:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/710438957",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508081070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508081070"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"chainparams: add allowed assumeutxo values\" (a1aa47484fb7c272a1b957a37dc8c4595a0774bb)\r\n\r\nIt might be good to say in comment that `int` is a height. Also, it looks like strictly speaking there is no need for this data structure to reference heights. E.g. it could just be a simple map from hash -> nChainTx. Not important, though.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-19T21:45:28Z",
      "diff_hunk" : "@@ -30,6 +30,26 @@ struct CCheckpointData {\n     }\n };\n \n+/**\n+ * Holds configuration for use during UTXO snapshot load and validation. The contents\n+ * here are security critical, since they dictate which UTXO snapshots are recognized\n+ * as valid.\n+ */\n+struct AssumeutxoData {\n+    //! The expected hash of the deserialized UTXO set.\n+    const uint256 hash_serialized;\n+\n+    //! Used to populate the nChainTx value, which is used during BlockManager::LoadBlockIndex().\n+    //!\n+    //! We need to hardcode the value here because this is computed cumulatively using block data,\n+    //! which we do not necessarily have at the time of snapshot load.\n+    const unsigned int nChainTx;\n+};\n+\n+std::ostream& operator<<(std::ostream& o, const AssumeutxoData& aud);\n+\n+using MapAssumeutxo = std::map<int, const AssumeutxoData>;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508081070",
      "id" : 508081070,
      "line" : 51,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MTA3MA==",
      "original_commit_id" : "a1aa47484fb7c272a1b957a37dc8c4595a0774bb",
      "original_line" : 51,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/chainparams.h",
      "position" : 22,
      "pull_request_review_id" : 512182467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508081070",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508087473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508087473"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nWhat's the reason this uses 99:1 ratio while MaybeRebalanceCaches uses 95:5 ratio? Maybe there should be an explanatory comment, or the two pieces of code could use a common helper function or constants.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-19T21:59:41Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508087473",
      "id" : 508087473,
      "line" : 5221,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NzQ3Mw==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5221,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 55,
      "pull_request_review_id" : 512182467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508087473",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508092882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508092882"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nWould it make sense to assert m_snap_chainstate is null before this?",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-19T22:12:29Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508092882",
      "id" : 508092882,
      "line" : 5266,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5Mjg4Mg==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5266,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 100,
      "pull_request_review_id" : 512182467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508092882",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508107265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508107265"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504014239\r\n\r\n> Not sure what you mean here. I was a little confused when rebasing because afaict we don't have any remaining usages of interruption_point in the codebase (aside from the RpcInterruptionPoint).\r\n\r\nIt's not important, but the suggestion is for PopulateAndValidateSnapshot and ActivateSnapshot to take a `const std::function<void()>& interruption_point` so when this code is called from `loadtxoutset` in #15606 it is interruptable.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-19T22:50:03Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508107265",
      "id" : 508107265,
      "in_reply_to_id" : 483848478,
      "line" : 5386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNzI2NQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5386,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 220,
      "pull_request_review_id" : 512182467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508107265",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508368402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508368402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5: You may want to move the refactor from 83a67ec24c053f6d085101c83e448e76806e8355 up a bit, so you can use `if (this->SnapshotBlockhash())` from the get go.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-20T09:56:57Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508368402",
      "id" : 508368402,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2ODQwMg==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5282,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 512534741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508368402",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508378505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508378505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5 : why is the snapshot mempool shared with the ibd mempool?",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-20T10:12:44Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508378505",
      "id" : 508378505,
      "line" : 5244,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3ODUwNQ==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5244,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 78,
      "pull_request_review_id" : 512534741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508378505",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508390158"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508390158"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I tend to agree that (in the current incarnation 5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5 `PopulateAndValidateSnapshot` does quite a lot. Although I can follow along, it might be more clear if `ActivateSnapshot` called more specific helper functions in the right order, e.g. `WaitForHeaders`.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-20T10:32:07Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508390158",
      "id" : 508390158,
      "in_reply_to_id" : 483858967,
      "line" : 5203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MDE1OA==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5203,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 37,
      "pull_request_review_id" : 512534741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508390158",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508397723"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508397723"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's a bit weird to activate a snapshot that is identical to the actual fully validated chain. It would be nice if we could mine headers-only. Calling `ProcessNewBlockHeaders` instead of `ProcessNewBlock` in the test helper might do the trick.\r\n\r\nTogether with mock time you could test the functionality of waiting for headers too.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-20T10:44:39Z",
      "diff_hunk" : "@@ -163,4 +168,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    assert(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508397723",
      "id" : 508397723,
      "line" : 237,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5NzcyMw==",
      "original_commit_id" : "59013d80067948e5073da10a06802a1e9b84e7d7",
      "original_line" : 237,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : 116,
      "pull_request_review_id" : 512534741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508397723",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508597546"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508597546"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504028114\r\n\r\n> I'm not saying it isn't possible to do what you're suggesting here\r\n\r\nSorry, wasn't objecting to fudging data now, just suggesting documenting in chain.h which fields may contain fake data and when the fake data is set. Documenting seems less important if fake data can be cleaned up easily, more important if fake data will be a more permanent thing",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-20T15:16:20Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            expected_contents_hash.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508597546",
      "id" : 508597546,
      "in_reply_to_id" : 483857507,
      "line" : 5445,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5NzU0Ng==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5445,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 279,
      "pull_request_review_id" : 512182467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508597546",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508613868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508613868"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nIf these blockindexes are shared across different chains and can be accessed without `snapshot_chainstate` is some locking needed to update them? Might be good to have a comment saying why cs_main isn't acquired here. (Feel free to skip if I'm just missing a basic assumption)",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-20T15:31:25Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    Optional<AssumeutxoData> maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    AssumeutxoData au_data = maybe_au_data.get();\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508613868",
      "id" : 508613868,
      "line" : 5458,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMzg2OA==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5458,
      "original_position" : 248,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 292,
      "pull_request_review_id" : 512182467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508613868",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508622929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508622929"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\r\n\r\nFWIW, I don't think a CoinsView bulk load method would be a crazy thing to have. But I can see how making it not snapshot-activation specific could be a pain, so the `friend ChainstateManager` approach does seem ok too.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-20T15:39:07Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508622929",
      "id" : 508622929,
      "line" : 5357,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYyMjkyOQ==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5357,
      "original_position" : 150,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 191,
      "pull_request_review_id" : 512182467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508622929",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508634404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508634404"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"tests: add deterministic chain generation unittest fixture\" (e08cc16f53b7b465f4f1e3b6f7bf83b37356b043)\r\n\r\nPerhaps should use `if (m_deterministic)` condition for consistency with the other SetMockTime calls in this class",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-20T15:48:35Z",
      "diff_hunk" : "@@ -230,6 +259,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n TestChain100Setup::~TestChain100Setup()\n {\n     gArgs.ForceSetArg(\"-segwitheight\", \"0\");\n+    SetMockTime(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508634404",
      "id" : 508634404,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzNDQwNA==",
      "original_commit_id" : "e08cc16f53b7b465f4f1e3b6f7bf83b37356b043",
      "original_line" : 262,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.cpp",
      "position" : null,
      "pull_request_review_id" : 512182467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508634404",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508645914"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508645914"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"tests: add snapshot activation test\" (59013d80067948e5073da10a06802a1e9b84e7d7)\r\n\r\nBetter to replace `assert` with `BOOST_REQUIRE` to integrate with test framework. Also because it's good not to do things with side effects in c asserts in case there are custom CPPFLAGS",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-20T15:58:40Z",
      "diff_hunk" : "@@ -163,4 +168,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    assert(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508645914",
      "id" : 508645914,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0NTkxNA==",
      "original_commit_id" : "59013d80067948e5073da10a06802a1e9b84e7d7",
      "original_line" : 222,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 512182467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508645914",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513427859"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513427859"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Each CChainState instance needs a mempool. In practice, the non-active mempool will never be used, but since each chainstate can be the active throughout runtime, they each need a reference to the same mempool.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T13:09:33Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513427859",
      "id" : 513427859,
      "in_reply_to_id" : 508378505,
      "line" : 5244,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQyNzg1OQ==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5244,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 78,
      "pull_request_review_id" : 518639991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513427859",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513429114"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513429114"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't really understand this. There's no way to generate a snapshot to activate without mining blocks on some chain. The chainstate we're loading the snapshot into has no knowledge of the mined blocks. I don't know how we can do better?",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T13:11:29Z",
      "diff_hunk" : "@@ -163,4 +168,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    assert(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513429114",
      "id" : 513429114,
      "in_reply_to_id" : 508397723,
      "line" : 237,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQyOTExNA==",
      "original_commit_id" : "59013d80067948e5073da10a06802a1e9b84e7d7",
      "original_line" : 237,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : 116,
      "pull_request_review_id" : 518641737,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513429114",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513451488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513451488"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh this is definitely a problem, thanks for finding it. Yet another vestige of originally having `::cs_main` held during the entirety of `PopulateAndValidateSnapshot`.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T13:41:41Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    Optional<AssumeutxoData> maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    AssumeutxoData au_data = maybe_au_data.get();\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513451488",
      "id" : 513451488,
      "in_reply_to_id" : 508613868,
      "line" : 5458,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1MTQ4OA==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5458,
      "original_position" : 248,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 292,
      "pull_request_review_id" : 518671529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513451488",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513594968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513594968"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hm, you're right about that. I kind of like the constraint that keying by height creates (enforces single entry per height), but that's neither here nor there. I'll leave as-is unless we can think of a good reason to change.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T16:39:28Z",
      "diff_hunk" : "@@ -30,6 +30,26 @@ struct CCheckpointData {\n     }\n };\n \n+/**\n+ * Holds configuration for use during UTXO snapshot load and validation. The contents\n+ * here are security critical, since they dictate which UTXO snapshots are recognized\n+ * as valid.\n+ */\n+struct AssumeutxoData {\n+    //! The expected hash of the deserialized UTXO set.\n+    const uint256 hash_serialized;\n+\n+    //! Used to populate the nChainTx value, which is used during BlockManager::LoadBlockIndex().\n+    //!\n+    //! We need to hardcode the value here because this is computed cumulatively using block data,\n+    //! which we do not necessarily have at the time of snapshot load.\n+    const unsigned int nChainTx;\n+};\n+\n+std::ostream& operator<<(std::ostream& o, const AssumeutxoData& aud);\n+\n+using MapAssumeutxo = std::map<int, const AssumeutxoData>;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513594968",
      "id" : 513594968,
      "in_reply_to_id" : 508081070,
      "line" : 51,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5NDk2OA==",
      "original_commit_id" : "a1aa47484fb7c272a1b957a37dc8c4595a0774bb",
      "original_line" : 51,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/chainparams.h",
      "position" : 22,
      "pull_request_review_id" : 518867317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513594968",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655004"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T18:02:02Z",
      "diff_hunk" : "@@ -163,4 +168,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    assert(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655004",
      "id" : 513655004,
      "in_reply_to_id" : 508645914,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTAwNA==",
      "original_commit_id" : "59013d80067948e5073da10a06802a1e9b84e7d7",
      "original_line" : 222,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 518946328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655004",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655080"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T18:02:09Z",
      "diff_hunk" : "@@ -230,6 +259,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n TestChain100Setup::~TestChain100Setup()\n {\n     gArgs.ForceSetArg(\"-segwitheight\", \"0\");\n+    SetMockTime(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655080",
      "id" : 513655080,
      "in_reply_to_id" : 508634404,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTA4MA==",
      "original_commit_id" : "e08cc16f53b7b465f4f1e3b6f7bf83b37356b043",
      "original_line" : 262,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.cpp",
      "position" : null,
      "pull_request_review_id" : 518946447,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655080",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655199"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T18:02:21Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    Optional<AssumeutxoData> maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    AssumeutxoData au_data = maybe_au_data.get();\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655199",
      "id" : 513655199,
      "in_reply_to_id" : 508613868,
      "line" : 5458,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTE5OQ==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5458,
      "original_position" : 248,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 292,
      "pull_request_review_id" : 518946607,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655199",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655572"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment here.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T18:02:54Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655572",
      "id" : 513655572,
      "in_reply_to_id" : 508087473,
      "line" : 5221,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTU3Mg==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5221,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 55,
      "pull_request_review_id" : 518947076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655572",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655773"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T18:03:14Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655773",
      "id" : 513655773,
      "in_reply_to_id" : 508368402,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTc3Mw==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5282,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 518947361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513655773",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513660363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513660363"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Makes sense to me. Fixed.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T18:10:25Z",
      "diff_hunk" : "@@ -5271,6 +5271,270 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513660363",
      "id" : 513660363,
      "in_reply_to_id" : 508092882,
      "line" : 5266,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2MDM2Mw==",
      "original_commit_id" : "5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5",
      "original_line" : 5266,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 100,
      "pull_request_review_id" : 518953545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513660363",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513662804"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513662804"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh sorry, somehow misinterpreted what you'd said. Added some comments in `chain.h` that at least provide references to where the faked values are created and used; if you can think of anything else that'd be useful I'm happy to apply a patch.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-10-28T18:14:21Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            expected_contents_hash.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513662804",
      "id" : 513662804,
      "in_reply_to_id" : 483857507,
      "line" : 5445,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2MjgwNA==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5445,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 279,
      "pull_request_review_id" : 518956671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513662804",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r522516317"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522516317"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in f92a76b62fad04213884ec602822601ee84f3825:\r\nnit: This new line doesn't seem necessary",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-11-12T23:57:09Z",
      "diff_hunk" : "@@ -65,6 +76,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     BlockValidationState _;\n     BOOST_CHECK(c2.ActivateBestChain(_, chainparams, nullptr));\n \n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r522516317",
      "id" : 522516317,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNjMxNw==",
      "original_commit_id" : "f92a76b62fad04213884ec602822601ee84f3825",
      "original_line" : 79,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 529599345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522516317",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523774332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523774332"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in d2d1eb23331fdb1c36a8a879aff222ff0d731210:\r\nTypo: `assumeutuxo`",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-11-15T15:34:47Z",
      "diff_hunk" : "@@ -24,6 +24,9 @@ static uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n+//! Warning: be very careful when changing this! assumeutuxo and UTXO snapshot",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523774332",
      "id" : 523774332,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3NDMzMg==",
      "original_commit_id" : "d2d1eb23331fdb1c36a8a879aff222ff0d731210",
      "original_line" : 27,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/node/coinstats.cpp",
      "position" : null,
      "pull_request_review_id" : 529599345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523774332",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523779017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523779017"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 07936ca7c067f007f7fe9dc04e8feb2c934122a2:\r\n`coins_left` should always be 0 here so it can be removed I think",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-11-15T16:13:14Z",
      "diff_hunk" : "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523779017",
      "id" : 523779017,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3OTAxNw==",
      "original_commit_id" : "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "original_line" : 5444,
      "original_position" : 173,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 529599345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523779017",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523797335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523797335"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 07936ca7c067f007f7fe9dc04e8feb2c934122a2:\r\nThis fails if `m_coins_count` has a higher count than the number of actual coins in `coins_file`. See also my test in https://github.com/fjahr/bitcoin/commit/2835c8118fe35f5551886ac5251e535bb337571a.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-11-15T18:52:28Z",
      "diff_hunk" : "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523797335",
      "id" : 523797335,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5NzMzNQ==",
      "original_commit_id" : "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "original_line" : 5377,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 529599345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523797335",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523799037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523799037"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in d2d1eb23331fdb1c36a8a879aff222ff0d731210:\r\nJust a thought: Should a node refuse to start if it has a chain that does not match with the assumeutxo data here? Maybe in the next steps it could make sense to add such a check to init but I haven't thought about it much and maybe you already plan to do this.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-11-15T19:05:53Z",
      "diff_hunk" : "@@ -164,6 +163,10 @@ class CMainParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+         // TODO to be specified in a future patch.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523799037",
      "id" : 523799037,
      "line" : 164,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5OTAzNw==",
      "original_commit_id" : "d2d1eb23331fdb1c36a8a879aff222ff0d731210",
      "original_line" : 164,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 13,
      "pull_request_review_id" : 529599345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523799037",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523802301"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523802301"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 07936ca7c067f007f7fe9dc04e8feb2c934122a2:\r\nThis statement does not have to be true afaict. The count in the metadata can be different from the actual count of the coins in the file. Also, the loop above doesn't seem to break unless `coins_left` is 0 anyway.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-11-15T19:30:55Z",
      "diff_hunk" : "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523802301",
      "id" : 523802301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgwMjMwMQ==",
      "original_commit_id" : "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "original_line" : 5445,
      "original_position" : 168,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 529599345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523802301",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523811814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523811814"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 700e66dc6bf6ed1b6bc2a642686a734cb69f4932:\r\nnit: not sure about where univalue really belongs but mostly it seems to be in the very last block of includes while tinyformat is in the block above. But again, not sure which style guide we actually follow there. Either way, if you keep it like this, sorting between univalue and tinyformat is wrong.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-11-15T20:50:13Z",
      "diff_hunk" : "@@ -4,14 +4,19 @@\n //\n #include <chainparams.h>\n #include <consensus/validation.h>\n+#include <node/utxo_snapshot.h>\n #include <random.h>\n+#include <rpc/blockchain.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <optional.h>\n #include <uint256.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n+#include <univalue.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523811814",
      "id" : 523811814,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgxMTgxNA==",
      "original_commit_id" : "700e66dc6bf6ed1b6bc2a642686a734cb69f4932",
      "original_line" : 17,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 529599345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523811814",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r526918310"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526918310"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think failure is the desired behavior; if the coins count attached to the snapshot deviates from the actual contents of the snapshot, that's an indication that the snapshot has been modified somehow.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-11-19T14:14:39Z",
      "diff_hunk" : "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r526918310",
      "id" : 526918310,
      "in_reply_to_id" : 523797335,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxODMxMA==",
      "original_commit_id" : "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "original_line" : 5377,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 534485946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526918310",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r526925349"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526925349"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh I think I see what you're saying here - it halts execution instead of `return false`? Yeah, maybe we should wrap this in a `try` for testability's sake.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-11-19T14:23:38Z",
      "diff_hunk" : "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r526925349",
      "id" : 526925349,
      "in_reply_to_id" : 523797335,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkyNTM0OQ==",
      "original_commit_id" : "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "original_line" : 5377,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 534495074,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/526925349",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @ryanofsky @fjahr for the review, and thanks especially for the test Fabian - that's great. I've addressed your feedback and slightly modified the test patch for formatting. I fixed up the snapshot activation so that we can properly test both sides of a false coin count without exception, and I've added your commit as the head of this branch.",
      "created_at" : "2020-11-19T14:35:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-730415498",
      "id" : 730415498,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMDQxNTQ5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-19T14:35:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730415498",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code review ACK 2aba960c3360da1e840ffef3b0f95c4fde4f86a6\r\n\r\nAlso played with the tests extensively looking for edge cases.",
      "created_at" : "2020-11-19T23:36:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-730704478",
      "id" : 730704478,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMDcwNDQ3OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-19T23:36:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730704478",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The Cirrus fuzzer/valgrind test is reliably timing out here. Not sure if that's unique to this PR or not.\r\n\r\nOtherwise, I think this is close to ready for merge?",
      "created_at" : "2020-11-28T17:03:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-735256648",
      "id" : 735256648,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNTI1NjY0OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-28T17:03:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/735256648",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Jup, can be ignored. (Or fixed with a rebase)",
      "created_at" : "2020-11-28T17:10:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-735257431",
      "id" : 735257431,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNTI1NzQzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-28T17:10:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/735257431",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r533632213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533632213"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (a2e7b295a33d90c895da649ee479fa090f20276b)\r\n\r\nCould drop `- coins_left` to be consistent with `[snapshot] loaded` log print immediately below. Assuming no change in behavior since it will always be zero. Or maybe just move the    \"snapshot loaded\" print above the \"bad snapshot\" print so the loading information only needs to be printed one place",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-01T18:31:10Z",
      "diff_hunk" : "@@ -5272,6 +5272,278 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r533632213",
      "id" : 533632213,
      "in_reply_to_id" : 523802301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzMjIxMw==",
      "original_commit_id" : "07936ca7c067f007f7fe9dc04e8feb2c934122a2",
      "original_line" : 5445,
      "original_position" : 168,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 542183818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533632213",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-12-07T13:04:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-739905753",
      "id" : 739905753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTkwNTc1Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-07T13:04:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739905753",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code review ACK 80121fbb2d0c7c14f9c99cb873859e5ed9c83a0e. Changes since last review: rebased, changed a logprint in `validation.cpp` (see GH comments), changed NODISCARD to [[nodiscard]].",
      "created_at" : "2020-12-13T23:55:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-744091765",
      "id" : 744091765,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NDA5MTc2NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-13T23:55:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744091765",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "In ba2779f98490f1492644a4ee4320fa689560272c you mock `nTx`, `nChainTx` (memory only) and `BLOCK_OPT_WITNESS` in `m_active_chainstate` for all blocks below the snapshot height. Meanwhile the background sync from genesis takes place on `m_ibd_chainstate` which sets the correct values. I spent a bunch of time being confused, but eventually realised `pblocktree` is a global. It might be nice to pull that into `ChainstateManager` as well in another PR.",
      "created_at" : "2020-12-14T13:22:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-744436297",
      "id" : 744436297,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NDQzNjI5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-14T13:22:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744436297",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542412737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542412737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ba2779f98490f1492644a4ee4320fa689560272c : Better to [avoid](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#general-c) asserts with side-effects.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-14T14:11:03Z",
      "diff_hunk" : "@@ -5196,6 +5196,284 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542412737",
      "id" : 542412737,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxMjczNw==",
      "original_commit_id" : "ba2779f98490f1492644a4ee4320fa689560272c",
      "original_line" : 5267,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 551401919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542412737",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542499846"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542499846"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ea0e1d005a455d8ddef63d428dbedcd9f54a2f9e: maybe put an `assert` here and have the caller do `if (!m_is_memory)`? It's also not very clear to me why it's fine to skip the resize (within tests).",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-14T16:00:13Z",
      "diff_hunk" : "@@ -47,11 +47,15 @@ CCoinsViewDB::CCoinsViewDB(fs::path ldb_path, size_t nCacheSize, bool fMemory, b\n \n void CCoinsViewDB::ResizeCache(size_t new_cache_size)\n {\n-    // Have to do a reset first to get the original `m_db` state to release its\n-    // filesystem lock.\n-    m_db.reset();\n-    m_db = MakeUnique<CDBWrapper>(\n-        m_ldb_path, new_cache_size, m_is_memory, /*fWipe*/ false, /*obfuscate*/ true);\n+    // We can't do this operation with an in-memory DB since we'll lose all the coins upon\n+    // reset.\n+    if (!m_is_memory) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542499846",
      "id" : 542499846,
      "line" : 52,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5OTg0Ng==",
      "original_commit_id" : "ea0e1d005a455d8ddef63d428dbedcd9f54a2f9e",
      "original_line" : 52,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : 11,
      "pull_request_review_id" : 551401919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542499846",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542504229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542504229"
         }
      },
      "author_association" : "MEMBER",
      "body" : "6bb63e9efeccfad3e5f422453902cb22a22c33b4 : alternatively, it could return `path` rather than a `UniValue`, so it could even live outside of RPC land.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-14T16:05:42Z",
      "diff_hunk" : "@@ -57,4 +59,10 @@ CTxMemPool& EnsureMemPool(const util::Ref& context);\n ChainstateManager& EnsureChainman(const util::Ref& context);\n CBlockPolicyEstimator& EnsureFeeEstimator(const util::Ref& context);\n \n+/**\n+ * Helper to create UTXO snapshots given a chainstate and a file handle.\n+ * @return a UniValue map containing metadata about the snapshot.\n+ */\n+UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542504229",
      "id" : 542504229,
      "line" : 66,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNDIyOQ==",
      "original_commit_id" : "6bb63e9efeccfad3e5f422453902cb22a22c33b4",
      "original_line" : 66,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.h",
      "position" : 24,
      "pull_request_review_id" : 551401919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542504229",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542506377"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542506377"
         }
      },
      "author_association" : "MEMBER",
      "body" : "e82498b05634608e59a1d1acc1a8c1b8ece62ffc: why are you dropping `private` here? ",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-14T16:08:25Z",
      "diff_hunk" : "@@ -79,7 +79,6 @@ struct BasicTestingSetup {\n     explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n     ~BasicTestingSetup();\n \n-private:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542506377",
      "id" : 542506377,
      "line" : 82,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNjM3Nw==",
      "original_commit_id" : "e82498b05634608e59a1d1acc1a8c1b8ece62ffc",
      "original_line" : 82,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.h",
      "position" : 4,
      "pull_request_review_id" : 551401919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542506377",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542512722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542512722"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`mineBlocks()` calls `CreateAndProcessBlock` which calls `m_node.chainman->ProcessNewBlock`. Doesn't that mean the blocks are fully processed by the test node, including the right values for `nTx` and `BLOCK_OPT_WITNESS` for all blocks before the snapshot? Which would mean we're not testing the code path that sets dummy values.\r\n\r\nPerhaps one approach could be to split `CreateAndActivateUTXOSnapshot` so you can create a snapshot, wipe the node / chainstate manager, and then load it. But you'd have to save and reload the headers.\r\n\r\nIf this makes any sense, it can also wait.\r\n\r\n(in reply to https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513429114)",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-14T16:16:42Z",
      "diff_hunk" : "@@ -163,4 +168,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    assert(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542512722",
      "id" : 542512722,
      "in_reply_to_id" : 508397723,
      "line" : 237,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjcyMg==",
      "original_commit_id" : "59013d80067948e5073da10a06802a1e9b84e7d7",
      "original_line" : 237,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : 116,
      "pull_request_review_id" : 551401919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542512722",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543481652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543481652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have to make use of it here: https://github.com/bitcoin/bitcoin/pull/19806/files#diff-dbada1fe3a3d0af884304dd28be8c9df74b592401dec2c6400f6b491aefe6c9bR230",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-15T16:13:02Z",
      "diff_hunk" : "@@ -79,7 +79,6 @@ struct BasicTestingSetup {\n     explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n     ~BasicTestingSetup();\n \n-private:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543481652",
      "id" : 543481652,
      "in_reply_to_id" : 542506377,
      "line" : 82,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4MTY1Mg==",
      "original_commit_id" : "e82498b05634608e59a1d1acc1a8c1b8ece62ffc",
      "original_line" : 82,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.h",
      "position" : 4,
      "pull_request_review_id" : 552624485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543481652",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543572101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543572101"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We have no choice but to skip the resize in tests because, as the comment says, the operations necessary for a resize when using an in-memory db result in an emptying of the coinsdb.\r\n\r\nI like the idea of some kind of assert here to prevent this from happening outside of a test setting, but what could we assert on? Sounds like a good small follow-up.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-15T18:10:24Z",
      "diff_hunk" : "@@ -47,11 +47,15 @@ CCoinsViewDB::CCoinsViewDB(fs::path ldb_path, size_t nCacheSize, bool fMemory, b\n \n void CCoinsViewDB::ResizeCache(size_t new_cache_size)\n {\n-    // Have to do a reset first to get the original `m_db` state to release its\n-    // filesystem lock.\n-    m_db.reset();\n-    m_db = MakeUnique<CDBWrapper>(\n-        m_ldb_path, new_cache_size, m_is_memory, /*fWipe*/ false, /*obfuscate*/ true);\n+    // We can't do this operation with an in-memory DB since we'll lose all the coins upon\n+    // reset.\n+    if (!m_is_memory) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543572101",
      "id" : 543572101,
      "in_reply_to_id" : 542499846,
      "line" : 52,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MjEwMQ==",
      "original_commit_id" : "ea0e1d005a455d8ddef63d428dbedcd9f54a2f9e",
      "original_line" : 52,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : 11,
      "pull_request_review_id" : 552733482,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543572101",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543574650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543574650"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-15T18:14:10Z",
      "diff_hunk" : "@@ -5196,6 +5196,284 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543574650",
      "id" : 543574650,
      "in_reply_to_id" : 542412737,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3NDY1MA==",
      "original_commit_id" : "ba2779f98490f1492644a4ee4320fa689560272c",
      "original_line" : 5267,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 552736527,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543574650",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "[`au.activate.27`](https://github.com/jamesob/bitcoin/tree/au.activate.27) -> [`au.activate.28`](https://github.com/jamesob/bitcoin/tree/au.activate.28)\r\n\r\n<details><summary>Show range-diff</summary>\r\n\r\n```sh\r\n$ git range-diff master au.activate.27 au.activate.28\r\n\r\n1:  35188e646c = 1:  a9fb5a3174 chainparams: add allowed assumeutxo values\r\n2:  96d70a3897 = 2:  7356672cc1 simplify ChainstateManager::SnapshotBlockhash() return semantics\r\n3:  ba2779f984 ! 3:  164ccb2cf6 validation: add ChainstateManager::ActivateSnapshot\r\n    @@ -140,7 +140,8 @@\r\n     +        LOCK(::cs_main);\r\n     +        assert(!m_snapshot_chainstate);\r\n     +        m_snapshot_chainstate.swap(snapshot_chainstate);\r\n    -+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\r\n    ++        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\r\n    ++        assert(chaintip_loaded);\r\n     +\r\n     +        m_active_chainstate = m_snapshot_chainstate.get();\r\n     +\r\n4:  ea0e1d005a = 4:  3f69b370fb txdb: don't reset during in-memory cache resize\r\n5:  6bb63e9efe = 5:  290b567736 move-onlyish: break out CreateUTXOSnapshot from dumptxoutset\r\n6:  e82498b056 = 6:  78cdc6271a tests: add deterministic chain generation unittest fixture\r\n7:  77efd7e0a4 = 7:  b9b819ae12 tests: add snapshot activation test\r\n8:  80121fbb2d = 8:  68dadbdcb9 test: Add tests with maleated snapshot data\r\n```\r\n\r\n</details>\r\n",
      "created_at" : "2020-12-15T18:14:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-745471074",
      "id" : 745471074,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTQ3MTA3NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T18:14:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745471074",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, hope to review this tomorrow. Building now.",
      "created_at" : "2020-12-15T18:47:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-745491141",
      "id" : 745491141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTQ5MTE0MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T19:04:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745491141",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543721004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543721004"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Having to add a circular dependency here is kind of a shame.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-15T22:05:52Z",
      "diff_hunk" : "@@ -20,6 +20,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n+    \"node/coinstats -> validation -> node/coinstats\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543721004",
      "id" : 543721004,
      "line" : 23,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyMTAwNA==",
      "original_commit_id" : "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "original_line" : 23,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/lint/lint-circular-dependencies.sh",
      "position" : 4,
      "pull_request_review_id" : 552964012,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543721004",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543721793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543721793"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is there a C++17 equivalent for `optional_io`?",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-15T22:07:16Z",
      "diff_hunk" : "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543721793",
      "id" : 543721793,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyMTc5Mw==",
      "original_commit_id" : "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "original_line" : 64,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/lint/lint-includes.sh",
      "position" : null,
      "pull_request_review_id" : 552966143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543721793",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543726849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543726849"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The naming \"breakpoint\" in the comment confused me here at first, and made me think at first this was a remnant of debug code.\r\n\r\n> ct we don't have any remaining usages of interruption_point\r\n\r\nWell, the boost interruption point should no longer be used, If you want to check for interruption it should be done by passing in a polling function as @ryanofsky says.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-15T22:16:38Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543726849",
      "id" : 543726849,
      "in_reply_to_id" : 483848478,
      "line" : 5386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNjg0OQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5386,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 220,
      "pull_request_review_id" : 552980627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543726849",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543760624"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543760624"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unfortunately it doesn't look like it to me. [The contents of the boost header](https://www.boost.org/doc/libs/1_65_0/boost/optional/optional_io.hpp) don't seem to have any equivalent implementations [in c++17](https://en.cppreference.com/w/cpp/utility/optional), but that was a good idea to check. I tried removing the inclusion of this and it broke the build, so I guess it's required.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-15T23:24:31Z",
      "diff_hunk" : "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543760624",
      "id" : 543760624,
      "in_reply_to_id" : 543721793,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2MDYyNA==",
      "original_commit_id" : "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "original_line" : 64,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/lint/lint-includes.sh",
      "position" : null,
      "pull_request_review_id" : 553079837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543760624",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543762546"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543762546"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm with ya. This is cached (and may be stale) but I think the only workable alternative is to fold `coinstats` into validation. If you can think of something else I'm happy to make the change.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-15T23:28:52Z",
      "diff_hunk" : "@@ -20,6 +20,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n+    \"node/coinstats -> validation -> node/coinstats\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543762546",
      "id" : 543762546,
      "in_reply_to_id" : 543721004,
      "line" : 23,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2MjU0Ng==",
      "original_commit_id" : "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "original_line" : 23,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/lint/lint-circular-dependencies.sh",
      "position" : 4,
      "pull_request_review_id" : 553086745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543762546",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code review ACK 68dadbdcb9afe60b77e027d6b066c87b86dbf7a9\r\n\r\nOnly change since last review was introduction of intermediary variable `chaintip_loaded` to fix https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542412737.",
      "created_at" : "2020-12-16T00:14:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-745661241",
      "id" : 745661241,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTY2MTI0MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T00:14:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745661241",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544106688"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544106688"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Okay so you're not intentionally using anything from it, needing to include it is only a by-effect of how boost is structured internally?\r\nInteresting but yes I guess no way around it then.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-16T08:33:58Z",
      "diff_hunk" : "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544106688",
      "id" : 544106688,
      "in_reply_to_id" : 543721793,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNjY4OA==",
      "original_commit_id" : "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "original_line" : 64,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/lint/lint-includes.sh",
      "position" : null,
      "pull_request_review_id" : 553457436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544106688",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544109049"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544109049"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~~It isn't possible to factor out the part of `node/coinstats` that's used by `validation` to a third module, to prevent the `validation -> node/coinstats` side of the cycle?~~\r\nApparently that's almost all of it. Ugh.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-16T08:37:53Z",
      "diff_hunk" : "@@ -20,6 +20,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n+    \"node/coinstats -> validation -> node/coinstats\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544109049",
      "id" : 544109049,
      "in_reply_to_id" : 543721004,
      "line" : 23,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwOTA0OQ==",
      "original_commit_id" : "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "original_line" : 23,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/lint/lint-circular-dependencies.sh",
      "position" : 4,
      "pull_request_review_id" : 553460084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544109049",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544145712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544145712"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think we want to roll more into validation, but less.\r\n\r\nMy only idea here is to have the snapshot loading functionality not in validation itself, but in a separate implementation unit (which can depend on both,. but neither will depend on it). ",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-16T09:32:45Z",
      "diff_hunk" : "@@ -20,6 +20,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n+    \"node/coinstats -> validation -> node/coinstats\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544145712",
      "id" : 544145712,
      "in_reply_to_id" : 543721004,
      "line" : 23,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE0NTcxMg==",
      "original_commit_id" : "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "original_line" : 23,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/lint/lint-circular-dependencies.sh",
      "position" : 4,
      "pull_request_review_id" : 553503724,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544145712",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544168044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544168044"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You can avoid this by using `std::optional`s everywhere. Minimal diff to get this working here (but other uses of boost::optional also need to be removed):\r\n\r\n```diff\r\ndiff --git a/src/test/validation_tests.cpp b/src/test/validation_tests.cpp\r\nindex 37450ec18f..be9b6ccad2 100644\r\n--- a/src/test/validation_tests.cpp\r\n+++ b/src/test/validation_tests.cpp\r\n@@ -5,14 +5,14 @@\r\n #include <chainparams.h>\r\n #include <net.h>\r\n #include <signet.h>\r\n-#include <optional.h>\r\n #include <uint256.h>\r\n #include <validation.h>\r\n \r\n #include <test/util/setup_common.h>\r\n \r\n #include <boost/test/unit_test.hpp>\r\n-#include <boost/optional/optional_io.hpp>\r\n+\r\n+#include <optional>\r\n \r\n BOOST_FIXTURE_TEST_SUITE(validation_tests, TestingSetup)\r\n \r\n@@ -133,14 +133,14 @@ BOOST_AUTO_TEST_CASE(test_assumeutxo)\r\n \r\n     for (auto empty : bad_heights) {\r\n         const auto out = ExpectedAssumeutxo(empty, *params);\r\n-        BOOST_CHECK_EQUAL(out, nullopt);\r\n+        BOOST_CHECK(!out.has_value());\r\n     }\r\n \r\n-    const auto out110 = ExpectedAssumeutxo(110, *params).get();\r\n+    const auto out110 = ExpectedAssumeutxo(110, *params).value();\r\n     BOOST_CHECK_EQUAL(out110.hash_serialized, uint256S(\"76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"));\r\n     BOOST_CHECK_EQUAL(out110.nChainTx, (unsigned int)110);\r\n \r\n-    const auto out210 = ExpectedAssumeutxo(210, *params).get();\r\n+    const auto out210 = ExpectedAssumeutxo(210, *params).value();\r\n     BOOST_CHECK_EQUAL(out210.hash_serialized, uint256S(\"9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"));\r\n     BOOST_CHECK_EQUAL(out210.nChainTx, (unsigned int)210);\r\n }\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex e25d38d89f..09621420b5 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -5185,7 +5185,7 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\r\n     return *to_modify;\r\n }\r\n \r\n-Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\r\n+std::optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\r\n {\r\n     const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\r\n     const auto assumeutxo_found = valid_assumeutxos_map.find(height);\r\ndiff --git a/src/validation.h b/src/validation.h\r\nindex 0b8a72b8b0..db2cc1b643 100644\r\n--- a/src/validation.h\r\n+++ b/src/validation.h\r\n@@ -29,6 +29,7 @@\r\n #include <atomic>\r\n #include <map>\r\n #include <memory>\r\n+#include <optional>\r\n #include <set>\r\n #include <stdint.h>\r\n #include <string>\r\n@@ -1011,6 +1012,6 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\r\n  *\r\n  * @returns empty if no assumeutxo configuration exists for the given height.\r\n  */\r\n-Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& params);\r\n+std::optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& params);\r\n \r\n #endif // BITCOIN_VALIDATION_H\r\n```\r\n\r\nWe really shouldn't be adding new boost dependencies into validation.h, so I think changing all the `boost::optional`s to `std::optional`s needs to happen anyway.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-16T10:04:20Z",
      "diff_hunk" : "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544168044",
      "id" : 544168044,
      "in_reply_to_id" : 543721793,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2ODA0NA==",
      "original_commit_id" : "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "original_line" : 64,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/lint/lint-includes.sh",
      "position" : null,
      "pull_request_review_id" : 553530315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544168044",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-12-21T13:26:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-748972387",
      "id" : 748972387,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0ODk3MjM4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-21T13:26:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748972387",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This has many ACKs and  seems (besides needing rebase again, sorry) ready for merge.\r\nSo I think what we need to decide here is whether we'll accept a circular dependency added momentarily, and resolve that in a later PR. I don't insist on holding it up on that.",
      "created_at" : "2020-12-21T15:35:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749036079",
      "id" : 749036079,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0OTAzNjA3OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-21T15:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749036079",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r546776491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546776491"
         }
      },
      "author_association" : "MEMBER",
      "body" : "boost::optional -> std::optional has now been merged: #20671.\r\n\r\nThis boost include can be removed (and some of the optional methods need to be changed).",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-21T15:41:41Z",
      "diff_hunk" : "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r546776491",
      "id" : 546776491,
      "in_reply_to_id" : 543721793,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NjQ5MQ==",
      "original_commit_id" : "68dadbdcb9afe60b77e027d6b066c87b86dbf7a9",
      "original_line" : 64,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/lint/lint-includes.sh",
      "position" : null,
      "pull_request_review_id" : 556471661,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T03:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546776491",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the clear feedback - I'll rebase tonight and at the very least remove the unnecessary optional stuff.",
      "created_at" : "2020-12-21T15:53:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749045152",
      "id" : 749045152,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0OTA0NTE1Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-21T15:53:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749045152",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "[`au.activate.28`](https://github.com/jamesob/bitcoin/tree/au.activate.28) -> [`au.activate.30`](https://github.com/jamesob/bitcoin/tree/au.activate.30)\r\n\r\n<details><summary>Show range-diff</summary>\r\n\r\n```sh\r\n$ git range-diff master au.activate.28 au.activate.30\r\n\r\n1:  a9fb5a3174 ! 1:  d684ecd5f1 chainparams: add allowed assumeutxo values\r\n    @@ -140,17 +140,10 @@\r\n      #include <chainparams.h>\r\n      #include <net.h>\r\n      #include <signet.h>\r\n    -+#include <optional.h>\r\n     +#include <uint256.h>\r\n      #include <validation.h>\r\n\r\n      #include <test/util/setup_common.h>\r\n    -\r\n    - #include <boost/test/unit_test.hpp>\r\n    -+#include <boost/optional/optional_io.hpp>\r\n    -\r\n    - BOOST_FIXTURE_TEST_SUITE(validation_tests, TestingSetup)\r\n    -\r\n     @@\r\n          BOOST_CHECK(!CheckSignetBlockSolution(block, signet_params->GetConsensus()));\r\n      }\r\n    @@ -166,14 +159,14 @@\r\n     +\r\n     +    for (auto empty : bad_heights) {\r\n     +        const auto out = ExpectedAssumeutxo(empty, *params);\r\n    -+        BOOST_CHECK_EQUAL(out, nullopt);\r\n    ++        BOOST_CHECK(!out.has_value());\r\n     +    }\r\n     +\r\n    -+    const auto out110 = ExpectedAssumeutxo(110, *params).get();\r\n    ++    const auto out110 = ExpectedAssumeutxo(110, *params).value();\r\n     +    BOOST_CHECK_EQUAL(out110.hash_serialized, uint256S(\"76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"));\r\n     +    BOOST_CHECK_EQUAL(out110.nChainTx, (unsigned int)110);\r\n     +\r\n    -+    const auto out210 = ExpectedAssumeutxo(210, *params).get();\r\n    ++    const auto out210 = ExpectedAssumeutxo(210, *params).value();\r\n     +    BOOST_CHECK_EQUAL(out210.hash_serialized, uint256S(\"9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"));\r\n     +    BOOST_CHECK_EQUAL(out210.nChainTx, (unsigned int)210);\r\n     +}\r\n    @@ -235,15 +228,3 @@\r\n     +Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& params);\r\n     +\r\n      #endif // BITCOIN_VALIDATION_H\r\n    -\r\n    - diff --git a/test/lint/lint-includes.sh b/test/lint/lint-includes.sh\r\n    - --- a/test/lint/lint-includes.sh\r\n    - +++ b/test/lint/lint-includes.sh\r\n    -@@\r\n    -     boost/multi_index/sequenced_index.hpp\r\n    -     boost/multi_index_container.hpp\r\n    -     boost/optional.hpp\r\n    -+    boost/optional/optional_io.hpp\r\n    -     boost/preprocessor/cat.hpp\r\n    -     boost/preprocessor/stringize.hpp\r\n    -     boost/process.hpp\r\n2:  7356672cc1 ! 2:  e3240046d2 simplify ChainstateManager::SnapshotBlockhash() return semantics\r\n    @@ -15,19 +15,11 @@\r\n      #include <uint256.h>\r\n      #include <validation.h>\r\n      #include <validationinterface.h>\r\n    -@@\r\n    - #include <vector>\r\n    -\r\n    - #include <boost/test/unit_test.hpp>\r\n    -+#include <boost/optional/optional_io.hpp>\r\n    -\r\n    - BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, ChainTestingSetup)\r\n    -\r\n     @@\r\n          std::vector<CChainState*> chainstates;\r\n          const CChainParams& chainparams = Params();\r\n\r\n    -+    BOOST_CHECK_EQUAL(manager.SnapshotBlockhash(), nullopt);\r\n    ++    BOOST_CHECK(!manager.SnapshotBlockhash().has_value());\r\n     +\r\n          // Create a legacy (IBD) chainstate.\r\n          //\r\n    @@ -36,7 +28,7 @@\r\n          auto& validated_cs = manager.ValidatedChainstate();\r\n          BOOST_CHECK_EQUAL(&validated_cs, &c1);\r\n\r\n    -+    BOOST_CHECK_EQUAL(manager.SnapshotBlockhash(), nullopt);\r\n    ++    BOOST_CHECK(!manager.SnapshotBlockhash().has_value());\r\n     +\r\n          // Create a snapshot-based chainstate.\r\n          //\r\n    @@ -46,7 +38,7 @@\r\n     +        mempool, snapshot_blockhash));\r\n          chainstates.push_back(&c2);\r\n     +\r\n    -+    BOOST_CHECK_EQUAL(manager.SnapshotBlockhash().get(), snapshot_blockhash);\r\n    ++    BOOST_CHECK_EQUAL(manager.SnapshotBlockhash().value(), snapshot_blockhash);\r\n     +\r\n          c2.InitCoinsDB(\r\n              /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\r\n3:  164ccb2cf6 ! 3:  80f5bacf55 validation: add ChainstateManager::ActivateSnapshot\r\n    @@ -305,7 +305,7 @@\r\n     +        return false;\r\n     +    }\r\n     +\r\n    -+    AssumeutxoData au_data = maybe_au_data.get();\r\n    ++    AssumeutxoData au_data = maybe_au_data.value();\r\n     +\r\n     +    if (stats.hashSerialized != au_data.hash_serialized) {\r\n     +        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\r\n4:  3f69b370fb = 4:  822fdb59cf txdb: don't reset during in-memory cache resize\r\n5:  290b567736 = 5:  9a2c888df3 move-onlyish: break out CreateUTXOSnapshot from dumptxoutset\r\n6:  78cdc6271a = 6:  414ba87784 tests: add deterministic chain generation unittest fixture\r\n7:  b9b819ae12 = 7:  51f3f97490 tests: add snapshot activation test\r\n8:  68dadbdcb9 = 8:  e62e2a96f6 test: Add tests with maleated snapshot data\r\n```\r\n\r\n</details>\r\n\r\n",
      "created_at" : "2020-12-22T03:57:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749324217",
      "id" : 749324217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0OTMyNDIxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-22T03:57:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749324217",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547175326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547175326"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d684ecd5 pass cheaply copied types by non-const value\r\n```suggestion\r\nOptional<AssumeutxoData> ExpectedAssumeutxo(int height, const CChainParams& chainparams)\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T09:46:15Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547175326",
      "id" : 547175326,
      "line" : 5188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE3NTMyNg==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5188,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 22,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547175326",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547177920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547177920"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d684ecd5f11b2cf63235cd483858f3fd27f8c712 maybe provide the type of the returned value here and/or in the @return line\r\n```suggestion\r\n * Return the expected MapAssumeutxo {height, hash} value for a given height, if one exists.\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T09:51:37Z",
      "diff_hunk" : "@@ -979,4 +1004,13 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547177920",
      "id" : 547177920,
      "line" : 1008,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE3NzkyMA==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 1008,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 62,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547177920",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547190362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547190362"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry if this was previously discussed in the earlier, can `MapAssumeutxo` be simplified to not store the height twice?",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T10:16:11Z",
      "diff_hunk" : "@@ -431,6 +438,17 @@ class CRegTestParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+            {\n+                110,\n+                {uint256S(\"0x76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"), 110},\n+            },\n+            {\n+                210,\n+                {uint256S(\"0x9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"), 210},\n+            },\n+        };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547190362",
      "id" : 547190362,
      "line" : 450,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5MDM2Mg==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 450,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 43,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547190362",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547192514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547192514"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d684ecd5\r\n```suggestion\r\n * @returns a MapAssumeutxo pair {unsigned int height, uint256 hash} or empty if no assumeutxo configuration exists for the given height.\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T10:20:26Z",
      "diff_hunk" : "@@ -979,4 +1004,13 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in] Get the assumeutxo value for this height.\n+ *\n+ * @returns empty if no assumeutxo configuration exists for the given height.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547192514",
      "id" : 547192514,
      "line" : 1012,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5MjUxNA==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 1012,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 66,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547192514",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547193589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547193589"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d684ecd5f11b2cf63235cd483858f3fd27f8c712\r\n```suggestion\r\nOptional<AssumeutxoData> ExpectedAssumeutxo(int height, const CChainParams& params);\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T10:22:47Z",
      "diff_hunk" : "@@ -979,4 +1004,13 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in] Get the assumeutxo value for this height.\n+ *\n+ * @returns empty if no assumeutxo configuration exists for the given height.\n+ */\n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& params);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547193589",
      "id" : 547193589,
      "line" : 1014,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5MzU4OQ==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 1014,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 68,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547193589",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547195985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547195985"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d684ecd5f11b2cf63235cd483858f3fd27f8c712 a comment to mention where these ExpectedAssumeutxo values come from (chainparams.cpp) might be a good idea",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T10:27:43Z",
      "diff_hunk" : "@@ -119,4 +120,27 @@ BOOST_AUTO_TEST_CASE(signet_parse_tests)\n     BOOST_CHECK(!CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n }\n \n+//! Test retrieval of valid assumeutxo values.\n+BOOST_AUTO_TEST_CASE(test_assumeutxo)\n+{\n+    const auto params = CreateChainParams(*m_node.args, CBaseChainParams::REGTEST);\n+\n+    // These heights don't have assumeutxo configurations associated, per the contents\n+    // of chainparams.cpp.\n+    std::vector<int> bad_heights{0, 100, 111, 115, 209, 211};\n+\n+    for (auto empty : bad_heights) {\n+        const auto out = ExpectedAssumeutxo(empty, *params);\n+        BOOST_CHECK(!out.has_value());\n+    }\n+\n+    const auto out110 = ExpectedAssumeutxo(110, *params).value();\n+    BOOST_CHECK_EQUAL(out110.hash_serialized, uint256S(\"76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"));\n+    BOOST_CHECK_EQUAL(out110.nChainTx, (unsigned int)110);\n+\n+    const auto out210 = ExpectedAssumeutxo(210, *params).value();\n+    BOOST_CHECK_EQUAL(out210.hash_serialized, uint256S(\"9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"));\n+    BOOST_CHECK_EQUAL(out210.nChainTx, (unsigned int)210);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547195985",
      "id" : 547195985,
      "line" : 143,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5NTk4NQ==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 143,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : 32,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547195985",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547199449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547199449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: sort",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T10:34:19Z",
      "diff_hunk" : "@@ -22,6 +22,7 @@\n #include <logging/timer.h>\n #include <node/ui_interface.h>\n #include <optional.h>\n+#include <node/coinstats.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547199449",
      "id" : 547199449,
      "line" : 25,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5OTQ0OQ==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 25,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 4,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547199449",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547199589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547199589"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: sort",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T10:34:38Z",
      "diff_hunk" : "@@ -11,10 +11,12 @@\n #endif\n \n #include <amount.h>\n+#include <attributes.h>\n #include <coins.h>\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n #include <optional.h>\n+#include <node/utxo_snapshot.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547199589",
      "id" : 547199589,
      "line" : 19,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5OTU4OQ==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 19,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 9,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547199589",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547206814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547206814"
         }
      },
      "author_association" : "MEMBER",
      "body" : "80f5bacf here and lines 5249 and 5252 below, use [named casts](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Res-casts-named) for error avoidance. Named casts are more specific than a C-style or functional cast, allowing the compiler to catch some errors.\r\n```diff\r\n-            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\r\n-            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\r\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\r\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC))\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T10:49:12Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547206814",
      "id" : 547206814,
      "line" : 5240,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNjgxNA==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5240,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 74,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547206814",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547211443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547211443"
         }
      },
      "author_association" : "MEMBER",
      "body" : "80f5bacf5 nit\r\n```suggestion\r\n        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T10:58:55Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547211443",
      "id" : 547211443,
      "line" : 5267,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMTQ0Mw==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5267,
      "original_position" : 101,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 101,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547211443",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547213999"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547213999"
         }
      },
      "author_association" : "MEMBER",
      "body" : "80f5bacf55\r\n```diff\r\n-        coins_left -= 1;\r\n-        coins_processed += 1;\r\n+        --coins_left;\r\n+        ++coins_processed;\r\n```\r\n",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T11:04:29Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547213999",
      "id" : 547213999,
      "line" : 5316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMzk5OQ==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5316,
      "original_position" : 150,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 150,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547213999",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547214463"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547214463"
         }
      },
      "author_association" : "MEMBER",
      "body" : "80f5bacf use [named casts](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Res-casts-named)",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T11:05:32Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547214463",
      "id" : 547214463,
      "line" : 5321,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxNDQ2Mw==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5321,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 155,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547214463",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547218038"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547218038"
         }
      },
      "author_association" : "MEMBER",
      "body" : "80f5bacf55\r\n```suggestion\r\n        --max_secs_to_wait_for_headers;\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T11:13:32Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return assumeutxo_found->second;\n+    }\n+    return {};\n+}\n+\n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main, return LookupBlockIndex(base_blockhash));\n+        max_secs_to_wait_for_headers -= 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547218038",
      "id" : 547218038,
      "line" : 5406,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxODAzOA==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5406,
      "original_position" : 240,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 240,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547218038",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547224890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547224890"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9a2c888d agree with returning `path`\r\n\r\nIt looks like NodeContext should be passed by reference to const (\"in\" param), not by reference for an \"out\" param\r\n```suggestion\r\nUniValue CreateUTXOSnapshot(const NodeContext& node, CChainState& chainstate, CAutoFile& afile);\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T11:28:48Z",
      "diff_hunk" : "@@ -57,4 +59,10 @@ CTxMemPool& EnsureMemPool(const util::Ref& context);\n ChainstateManager& EnsureChainman(const util::Ref& context);\n CBlockPolicyEstimator& EnsureFeeEstimator(const util::Ref& context);\n \n+/**\n+ * Helper to create UTXO snapshots given a chainstate and a file handle.\n+ * @return a UniValue map containing metadata about the snapshot.\n+ */\n+UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547224890",
      "id" : 547224890,
      "in_reply_to_id" : 542504229,
      "line" : 66,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyNDg5MA==",
      "original_commit_id" : "6bb63e9efeccfad3e5f422453902cb22a22c33b4",
      "original_line" : 66,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.h",
      "position" : 24,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:21:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547224890",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547225093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547225093"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9a2c888d NodeContext should be passed by reference to const\r\n```suggestion\r\nUniValue CreateUTXOSnapshot(const NodeContext& node, CChainState& chainstate, CAutoFile& afile);\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T11:29:14Z",
      "diff_hunk" : "@@ -2407,10 +2407,21 @@ static RPCHelpMan dumptxoutset()\n \n     FILE* file{fsbridge::fopen(temppath, \"wb\")};\n     CAutoFile afile{file, SER_DISK, CLIENT_VERSION};\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), afile);\n+    fs::rename(temppath, path);\n+\n+    result.pushKV(\"path\", path.string());\n+    return result;\n+},\n+    };\n+}\n+\n+UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547225093",
      "id" : 547225093,
      "line" : 2420,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyNTA5Mw==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 2420,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 14,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:21:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547225093",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547226336"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547226336"
         }
      },
      "author_association" : "MEMBER",
      "body" : "414ba8778 here and 51f3f974 in a few places in `src/test/validation_chainstatemanager_tests.cpp`, per `developer-notes.md` prefer the prefix operator\r\n```suggestion\r\n    for (int i = 0; i < num_blocks; ++i)\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T11:32:19Z",
      "diff_hunk" : "@@ -202,14 +202,43 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n }\n \n-TestChain100Setup::TestChain100Setup()\n+TestChain100Setup::TestChain100Setup(bool deterministic)\n {\n+    m_deterministic = deterministic;\n+\n+    if (m_deterministic) {\n+        SetMockTime(1598887952);\n+        constexpr std::array<unsigned char, 32> vchKey = {\n+            {\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1\n+            }\n+        };\n+        coinbaseKey.Set(vchKey.begin(), vchKey.end(), false);\n+    } else {\n+        coinbaseKey.MakeNewKey(true);\n+    }\n+\n     // Generate a 100-block chain:\n-    coinbaseKey.MakeNewKey(true);\n+    this->mineBlocks(COINBASE_MATURITY);\n+\n+    if (m_deterministic) {\n+        LOCK(::cs_main);\n+        assert(\n+            m_node.chainman->ActiveChain().Tip()->GetBlockHash().ToString() ==\n+            \"49c95db1e470fed04496d801c9d8fbb78155d2c7f855232c918823d2c17d0cf6\");\n+    }\n+}\n+\n+void TestChain100Setup::mineBlocks(int num_blocks)\n+{\n     CScript scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n-    for (int i = 0; i < COINBASE_MATURITY; i++) {\n+    for (int i = 0; i < num_blocks; i++)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547226336",
      "id" : 547226336,
      "line" : 235,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyNjMzNg==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 235,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.cpp",
      "position" : 37,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547226336",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547230123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547230123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "51f3f974 here and lines 291 and 320\r\n```suggestion\r\n        for (const CTransactionRef& txn : m_coinbase_txns) {\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T11:40:50Z",
      "diff_hunk" : "@@ -155,4 +170,175 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+auto NoMalleation = [](CAutoFile& file, SnapshotMetadata& meta){};\n+\n+template<typename F = decltype(NoMalleation)>\n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleation = NoMalleation)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    malleation(auto_infile, metadata);\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547230123",
      "id" : 547230123,
      "line" : 218,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMDEyMw==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 218,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : 97,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547230123",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547231027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547231027"
         }
      },
      "author_association" : "MEMBER",
      "body" : "51f3f974 here and line 245 above\r\n```suggestion\r\n            --metadata.m_coins_count;\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T11:43:11Z",
      "diff_hunk" : "@@ -155,4 +170,175 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+auto NoMalleation = [](CAutoFile& file, SnapshotMetadata& meta){};\n+\n+template<typename F = decltype(NoMalleation)>\n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleation = NoMalleation)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    malleation(auto_infile, metadata);\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);\n+    initial_size += 10;\n+    initial_total_coins += 10;\n+\n+    // Should not load malleated snapshots\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // A UTXO is missing but count is correct\n+            metadata.m_coins_count -= 1;\n+\n+            COutPoint outpoint;\n+            Coin coin;\n+\n+            auto_infile >> outpoint;\n+            auto_infile >> coin;\n+    }));\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // Coins count is larger than coins in file\n+            metadata.m_coins_count += 1;\n+    }));\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // Coins count is smaller than coins in file\n+            metadata.m_coins_count -= 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547231027",
      "id" : 547231027,
      "line" : 261,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMTAyNw==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 261,
      "original_position" : 140,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : 140,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547231027",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547231144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547231144"
         }
      },
      "author_association" : "MEMBER",
      "body" : "51f3f974\r\n```suggestion\r\n            ++metadata.m_coins_count;\r\n```",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T11:43:29Z",
      "diff_hunk" : "@@ -155,4 +170,175 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+auto NoMalleation = [](CAutoFile& file, SnapshotMetadata& meta){};\n+\n+template<typename F = decltype(NoMalleation)>\n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleation = NoMalleation)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    malleation(auto_infile, metadata);\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);\n+    initial_size += 10;\n+    initial_total_coins += 10;\n+\n+    // Should not load malleated snapshots\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // A UTXO is missing but count is correct\n+            metadata.m_coins_count -= 1;\n+\n+            COutPoint outpoint;\n+            Coin coin;\n+\n+            auto_infile >> outpoint;\n+            auto_infile >> coin;\n+    }));\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // Coins count is larger than coins in file\n+            metadata.m_coins_count += 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547231144",
      "id" : 547231144,
      "line" : 256,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzMTE0NA==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 256,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : 135,
      "pull_request_review_id" : 556949409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T11:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547231144",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T11:43:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749500104",
      "id" : 749500104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0OTUwMDEwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-22T11:43:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749500104",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547279343"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547279343"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is not performance critical I think.  ~`const` has the additional benefit over being easier to reason about.~ (nvm, it's not a reference)",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T13:32:17Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547279343",
      "id" : 547279343,
      "in_reply_to_id" : 547175326,
      "line" : 5188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3OTM0Mw==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5188,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 22,
      "pull_request_review_id" : 557080667,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T13:33:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547279343",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547295881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547295881"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, there have been a few conversations about this recently, like https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489776345 and others. The developer notes mention referring to the [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/) but maybe a line about this in the notes would save everyone time.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-22T14:05:22Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547295881",
      "id" : 547295881,
      "in_reply_to_id" : 547175326,
      "line" : 5188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5NTg4MQ==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5188,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 22,
      "pull_request_review_id" : 557101963,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-22T14:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547295881",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jonatack prefer to defer those cleanups for a follow-up PR unless others feel it necessary to do those there, thanks for the look.",
      "created_at" : "2020-12-22T18:19:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749700550",
      "id" : 749700550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0OTcwMDU1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-22T18:19:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749700550",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re-ACK e62e2a96f623f5d38845d472329d1a8253e146d0\r\n\r\nOnly changes since last review are updated usage of optional since std::optional was merged.",
      "created_at" : "2020-12-23T19:40:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-750445059",
      "id" : 750445059,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MDQ0NTA1OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-23T19:40:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750445059",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549858793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549858793"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Response to https://github.com/bitcoin/bitcoin/pull/19806/commits/d684ecd5f11b2cf63235cd483858f3fd27f8c712#r523799037:\r\n\r\n@fjahr I'd say no. assume* values are optimizations where we know some computation can be avoided because it's known to be valid. But refusing to start with a mismatching one should just mean you don't get the optimization; doing anything else is very close to making it a checkpoint, with all repercussions (actually affecting which chain the network can accept etc.).",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-29T21:38:41Z",
      "diff_hunk" : "@@ -164,6 +163,10 @@ class CMainParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+         // TODO to be specified in a future patch.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549858793",
      "id" : 549858793,
      "in_reply_to_id" : 523799037,
      "line" : 164,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg1ODc5Mw==",
      "original_commit_id" : "d2d1eb23331fdb1c36a8a879aff222ff0d731210",
      "original_line" : 164,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 13,
      "pull_request_review_id" : 559711766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:04:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549858793",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549859378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549859378"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Follow-up to https://github.com/bitcoin/bitcoin/pull/19806/commits/d684ecd5f11b2cf63235cd483858f3fd27f8c712#r547190362:\r\n\r\n@jonatack It's not the height, but the nChainTx value. It just happens to be equal to the height in chains that have never had anything but coinbase transactions.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-29T21:41:11Z",
      "diff_hunk" : "@@ -431,6 +438,17 @@ class CRegTestParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+            {\n+                110,\n+                {uint256S(\"0x76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"), 110},\n+            },\n+            {\n+                210,\n+                {uint256S(\"0x9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"), 210},\n+            },\n+        };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549859378",
      "id" : 549859378,
      "in_reply_to_id" : 547190362,
      "line" : 450,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg1OTM3OA==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 450,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 43,
      "pull_request_review_id" : 559711766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:04:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549859378",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549863642"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549863642"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Response to https://github.com/bitcoin/bitcoin/pull/19806/commits/d684ecd5f11b2cf63235cd483858f3fd27f8c712#r547175326:\r\n\r\n@jonatack C++ Core Guidelines only say \"don't enforce const arguments for function arguments\", not don't use them. I'd consider whether someone uses them to be personal style.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-29T21:58:40Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549863642",
      "id" : 549863642,
      "in_reply_to_id" : 547175326,
      "line" : 5188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg2MzY0Mg==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5188,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 22,
      "pull_request_review_id" : 559711766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:04:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549863642",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549864140"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549864140"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"chainparams: add allowed assumeutxo values\"\r\n\r\nReturning a copy of the AssumeUtxoData here is unnecessary, as the data is immutable. You could return a `Optional<std::reference_wrapper<AssumeutxoData>>` instead.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-29T22:00:55Z",
      "diff_hunk" : "@@ -5183,6 +5184,17 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549864140",
      "id" : 549864140,
      "line" : 5188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg2NDE0MA==",
      "original_commit_id" : "d684ecd5f11b2cf63235cd483858f3fd27f8c712",
      "original_line" : 5187,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 22,
      "pull_request_review_id" : 559711766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:04:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549864140",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549869106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549869106"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\"\r\n\r\nThis seems pretty ugly. I'd rather expose an actually public \"danger\" interface to CCoinsViewCache than needing to make CCoinsViewCache aware of ChainstateManager.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-29T22:10:11Z",
      "diff_hunk" : "@@ -246,6 +249,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n     /* Cached dynamic memory usage for the inner Coin objects. */\n     mutable size_t cachedCoinsUsage;\n \n+    // Necessary so that we can write directly into cacheCoins during snapshot load.\n+    friend ChainstateManager;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549869106",
      "id" : 549869106,
      "line" : 253,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg2OTEwNg==",
      "original_commit_id" : "80f5bacf55ef62b6ac67ee3bc1d9220ec4bc67d6",
      "original_line" : 253,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/coins.h",
      "position" : 22,
      "pull_request_review_id" : 559711766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:04:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549869106",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549871887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549871887"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\":\r\n\r\ncould be made `static`.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2020-12-29T22:18:43Z",
      "diff_hunk" : "@@ -5196,6 +5196,285 @@ Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams\n     return {};\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    constexpr double IBD_CACHE_PERC = 0.01;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549871887",
      "id" : 549871887,
      "line" : 5220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MTg4Nw==",
      "original_commit_id" : "80f5bacf55ef62b6ac67ee3bc1d9220ec4bc67d6",
      "original_line" : 5220,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 54,
      "pull_request_review_id" : 559711766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:04:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549871887",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Would appreciate some guidance here if maintainers are waiting on anything to be done.",
      "created_at" : "2021-01-05T14:33:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-754671970",
      "id" : 754671970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDY3MTk3MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T14:33:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754671970",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> This has many ACKs and seems (besides needing rebase again, sorry) ready for merge.\r\n> So I think what we need to decide here is whether we'll accept a circular dependency added momentarily, and resolve that in a later PR. I don't insist on holding it up on that.\r\n\r\nAgree, would be nice to see this move forward. :shipit: ",
      "created_at" : "2021-01-05T17:08:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-754769017",
      "id" : 754769017,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDc2OTAxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T17:08:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754769017",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2021-01-07T18:17:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756289600",
      "id" : 756289600,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NjI4OTYwMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-07T18:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756289600",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The cirrus CI error looks relevant, though strange (a race in ostream?):\r\n```\r\nWrote UTXO snapshot to /tmp/test_common_Bitcoin Core/35ec263ac30d22e47a7de455d58dbf0fd5788ec03feee003dfe753772e175d86/test_snapshot.110.dat: {\"coins_written\":110,\"base_hash\":\"5149f8fe2875e71f5ef664b0e78909cfbd651356fdf5505558323f8321405269\",\"base_height\":110}\r\nmake[3]: *** [Makefile:16615: test/validation_chainstatemanager_tests.cpp.test] Error 1\r\nmake[3]: *** Waiting for unfinished jobs....\r\nmake[3]: Leaving directory '/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake[2]: *** [Makefile:15156: check-am] Error 2\r\nmake[2]: Leaving directory '/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake[1]: *** [Makefile:14841: check-recursive] Error 1\r\nmake[1]: Leaving directory '/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake: *** [Makefile:806: check-recursive] Error 1\r\n==================\r\nWARNING: ThreadSanitizer: data race (pid=26233)\r\n  Read of size 8 at 0x7f77ce57d290 by main thread:\r\n    #0 std::__1::ios_base::width() const /usr/lib/llvm-10/bin/../include/c++/v1/ios:522:12 (test_bitcoin+0x163a0c)\r\n    #1 std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > std::__1::__pad_and_output<char, std::__1::char_traits<char> >(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, char const*, char const*, char const*, std::__1::ios_base&, char) /usr/lib/llvm-10/bin/../include/c++/v1/locale:1385:29 (test_bitcoin+0x163a0c)\r\n    #2 std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long) /usr/lib/llvm-10/bin/../include/c++/v1/ostream:730:17 (test_bitcoin+0x1638b3)\r\n    #3 std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::operator<<<std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*) /usr/lib/llvm-10/bin/../include/c++/v1/ostream:869:12 (test_bitcoin+0x789ec1)\r\n    #4 boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, char [24], char const (&) [24]>::operator()(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/test/utils/lazy_ostream.hpp:67:29 (test_bitcoin+0x789ec1)\r\n    #5 boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, char [24], char const (&) [24]>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>::operator()(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/test/utils/lazy_ostream.hpp:67:16 (test_bitcoin+0x789d6b)\r\n    #6 boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, char [24], char const (&) [24]>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, char [3], char const (&) [3]>::operator()(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/test/utils/lazy_ostream.hpp:67:16 (test_bitcoin+0x789c6b)\r\n    #7 boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream_impl<boost::unit_test::lazy_ostream, char [24], char const (&) [24]>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, char [3], char const (&) [3]>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>::operator()(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/test/utils/lazy_ostream.hpp:67:16 (test_bitcoin+0x789b3b)\r\n    #8 boost::unit_test::unit_test_log_t::operator<<(boost::unit_test::lazy_ostream const&) <null> (test_bitcoin+0xf0181b)\r\n    #9 validation_chainstatemanager_tests::chainstatemanager_activate_snapshot_invoker() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/validation_chainstatemanager_tests.cpp:204:1 (test_bitcoin+0x7834d8)\r\n    #10 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:117:11 (test_bitcoin+0x1b109d)\r\n    #11 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) <null> (test_bitcoin+0xf3063a)\r\n  Previous write of size 8 at 0x7f77ce57d290 by thread T4 (mutexes: write M643):\r\n    #0 std::__1::ios_base::width(long) /usr/lib/llvm-10/bin/../include/c++/v1/ios:530:14 (test_bitcoin+0x163b1c)\r\n    #1 std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > std::__1::__pad_and_output<char, std::__1::char_traits<char> >(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, char const*, char const*, char const*, std::__1::ios_base&, char) /usr/lib/llvm-10/bin/../include/c++/v1/locale:1417:11 (test_bitcoin+0x163b1c)\r\n    #2 std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long) /usr/lib/llvm-10/bin/../include/c++/v1/ostream:730:17 (test_bitcoin+0x1638b3)\r\n    #3 std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::operator<<<char, std::__1::char_traits<char>, std::__1::allocator<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-10/bin/../include/c++/v1/ostream:1052:12 (test_bitcoin+0x163427)\r\n    #4 $_0::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/main.cpp:25:15 (test_bitcoin+0x163427)\r\n    #5 decltype(std::__1::forward<$_0&>(fp)(std::__1::forward<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(fp0))) std::__1::__invoke<$_0&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>($_0&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-10/bin/../include/c++/v1/type_traits:3539:1 (test_bitcoin+0x163427)\r\n    #6 void std::__1::__invoke_void_return_wrapper<void>::__call<$_0&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>($_0&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-10/bin/../include/c++/v1/__functional_base:348:9 (test_bitcoin+0x163427)\r\n    #7 std::__1::__function::__alloc_func<$_0, std::__1::allocator<$_0>, void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-10/bin/../include/c++/v1/functional:1540:16 (test_bitcoin+0x163427)\r\n    #8 std::__1::__function::__func<$_0, std::__1::allocator<$_0>, void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-10/bin/../include/c++/v1/functional:1714:12 (test_bitcoin+0x163427)\r\n    #9 std::__1::__function::__value_func<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-10/bin/../include/c++/v1/functional:1867:16 (test_bitcoin+0xc2a0c9)\r\n    #10 std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-10/bin/../include/c++/v1/functional:2473:12 (test_bitcoin+0xc2a0c9)\r\n    #11 BCLog::Logger::LogPrintStr(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/logging.cpp:264:9 (test_bitcoin+0xc2a0c9)\r\n    #12 void LogPrintf<char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(char const*, char const* const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./logging.h:176:23 (test_bitcoin+0xb63ad5)\r\n    #13 CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13::operator()() const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/validationinterface.cpp:243:5 (test_bitcoin+0xb686a0)\r\n    #14 decltype(std::__1::forward<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13&>(fp)()) std::__1::__invoke<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13&>(CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13&) /usr/lib/llvm-10/bin/../include/c++/v1/type_traits:3539:1 (test_bitcoin+0xb686a0)\r\n    #15 void std::__1::__invoke_void_return_wrapper<void>::__call<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13&>(CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13&) /usr/lib/llvm-10/bin/../include/c++/v1/__functional_base:348:9 (test_bitcoin+0xb686a0)\r\n    #16 std::__1::__function::__alloc_func<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13, std::__1::allocator<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13>, void ()>::operator()() /usr/lib/llvm-10/bin/../include/c++/v1/functional:1540:16 (test_bitcoin+0xb686a0)\r\n    #17 std::__1::__function::__func<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13, std::__1::allocator<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13>, void ()>::operator()() /usr/lib/llvm-10/bin/../include/c++/v1/functional:1714:12 (test_bitcoin+0xb686a0)\r\n    #18 std::__1::__function::__value_func<void ()>::operator()() const /usr/lib/llvm-10/bin/../include/c++/v1/functional:1867:16 (test_bitcoin+0xbeaa1a)\r\n    #19 std::__1::function<void ()>::operator()() const /usr/lib/llvm-10/bin/../include/c++/v1/functional:2473:12 (test_bitcoin+0xbeaa1a)\r\n    #20 SingleThreadedSchedulerClient::ProcessQueue() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/scheduler.cpp:173:5 (test_bitcoin+0xbeaa1a)\r\n    #21 decltype(*(std::__1::forward<SingleThreadedSchedulerClient*&>(fp0)).*fp()) std::__1::__invoke<void (SingleThreadedSchedulerClient::*&)(), SingleThreadedSchedulerClient*&, void>(void (SingleThreadedSchedulerClient::*&)(), SingleThreadedSchedulerClient*&) /usr/lib/llvm-10/bin/../include/c++/v1/type_traits:3480:1 (test_bitcoin+0xbec9ca)\r\n    #22 std::__1::__bind_return<void (SingleThreadedSchedulerClient::*)(), std::__1::tuple<SingleThreadedSchedulerClient*>, std::__1::tuple<>, __is_valid_bind_return<void (SingleThreadedSchedulerClient::*)(), std::__1::tuple<SingleThreadedSchedulerClient*>, std::__1::tuple<> >::value>::type std::__1::__apply_functor<void (SingleThreadedSchedulerClient::*)(), std::__1::tuple<SingleThreadedSchedulerClient*>, 0ul, std::__1::tuple<> >(void (SingleThreadedSchedulerClient::*&)(), std::__1::tuple<SingleThreadedSchedulerClient*>&, std::__1::__tuple_indices<0ul>, std::__1::tuple<>&&) /usr/lib/llvm-10/bin/../include/c++/v1/functional:2770:12 (test_bitcoin+0xbec9ca)\r\n    #23 std::__1::__bind_return<void (SingleThreadedSchedulerClient::*)(), std::__1::tuple<SingleThreadedSchedulerClient*>, std::__1::tuple<>, __is_valid_bind_return<void (SingleThreadedSchedulerClient::*)(), std::__1::tuple<SingleThreadedSchedulerClient*>, std::__1::tuple<> >::value>::type std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>::operator()<>() /usr/lib/llvm-10/bin/../include/c++/v1/functional:2803:20 (test_bitcoin+0xbec9ca)\r\n    #24 decltype(std::__1::forward<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>&>(fp)()) std::__1::__invoke<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>&>(std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>&) /usr/lib/llvm-10/bin/../include/c++/v1/type_traits:3539:1 (test_bitcoin+0xbec9ca)\r\n    #25 void std::__1::__invoke_void_return_wrapper<void>::__call<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>&>(std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>&) /usr/lib/llvm-10/bin/../include/c++/v1/__functional_base:348:9 (test_bitcoin+0xbec9ca)\r\n    #26 std::__1::__function::__alloc_func<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>, std::__1::allocator<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*> >, void ()>::operator()() /usr/lib/llvm-10/bin/../include/c++/v1/functional:1540:16 (test_bitcoin+0xbec9ca)\r\n    #27 std::__1::__function::__func<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>, std::__1::allocator<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*> >, void ()>::operator()() /usr/lib/llvm-10/bin/../include/c++/v1/functional:1714:12 (test_bitcoin+0xbec9ca)\r\n    #28 std::__1::__function::__value_func<void ()>::operator()() const /usr/lib/llvm-10/bin/../include/c++/v1/functional:1867:16 (test_bitcoin+0xbe99d5)\r\n    #29 std::__1::function<void ()>::operator()() const /usr/lib/llvm-10/bin/../include/c++/v1/functional:2473:12 (test_bitcoin+0xbe99d5)\r\n    #30 CScheduler::serviceQueue() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/scheduler.cpp:60:17 (test_bitcoin+0xbe99d5)\r\n    #31 ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&)::$_0::operator()() const::'lambda'()::operator()() const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:134:86 (test_bitcoin+0x8307f1)\r\n    #32 void TraceThread<ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&)::$_0::operator()() const::'lambda'()>(char const*, ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&)::$_0::operator()() const::'lambda'()) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./util/system.h:438:9 (test_bitcoin+0x8307f1)\r\n    #33 ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&)::$_0::operator()() const /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:134:37 (test_bitcoin+0x8307f1)\r\n    #34 boost::detail::thread_data<ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&)::$_0>::run() /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/thread/detail/thread.hpp:120:17 (test_bitcoin+0x8307f1)\r\n    #35 boost::(anonymous namespace)::thread_proxy(void*) <null> (test_bitcoin+0xedacce)\r\n  Location is global 'std::__1::cout' of size 160 at 0x7f77ce57d270 (libc++.so.1+0x0000000c0290)\r\n  Mutex M643 (0x7b2400000240) created at:\r\n    #0 pthread_mutex_lock <null> (test_bitcoin+0xf10d6)\r\n    #1 std::__1::mutex::lock() <null> (libc++.so.1+0x83505)\r\n    #2 SeedInsecureRand(SeedRand) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./test/util/setup_common.h:60:9 (test_bitcoin+0x82ccd7)\r\n    #3 BasicTestingSetup::BasicTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:99:5 (test_bitcoin+0x82ccd7)\r\n    #4 ChainTestingSetup::ChainTestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:129:7 (test_bitcoin+0x82d273)\r\n    #5 validation_chainstatemanager_tests::chainstatemanager::chainstatemanager() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/validation_chainstatemanager_tests.cpp:29:1 (test_bitcoin+0x77bd00)\r\n    #6 validation_chainstatemanager_tests::chainstatemanager_invoker() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/validation_chainstatemanager_tests.cpp:29:1 (test_bitcoin+0x77bd00)\r\n    #7 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:117:11 (test_bitcoin+0x1b109d)\r\n    #8 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) <null> (test_bitcoin+0xf3063a)\r\n  Thread T4 'b-scheduler' (tid=26248, running) created by main thread at:\r\n    #0 pthread_create <null> (test_bitcoin+0xd3d0b)\r\n    #1 boost::thread::start_thread_noexcept() <null> (test_bitcoin+0xedabcd)\r\n    #2 TestingSetup::TestingSetup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<char const*, std::__1::allocator<char const*> > const&) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:171:7 (test_bitcoin+0x82df0d)\r\n    #3 RegTestingSetup::RegTestingSetup() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./test/util/setup_common.h:105:11 (test_bitcoin+0x82e768)\r\n    #4 TestChain100Setup::TestChain100Setup(bool) /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/util/setup_common.cpp:205:20 (test_bitcoin+0x82e768)\r\n    #5 TestChain100DeterministicSetup::TestChain100DeterministicSetup() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./test/util/setup_common.h:137:40 (test_bitcoin+0x783014)\r\n    #6 validation_chainstatemanager_tests::chainstatemanager_activate_snapshot::chainstatemanager_activate_snapshot() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/validation_chainstatemanager_tests.cpp:204:1 (test_bitcoin+0x783014)\r\n    #7 validation_chainstatemanager_tests::chainstatemanager_activate_snapshot_invoker() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/validation_chainstatemanager_tests.cpp:204:1 (test_bitcoin+0x783014)\r\n    #8 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:117:11 (test_bitcoin+0x1b109d)\r\n    #9 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) <null> (test_bitcoin+0xf3063a)\r\nSUMMARY: ThreadSanitizer: data race /usr/lib/llvm-10/bin/../include/c++/v1/ios:522:12 in std::__1::ios_base::width() const\r\n==================\r\nExit status: 2\r\n```",
      "created_at" : "2021-01-07T18:19:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756290806",
      "id" : 756290806,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NjI5MDgwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-07T18:19:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756290806",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553529712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553529712"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@sipa these C++ Core Guidelines appear to recommend not passing cheaply copied values as const:\r\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#con-constants-and-immutability\r\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Rf-in\r\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#f15-prefer-simple-and-conventional-ways-of-passing-information",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2021-01-07T19:15:11Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553529712",
      "id" : 553529712,
      "in_reply_to_id" : 547175326,
      "line" : 5188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyOTcxMg==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5188,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 22,
      "pull_request_review_id" : 563753315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553529712",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553533900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553533900"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The only relevant discussion about by-value function arguments declared const I can see is:\r\n\r\n> Exception\r\n>\r\n> Function arguments are rarely mutated, but also rarely declared const. To avoid confusion and lots of false positives, donât enforce this rule for function arguments.\r\n\r\nSo I read this as: the general advice (make immutable things const) applies, but you're not supposed to warn about it for function arguments because that would confuse people.\r\n\r\nI consider this personal style, and up to the author of the code.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2021-01-07T19:23:14Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553533900",
      "id" : 553533900,
      "in_reply_to_id" : 547175326,
      "line" : 5188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUzMzkwMA==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5188,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 22,
      "pull_request_review_id" : 563760833,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:23:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553533900",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553540940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553540940"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@sipa per the replies by you and @vasild at https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490289235, *My take is the same as the isocpp guidelines - no const for function arguments that are passed by value*, I had the impression that this is considered a guideline, but I won't comment on it further in reviews.",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2021-01-07T19:32:08Z",
      "diff_hunk" : "@@ -5183,6 +5185,296 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+Optional<AssumeutxoData> ExpectedAssumeutxo(const int height, const CChainParams& chainparams)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553540940",
      "id" : 553540940,
      "in_reply_to_id" : 547175326,
      "line" : 5188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU0MDk0MA==",
      "original_commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "original_line" : 5188,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 22,
      "pull_request_review_id" : 563766556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T19:32:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553540940",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I could only reproduce the tsan failure once, so was unable to debug. Maybe just add `race:validation_chainstatemanager_tests` to the suppressions file?",
      "created_at" : "2021-01-07T20:43:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756372850",
      "id" : 756372850,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NjM3Mjg1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-07T20:43:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756372850",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553639369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553639369"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa Right, I didn't look at it from that perspective. Thanks!",
      "commit_id" : "e62e2a96f623f5d38845d472329d1a8253e146d0",
      "created_at" : "2021-01-07T22:51:19Z",
      "diff_hunk" : "@@ -164,6 +163,10 @@ class CMainParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+         // TODO to be specified in a future patch.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553639369",
      "id" : 553639369,
      "in_reply_to_id" : 523799037,
      "line" : 164,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYzOTM2OQ==",
      "original_commit_id" : "d2d1eb23331fdb1c36a8a879aff222ff0d731210",
      "original_line" : 164,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 13,
      "pull_request_review_id" : 563886850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T22:51:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553639369",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   }
]
