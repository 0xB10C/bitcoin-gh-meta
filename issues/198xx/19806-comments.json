[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19792 (rpc: Add dumpcoinstats by fjahr)\n* #19775 (test: Activate segwit in TestChain100Setup by MarcoFalke)\n* #19652 (Add thread safety annotations to Mempool{Info}ToJSON() by hebasto)\n* #19521 (Coinstats Index (without UTXO set hash) by fjahr)\n* #19306 (refactor: Replace RecursiveMutex with Mutex in CTxMemPool by hebasto)\n* #19245 ([WIP DONOTMERGE] Replace boost::filesystem with std::filesystem (in c++17) by kiminuo)\n* #19145 (Add hash_type MUHASH for gettxoutsetinfo by fjahr)\n* #18731 (refactor: Make CCheckQueue RAII-styled by hebasto)\n* #18689 (rpc: allow dumptxoutset to dump human-readable data by pierreN)\n* #14053 (Add address-based index (attempt 4?) by marcinja)\n* #9384 (CCoinsViewCache code cleanup & deduplication by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-08-26T01:08:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-680400991",
      "id" : 680400991,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MDQwMDk5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-26T01:08:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680400991",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-08-26T06:56:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-680696759",
      "id" : 680696759,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19806",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MDY5Njc1OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-26T06:56:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680696759",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626183"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What is your reasoning behind calling the utxo set hash `assumeutxo` here? It makes it harder for me to reason about but i may be in the minority and this is easier for the casual user. Was that your intention? If we have different hashes in the future and they might be used for assumeutxo as well it would be probably best to use the explicit name for this type of hash `hash_serialized_2`.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-29T08:35:22Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626183",
      "id" : 479626183,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyNjE4Mw==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5274,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478110745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626183",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626276"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This makes me a bit uncomfortable because we can't test the actual functionality of this function with this. Do you plan to keep this or change it in a follow-up with changes to the testing framework that allow for a better test?",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-29T08:36:46Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626276",
      "id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyNjI3Ng==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478110745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479626276",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479634348"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479634348"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\r\n```",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-29T10:16:09Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479634348",
      "id" : 479634348,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNDM0OA==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5346,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478110745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479634348",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479636397"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479636397"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I assume it wouldn't work because of a divide by zero error in the progress function? Shouldn't that be rather dealt with at that layer?",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-29T10:42:35Z",
      "diff_hunk" : "@@ -407,3 +411,25 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+bool CCoinsViewDB::SetNChainTx(unsigned int n_chain_tx)\n+{\n+    return m_db->Write(DB_NCHAINTX, n_chain_tx, /*fsync*/ true);\n+}\n+\n+unsigned int CCoinsViewDB::GetNChainTx()\n+{\n+    // We choose 1 and not 0 because, in the unlikely event that we can't read\n+    // a value from this key, we don't want LoadBlockIndex() to malfunction for\n+    // snapshot chainstates being loaded. Returning 1 here will break the\n+    // progress= measure, but returning 0 would cause us to not be able to add\n+    // chain tips for the snapshot chainstate. This shouldn't happen and is",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479636397",
      "id" : 479636397,
      "line" : 430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzNjM5Nw==",
      "original_commit_id" : "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "original_line" : 430,
      "original_position" : 27,
      "original_start_line" : 425,
      "path" : "src/txdb.cpp",
      "position" : 48,
      "pull_request_review_id" : 478110745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : 429,
      "start_side" : "RIGHT",
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479636397",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479649888"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479649888"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "One alternative way would be hardcode a pre-mined chain into the test and use it, similar to what signet does here: https://github.com/bitcoin/bitcoin/pull/18267/commits/6206c2e8e87fcc70848e4a0fab871d5fd9ea6b16",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-29T13:28:00Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479649888",
      "id" : 479649888,
      "in_reply_to_id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTg4OA==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478128208,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479649888",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717530"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717530"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for the look. This is good feedback; I'll see if I can get a seed-based deterministic generation of a reg test chain and then add some values/tests based on that. When I originally wrote this I think I'd forgotten that we can mock time.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-30T03:50:48Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717530",
      "id" : 479717530,
      "in_reply_to_id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxNzUzMA==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478169500,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717530",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717700"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It was for consistency with `assumevalid` but I'm happy to rename it in lieu of something better.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-30T03:53:28Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717700",
      "id" : 479717700,
      "in_reply_to_id" : 479626183,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxNzcwMA==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5274,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478169595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479717700",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264245"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit d6396c4be4\r\n\r\nFor pure-utility functions it would be good to pass in `params` instead of relying on the global",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:01:59Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264245",
      "id" : 480264245,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NDI0NQ==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5283,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264245",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264955"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree that regtest should have an assumeutxo hash baked in. Maybe we could even get the 200-blocks premine to be deterministic and use that?",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:03:25Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264955",
      "id" : 480264955,
      "in_reply_to_id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NDk1NQ==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480264955",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480269550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480269550"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can't this be hardcoded beside the blockheight and assumeutxo hash in the chain params? \r\n\r\n(If not, I'll need to think more about how the txdb value for nchaintx interacts with major version upgrades, which bump the assumeutxo)",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:12:07Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.\n+static constexpr char DB_NCHAINTX = 'n';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480269550",
      "id" : 480269550,
      "line" : 33,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2OTU1MA==",
      "original_commit_id" : "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "original_line" : 33,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : 6,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480269550",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480270148"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480270148"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit: bdf182e81e\r\n\r\nforward decls right after the includes, pls. kthx",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:13:16Z",
      "diff_hunk" : "@@ -232,6 +233,9 @@ class CCoinsViewBacked : public CCoinsView\n };\n \n \n+class ChainstateManager;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480270148",
      "id" : 480270148,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MDE0OA==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 236,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480270148",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480272552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480272552"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit bdf182e81e\r\n\r\nthis can't be nullptr, so `&` seems more appropriate. Also the metadata should be read-only here?\r\n\r\n```suggestion\r\n        CAutoFile& coins_file, const SnapshotMetadata& metadata, bool in_memory);\r\n```",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:18:14Z",
      "diff_hunk" : "@@ -829,6 +837,27 @@ class ChainstateManager\n     //! Get all chainstates currently being used.\n     std::vector<CChainState*> GetAll();\n \n+    //! Construct and activate a Chainstate on the basis of UTXO snapshot data.\n+    //!\n+    //! Steps:\n+    //!\n+    //! - Initialize an unused CChainState.\n+    //!\n+    //! - Load its `CoinsViews` contents from `coins_file`.\n+    //!\n+    //! - Verify that the hash of the resulting coinsdb matches the expected hash\n+    //!   per assumeutxo chain parameters.\n+    //!\n+    //! - Wait for our headers chain to include the base block of the snapshot.\n+    //!\n+    //! - \"Fast forward\" the tip of the new chainstate to the base of the snapshot,\n+    //!   faking nTx* block index data along the way.\n+    //!\n+    //! - Move the new chainstate to `m_snapshot_chainstate` and make it our\n+    //!   ChainstateActive().\n+    NODISCARD bool ActivateSnapshot(\n+        CAutoFile* coins_file, SnapshotMetadata metadata, bool in_memory);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480272552",
      "id" : 480272552,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjU1Mg==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 859,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480272552",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274008"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274008"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: compile time constants can be UPPER_CASE",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:21:03Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274008",
      "id" : 480274008,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDAwOA==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5315,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274008",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Please prefer the identical ChainstateManager::ActiveChainstate",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:22:04Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274541",
      "id" : 480274541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDU0MQ==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5328,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480274541",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480275488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480275488"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    auto snapshot_chainstate = MakeUnique<CChainState>(mempool, m_blockman, base_blockhash);\r\n```\r\n\r\nneeds rebase",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:24:00Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480275488",
      "id" : 480275488,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NTQ4OA==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5337,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480275488",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480280231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480280231"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {/*TODO*/})) {\r\n```\r\n\r\ncould make sense to make this interruptible if it takes a long time",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:32:52Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480280231",
      "id" : 480280231,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MDIzMQ==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5463,
      "original_position" : 166,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480280231",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480281665"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480281665"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So in other words this will deadlock with `-nonetworkactive` or `-noconnect`?\r\n\r\nIf yes, what about including the preceding headers in the snapshot? I know we had a discussion about that, but I forget the result. Please remind me :sweat_smile:  ",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:35:28Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480281665",
      "id" : 480281665,
      "line" : 5481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MTY2NQ==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5481,
      "original_position" : 183,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 220,
      "pull_request_review_id" : 478786341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480281665",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480284080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480284080"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If nothing else, you can take the hash from `./test/functional/rpc_dumptxoutset.py`",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T17:40:02Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480284080",
      "id" : 480284080,
      "in_reply_to_id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NDA4MA==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 478811744,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480284080",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432499"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've updated the regtest assumeutxo values for two separate heights and added some utilities to the unittest framework for generating a deterministic chain, so we now have some decent tests in place for this.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T22:25:06Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();\n+\n+    if (params.NetworkIDString() == \"regtest\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432499",
      "id" : 480432499,
      "in_reply_to_id" : 479626276,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjQ5OQ==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5285,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 479010878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432499",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432847"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432847"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T22:25:36Z",
      "diff_hunk" : "@@ -5269,6 +5270,34 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     return *to_modify;\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n+{\n+    const CChainParams& params = ::Params();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432847",
      "id" : 480432847,
      "in_reply_to_id" : 480264245,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjg0Nw==",
      "original_commit_id" : "d6396c4be4e3960ffcfe57d7479ab413058103b9",
      "original_line" : 5283,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 479011098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480432847",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yup, good call. Done.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T22:26:07Z",
      "diff_hunk" : "@@ -829,6 +837,27 @@ class ChainstateManager\n     //! Get all chainstates currently being used.\n     std::vector<CChainState*> GetAll();\n \n+    //! Construct and activate a Chainstate on the basis of UTXO snapshot data.\n+    //!\n+    //! Steps:\n+    //!\n+    //! - Initialize an unused CChainState.\n+    //!\n+    //! - Load its `CoinsViews` contents from `coins_file`.\n+    //!\n+    //! - Verify that the hash of the resulting coinsdb matches the expected hash\n+    //!   per assumeutxo chain parameters.\n+    //!\n+    //! - Wait for our headers chain to include the base block of the snapshot.\n+    //!\n+    //! - \"Fast forward\" the tip of the new chainstate to the base of the snapshot,\n+    //!   faking nTx* block index data along the way.\n+    //!\n+    //! - Move the new chainstate to `m_snapshot_chainstate` and make it our\n+    //!   ChainstateActive().\n+    NODISCARD bool ActivateSnapshot(\n+        CAutoFile* coins_file, SnapshotMetadata metadata, bool in_memory);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433215",
      "id" : 480433215,
      "in_reply_to_id" : 480272552,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzIxNQ==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 859,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 479011341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433215",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433490"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oof, dumb move on my part. Thanks, fixed.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T22:26:30Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433490",
      "id" : 480433490,
      "in_reply_to_id" : 480274541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzQ5MA==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5328,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 479011530,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433490",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T22:26:39Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433603",
      "id" : 480433603,
      "in_reply_to_id" : 480275488,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzYwMw==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5337,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 479011600,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480433603",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480435696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480435696"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well, if by \"deadlock\" you mean \"sleep-loop for ten minutes and then fail the activation,\" I guess so. But I wouldn't call this a deadlock personally.\r\n\r\nMaybe others can chime in here but IMO it still makes sense to obtain headers from the network, since ultimately what use is a snapshot without network connectivity and peers to get you to the tip of the chain? There may have been a more concrete reason but I can't remember it.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-08-31T22:29:43Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480435696",
      "id" : 480435696,
      "in_reply_to_id" : 480281665,
      "line" : 5481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzNTY5Ng==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5481,
      "original_position" : 183,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 220,
      "pull_request_review_id" : 479012962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480435696",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480835783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480835783"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh I missed the `max_secs_to_wait_for_headers` :sleeping: ",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-01T05:34:47Z",
      "diff_hunk" : "@@ -5298,6 +5298,256 @@ static bool ExpectedAssumeutxo(int height, uint256& expected_out)\n     return true;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile* coins_file,\n+        SnapshotMetadata metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    // Can't activate a snapshot more than once.\n+    assert(!this->SnapshotBlockhash());\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr float ibd_cache_perc = 0.01;\n+    constexpr float snapshot_cache_perc = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = ::ChainstateActive().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = ::ChainstateActive().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        ::ChainstateActive().ResizeCoinsCaches(\n+            current_coinstip_cache_size * ibd_cache_perc,\n+            current_coinsdb_cache_size * ibd_cache_perc);\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            current_coinsdb_cache_size * snapshot_cache_perc, in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(current_coinstip_cache_size * snapshot_cache_perc);\n+    }\n+\n+    bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile* coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        *coins_file >> outpoint;\n+        *coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        *coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {})) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480835783",
      "id" : 480835783,
      "in_reply_to_id" : 480281665,
      "line" : 5481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgzNTc4Mw==",
      "original_commit_id" : "bdf182e81e8e03b4670059a718159e03dd35fbe4",
      "original_line" : 5481,
      "original_position" : 183,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 220,
      "pull_request_review_id" : 479412104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480835783",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r481128165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481128165"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```\r\nThe test suite in file src/test/foo_tests.cpp should be named\r\n\"foo_tests\". Please make sure the following test suites follow\r\nthat convention:\r\nsrc/test/validation_tests.cpp:BOOST_FIXTURE_TEST_SUITE(validation_tests_regtest, RegTestingSetup)\r\n^---- failure generated from test/lint/lint-tests.sh\r\n```",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-01T13:15:18Z",
      "diff_hunk" : "@@ -74,4 +74,43 @@ BOOST_AUTO_TEST_CASE(test_combiner_all)\n     Test.disconnect(&ReturnTrue);\n     BOOST_CHECK(Test());\n }\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_tests_regtest, RegTestingSetup)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r481128165",
      "id" : 481128165,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyODE2NQ==",
      "original_commit_id" : "1aa7b9137090d0021298a0e2696871dd21bfdefc",
      "original_line" : 81,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/test/validation_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 479728652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-01T16:15:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481128165",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482332094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482332094"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"add allowed assumeutxo values\" (60bd91334a3654fe59dac0bd28fb8824b897edf7)\r\n\r\nMinor: Suggest s/XXX/Warning/. Some editors treat XXX like TODO",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-02T19:22:46Z",
      "diff_hunk" : "@@ -24,6 +24,9 @@ static uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n+//! XXX: be very careful when changing this! assumeutuxo and UTXO snapshot",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482332094",
      "id" : 482332094,
      "line" : 27,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzMjA5NA==",
      "original_commit_id" : "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "original_line" : 27,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/node/coinstats.cpp",
      "position" : 4,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-02T22:29:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482332094",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482426252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482426252"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"add allowed assumeutxo values\" (60bd91334a3654fe59dac0bd28fb8824b897edf7)\r\n\r\nNote: unit test coverage for this function is added in later commit \"tests: add unittest for ExpectedAssumeutxo\"\r\n\r\nJust a suggestion, but I think it would be nice to combine these two commits. Adding new tests along with code makes it easier to:\r\n\r\n- Understand the code change (seeing how a function is called can be even more helpful than seeing how it's defined)\r\n- Check that test coverage is adequate\r\n- Check that intermediate commits aren't broken",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-02T20:34:05Z",
      "diff_hunk" : "@@ -955,4 +955,14 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in]         Get the assumeutxo value for this height.\n+ * @param expected_out[out]  Set to the expected assumeutxo hash value if one exists.\n+ *\n+ * @returns bool - false if no assumeutxo value exists for the given height.\n+ */\n+bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainParams& params);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482426252",
      "id" : 482426252,
      "line" : 1008,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyNjI1Mg==",
      "original_commit_id" : "60bd91334a3654fe59dac0bd28fb8824b897edf7",
      "original_line" : 966,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 93,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-02T22:29:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482426252",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482495858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482495858"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Can't this be hardcoded beside the blockheight and assumeutxo hash in the chain params?\r\n> \r\n> (If not, I'll need to think more about how the txdb value for nchaintx interacts with major version upgrades, which bump the assumeutxo)\r\n\r\nHardcoding this seems does seem like it might be a good simplification. It also seems like hardcoding might be useful for validating the snapshot? Otherwise, would a bad SnapshotMetadata::m_nchaintx value in the snapshot go undetected?\r\n\r\nAnother place this value could be stored might is in `chainstate_` directory name alongside the block hash, but maybe that is too verbose.\r\n\r\nAnyway, txdb does seem like a reasonable place to keep this number, especially if it can be checked and removed when the background sync completes.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-02T21:34:48Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.\n+static constexpr char DB_NCHAINTX = 'n';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482495858",
      "id" : 482495858,
      "in_reply_to_id" : 480269550,
      "line" : 33,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5NTg1OA==",
      "original_commit_id" : "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "original_line" : 33,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : 6,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-02T22:29:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482495858",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482518150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482518150"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"txdb: add nChainTx cache for snapshot chainstates\" (bc622c33ce925159906e3b00be77b11d598397ed)\r\n\r\n\"Only contains a value\" suggests the row may be present without a value. Would suggest saying something like \"This is not present in the normal coins database. It is only saved and used in in temporary UTXO snapshots.\"",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-02T22:02:18Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482518150",
      "id" : 482518150,
      "line" : 32,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxODE1MA==",
      "original_commit_id" : "bc622c33ce925159906e3b00be77b11d598397ed",
      "original_line" : 32,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : 5,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-02T22:29:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482518150",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482524613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482524613"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"txdb: add nChainTx cache for snapshot chainstates\" (bc622c33ce925159906e3b00be77b11d598397ed)\r\n\r\nCan you remind what this is used for? Just estimating sync progress, or other things too? Would also be good to make comment more specific, maybe \"Cached CBlockIndex::nChainTx value (number of transactions in chain) at the base block of a UTXO snapshot that is being imported. This is used to [...]\" ",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-02T22:10:52Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482524613",
      "id" : 482524613,
      "line" : 31,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyNDYxMw==",
      "original_commit_id" : "bc622c33ce925159906e3b00be77b11d598397ed",
      "original_line" : 31,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : 4,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-02T22:29:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482524613",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482532448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482532448"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I assume it wouldn't work because of a divide by zero error in the progress function? Shouldn't that be rather dealt with at that layer?\r\n\r\nWould agree that handling this in LoadBlockIndex would be preferable to having to hardcode 1's  here and in `ChainstateManager::GetSnapshotNChainTx` along with comments describing other layers of code. Both `CCoinsViewDB::GetNChainTx` and `ChainstateManager::GetSnapshotNChainTx` could return `Optional<int>` to avoid the need to hardcode something",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-02T22:21:08Z",
      "diff_hunk" : "@@ -407,3 +411,25 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+bool CCoinsViewDB::SetNChainTx(unsigned int n_chain_tx)\n+{\n+    return m_db->Write(DB_NCHAINTX, n_chain_tx, /*fsync*/ true);\n+}\n+\n+unsigned int CCoinsViewDB::GetNChainTx()\n+{\n+    // We choose 1 and not 0 because, in the unlikely event that we can't read\n+    // a value from this key, we don't want LoadBlockIndex() to malfunction for\n+    // snapshot chainstates being loaded. Returning 1 here will break the\n+    // progress= measure, but returning 0 would cause us to not be able to add\n+    // chain tips for the snapshot chainstate. This shouldn't happen and is",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482532448",
      "id" : 482532448,
      "in_reply_to_id" : 479636397,
      "line" : 430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUzMjQ0OA==",
      "original_commit_id" : "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "original_line" : 430,
      "original_position" : 27,
      "original_start_line" : 425,
      "path" : "src/txdb.cpp",
      "position" : 48,
      "pull_request_review_id" : 481228137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : 429,
      "start_side" : "RIGHT",
      "updated_at" : "2020-09-02T22:29:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482532448",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482595806"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482595806"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, I think @MarcoFalke's approach is the right one. Will implement tomorrow.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-02T23:24:18Z",
      "diff_hunk" : "@@ -28,6 +28,10 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+//! Used to cache the nChainTx value for the base block of a UTXO snapshot.\n+//! This only contains a value for chainstates created based on a snapshot.\n+static constexpr char DB_NCHAINTX = 'n';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482595806",
      "id" : 482595806,
      "in_reply_to_id" : 480269550,
      "line" : 33,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NTgwNg==",
      "original_commit_id" : "3cd76cd1b2bf73b92914f42e5e9757eff3e3e847",
      "original_line" : 33,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/txdb.cpp",
      "position" : 6,
      "pull_request_review_id" : 481378969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-02T23:24:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482595806",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483817973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483817973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"simplify ChainstateManager::SnapshotBlockhash() return semantics\" (75d1e7754274d3f015a49e71871c3a069cbe020b)\r\n\r\nThere doesn't seem to be any test coverage for this, or at least test seem to pass with change reverted. Would be good to have test coverage when changing a corner case.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-04T19:51:00Z",
      "diff_hunk" : "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483817973",
      "id" : 483817973,
      "line" : 5239,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxNzk3Mw==",
      "original_commit_id" : "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "original_line" : 5239,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 14,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-04T22:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483817973",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483846226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483846226"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nWould be good to use SetBestBlock so this is consistent and it's clear this is overwriting random value above. Also it would be good to move this next to the Flush call below for consistency with the sequence above.\r\n\r\nOn layer violation comment, IMO it would be reasonable to write a CAutoFile -> CCoinsViewCache function and do the loading in coins.cpp rather than validation.cpp, so validation changes are smaller and not as many assumptions about the coins cache implementation have to be made outside of coins.cpp.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-04T21:13:37Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483846226",
      "id" : 483846226,
      "line" : 5436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0NjIyNg==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5435,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 175,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-04T22:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483846226",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483848478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483848478"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nProbably it makes sense for this function to take an interruption_point argument instead of defining its own internally.\r\n",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-04T21:20:45Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483848478",
      "id" : 483848478,
      "line" : 5463,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0ODQ3OA==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5462,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 202,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-04T22:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483848478",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483851329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483851329"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nCan you add a comment explaining locking in this function. It's not clear to me why cs_main needs to be held at all while reading the snapshot file and populating the chainstate when the chainstate is still being constructed shouldn't be referenced externally. It's also not clear why it's safe to keep cs_main locked for up to 10 minutes below while downloading headers.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-04T21:30:38Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483851329",
      "id" : 483851329,
      "line" : 5376,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1MTMyOQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5375,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 115,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-04T22:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483851329",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483852578"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483852578"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nIs there a reason hash is being computed above before sleeping but only checked now after sleeping? It seems like it'd be good to return an error as early as possible and not wait for headers if this is going to fail.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-04T21:34:49Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483852578",
      "id" : 483852578,
      "line" : 5504,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1MjU3OA==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5503,
      "original_position" : 213,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 243,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-04T22:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483852578",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483857507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483857507"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nIdeally, we would not have to fake these things and external code would code better with missing data, right? Or do you disagree? It would be good if comment would say one way or the other what ultimate fate of faking should be.\r\n\r\nIt would also be good if comments in chain.h documenting CBlockIndex fields mentioned the fake values and said how to determine whether values are real or fake, to reduce likelihood of new bugs being introduced because of fake values.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-04T21:49:49Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk\n+    }\n+    LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+    {\n+        LOCK(::cs_main);\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    LOCK(::cs_main);\n+    CCoinsViewCache& coins_cache = snapshot_chainstate.CoinsTip();\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        coins_file >> outpoint;\n+        coins_file >> coin;\n+        coins_cache.cachedCoinsUsage += coin.DynamicMemoryUsage();\n+        coins_cache.cacheCoins.emplace(\n+            std::piecewise_construct,\n+            std::forward_as_tuple(std::move(outpoint)),\n+            std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+        coins_left -= 1;\n+        coins_processed += 1;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                (float) coins_processed * 100 / (float) coins_count,\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+            if (snapshot_chainstate.GetCoinsCacheSizeState(&::mempool) >= CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the cacheCoins accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.hashBlock = base_blockhash;\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count - coins_left);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count - coins_left,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = LookupBlockIndex(base_blockhash);\n+        max_secs_to_wait_for_headers -= 1;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    uint256 expected_contents_hash;\n+    int base_height = snapshot_start_block->nHeight;\n+\n+    if (!ExpectedAssumeutxo(base_height, expected_contents_hash, ::Params())) {\n+        LogPrintf(\"[snapshot] assumeutxo value in snapshot metadata not valid for \" /* Continued */\n+            \"height %s - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    if (stats.hashSerialized != expected_contents_hash) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            expected_contents_hash.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // Fake various pieces of CBlockIndex state:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483857507",
      "id" : 483857507,
      "line" : 5512,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1NzUwNw==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5511,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 251,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-04T22:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483857507",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483858967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483858967"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nThis function and PopulateAndValidateSnapshot below are doing a lot of things, and I think might benefit from being split up into smaller functions:\r\n\r\n- Rebalance caches\r\n- Load snapshot file -> ccoinsview and verify expected hash\r\n- Wait for headers\r\n- Set chain tip and fake blockindex data\r\n\r\nSome of these could be marked EXCLUSIVE_LOCKS_REQUIRED(cs_main) to make locking requirements more explicit.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-04T21:51:39Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483858967",
      "id" : 483858967,
      "line" : 5299,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg1ODk2Nw==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5298,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 38,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-04T22:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483858967",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483860811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483860811"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: add ChainstateManager::ActivateSnapshot\" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\r\n\r\nI don't understand implication of this comment. Maybe it should say why not to rebalance or flush. I'm not clear on what rebalancing would do here, and it seems like the PopulateAndValidateSnapshot call already flushes the snapshot chainstate, at least.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-04T21:57:53Z",
      "diff_hunk" : "@@ -5291,6 +5291,262 @@ bool ExpectedAssumeutxo(const int height, uint256& expected_out, const CChainPar\n     return false;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+    uint256 existing_blockhash = this->SnapshotBlockhash().value_or(uint256());\n+\n+    if (!existing_blockhash.IsNull()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    constexpr double IBD_CACHE_PERC = 0.01;\n+    constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            (size_t)(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = MakeUnique<CChainState>(::mempool, m_blockman, base_blockhash);\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            (size_t)(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            (size_t)(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        assert(m_snapshot_chainstate->LoadChainTip(::Params()));\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+        // Don't rebalance disk or FlushStateToDisk",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483860811",
      "id" : 483860811,
      "line" : 5360,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MDgxMQ==",
      "original_commit_id" : "9c1db71dbd82342b0a1d33401b329e34a7a6cee8",
      "original_line" : 5359,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 99,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-04T22:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483860811",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483865232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483865232"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"simplify ChainstateManager::SnapshotBlockhash() return semantics\" (75d1e7754274d3f015a49e71871c3a069cbe020b)\r\n\r\nI think if all the calling code is going to continue to do `.value_or(uint256())` it makes little sense for this to return an optional. Would be simpler to just use `Optional<uint256>` everywhere (make `m_from_snapshot_blockhash` an `Optional<uint256>` and stop treating zero hash specially) or use `uint256` everywhere and keep treating zero hash specially. But having back and forth nullopt <-> null hash conversions doesn't make sense over just picking one format and sticking with it.",
      "commit_id" : "89c9182ec0c81d38248fa92d0284fb4da2a71927",
      "created_at" : "2020-09-04T22:15:44Z",
      "diff_hunk" : "@@ -5235,7 +5235,8 @@ class CMainCleanup\n static CMainCleanup instance_of_cmaincleanup;\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483865232",
      "id" : 483865232,
      "line" : 5239,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NTIzMg==",
      "original_commit_id" : "75d1e7754274d3f015a49e71871c3a069cbe020b",
      "original_line" : 5239,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 14,
      "pull_request_review_id" : 482906983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19806",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-04T22:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483865232",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
