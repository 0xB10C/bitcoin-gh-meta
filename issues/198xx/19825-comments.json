[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Because bans have specific durations I'm not sure if this is a good change.  Should a 1 hour ban of foo/16 stop you from adding a 1 year ban of foo/24? \r\n\r\nRight now I already have to undo every ban before adding it to make sure it's not rejected and as a result ends up expiring prematurely.  But if any wider banned blocked every narrower ban, I'm not sure how I could programmatically handle that.  I'd have to have crazy logic interrogated the banlist and broke every larger ban into smaller ones when a smaller one with a different time period was added.\r\n\r\nInstead, I think it should just be consistent in that each ban doesn't interact with an different ban. And when I add a ban for an already existing prefix, it should extend the ban if the new one has a later expiration time.  It would be fine to canonicalize actually equivalent bans (e.g. 1.2.3.4/24 = 1.2.3.0/24).",
      "created_at" : "2020-08-28T00:36:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-682259857",
      "id" : 682259857,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MjI1OTg1Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-28T00:39:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682259857",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17356 (RPC: Internal named params by luke-jr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-08-28T03:23:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-682303669",
      "id" : 682303669,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MjMwMzY2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-28T03:23:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682303669",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I'm not sure how I could programmatically handle that. I'd have to have crazy logic interrogated the banlist and broke every larger ban into smaller ones when a smaller one with a different time period was added.\r\n\r\nTotally fair. I can't see either how clients will be able to make tooling with sane logic. I am going to think this through and update the PR with a better solution. Thanks for the feedback and a potential solution, @gmaxwell !",
      "created_at" : "2020-08-28T06:59:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-682363772",
      "id" : 682363772,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MjM2Mzc3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-28T07:00:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682363772",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK on making this consistent. I'll review once you have an updated proposal that addresses gmaxwell's input.",
      "created_at" : "2020-08-28T07:06:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-682365929",
      "id" : 682365929,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MjM2NTkyOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-28T07:06:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682365929",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "### Potential solution\r\n\r\nLet `(s0, t0)` be an existing ban, where `s0` is a subnet and `t0` is the ban expiration time. The user is now trying to add another ban `(s1, t1)`.\r\n\r\n**Case s1 â s0:**\r\nIf `t1 <= t0`: return success because the end goal is accomplished - this will minimize client error handling\r\nIf `t1 > t0`: insert `(s1, t1)` into `BanMan`\r\n\r\n**Case s1 â s0:**\r\nIf `t1 <= t0`: insert `(s1, t1)` into `BanMan`\r\nIf `t1 > t0`: remove `(s0, t0)`, add `(s1, t1)` into `BanMan`\r\n\r\n**Case no overlap:**\r\ninsert `(s1, t1)` into `BanMan`\r\n\r\n**Unban**:\r\nWe will treat unbanning consistent with the semantics of the rpc call: `setban ip remove` i.e. it is the _removal of a ban entry_, not the _addition of an unban entry_. Effectively, unbanning will look for exact matches of ban entries to remove.\r\n\r\nThoughts, @gmaxwell, @jnewbery ?",
      "created_at" : "2020-08-28T23:24:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683187822",
      "id" : 683187822,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzE4NzgyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-02T04:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683187822",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think that approach makes sense; it's equivalent to treating every ban as a per-IP thing, and remembering the longest-duration ban for each.\r\n\r\nOne question I have is how to make clearbanned consistent with that? This is a bit confusing:\r\n* ban `1.2.3.0/24` for 1h\r\n* ban `1.2.0.0/16` for 2h -> overwrites the previous ban\r\n* unban `1.2.3.0/24` -> failure because no such ban exists\r\n\r\nAnd this:\r\n* ban `1.2.3.0/24` for 1h\r\n* ban `1.2.3.4/32` for 2h -> add a longer ban for smaller range\r\n* unban `1.2.3.0/24` -> works, but leaves 1.2.3.4/32 banned\r\n\r\nWhile:\r\n* ban `1.2.3.0/24` for 2h\r\n* ban `1.2.3.4/32` for 1h -> doesn't do anything\r\n* unban `1.2.3.0/24` -> works, and doesn't leave 1.2.3.4/32 banned\r\n\r\n\r\nI think the most reasonable thing requiring an exact match for *some* ban record when unbanning, but also make it delete all (longer) subranges?\r\n\r\n",
      "created_at" : "2020-08-29T18:36:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683327324",
      "id" : 683327324,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzMyNzMyNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-29T18:41:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683327324",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't really like the banning add removal doing fancy logic.  This will make it extremely hard to have external software add bans, even with the newly proposed behaviour.  It's also unlike access-lists on any networking device I've ever worked with.\r\n\r\nWhat is the downside of the obvious behaviour? There is a list of bans, some of which are shorter-than-maximum-CIDR,  add adds to the list, clear removes from it.  If you have overlapping bans, ... so?  You might expect them to have different durations, or they may come from different sources.\r\n\r\nThe only limitation I'm aware with that approach is that if you want to remove a ban affecting a specific host or subnet more care might be required to remove *all*...  but that could be addressed with a \"removeall\"  e.g.\r\n\r\n```\r\nsetban 1.2/16 add\r\nsetban 1.2.3/24 add\r\nsetban 1.2.3.5/32 remove #does nothing\r\nsetban 1.2.3.5/32 removeall  #removes the 1.2/16 and the 1.2.3/24 ban\r\n```\r\n\r\nThen you can get exact management of the ban list via add/remove,  but also get a \"just make this host work\" removal if that's what you want.  This also doesn't make the resulting banlist depend on the order that you did the insertions, which I believe the logic proposed a few messages up would do (e.g. if you insert less specific then more specific you won't get the same result as more than less (as their times won't match, so in one case you'll just get the less specific and the other case you'll get both).\r\n\r\nI also have a preference for not returning errors when the action the user wants is accomplished, I've had more than a few people using my ban list complain about the wall of errors when they update... though assuming it didn't return an error when it extended the duration, I think that issue would already be eliminated by the changes we've discussed.",
      "created_at" : "2020-08-30T03:49:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683372477",
      "id" : 683372477,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzM3MjQ3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-30T03:56:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683372477",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree with the idea that we should interpret `setban ip/mask add time` as \"add a ban entry for this address range\", and not as \"add a ban entry on each single address in the range\". This way of thinking allows for overlapping bans.\r\n\r\nI also agree that unintended side effects like `setban 127.0.0.1/32 remove` removing the ban entry for `127.0.0.1/24` is not good as it means client scripts need to maintain banlist state and execute logic prior to, and after, unbanning.\r\n\r\nFurther agree, on not returning an error when the user intent is accomplished (by a pre-existing ban entry) even if it does not create a new ban entry - I will update the code to reflect that. (Updated the proposal above as well)\r\n\r\n`removeall` is a good idea, perhaps better named `force-remove` and implemented in a follow-up PR? I am open to adding it in here if we believe we need it for atomic commits.\r\n\r\nThe one thing I am unsure about is not consolidating ban entries where possible. In my rookie opinion, `BanEntry{127.0.0.1/32 200}` should be replaced with `{BanEntry 127.0.0.1/24 400}` instead of just having an additional \"dead\" entry. Unnecessary ban entries make every call to `BanMan::IsBanned` a tiny bit more expensive, which makes opening new connections, accepting new connections, and `PeerLogicValidation::ProcessMessage/addr` more expensive. I am new here and don't yet have a good intuitive sense for the frequency of those invocations but it seems like an expense to avoid? \r\n\r\nAfter a couple attempts, I am not able to see how [this proposal](https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683187822) will mean the banlist will depend on the order of insertions _so long as `banUntil` times are consistent_. I feel sure I'm missing something. Could you please give an example, @gmaxwell ?",
      "created_at" : "2020-08-30T05:19:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683377943",
      "id" : 683377943,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzM3Nzk0Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-30T05:27:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683377943",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The most common usage is a relative time, so the times won't be consistent. :)",
      "created_at" : "2020-08-30T05:55:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683380125",
      "id" : 683380125,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzM4MDEyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-30T05:55:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683380125",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah, I see. So it's safe to say that the banlist would not depend on the order of insertions.",
      "created_at" : "2020-08-30T06:46:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683383582",
      "id" : 683383582,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzM4MzU4Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-30T06:46:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683383582",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it would with what you're suggesting.  You're suggesting that if there is a shorter wider block, and I insert a longer narrower block-- both get added.  But if there is a shorter narrower block and I add a longer wider block the shorter block is removed.\r\n\r\nIf I give both a relative lifetime of 1 day then make the two calls a second apart, then the resulting set of bans depends on the order.\r\n\r\n",
      "created_at" : "2020-08-30T09:13:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683396285",
      "id" : 683396285,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzM5NjI4NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-30T09:13:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683396285",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@gmaxwell I still think we are in agreement that _equivalent_ `setban` instructions will produce _identical_ banlists. We seem to be disagreeing as to whether the following two sets of RPC instructions are _equivalent_:\r\n\r\nScript 1:\r\n```\r\nsetban 127.0.0.0/24 add\r\nsleep 1\r\nsetban 127.0.0.0/32 add\r\n```\r\n\r\nScript 2:\r\n```\r\nsetban 127.0.0.0/32 add\r\nsleep 1\r\nsetban 127.0.0.0/24 add\r\n```\r\n\r\nUnless I am missing something, per the current RPC semantics, these are not equivalent instructions and the node will behave differently. In order for the node to behave differently and comply with the instructions, the banlists will have to be different.\r\n\r\nFor the use case you are trying to accomplish (atomic, bulk additions with relative timestamps), I think there are two ways we can be successful:\r\n1. Update the scripts to convert relative times into absolute times\r\n2. Let's scope and work on a new, `addall` rpc which can provide bulk atomic commits to the banlist. I volunteer to take it on if we have consensus.\r\n\r\nI think another interesting thing this conversation highlights is our expectation of where canonical state lives. i.e. Do we expect that `listbanned` will return a cumulative of past `setban` instructions (thereby agreeing with state maintained client-side), or whether `listbanned` is only responsible for painting a canonical picture of the current ban entries. I personally prefer the latter because: (a) Clients should not assume state cannot change as that assumes there are no other clients and (b) Fewer ban entries seems more efficient for the p2p layer.",
      "created_at" : "2020-08-30T17:48:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683449495",
      "id" : 683449495,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzQ0OTQ5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-30T17:48:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683449495",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "## Current state of this PR\r\n\r\n### What does the current patch at tip `9cc54bd` do?\r\nIt tries to make `setban` behave consistently whether it is provided with an IP address, or a subnet (IP address range).\r\n\r\nLet `(s0, t0)` be an existing ban, where `s0` is a subnet(a contiguous range of IP addresses) and `t0` is the ban expiration time. The user is now trying to add another ban `(s1, t1)`. If `s1 â s0 &&  t1 <= t0` the code does nothing because the requested ban is already in place. If `s1 â s0 && t1 > t0`, we remove `(s0, t0)`, add `(s1, t1)` to consolidate the ban entries. In all other cases we add `(s1, t1)`. More details [here](https://github.com/bitcoin/bitcoin/pull/19825#issue-475008180).\r\n\r\n### What is the unaddressed concern expressed by reviewers?\r\nA reviewer feels that we should not consolidate the ban entries, instead allow redundant ban entries in `BanMan::m_banned`. It is their opinion that this will help keep their existing client scripts simpler. The case they make is that the following scripts should generate identical banlists:\r\n\r\nScript 1:\r\n```\r\nsetban 127.0.0.0/24 add\r\nsleep 1\r\nsetban 127.0.0.0/32 add\r\n```\r\n\r\nScript 2:\r\n```\r\nsetban 127.0.0.0/32 add\r\nsleep 1\r\nsetban 127.0.0.0/24 add\r\n```\r\n\r\nNote: Per current `setban` RPC semantics, `setban ip/subnet add` means, \"ban this ip/subnet for 1 day (86400 seconds)\". i.e. `subnet 127.0.0.0/24 add` == `setban 127.0.0.0/24 add 86400`\r\n\r\n### What is the author's response?\r\nThe author feels that the aforementioned scripts (say, run at t=0) are not equivalent, and therefore produce different banlists. \r\n\r\nScript 1:\r\n```\r\nt=0 \"Ban 127.0.0.0/24 until t=86400\"\r\nt=1 \"Ban 127.0.0.0/32 until t=86401\"\r\n```\r\nAt `t=1`, the node must remember two ban entries `(127.0.0.0/24, 86400)`, `(127.0.0.0/32, 86401)`.\r\n\r\nScript 2:\r\n```\r\nt=0 \"Ban 127.0.0.0/32 until t=86400\"\r\nt=1 \"Ban 127.0.0.0/24 until t=86401\"\r\n```\r\nAt `t=1`, it suffices for the node to only remember `(127.0.0.0/24, 86401)` as `(127.0.0.0/32 â 127.0.0.0/24) && (86400 <= 86401)`.\r\n\r\nThe author also feels that not consolidating ban entries when possible (and cheap) creates expense in looking up `BanMan::IsBanned(subnet)` which is done when new peers are added, or when the `addr` RPC is processed. The author agrees the overhead is seems minimal and infrequent.\r\n\r\n### How can reviewers help?\r\nThe author is new to Bitcoin development and will continue to keep an open mind. Any case that can be made in interest of the node efficiency or the Bitcoin network, or shows that the proposed change violates established RPC semantics/expectations and therefore is backwards incompatible would help make the case to no longer consolidate ban entries.",
      "created_at" : "2020-09-06T19:38:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-687880953",
      "id" : 687880953,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19825",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4Nzg4MDk1Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-06T19:39:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687880953",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   }
]
