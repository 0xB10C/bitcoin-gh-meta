[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19866 (eBPF Linux tracepoints by jb55)\n* #19677 (Switch BlockMap to use an unordered_set under the hood by JeremyRubin)\n* #19556 (Remove mempool global by MarcoFalke)\n* #19498 (Tidy up ProcessOrphanTx by jnewbery)\n* #10443 (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-09-04T01:57:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-686854361",
      "id" : 686854361,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4Njg1NDM2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-05T05:33:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686854361",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "-0.5 on concept, I don't think dropping the runtime checks has any advantage.\r\n\r\nFor approach, I think just doing `git grep -l AssertLockHeld src | grep -v 'sync.h$' | xargs sed -i '/^ *AssertLockHeld(.*);/d'` would be better. The current code has `AssertLockHeld` and `AssertLockNotHeld` behave in the same way (a runtime check that the mutex is held by this thread or not), which is worth preserving imo.\r\n\r\nThe updated docs in doc/developer-notes.md would also need updating if this change were to be merged.",
      "created_at" : "2020-09-04T03:28:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-686879830",
      "id" : 686879830,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4Njg3OTgzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T03:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686879830",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I agree with @ajtowns' [comment](https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483287210):\r\n> We have three types of assertions related for locking:\r\n> \r\n>  - marking a function as `EXCLUSIVE_LOCKS_REQUIRED` has a compile time check with clang that the caller has already obtained the lock\r\n> \r\n>  - declaring a `LockAssertion` instance overrides the clang compile time checks by saying that we've already somehow acquired the lock in a way that we can't prove via clang thread safety annotations. This is useful for lambda functions (which could be annotated) that are called from some generic dispatcher like `ForEach` (that can't be annotated).\r\n> \r\n>  - adding a call to `AssertLockHeld` does a runtime check if DEBUG_LOCKORDER is enabled. it's annotated with EXCLUSIVE_LOCKS_REQUIRED so is redundant with the compile time checks, but the compile time checks aren't available outside of clang. it's automatically called from LockAssertion to ensure that the compile time checks aren't overridden incorrectly.\r\n> \r\n> \r\n> As a result:\r\n> \r\n>  - using AssertLockHeld everywhere remains fine, and no longer needlessly disables the compile time checks\r\n> \r\n>  - LockAssertion should only be used very rarely -- and in fact it's only used in net_processing in some ForEach/ForEachNode functions.\r\n\r\nProbably, `AssertLockHeld` deserves a better name, but its functionality and usage are ok.\r\n\r\n`EXCLUSIVE_LOCKS_REQUIRED` is used in a header file. If a function definition is placed in a `*.cpp` file, using `AssertLockHeld` has the following benefits (besides a run time check):\r\n- it shows to a code reader the expected state of lock without referencing to a header file\r\n- it will warn about missed proper `EXCLUSIVE_LOCKS_REQUIRED` annotation\r\n\r\n`AssertLockHeld` is a great tool to transit from `RecursiveMutex` to `Mutex` in a safe and proven manner. See: #19303, #19833, #19854.\r\n\r\nConcept NACK.",
      "created_at" : "2020-09-04T08:02:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-686986462",
      "id" : 686986462,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4Njk4NjQ2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T08:02:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686986462",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "If a function definition is placed in a `*.cpp` file, using `AssertLockHeld` has the following benefits (besides a run time check):\r\n> \r\n> * it shows to a code reader the expected state of lock without referencing to a header file\r\n> * it will warn about missed proper `EXCLUSIVE_LOCKS_REQUIRED` annotation\r\n\r\nYou are literally talking about adding an annotation to check for the presence of another annotation. This is an absurd idea to me, but to take it seriously, what should the developer guidelines say about using AssertLockHeld this way? Should every function that is annotated with EXCLUSIVE_LOCKS_REQUIRED also have an AssertLockHeld at the top? Is there going to be a linter to check for this, or is this going to be another source of nits in review comments?\r\n\r\n> `AssertLockHeld` is a great tool to transit from `RecursiveMutex` to `Mutex` in a safe and proven manner. See: #19303, #19833, #19854.\r\n\r\nBefore the lock annotations added in #19668 this was true. It was a good way to discover where to add EXCLUSIVE_LOCKS_REQUIRED annotations. But now those annotations are added AssertLockHeld is only functioning as annotation checking the presence of another annotation, and doesn't impact the work in those other PRs or improve thread safety in any way.",
      "created_at" : "2020-09-04T14:46:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687192979",
      "id" : 687192979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzE5Mjk3OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T14:46:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687192979",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> You are literally talking about adding an annotation to check for the presence of another annotation.\r\n\r\nThis is one benefit among others (run time check is the main purpose of `AssertLockHeld`).\r\n\r\n> This is an absurd idea to me...\r\n\r\nAnnotations that was missed and added in 3ddc150857178bfb1c854c05bf9b526777876f56 and 2ee7743fe723227f2ea1b031eddb14fc6863f4c8 justify the #19668 approach.\r\n\r\n> ... but to take it seriously, what should the developer guidelines say about using AssertLockHeld this way? Should every function that is annotated with EXCLUSIVE_LOCKS_REQUIRED also have an AssertLockHeld at the top?\r\n\r\nWhy not?\r\n\r\n> ... is this going to be another source of nits in review comments?\r\n\r\nI think it is desirable for a new code.\r\n\r\n",
      "created_at" : "2020-09-04T14:58:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687201826",
      "id" : 687201826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzIwMTgyNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T14:58:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687201826",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Good! So we agree this PR has no detrimental effects on thread safety, and the NACK is based on a style preference?",
      "created_at" : "2020-09-04T15:06:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687207072",
      "id" : 687207072,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzIwNzA3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T15:06:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687207072",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Good! So we agree this PR has no detrimental effects on thread safety, and the NACK is based on a style preference?\r\n\r\nNo. It is based on thread safety.\r\n\r\nWhile migrating from `RecursiveMutex` to `Mutex` how one could be confident in the fact that a mutex is actually locked without run time assertion?\r\n\r\n> Try to remove confusing and no longer useful lock asserts.\r\n\r\nAt least, could this change be postponed until getting rid of `RecursiveMutex`s?",
      "created_at" : "2020-09-04T15:10:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687209825",
      "id" : 687209825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzIwOTgyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T15:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687209825",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> While migrating from `RecursiveMutex` to `Mutex` how one could be confident in the fact that a mutex is actually locked without run time assertion?\r\n\r\nIf it is annotated with EXCLUSIVE_LOCKS_REQUIRED, it seems you should be confident either that the mutex is actually locked or that LockAssertion was used earlier and would have triggered a runtime error where it was used. This PR isn't removing all runtime checks, just runtime checks redundant with compile time checks. AssertLockHeld is still available whenever you want to use it. It just returns to functioning like a normal runtime check, and not a strange compile time check enforcing the presence of a different compile time check. I can see how the strange check was useful during development of #19668, but it doesn't serve a purpose for thread safety going forward or help with future PRs.\r\n\r\nIf you want to make an argument for keeping all AssertLockHelds based on readability, that's fine, but then I think you should make a developer guideline saying that AssertLockHeld should be called first thing in any function annotated with EXCLUSIVE_LOCKS_REQUIRED, and ideally have a linter to enforce this. Otherwise if the assert is only used in some places but not others, that is just adding confusion and inconsistency.",
      "created_at" : "2020-09-04T15:56:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687236976",
      "id" : 687236976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzIzNjk3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T15:56:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687236976",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I need to review this PR just for what I'll learn. ð³",
      "created_at" : "2020-09-04T16:33:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687255914",
      "id" : 687255914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzI1NTkxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T16:33:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687255914",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think by default `./configure` will pick up gcc, which does not check lock annotations, so the current `AssertLockHeld` in master have a slight benefit of telling `./configure --enable-debug` devs (with gcc) who run the tests before creating a pull that something with their locks is wrong. Though, you correctly say that travis will compile with clang and fail if there is an inconsistency.\r\n\r\nThe redundant run time checks also serve as a insurance against bugs in clang.\r\n\r\nIdeally, they'd be inserted by the compiler whenever a function is annotated. Though, I don't see a way to do this in C++ without wrapping everything into more macros. Another option would be to have a preprocessing step in our ci scripts to insert the redundant run-time checks in enable-debug builds. At least that would make me feel more comfortable removing them.",
      "created_at" : "2020-09-05T10:19:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687585243",
      "id" : 687585243,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzU4NTI0Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-05T10:19:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687585243",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
