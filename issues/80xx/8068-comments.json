[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8068#discussion_r63647803"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/63647803"
         }
      },
      "body" : "clang warns about `lsb` and `msb` used uninitialized.",
      "commit_id" : "e3820046f98058144bb219af342d2b1f14e25008",
      "created_at" : "2016-05-18T05:41:59Z",
      "diff_hunk" : "@@ -0,0 +1,202 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOCK_ENCODINGS_H\n+#define BITCOIN_BLOCK_ENCODINGS_H\n+\n+#include \"primitives/block.h\"\n+\n+class CTxMemPool;\n+\n+class TransactionCompressor {\n+private:\n+    CTransaction& tx;\n+public:\n+    TransactionCompressor(CTransaction& txIn) : tx(txIn) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(tx); //TODO: Compress tx encoding\n+    }\n+};\n+\n+struct BlockTransactionsRequest {\n+    uint256 blockhash;\n+    std::vector<uint32_t> indexes;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(blockhash);\n+        size_t indexes_size = indexes.size();\n+        READWRITE(VARINT(indexes_size));\n+        if (ser_action.ForRead()) {\n+            size_t i = 0;\n+            while (indexes.size() < indexes_size) {\n+                indexes.resize(std::min(1000 + indexes.size(), indexes_size));\n+                for (; i < indexes.size(); i++)\n+                    READWRITE(VARINT(indexes[i]));\n+            }\n+\n+            uint32_t offset = 0;\n+            for (size_t i = 0; i < indexes.size(); i++) {\n+                if (uint64_t(indexes[i]) + uint64_t(offset) > std::numeric_limits<uint32_t>::max())\n+                    throw std::ios_base::failure(\"indexes overflowed 32-bits\");\n+                indexes[i] = indexes[i] + offset;\n+                offset = indexes[i] + 1;\n+            }\n+        } else {\n+            for (size_t i = 0; i < indexes.size(); i++) {\n+                uint32_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n+                READWRITE(VARINT(index));\n+            }\n+        }\n+    }\n+};\n+\n+struct BlockTransactions {\n+    uint256 blockhash;\n+    std::vector<CTransaction> txn;\n+\n+    BlockTransactions() {}\n+    BlockTransactions(const BlockTransactionsRequest& req) :\n+        blockhash(req.blockhash), txn(req.indexes.size()) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(blockhash);\n+        size_t txn_size = txn.size();\n+        READWRITE(VARINT(txn_size));\n+        if (ser_action.ForRead()) {\n+            size_t i = 0;\n+            while (txn.size() < txn_size) {\n+                txn.resize(std::min(1000 + txn.size(), txn_size));\n+                for (; i < txn.size(); i++)\n+                    READWRITE(REF(TransactionCompressor(txn[i])));\n+            }\n+        } else {\n+            for (size_t i = 0; i < txn.size(); i++)\n+                READWRITE(REF(TransactionCompressor(txn[i])));\n+        }\n+    }\n+};\n+\n+struct PrefilledTransaction {\n+    // Used as an offset since last prefilled tx in CBlockHeaderAndShortTxIDs,\n+    // as a proper transaction-in-block-index in PartiallyDownloadedBlock\n+    uint16_t index;\n+    CTransaction tx;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(VARINT(index));\n+        READWRITE(REF(TransactionCompressor(tx)));\n+    }\n+};\n+\n+typedef enum ReadStatus_t\n+{\n+    READ_STATUS_OK,\n+    READ_STATUS_INVALID, // Invalid object, peer is sending bogus crap\n+    READ_STATUS_FAILED, // Failed to process object\n+} ReadStatus;\n+\n+class CBlockHeaderAndShortTxIDs {\n+private:\n+    mutable uint64_t shorttxidk0, shorttxidk1;\n+    uint64_t nonce;\n+\n+    void FillShortTxIDSelector() const;\n+\n+    friend class PartiallyDownloadedBlock;\n+\n+    static const int SHORTTXIDS_LENGTH = 6;\n+protected:\n+    std::vector<uint64_t> shorttxids;\n+    std::vector<PrefilledTransaction> prefilledtxn;\n+\n+public:\n+    CBlockHeader header;\n+\n+    // Dummy for deserialization\n+    CBlockHeaderAndShortTxIDs() {}\n+\n+    CBlockHeaderAndShortTxIDs(const CBlock& block);\n+\n+    uint64_t GetShortID(const uint256& txhash) const;\n+\n+    size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(header);\n+        READWRITE(nonce);\n+\n+        size_t shorttxids_size = shorttxids.size();\n+        READWRITE(VARINT(shorttxids_size));\n+        if (ser_action.ForRead()) {\n+            size_t i = 0;\n+            while (shorttxids.size() < shorttxids_size) {\n+                shorttxids.resize(std::min(1000 + shorttxids.size(), shorttxids_size));\n+                for (; i < shorttxids.size(); i++) {\n+                    uint32_t lsb; uint16_t msb;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#discussion_r63647803",
      "id" : 63647803,
      "original_commit_id" : "816956e8dae6c122dfde63a46ea110cca187b836",
      "original_position" : 152,
      "path" : "src/blockencodings.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8068",
      "updated_at" : "2016-05-26T23:29:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/63647803",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "body" : "`test/test_bitcoin` failures in travis are strange. Can't reproduce locally. Hmm, we should probably include `src/test-suite.log` in the travis output in such cases.\r\n\r\n... just a second after I wrote this, I see this failure in my logs:\r\n\r\n```\r\nRunning 200 test cases...\r\ntest/net_tests.cpp:92: error in \"caddrdb_read\": check addrman1.size() == 3 failed\r\ntest/net_tests.cpp:102: error in \"caddrdb_read\": check addrman2.size() == 3 failed\r\n\r\n*** 2 failures detected in test suite \"Bitcoin Test Suite\"\r\n```\r\n\r\nI will compare many runs in master and this PR:\r\n\r\n```\r\nmaster: 8 failures\r\n8068: 6 failures\r\n```\r\n\r\nAs this is present in master already, it is not caused by this PR. I'll investigate...\r\n\r\nThe question is, if the travis failure in `test_bitcoin` is the same I see here...\r\n\r\nLooks like the same problem was already reported by me: https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-197200010\r\n\r\nSeparate issue now: #8069\r\n",
      "created_at" : "2016-05-18T05:52:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-219931715",
      "id" : 219931715,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-05-18T07:36:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/219931715",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "body" : "Needs rebase to remove the siphash commits from the top. :)",
      "created_at" : "2016-05-18T09:47:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-219977952",
      "id" : 219977952,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-05-18T09:47:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/219977952",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Rebased and fixed @paveljanik's clang compile-warning.",
      "created_at" : "2016-05-18T20:23:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-220146640",
      "id" : 220146640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-05-18T20:23:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220146640",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "Also removed the varint stuff...turns out it wasnt as big a gain as I thought.",
      "created_at" : "2016-05-18T20:23:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-220146749",
      "id" : 220146749,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-05-18T20:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220146749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "concept ACK",
      "created_at" : "2016-05-19T01:43:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-220206517",
      "id" : 220206517,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-05-19T01:43:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220206517",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "Thinking more about this (and seeing more pull requests touching the mempool), I think having the mempool store its CTransaction objects using shared_ptr's would make sense.\r\n\r\n* During erasing from the mempool, we return the deleted entries upwards (for signalling to wallets etc). This requires expensive copying that could be avoided with shared_ptr (alternatively, see #8099)\r\n* During transaction relay, BIP35 processing, and tx getdata, we fetch mempool transactions (copying them!) before determining whether they can be relayed. Especially with filters active, this is a pretty expensive operation for omitted cases. As none of the things done with the result (filtering, inving, serializing) require a full copy, shared_ptr would be far more efficient.\n* mapRelay often contains transactions that are also stored in the mempool. Shared_ptr's would alleviate duplicate storage space.\r\n* In this PR, it would avoid the need for manual reference counting and for giving the CTxMempool the weird responsibility for owning transactions that aren't even in the mempool anymore.\r\n",
      "created_at" : "2016-05-26T13:00:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-221863723",
      "id" : 221863723,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-05-28T17:22:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/221863723",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Will test that during next week, I need to use it for one of my project",
      "created_at" : "2016-05-29T00:59:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-222336764",
      "id" : 222336764,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-05-29T00:59:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/222336764",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "This should update the implemented BIPs list.",
      "created_at" : "2016-05-30T16:06:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-222521282",
      "id" : 222521282,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-05-30T16:06:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/222521282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Here is a rebase on top of #8126, using shared_ptr's for partial block transactions: https://github.com/sipa/bitcoin/commits/compactblocks",
      "created_at" : "2016-06-01T01:35:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-222869545",
      "id" : 222869545,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-06-01T13:10:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/222869545",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Ok, some comments after looking through the code and working to rebase:\r\n* `CBlockHeaderAndShortTxIDs::FillShortTxIDSelector` should use `htole64` before serializing the nonce (endianness correctness)\r\n* `PartiallyDownloadedBlock::InitData`'s `have_txn` can use a `vector<bool>` (which is bitpacked internally) instead of manual bit logic (nit)\r\n* The code in `ProcessMessage` to add a peer as a direct compact block request peer is duplicated.\r\n* A lot of calls to `error()` that should be LogPrintf's or nothing at all.",
      "created_at" : "2016-06-01T13:27:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-222991558",
      "id" : 222991558,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-06-01T13:27:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/222991558",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "It would be nice if the getpeerinfo showed the sendcmpct status (maybe hex for the version?).",
      "created_at" : "2016-06-01T17:16:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-223062347",
      "id" : 223062347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-06-01T17:16:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223062347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "> (maybe hex for the version?)\r\n\r\nHow to display numbers is a client-side thing, and I'm not sure it makes sense to bloat up bitcoin-cli with this kind of logic?",
      "created_at" : "2016-06-01T17:39:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#issuecomment-223068790",
      "id" : 223068790,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8068",
      "updated_at" : "2016-06-01T17:39:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223068790",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8068#discussion_r65798257"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65798257"
         }
      },
      "body" : "No need for taking lock on pool->cs ?",
      "commit_id" : "e3820046f98058144bb219af342d2b1f14e25008",
      "created_at" : "2016-06-04T06:19:04Z",
      "diff_hunk" : "@@ -0,0 +1,170 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockencodings.h\"\n+#include \"consensus/consensus.h\"\n+#include \"hash.h\"\n+#include \"random.h\"\n+#include \"streams.h\"\n+#include \"txmempool.h\"\n+#include \"util.h\"\n+\n+\n+#define MIN_TRANSACTION_SIZE 60\n+\n+CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block) :\n+        nonce(GetRand(std::numeric_limits<uint64_t>::max())),\n+        shorttxids(block.vtx.size() - 1), prefilledtxn(1), header(block) {\n+    FillShortTxIDSelector();\n+    //TODO: Use our mempool prior to block acceptance to predictively fill more than just the coinbase\n+    prefilledtxn[0] = {0, block.vtx[0]};\n+    for (size_t i = 1; i < block.vtx.size(); i++) {\n+        const CTransaction& tx = block.vtx[i];\n+        shorttxids[i - 1] = GetShortID(tx.GetHash());\n+    }\n+}\n+\n+void CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const {\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << header;\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*stream.begin()), stream.end() - stream.begin());\n+    hasher.Write((unsigned char*)&nonce, sizeof(nonce));\n+    uint256 shorttxidhash;\n+    hasher.Finalize(shorttxidhash.begin());\n+    shorttxidk0 = shorttxidhash.GetUint64(0);\n+    shorttxidk1 = shorttxidhash.GetUint64(1);\n+}\n+\n+uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n+    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids calculation assumes 6-byte shorttxids\");\n+    return SipHashUint256(shorttxidk0, shorttxidk1, txhash) & 0xffffffffffffL;\n+}\n+\n+\n+\n+ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock) {\n+    if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n+        return READ_STATUS_INVALID;\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_SIZE / MIN_TRANSACTION_SIZE)\n+        return READ_STATUS_INVALID;\n+\n+    assert(header.IsNull() && txhashes.empty());\n+    header = cmpctblock.header;\n+    txhashes.resize(cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size());\n+\n+    prefilledtxn.reserve(cmpctblock.prefilledtxn.size());\n+    int32_t lastprefilledindex = -1;\n+    for (size_t i = 0; i < cmpctblock.prefilledtxn.size(); i++) {\n+        if (cmpctblock.prefilledtxn[i].tx.IsNull())\n+            return READ_STATUS_INVALID;\n+\n+        lastprefilledindex += cmpctblock.prefilledtxn[i].index + 1;\n+        if (lastprefilledindex > std::numeric_limits<uint16_t>::max())\n+            return READ_STATUS_INVALID;\n+        if ((uint32_t)lastprefilledindex > cmpctblock.shorttxids.size() + i + 1) {\n+            // If we are inserting a tx at an index greater than our full list of shorttxids\n+            // plus the number of prefilled txn we've inserted, then we have txn for which we\n+            // have neither a prefilled txn or a shorttxid!\n+            return READ_STATUS_INVALID;\n+        }\n+        txhashes[lastprefilledindex] = cmpctblock.prefilledtxn[i].tx.GetHash();\n+        prefilledtxn.push_back({(uint16_t)lastprefilledindex, cmpctblock.prefilledtxn[i].tx});\n+    }\n+\n+    // Calculate map of txids -> positions and check mempool to see what we have (or dont)\n+    std::map<uint64_t, uint16_t> shorttxids;\n+    uint16_t index_offset = 0;\n+    std::vector<PrefilledTransaction>::const_iterator prefilledit = prefilledtxn.begin();\n+    for (size_t i = 0; i < cmpctblock.shorttxids.size(); i++) {\n+        while (prefilledit != prefilledtxn.end() && i + index_offset == prefilledit->index) {\n+            index_offset++;\n+            prefilledit++;\n+        }\n+        shorttxids[cmpctblock.shorttxids[i]] = i + index_offset;\n+    }\n+    if (shorttxids.size() != cmpctblock.shorttxids.size())\n+        return READ_STATUS_FAILED; // Short ID collision\n+\n+    char have_txn[txhashes.size() / 8 + 1];\n+    memset(have_txn, 0, txhashes.size() / 8 + 1);\n+\n+    LOCK(pool->cs);\n+    for (CTxMemPool::txiter it = pool->mapTx.begin(); it != pool->mapTx.end(); it++) {\n+        std::map<uint64_t, uint16_t>::iterator idit = shorttxids.find(cmpctblock.GetShortID(it->GetTx().GetHash()));\n+        if (idit != shorttxids.end()) {\n+            if (!(have_txn[idit->second / 8] & (1 << (idit->second & 0x7)))) {\n+                it->AddRef();\n+                txhashes[idit->second] = it->GetTx().GetHash();\n+                have_txn[idit->second / 8] |= 1 << (idit->second & 0x7);\n+            } else {\n+                // If we find two mempool txn that match the short id, just request it.\n+                // This should be rare enough that the extra bandwidth doesn't matter,\n+                // but eating a round-trip due to FillBlock failure would be annoying\n+                pool->ReleaseTxLock(txhashes[idit->second]);\n+                txhashes[idit->second].SetNull();\n+            }\n+        }\n+    }\n+\n+    LogPrint(\"cmpctblock\", \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), cmpctblock.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION));\n+\n+    return READ_STATUS_OK;\n+}\n+\n+bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {\n+    assert(!header.IsNull());\n+    assert(index < txhashes.size());\n+    return !txhashes[index].IsNull();\n+}\n+\n+ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransaction>& vtx_missing) const {\n+    assert(!header.IsNull());\n+    block = header;\n+    block.vtx.resize(txhashes.size());\n+\n+    size_t tx_missing_offset = 0;\n+    std::vector<PrefilledTransaction>::const_iterator prefilledit = prefilledtxn.begin();\n+    size_t prefilled_count = 0, missing_count = 0, mempool_count = 0;\n+    for (size_t i = 0; i < txhashes.size(); i++) {\n+        if (txhashes[i].IsNull()) {\n+            if (vtx_missing.size() <= tx_missing_offset)\n+                return READ_STATUS_INVALID;\n+            block.vtx[i] = vtx_missing[tx_missing_offset++];\n+            missing_count++;\n+        } else {\n+            if (prefilledit != prefilledtxn.end() && prefilledit->index == i) {\n+                block.vtx[i] = prefilledit->tx;\n+                prefilledit++;\n+                prefilled_count++;\n+            } else {\n+                assert(pool->lookup(txhashes[i], block.vtx[i], true));\n+                mempool_count++;\n+            }\n+        }\n+    }\n+    assert(prefilledit == prefilledtxn.end());\n+    if (vtx_missing.size() == tx_missing_offset) {\n+        LogPrint(\"cmpctblock\", \"Successfully reconstructed block %s with %lu txn prefilled, %lu txn from mempool and %lu txn requested\\n\", header.GetHash().ToString(), prefilled_count, mempool_count, missing_count);\n+        if (vtx_missing.size() < 5) {\n+            BOOST_FOREACH(const CTransaction& tx, vtx_missing)\n+                LogPrint(\"cmpctblock\", \"Reconstructed block %s required tx %s\\n\", header.GetHash().ToString(), tx.GetHash().ToString());\n+        }\n+    }\n+    return vtx_missing.size() == tx_missing_offset ? READ_STATUS_OK : READ_STATUS_INVALID;\n+}\n+\n+PartiallyDownloadedBlock::~PartiallyDownloadedBlock() {\n+    if (!header.IsNull()) {\n+        std::vector<PrefilledTransaction>::const_iterator prefilledit = prefilledtxn.begin();\n+        for (size_t i = 0; i < txhashes.size(); i++) {\n+            if (!txhashes[i].IsNull()) {\n+                if (prefilledit != prefilledtxn.end() && prefilledit->index == i)\n+                    prefilledit++;\n+                else\n+                    pool->ReleaseTxLock(txhashes[i]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#discussion_r65798257",
      "id" : 65798257,
      "original_commit_id" : "e3820046f98058144bb219af342d2b1f14e25008",
      "original_position" : 166,
      "path" : "src/blockencodings.cpp",
      "position" : 166,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8068",
      "updated_at" : "2016-06-04T06:19:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65798257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8068#discussion_r65799356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65799356"
         }
      },
      "body" : "If you intend to do it later, it's better removing it from the PR. Just for curiosity, if it is later included, the goal will be to use sendcmpct's version to decide the type of serialization of the transactions ?",
      "commit_id" : "e3820046f98058144bb219af342d2b1f14e25008",
      "created_at" : "2016-06-04T08:08:15Z",
      "diff_hunk" : "@@ -0,0 +1,197 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOCK_ENCODINGS_H\n+#define BITCOIN_BLOCK_ENCODINGS_H\n+\n+#include \"primitives/block.h\"\n+\n+class CTxMemPool;\n+\n+class TransactionCompressor {\n+private:\n+    CTransaction& tx;\n+public:\n+    TransactionCompressor(CTransaction& txIn) : tx(txIn) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(tx); //TODO: Compress tx encoding",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#discussion_r65799356",
      "id" : 65799356,
      "original_commit_id" : "e3820046f98058144bb219af342d2b1f14e25008",
      "original_position" : 22,
      "path" : "src/blockencodings.h",
      "position" : 22,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8068",
      "updated_at" : "2016-06-04T08:08:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65799356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8068#discussion_r65799753"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65799753"
         }
      },
      "body" : "`fAnnounceUsingCMPCTBLOCK` is the way with which the remote node prefer to receive block notifications.\r\n\r\nIt gives no information about whether the remote node itself provide or not header and IDs.\r\nImho it should be fixed to:\r\n\r\n`State(pfrom->GetId())->fProvidesHeaderAndIDs = pfrom->nVersion >= SHORT_IDS_BLOCKS_VERSION && pfrom->nServices & NODE_NETWORK;`\r\n\r\nMoved when we the node receive the VERSION message.\r\n\r\nBecause even if fAnnounceUsingCMPCTBLOCK is `false` (low bandwidth relaying case), the node still provide header and ids.",
      "commit_id" : "e3820046f98058144bb219af342d2b1f14e25008",
      "created_at" : "2016-06-04T08:47:46Z",
      "diff_hunk" : "@@ -4789,6 +4836,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         State(pfrom->GetId())->fPreferHeaders = true;\n     }\n \n+    else if (strCommand == NetMsgType::SENDCMPCT)\n+    {\n+        bool fAnnounceUsingCMPCTBLOCK = false;\n+        uint64_t nCMPCTBLOCKVersion = 1;\n+        vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n+        if (nCMPCTBLOCKVersion == 1) {\n+            LOCK(cs_main);\n+            State(pfrom->GetId())->fProvidesHeaderAndIDs = fAnnounceUsingCMPCTBLOCK;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#discussion_r65799753",
      "id" : 65799753,
      "original_commit_id" : "e3820046f98058144bb219af342d2b1f14e25008",
      "original_position" : 156,
      "path" : "src/main.cpp",
      "position" : 156,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8068",
      "updated_at" : "2016-06-04T08:51:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65799753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8068#discussion_r65802242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65802242"
         }
      },
      "body" : "nit: constant would be nice, 3 is reused on https://github.com/bitcoin/bitcoin/pull/8068/files#diff-7ec3c68a81efff79b6ca22ac1f1eabbaR5499",
      "commit_id" : "e3820046f98058144bb219af342d2b1f14e25008",
      "created_at" : "2016-06-04T12:56:50Z",
      "diff_hunk" : "@@ -4835,10 +4894,39 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     CNodeState *nodestate = State(pfrom->GetId());\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-                        vToFetch.push_back(inv);\n+                        if (nodestate->fProvidesHeaderAndIDs)\n+                            vToFetch.push_back(CInv(MSG_CMPCT_BLOCK, inv.hash));\n+                        else\n+                            vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n                         // later (within the same cs_main lock, though).\n                         MarkBlockAsInFlight(pfrom->GetId(), inv.hash, chainparams.GetConsensus());\n+                        if (mapBlocksInFlight.size() <= 2) {\n+                            // We seem to be rather well-synced, so it appears pfrom was the first to provide us\n+                            // with this block! Let's get them to announce using compact blocks in the future.\n+                            if (nodestate->fProvidesHeaderAndIDs) {\n+                                bool fAlreadyAnnouncing = false;\n+                                BOOST_FOREACH(const NodeId nodeid, lNodesAnnouncingHeaderAndIDs)\n+                                    if (nodeid == pfrom->GetId())\n+                                        fAlreadyAnnouncing = true;\n+                                if (!fAlreadyAnnouncing) {\n+                                    bool fAnnounceUsingCMPCTBLOCK = false;\n+                                    uint64_t nCMPCTBLOCKVersion = 1;\n+                                    if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8068#discussion_r65802242",
      "id" : 65802242,
      "original_commit_id" : "e3820046f98058144bb219af342d2b1f14e25008",
      "original_position" : 187,
      "path" : "src/main.cpp",
      "position" : 187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8068",
      "updated_at" : "2016-06-04T12:57:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/65802242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   }
]
