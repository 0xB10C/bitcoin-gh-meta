[
   {
      "author_association" : "NONE",
      "body" : "`time` in [getrawtransaction](https://bitcoincore.org/en/doc/0.20.0/rpc/rawtransactions/getrawtransaction/) is same as `block time`\r\n\r\n>   \"blocktime\" : xxx,                 (numeric) The block time expressed in UNIX epoch time\r\n  \"time\" : n                         (numeric) **Same as \"blocktime\"**\r\n\r\nThere are 3 different variables for time in results of [gettransaction](https://bitcoincore.org/en/doc/0.20.0/rpc/wallet/gettransaction/)\r\n\r\n>   **\"blocktime\" : xxx,                       (numeric) The block time expressed in UNIX epoch time.**\r\n  \"txid\" : \"hex\",                          (string) The transaction id.\r\n  \"walletconflicts\" : [                    (json array) Conflicting transaction ids.\r\n    \"hex\",                                 (string) The transaction id.\r\n    ...\r\n  ],\r\n  **\"time\" : xxx,                            (numeric) The transaction time expressed in UNIX epoch time.\r\n  \"timereceived\" : xxx,                    (numeric) The time received expressed in UNIX epoch time.**",
      "created_at" : "2020-10-18T22:21:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20181#issuecomment-711432462",
      "id" : 711432462,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20181",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMTQzMjQ2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-18T22:21:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/711432462",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thanks, right, so I see this explains the `getrawtransaction` time.\r\nStill, this doesn't explain the issue that all imported transactions after rescan have the time of the most recent transaction detected.",
      "created_at" : "2020-10-25T15:38:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20181#issuecomment-716167404",
      "id" : 716167404,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20181",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxNjE2NzQwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-25T15:38:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/716167404",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/10667901?v=4",
         "events_url" : "https://api.github.com/users/ben-kaufman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ben-kaufman/followers",
         "following_url" : "https://api.github.com/users/ben-kaufman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ben-kaufman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ben-kaufman",
         "id" : 10667901,
         "login" : "ben-kaufman",
         "node_id" : "MDQ6VXNlcjEwNjY3OTAx",
         "organizations_url" : "https://api.github.com/users/ben-kaufman/orgs",
         "received_events_url" : "https://api.github.com/users/ben-kaufman/received_events",
         "repos_url" : "https://api.github.com/users/ben-kaufman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ben-kaufman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ben-kaufman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ben-kaufman"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "As a specter user, I had the same problem with multiple incorrect date across several wallet.\r\n\r\nI've look at the Bitcoin Core code and the function ComputeSmartTime in wallet.cpp attire my attention.\r\nThe algorithm try to search for the best time between the received one, the block time one and a smart one wich is produced by a lot of time corrections.\r\nThis ComputeSmartTime method is conceived with a real time approach in mind.\r\nThe technique used to determine the smart version of the time is based on the hypothesis that you can't discover transactions in the wrong order.\r\nAnd if you suppose that transcations can be discovered in the wrong order, the lastestEntry variable is going to be wrong for every transactions discovered after and be the exact same date.\r\nThat's exactly what I saw in my Bitcoin Core wallet, a lot of transactions with the exact same date, which is incorrect.\r\n\r\nI've not found yet a simple example where transactions could be dicovered in the wrong order, but I'm looking for a case where you start with a small rescan and after a larger one.\r\nTo be more precise : if you rescan only the latest part of the history (2020 year only), and proceed to a larger rescan after (full rescan),\r\nevery transaction before 2020 will be noted in 2020 du to the lastEntry constraint in nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\r\n\r\nWhen you think about it, in a rescanning scenario, the blocktime is the only exploitable time. The received one means nothing and you can't find a better value.\r\n\r\nThat's why I've patched the problem like this :\r\n\r\nadd a rescanning_old_block boolean to ComputeSmartTime\r\nIn case of rescanning_old_block don't use anything else than blocktime.\r\npropagate this boolean in the methods hierarchy to differenciate realtime incoming transactions with rescanning case.\r\nI'm currently testing my patch. Tests cases stay all green. If everything is repaired in my wallets,\r\nI'll submit this little patch in another comment to get feedback on it.",
      "created_at" : "2020-12-02T17:22:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20181#issuecomment-737375928",
      "id" : 737375928,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20181",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNzM3NTkyOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-02T17:22:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/737375928",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/75384375?v=4",
         "events_url" : "https://api.github.com/users/BitcoinTsunami/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinTsunami/followers",
         "following_url" : "https://api.github.com/users/BitcoinTsunami/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinTsunami/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinTsunami",
         "id" : 75384375,
         "login" : "BitcoinTsunami",
         "node_id" : "MDQ6VXNlcjc1Mzg0Mzc1",
         "organizations_url" : "https://api.github.com/users/BitcoinTsunami/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinTsunami/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinTsunami/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinTsunami/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinTsunami/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinTsunami"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I've test this approach on Bitcoin Core v0.21rc2. My transactions dates in my wallets are now correct with the attached patch.\r\nThis won't fix transactions with previously incorrect date determination, but it prevent bad datation in the first place during a rescanning process. This patch as no impact on ComputeTimeSmart usage outside rescanning process: realtime flow are not affected.\r\n\r\nI'll now try to look at the way specter interract with Bitcoin Core API, because this bug is systematic in my wallet case with Specter v0.10.0 and Bitcoin Core (v0.20.1 or v0.21.0rc2).\r\n\r\nI'm pretty sure that the first rescan extecuted by specter is smaller that the next one. As I suggested in my first message, it may be a smaller timeframe first, then a bigger one. But it could also be a smaller address range first (100 first wallets adress), then a bigger range (1000 first). That way transactions may be discovered in wrong order too, because nothing impose to consume addresses in the naturel order of the HD wallet.\r\n\r\n\r\n```\r\nDate: Thu, 3 Dec 2020 08:39:33 +0100\r\nSubject: [PATCH] fix incorrect transaction date during rescanning\r\n\r\n---\r\n src/wallet/wallet.cpp | 22 +++++++++++++---------\r\n src/wallet/wallet.h   |  8 ++++----\r\n 2 files changed, 17 insertions(+), 13 deletions(-)\r\n\r\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\r\nindex ff8bfff87..1aa1b44df 100644\r\n--- a/src/wallet/wallet.cpp\r\n+++ b/src/wallet/wallet.cpp\r\n@@ -842,7 +842,7 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\r\n     return false;\r\n }\r\n \r\n-CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx, bool fFlushOnClose)\r\n+CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx, bool fFlushOnClose, bool rescanning_old_block)\r\n {\r\n     LOCK(cs_wallet);\r\n \r\n@@ -872,7 +872,7 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\r\n         wtx.nTimeReceived = chain().getAdjustedTime();\r\n         wtx.nOrderPos = IncOrderPosNext(&batch);\r\n         wtx.m_it_wtxOrdered = wtxOrdered.insert(std::make_pair(wtx.nOrderPos, &wtx));\r\n-        wtx.nTimeSmart = ComputeTimeSmart(wtx);\r\n+        wtx.nTimeSmart = ComputeTimeSmart(wtx, rescanning_old_block);\r\n         AddToSpends(hash);\r\n     }\r\n \r\n@@ -980,7 +980,7 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\r\n     return true;\r\n }\r\n \r\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool fUpdate)\r\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool fUpdate, bool rescanning_old_block)\r\n {\r\n     const CTransaction& tx = *ptx;\r\n     {\r\n@@ -1018,7 +1018,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Co\r\n \r\n             // Block disconnection override an abandoned tx as unconfirmed\r\n             // which means user may have to call abandontransaction again\r\n-            return AddToWallet(MakeTransactionRef(tx), confirm, /* update_wtx= */ nullptr, /* fFlushOnClose= */ false);\r\n+            return AddToWallet(MakeTransactionRef(tx), confirm, /* update_wtx= */ nullptr, /* fFlushOnClose= */ false, rescanning_old_block);\r\n         }\r\n     }\r\n     return false;\r\n@@ -1147,9 +1147,9 @@ void CWallet::MarkConflicted(const uint256& hashBlock, int conflicting_height, c\r\n     }\r\n }\r\n \r\n-void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool update_tx)\r\n+void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool update_tx, bool rescanning_old_block)\r\n {\r\n-    if (!AddToWalletIfInvolvingMe(ptx, confirm, update_tx))\r\n+    if (!AddToWalletIfInvolvingMe(ptx, confirm, update_tx, rescanning_old_block))\r\n         return; // Not one of ours\r\n \r\n     // If a transaction changes 'conflicted' state, that changes the balance\r\n@@ -1788,7 +1788,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\r\n                 break;\r\n             }\r\n             for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\r\n-                SyncTransaction(block.vtx[posInBlock], {CWalletTx::Status::CONFIRMED, block_height, block_hash, (int)posInBlock}, fUpdate);\r\n+                SyncTransaction(block.vtx[posInBlock], {CWalletTx::Status::CONFIRMED, block_height, block_hash, (int)posInBlock}, fUpdate, true /* rescanning_old_block */);\r\n             }\r\n             // scan succeeded, record block as most recent successfully scanned\r\n             result.last_scanned_block = block_hash;\r\n@@ -3679,7 +3679,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t>& mapKeyBirth) const {\r\n  * https://bitcointalk.org/?topic=54527, or\r\n  * https://github.com/bitcoin/bitcoin/pull/1393.\r\n  */\r\n-unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\r\n+unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx, bool rescanning_old_block) const\r\n {\r\n     unsigned int nTimeSmart = wtx.nTimeReceived;\r\n     if (!wtx.isUnconfirmed() && !wtx.isAbandoned()) {\r\n@@ -3710,7 +3710,11 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\r\n                 }\r\n             }\r\n \r\n-            nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\r\n+            if(!rescanning_old_block) {\r\n+                nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\r\n+            } else {\r\n+                nTimeSmart = blocktime;\r\n+            }\r\n         } else {\r\n             WalletLogPrintf(\"%s: found %s in block %s not in index\\n\", __func__, wtx.GetHash().ToString(), wtx.m_confirm.hashBlock.ToString());\r\n         }\r\ndiff --git a/src/wallet/wallet.h b/src/wallet/wallet.h\r\nindex 69cf6b66a..c1695e870 100644\r\n--- a/src/wallet/wallet.h\r\n+++ b/src/wallet/wallet.h\r\n@@ -664,7 +664,7 @@ private:\r\n      * Abandoned state should probably be more carefully tracked via different\r\n      * posInBlock signals or by checking mempool presence when necessary.\r\n      */\r\n-    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n+    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool fUpdate, bool rescanning_old_block) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n \r\n     /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\r\n     void MarkConflicted(const uint256& hashBlock, int conflicting_height, const uint256& hashTx);\r\n@@ -676,7 +676,7 @@ private:\r\n \r\n     /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected/ScanForWalletTransactions.\r\n      * Should be called with non-zero block_hash and posInBlock if this is for a transaction that is included in a block. */\r\n-    void SyncTransaction(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool update_tx = true) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n+    void SyncTransaction(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool update_tx = true, bool rescanning_old_block = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n \r\n     std::atomic<uint64_t> m_wallet_flags{0};\r\n \r\n@@ -876,7 +876,7 @@ public:\r\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\r\n \r\n     void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n-    unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\r\n+    unsigned int ComputeTimeSmart(const CWalletTx& wtx, bool rescanning_old_block) const;\r\n \r\n     /**\r\n      * Increment the next transaction order id\r\n@@ -895,7 +895,7 @@ public:\r\n     //! @return true if wtx is changed and needs to be saved to disk, otherwise false\r\n     using UpdateWalletTxFn = std::function<bool(CWalletTx& wtx, bool new_tx)>;\r\n \r\n-    CWalletTx* AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx=nullptr, bool fFlushOnClose=true);\r\n+    CWalletTx* AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx=nullptr, bool fFlushOnClose=true, bool rescanning_old_block=false);\r\n     bool LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n     void transactionAddedToMempool(const CTransactionRef& tx, uint64_t mempool_sequence) override;\r\n     void blockConnected(const CBlock& block, int height) override;\r\n-- \r\n2.24.3 (Apple Git-128)\r\n\r\n\r\n```",
      "created_at" : "2020-12-03T08:37:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20181#issuecomment-737751904",
      "id" : 737751904,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20181",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNzc1MTkwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-03T08:37:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/737751904",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/75384375?v=4",
         "events_url" : "https://api.github.com/users/BitcoinTsunami/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinTsunami/followers",
         "following_url" : "https://api.github.com/users/BitcoinTsunami/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinTsunami/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinTsunami",
         "id" : 75384375,
         "login" : "BitcoinTsunami",
         "node_id" : "MDQ6VXNlcjc1Mzg0Mzc1",
         "organizations_url" : "https://api.github.com/users/BitcoinTsunami/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinTsunami/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinTsunami/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinTsunami/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinTsunami/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinTsunami"
      }
   }
]
