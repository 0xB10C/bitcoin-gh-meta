[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2020-10-20T14:07:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-712879256",
      "id" : 712879256,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMjg3OTI1Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-20T14:07:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/712879256",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2020-10-20T14:35:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-712899496",
      "id" : 712899496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMjg5OTQ5Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-23T04:11:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/712899496",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2020-10-20T15:00:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-712916354",
      "id" : 712916354,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMjkxNjM1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-20T15:00:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/712916354",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2020-10-20T16:51:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-712999337",
      "id" : 712999337,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMjk5OTMzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-20T16:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/712999337",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added `CNode::m_inbound_onion` unit test coverage in #20210.",
      "created_at" : "2020-10-21T10:15:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-713464786",
      "id" : 713464786,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMzQ2NDc4Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-23T02:48:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/713464786",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sounds good, although you might want to add a couple slots for actual localhost peers. :)",
      "created_at" : "2020-10-21T20:43:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-713865992",
      "id" : 713865992,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMzg2NTk5Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-21T20:43:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/713865992",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Sounds good, although you might want to add a couple slots for actual localhost peers. :)\r\n\r\nAnyone with an old manually-configured hidden service not using the new bind style will have their inbound Tor connections not classified as such, so this may be degradation for them if there is no explicit affordance for localhost peers.",
      "created_at" : "2020-11-05T02:03:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-722078028",
      "id" : 722078028,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMjA3ODAyOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-05T02:03:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722078028",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thank you for the feedback @gmaxwell and @sipa, will update soon.",
      "created_at" : "2020-11-05T07:58:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-722209703",
      "id" : 722209703,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMjIwOTcwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-05T07:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722209703",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-11-05T14:09:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-722401457",
      "id" : 722401457,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMjQwMTQ1Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-05T14:09:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722401457",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Now that we have unit testing of the eviction logic in `master` (see merged PR #20477): what about adding a small test for this change? :)",
      "created_at" : "2020-12-23T14:09:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-750316382",
      "id" : 750316382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MDMxNjM4Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-23T14:09:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750316382",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased, and updated to fall back to localhost if no onion peers are removed. Depending on feedback, this could go further and count onion peers removed to activate localhost if too few onion peers are removed.\r\n\r\n> Now that we have unit testing of the eviction logic in `master` (see merged PR #20477): what about adding a small test for this change? :)\r\n\r\n@practicalswift I agree and spent time yesterday writing tests after extracting some of the untested parts of `SelectNodeToEvict()` to a separate function for reliable testability of the current code and plan to propose that in a separate PR.\r\n",
      "created_at" : "2020-12-23T14:41:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-750329753",
      "id" : 750329753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MDMyOTc1Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-23T14:41:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750329753",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased and updated after merge of #19972 that created a silent merge conflict.",
      "created_at" : "2020-12-25T23:51:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-751300798",
      "id" : 751300798,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MTMwMDc5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-25T23:51:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751300798",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550767783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550767783"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "there is a nice syntax for this:\r\n\r\n```cpp\r\n{.id = 123, .nTimeConnected = 567, ...}\r\n```\r\n\r\nbut last time I tried some old version of GCC did not support it. Maybe some day...",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-01T13:16:31Z",
      "diff_hunk" : "@@ -21,17 +21,18 @@ FUZZ_TARGET(node_eviction)\n     std::vector<NodeEvictionCandidate> eviction_candidates;\n     while (fuzzed_data_provider.ConsumeBool()) {\n         eviction_candidates.push_back({\n-            fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n+            /* id */ fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n+            /* nTimeConnected */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550767783",
      "id" : 550767783,
      "line" : 25,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc2Nzc4Mw==",
      "original_commit_id" : "0d167683b670cb2220052a7719c8ab32ce479bbd",
      "original_line" : 25,
      "original_position" : 16,
      "original_start_line" : 24,
      "path" : "src/test/fuzz/node_eviction.cpp",
      "position" : 16,
      "pull_request_review_id" : 560586885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : 24,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T14:59:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550767783",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550768441"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550768441"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The commit message reads \"p2p: add m_inbound_onion to AttemptToEvictConnection()\". Shouldn't that be `s/AttemptToEvictConnection()/NodeEvictionCandidate/`?",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-01T13:25:44Z",
      "diff_hunk" : "@@ -1247,6 +1247,7 @@ struct NodeEvictionCandidate\n     uint64_t nKeyedNetGroup;\n     bool prefer_evict;\n     bool m_is_local;\n+    bool m_is_onion;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550768441",
      "id" : 550768441,
      "line" : 1250,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc2ODQ0MQ==",
      "original_commit_id" : "0d167683b670cb2220052a7719c8ab32ce479bbd",
      "original_line" : 1250,
      "original_position" : 4,
      "original_start_line" : 1249,
      "path" : "src/net.h",
      "position" : 4,
      "pull_request_review_id" : 560586885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : 1249,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T14:59:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550768441",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550769530"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550769530"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    // configured hidden services not using -bind=addr:port=onion will not be detected as inbound onion connections.\r\n```",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-01T13:39:46Z",
      "diff_hunk" : "@@ -923,16 +929,25 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n \n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // Reserve half of these protected spots for localhost peers, even if\n+    // Reserve half of these protected spots for onion and localhost peers, even if\n     // they're not longest-uptime overall. This helps protect tor peers, which\n     // tend to be otherwise disadvantaged under our eviction criteria.\n-    size_t initial_size = vEvictionCandidates.size();\n+    const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n \n-    // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareLocalHostTimeConnected);\n-    size_t local_erase_size = total_protect_size / 2;\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_local; }), vEvictionCandidates.end());\n+    // Pick out up to 1/4 peers that are connected via our tor onion service, sorted by longest uptime.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareOnionTimeConnected);\n+    const size_t local_erase_size = total_protect_size / 2;\n+    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_onion; }), vEvictionCandidates.end());\n+\n+    // If no onion peers were removed, extend the same protection to localhost peers, as manually\n+    // configured hidden services not using -bind will not be detected as inbound onion connections.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550769530",
      "id" : 550769530,
      "line" : 944,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc2OTUzMA==",
      "original_commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "original_line" : 944,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 35,
      "pull_request_review_id" : 560586885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T14:59:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550769530",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550774610"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550774610"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What about extending `EraseLastKElements()` with one more argument \"predicate\" and remove elements only if it returns `true` on them (with a default that assumes `true` for any element)?\r\n\r\nThen this code would look like:\r\n\r\n```cpp\r\nEraseLastKElements(\r\n    vEvictionCandidates,\r\n    CompareOnionTimeConnected,\r\n    local_erase_size,\r\n    [](NodeEvictionCandidate const &n) { return n.m_is_onion; });\r\n```\r\n\r\nmaybe out of the scope of this PR.",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-01T14:41:41Z",
      "diff_hunk" : "@@ -923,16 +929,25 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n \n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // Reserve half of these protected spots for localhost peers, even if\n+    // Reserve half of these protected spots for onion and localhost peers, even if\n     // they're not longest-uptime overall. This helps protect tor peers, which\n     // tend to be otherwise disadvantaged under our eviction criteria.\n-    size_t initial_size = vEvictionCandidates.size();\n+    const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n \n-    // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareLocalHostTimeConnected);\n-    size_t local_erase_size = total_protect_size / 2;\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_local; }), vEvictionCandidates.end());\n+    // Pick out up to 1/4 peers that are connected via our tor onion service, sorted by longest uptime.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareOnionTimeConnected);\n+    const size_t local_erase_size = total_protect_size / 2;\n+    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_onion; }), vEvictionCandidates.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550774610",
      "id" : 550774610,
      "line" : 941,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc3NDYxMA==",
      "original_commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "original_line" : 941,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 32,
      "pull_request_review_id" : 560586885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T14:59:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550774610",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550775652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550775652"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just to note - this assumes that if there are recognizable onion connections (via `-bind=addr:port=onion`) then there are **not** non-recognizable ones (statically/manually configured tor daemon pointing to our standard p2p port, e.g. 8333).\r\n\r\nThis assumption may not be true as there could be a node that is configured both via `-bind=addr:port=onion` (connections coming to 8334 are recognized as onion) and also a static tor config redirecting to 8333.\r\n\r\nI think the code is ok as it is because the above would be rare and maybe not worth the code complexity to tweak the eviction policy for it.",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-01T14:54:19Z",
      "diff_hunk" : "@@ -923,16 +929,25 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n \n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // Reserve half of these protected spots for localhost peers, even if\n+    // Reserve half of these protected spots for onion and localhost peers, even if\n     // they're not longest-uptime overall. This helps protect tor peers, which\n     // tend to be otherwise disadvantaged under our eviction criteria.\n-    size_t initial_size = vEvictionCandidates.size();\n+    const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n \n-    // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareLocalHostTimeConnected);\n-    size_t local_erase_size = total_protect_size / 2;\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_local; }), vEvictionCandidates.end());\n+    // Pick out up to 1/4 peers that are connected via our tor onion service, sorted by longest uptime.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareOnionTimeConnected);\n+    const size_t local_erase_size = total_protect_size / 2;\n+    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_onion; }), vEvictionCandidates.end());\n+\n+    // If no onion peers were removed, extend the same protection to localhost peers, as manually\n+    // configured hidden services not using -bind will not be detected as inbound onion connections.\n+    if (initial_size == vEvictionCandidates.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550775652",
      "id" : 550775652,
      "line" : 945,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc3NTY1Mg==",
      "original_commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "original_line" : 945,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 36,
      "pull_request_review_id" : 560586885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T14:59:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550775652",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r557297105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557297105"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Designated initializers are only standardized in c++20: https://en.cppreference.com/w/cpp/language/aggregate_initialization#Designated_initializers",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-14T10:34:54Z",
      "diff_hunk" : "@@ -21,17 +21,18 @@ FUZZ_TARGET(node_eviction)\n     std::vector<NodeEvictionCandidate> eviction_candidates;\n     while (fuzzed_data_provider.ConsumeBool()) {\n         eviction_candidates.push_back({\n-            fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n+            /* id */ fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n+            /* nTimeConnected */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r557297105",
      "id" : 557297105,
      "in_reply_to_id" : 550767783,
      "line" : 25,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI5NzEwNQ==",
      "original_commit_id" : "0d167683b670cb2220052a7719c8ab32ce479bbd",
      "original_line" : 25,
      "original_position" : 16,
      "original_start_line" : 24,
      "path" : "src/test/fuzz/node_eviction.cpp",
      "position" : 16,
      "pull_request_review_id" : 568106998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : 24,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-14T10:34:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557297105",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r558102071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/558102071"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Something like this may work (untested, feel free to ignore):\r\n\r\n<details>\r\n<summary>[patch] EraseLastKElements() with predicate</summary>\r\n\r\n```diff\r\ndiff --git i/src/net.cpp w/src/net.cpp\r\nindex ddf33c38a..64900b8b5 100644\r\n--- i/src/net.cpp\r\n+++ w/src/net.cpp\r\n@@ -41,12 +41,13 @@\r\n // with Ubuntu 16.04 LTS and Debian 8 libminiupnpc-dev packages.\r\n static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\");\r\n #endif\r\n \r\n #include <algorithm>\r\n #include <cstdint>\r\n+#include <functional> /* std::function */\r\n #include <unordered_map>\r\n \r\n #include <math.h>\r\n \r\n /** Maximum number of block-relay-only anchor connections */\r\n static constexpr size_t MAX_BLOCK_RELAY_ONLY_ANCHORS = 2;\r\n@@ -893,38 +894,46 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\r\n     if (a.fRelayTxes != b.fRelayTxes) return a.fRelayTxes;\r\n     if (a.nLastBlockTime != b.nLastBlockTime) return a.nLastBlockTime < b.nLastBlockTime;\r\n     if (a.fRelevantServices != b.fRelevantServices) return b.fRelevantServices;\r\n     return a.nTimeConnected > b.nTimeConnected;\r\n }\r\n \r\n-//! Sort an array by the specified comparator, then erase the last K elements.\r\n-template<typename T, typename Comparator>\r\n-static void EraseLastKElements(std::vector<T> &elements, Comparator comparator, size_t k)\r\n+//! Sort an array by the specified comparator, then erase each one of the last K elements if\r\n+//! `pred(element)` returns true.\r\n+template <typename T, typename Comparator>\r\n+static void EraseLastKElements(\r\n+    std::vector<T>& elements,\r\n+    Comparator comparator,\r\n+    size_t k,\r\n+    std::function<bool(const T&)> pred = [](const T&) { return true; })\r\n {\r\n     std::sort(elements.begin(), elements.end(), comparator);\r\n     size_t eraseSize = std::min(k, elements.size());\r\n-    elements.erase(elements.end() - eraseSize, elements.end());\r\n+    elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), pred),\r\n+                   elements.end());\r\n }\r\n \r\n [[nodiscard]] Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)\r\n {\r\n     // Protect connections with certain characteristics\r\n \r\n+    std::function<bool(const NodeEvictionCandidate&)> pred;\r\n+\r\n     // Deterministically select 4 peers to protect by netgroup.\r\n     // An attacker cannot predict which netgroups will be protected\r\n     EraseLastKElements(vEvictionCandidates, CompareNetGroupKeyed, 4);\r\n     // Protect the 8 nodes with the lowest minimum ping time.\r\n     // An attacker cannot manipulate this metric without physically moving nodes closer to the target.\r\n     EraseLastKElements(vEvictionCandidates, ReverseCompareNodeMinPingTime, 8);\r\n     // Protect 4 nodes that most recently sent us novel transactions accepted into our mempool.\r\n     // An attacker cannot manipulate this metric without performing useful work.\r\n     EraseLastKElements(vEvictionCandidates, CompareNodeTXTime, 4);\r\n     // Protect up to 8 non-tx-relay peers that have sent us novel blocks.\r\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNodeBlockRelayOnlyTime);\r\n-    size_t erase_size = std::min(size_t(8), vEvictionCandidates.size());\r\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return !n.fRelayTxes && n.fRelevantServices; }), vEvictionCandidates.end());\r\n+    const size_t erase_size = std::min(size_t(8), vEvictionCandidates.size());\r\n+    pred = [](const NodeEvictionCandidate& n) { return !n.fRelayTxes && n.fRelevantServices; };\r\n+    EraseLastKElements(vEvictionCandidates, CompareNodeBlockRelayOnlyTime, erase_size, pred);\r\n \r\n     // Protect 4 nodes that most recently sent us novel blocks.\r\n     // An attacker cannot manipulate this metric without performing useful work.\r\n     EraseLastKElements(vEvictionCandidates, CompareNodeBlockTime, 4);\r\n \r\n     // Protect the half of the remaining nodes which have been connected the longest.\r\n@@ -933,22 +942,22 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\r\n     // they're not longest-uptime overall. This helps protect tor peers, which\r\n     // tend to be otherwise disadvantaged under our eviction criteria.\r\n     const size_t initial_size = vEvictionCandidates.size();\r\n     size_t total_protect_size = initial_size / 2;\r\n \r\n     // Pick out up to 1/4 peers that are connected via our tor onion service, sorted by longest uptime.\r\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareOnionTimeConnected);\r\n     const size_t local_erase_size = total_protect_size / 2;\r\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_onion; }), vEvictionCandidates.end());\r\n+    pred = [](const NodeEvictionCandidate& n) { return n.m_is_onion; };\r\n+    EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, local_erase_size, pred);\r\n \r\n     // If no onion peers were removed, extend the same protection to localhost peers, as manually\r\n     // configured hidden services not using -bind will not be detected as inbound onion connections.\r\n     if (initial_size == vEvictionCandidates.size()) {\r\n         // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\r\n-        std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareLocalHostTimeConnected);\r\n-        vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_local; }), vEvictionCandidates.end());\r\n+        pred = [](const NodeEvictionCandidate& n) { return n.m_is_local; };\r\n+        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, local_erase_size, pred);\r\n     }\r\n \r\n     // Calculate how many we removed, and update our total number of peers that\r\n     // we want to protect based on uptime accordingly.\r\n     total_protect_size -= initial_size - vEvictionCandidates.size();\r\n     EraseLastKElements(vEvictionCandidates, ReverseCompareNodeTimeConnected, total_protect_size);\r\n@@ -956,14 +965,15 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\r\n     if (vEvictionCandidates.empty()) return nullopt;\r\n \r\n     // If any remaining peers are preferred for eviction consider only them.\r\n     // This happens after the other preferences since if a peer is really the best by other criteria (esp relaying blocks)\r\n     //  then we probably don't want to evict it no matter what.\r\n     if (std::any_of(vEvictionCandidates.begin(),vEvictionCandidates.end(),[](NodeEvictionCandidate const &n){return n.prefer_evict;})) {\r\n-        vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.begin(),vEvictionCandidates.end(),\r\n-                                  [](NodeEvictionCandidate const &n){return !n.prefer_evict;}),vEvictionCandidates.end());\r\n+        pred = [](const NodeEvictionCandidate& n) { return !n.prefer_evict; };\r\n+        EraseLastKElements(vEvictionCandidates, ReverseCompareNodeTimeConnected,\r\n+                           vEvictionCandidates.size(), pred);\r\n     }\r\n \r\n     // Identify the network group with the most connections and youngest member.\r\n     // (vEvictionCandidates is already sorted by reverse connect time)\r\n     uint64_t naMostConnections;\r\n     unsigned int nMostConnections = 0;\r\n```\r\n</details>\r\n",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-15T09:16:03Z",
      "diff_hunk" : "@@ -923,16 +929,25 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n \n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // Reserve half of these protected spots for localhost peers, even if\n+    // Reserve half of these protected spots for onion and localhost peers, even if\n     // they're not longest-uptime overall. This helps protect tor peers, which\n     // tend to be otherwise disadvantaged under our eviction criteria.\n-    size_t initial_size = vEvictionCandidates.size();\n+    const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n \n-    // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareLocalHostTimeConnected);\n-    size_t local_erase_size = total_protect_size / 2;\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_local; }), vEvictionCandidates.end());\n+    // Pick out up to 1/4 peers that are connected via our tor onion service, sorted by longest uptime.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareOnionTimeConnected);\n+    const size_t local_erase_size = total_protect_size / 2;\n+    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_onion; }), vEvictionCandidates.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r558102071",
      "id" : 558102071,
      "in_reply_to_id" : 550774610,
      "line" : 941,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODEwMjA3MQ==",
      "original_commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "original_line" : 941,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 32,
      "pull_request_review_id" : 569084962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-15T09:16:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/558102071",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r558126886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/558126886"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! I started with the quick patch below on January 2, will compare with your ideas above.\r\n\r\n<details><summary>patch</summary><p>\r\n\r\n```diff\r\n-//! Sort an array by the specified comparator, then erase the last K elements.\r\n+//! Sort an array by the specified comparator, then erase the last K elements where predicate is true.\r\n template<typename T, typename Comparator>\r\n-static void EraseLastKElements(std::vector<T> &elements, Comparator comparator, size_t k)\r\n+static void EraseLastKElements(std::vector<T> &elements, Comparator comparator, size_t k, std::function<bool(const NodeEvictionCandidate&)> predicate = [](NodeEvictionCandidate const &n) { return true ;})\r\n {\r\n     std::sort(elements.begin(), elements.end(), comparator);\r\n-    size_t eraseSize = std::min(k, elements.size());\r\n-    elements.erase(elements.end() - eraseSize, elements.end());\r\n+    size_t erase_size = std::min(k, elements.size());\r\n+    elements.erase(std::remove_if(elements.end() - erase_size, elements.end(), predicate), elements.end());\r\n }\r\n \r\n [[nodiscard]] Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)\r\n@@ -934,16 +934,15 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\r\n     size_t total_protect_size = initial_size / 2;\r\n \r\n     // Pick out up to 1/4 peers that are connected via our tor onion service, sorted by longest uptime.\r\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareOnionTimeConnected);\r\n     const size_t local_erase_size = total_protect_size / 2;\r\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_onion; }), vEvictionCandidates.end());\r\n+    EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, local_erase_size, [](NodeEvictionCandidate const &n) { return n.m_is_onion; });\r\n+;\r\n \r\n     // If no onion peers were removed, extend the same protection to localhost peers, as manually\r\n-    // configured hidden services not using -bind will not be detected as inbound onion connections.\r\n+    // configured hidden services not using -bind=addr:port=onion will not be detected as inbound onion connections.\r\n     if (initial_size == vEvictionCandidates.size()) {\r\n         // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\r\n-        std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareLocalHostTimeConnected);\r\n-        vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_local; }), vEvictionCandidates.end());\r\n+        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, local_erase_size, [](NodeEvictionCandidate const &n) { return n.m_is_local; });\r\n     }\r\n```\r\n</p></details>\r\n",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-15T09:33:15Z",
      "diff_hunk" : "@@ -923,16 +929,25 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n \n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // Reserve half of these protected spots for localhost peers, even if\n+    // Reserve half of these protected spots for onion and localhost peers, even if\n     // they're not longest-uptime overall. This helps protect tor peers, which\n     // tend to be otherwise disadvantaged under our eviction criteria.\n-    size_t initial_size = vEvictionCandidates.size();\n+    const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n \n-    // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareLocalHostTimeConnected);\n-    size_t local_erase_size = total_protect_size / 2;\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_local; }), vEvictionCandidates.end());\n+    // Pick out up to 1/4 peers that are connected via our tor onion service, sorted by longest uptime.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareOnionTimeConnected);\n+    const size_t local_erase_size = total_protect_size / 2;\n+    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_onion; }), vEvictionCandidates.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r558126886",
      "id" : 558126886,
      "in_reply_to_id" : 550774610,
      "line" : 941,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODEyNjg4Ng==",
      "original_commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "original_line" : 941,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 32,
      "pull_request_review_id" : 569097939,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-15T09:33:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/558126886",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r565270556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565270556"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Already used here?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/11d3b5833671db3b884171086489e853738e7ddd/src/test/fuzz/util.h#L272-L273",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-27T12:31:19Z",
      "diff_hunk" : "@@ -21,17 +21,18 @@ FUZZ_TARGET(node_eviction)\n     std::vector<NodeEvictionCandidate> eviction_candidates;\n     while (fuzzed_data_provider.ConsumeBool()) {\n         eviction_candidates.push_back({\n-            fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n+            /* id */ fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n+            /* nTimeConnected */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r565270556",
      "id" : 565270556,
      "in_reply_to_id" : 550767783,
      "line" : 25,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI3MDU1Ng==",
      "original_commit_id" : "0d167683b670cb2220052a7719c8ab32ce479bbd",
      "original_line" : 25,
      "original_position" : 16,
      "original_start_line" : 24,
      "path" : "src/test/fuzz/node_eviction.cpp",
      "position" : 16,
      "pull_request_review_id" : 577285983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : 24,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-27T12:31:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565270556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r565280022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565280022"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Interesting. Are the fuzzers compiled with --std=c++2a?",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-27T12:47:19Z",
      "diff_hunk" : "@@ -21,17 +21,18 @@ FUZZ_TARGET(node_eviction)\n     std::vector<NodeEvictionCandidate> eviction_candidates;\n     while (fuzzed_data_provider.ConsumeBool()) {\n         eviction_candidates.push_back({\n-            fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n+            /* id */ fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n+            /* nTimeConnected */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r565280022",
      "id" : 565280022,
      "in_reply_to_id" : 550767783,
      "line" : 25,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI4MDAyMg==",
      "original_commit_id" : "0d167683b670cb2220052a7719c8ab32ce479bbd",
      "original_line" : 25,
      "original_position" : 16,
      "original_start_line" : 24,
      "path" : "src/test/fuzz/node_eviction.cpp",
      "position" : 16,
      "pull_request_review_id" : 577298543,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : 24,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-27T12:47:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565280022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r565290955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565290955"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No. My guess is that fuzz tests are not compiled with the old compiler that chokes on this syntax and that most compilers support it even in `-std=c++17` mode.",
      "commit_id" : "c16ed372bdc71795fbebc5dbf519a1d748a136dc",
      "created_at" : "2021-01-27T13:04:41Z",
      "diff_hunk" : "@@ -21,17 +21,18 @@ FUZZ_TARGET(node_eviction)\n     std::vector<NodeEvictionCandidate> eviction_candidates;\n     while (fuzzed_data_provider.ConsumeBool()) {\n         eviction_candidates.push_back({\n-            fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeIntegral<int64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n-            fuzzed_data_provider.ConsumeBool(),\n-            fuzzed_data_provider.ConsumeBool(),\n+            /* id */ fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n+            /* nTimeConnected */ fuzzed_data_provider.ConsumeIntegral<int64_t>(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20197#discussion_r565290955",
      "id" : 565290955,
      "in_reply_to_id" : 550767783,
      "line" : 25,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTI5MDk1NQ==",
      "original_commit_id" : "0d167683b670cb2220052a7719c8ab32ce479bbd",
      "original_line" : 25,
      "original_position" : 16,
      "original_start_line" : 24,
      "path" : "src/test/fuzz/node_eviction.cpp",
      "position" : 16,
      "pull_request_review_id" : 577312586,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20197",
      "side" : "RIGHT",
      "start_line" : 24,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-27T13:04:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565290955",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
