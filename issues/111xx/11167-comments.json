[
   {
      "body" : "Would prefer to have simply sending-to (maybe validating/analyzing too?) as a separate PR, before wallet upgrades.\r\n\r\nI'm not sure when it would make sense to convert between P2SH and BIP173...",
      "created_at" : "2017-08-26T22:37:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325165695",
      "id" : 325165695,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-26T22:37:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325165695",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr I agree, but I consider `addwitnessaddress` an RPC to aid with testing, not full support.\r\n\r\n> I'm not sure when it would make sense to convert between P2SH and BIP173...\r\n\r\nI think you're right. I'll remove that.\r\n",
      "created_at" : "2017-08-26T22:38:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325165746",
      "id" : 325165746,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-26T22:42:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325165746",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "addwitnessaddress is very much not actual support, it's a test shim.",
      "created_at" : "2017-08-26T22:45:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325165977",
      "id" : 325165977,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-26T22:45:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325165977",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "But it modifies the wallet, no? Seems useful to review independently from the rest. Especially since it has the additional considerations of what happens if you try to use it and then downgrade to an older version...",
      "created_at" : "2017-08-26T22:58:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325166449",
      "id" : 325166449,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-26T22:58:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325166449",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr Consider that we've since 0.13.1 had support for receiving and spending native witness outputs in the wallet (without that, testing the consensus logic for it would have been much harder), just no way to encode such outputs as strings. So I think the encoding is somewhat orthogonal.\r\n\r\nIt does modify the wallet, but I'm not sure it's worth trying to separate the logic. We only have one data type (`CTxDestination`) to encode things we can receive on or send to. Having the ability to send to something but not being able to encode it ourselves would require separating the two, and I expect would be more work then just implementing it all.\r\n\r\nWallet backward compatibility is only affected when you use an import or `addwitnessaddress` with `p2sh=false` (the default is `true).",
      "created_at" : "2017-08-26T23:00:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325166537",
      "id" : 325166537,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-26T23:06:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325166537",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Added support in Python framework, and some integrated some functional tests into the `segwit.py` test.",
      "created_at" : "2017-08-27T07:49:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325182863",
      "id" : 325182863,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-27T07:49:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325182863",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411503"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IMO `bool Decode(const std::string& str, const std::string& hrp, data& d)` feels better, and this way below it can early return.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T13:12:49Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+/* Copyright (c) 2017 Pieter Wuille\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411503",
      "id" : 135411503,
      "original_commit_id" : "6177ca1446f3d274098bebc5df6dda5017cfb928",
      "original_position" : 125,
      "path" : "src/bech32.cpp",
      "position" : 159,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411503",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411584"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Return in new line?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T13:16:30Z",
      "diff_hunk" : "@@ -235,13 +237,64 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         return EncodeBase58Check(data);\n     }\n \n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n     std::string operator()(const CNoDestination& no) const { return \"\"; }\n };\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n+    auto bech = bech32::Decode(str);\n+    if (bech.first == params.Bech32HRP() && bech.second.size() > 0) {\n+        // Bech32 decoding\n+        int version = bech.second[0];\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                if (data.size() == 20) {\n+                    WitnessV0KeyHash id;\n+                    memcpy(id.begin(), data.data(), 20);\n+                    return id;\n+                }\n+                if (data.size() == 32) {\n+                    WitnessV0ScriptHash id;\n+                    memcpy(id.begin(), data.data(), 32);\n+                    return id;\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) return CNoDestination();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411584",
      "id" : 135411584,
      "original_commit_id" : "ee10c3985e11716b27f1eb0a0bec1e0fcef2e9d9",
      "original_position" : 65,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411584",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sort.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T13:17:36Z",
      "diff_hunk" : "@@ -3,15 +3,18 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"bech32.h\"\n \n #include \"hash.h\"\n #include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n \n #include <assert.h>\n #include <stdint.h>\n #include <string.h>\n #include <vector>\n #include <string>\n+#include <algorithm>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411597",
      "id" : 135411597,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 15,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411597",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411639"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sort.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T13:19:25Z",
      "diff_hunk" : "@@ -0,0 +1,35 @@\n+/* Copyright (c) 2017 Pieter Wuille\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+#include <stdint.h>\n+#include <vector>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411639",
      "id" : 135411639,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 23,
      "path" : "src/bech32.h",
      "position" : null,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411639",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411706"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Must come first? If not which is the cheapest?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T13:22:52Z",
      "diff_hunk" : "@@ -235,13 +237,64 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         return EncodeBase58Check(data);\n     }\n \n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n     std::string operator()(const CNoDestination& no) const { return \"\"; }\n };\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411706",
      "id" : 135411706,
      "original_commit_id" : "ee10c3985e11716b27f1eb0a0bec1e0fcef2e9d9",
      "original_position" : 47,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411706",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411722"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Must come first? If not which is the cheapest?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T13:23:35Z",
      "diff_hunk" : "@@ -212,79 +215,102 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411722",
      "id" : 135411722,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 120,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411722",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416365"
         }
      },
      "author_association" : "OWNER",
      "body" : "It's not often used in the Bitcoin Core codebase, but using pairs for multiple returned values is very typical in C++ (see the return type of [std::map::insert](http://en.cppreference.com/w/cpp/container/map/insert) for example). In C++03 it was a bit verbose to use, but with C++11's `auto` types and `std::tie` for assigning to multiple variables, it's pretty convenient. I'd rather stick with the current approach.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T17:07:43Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+/* Copyright (c) 2017 Pieter Wuille\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416365",
      "id" : 135416365,
      "in_reply_to_id" : 135411503,
      "original_commit_id" : "6177ca1446f3d274098bebc5df6dda5017cfb928",
      "original_position" : 125,
      "path" : "src/bech32.cpp",
      "position" : 159,
      "pull_request_review_id" : 58827231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416365",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416491"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T17:12:30Z",
      "diff_hunk" : "@@ -3,15 +3,18 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"bech32.h\"\n \n #include \"hash.h\"\n #include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n \n #include <assert.h>\n #include <stdint.h>\n #include <string.h>\n #include <vector>\n #include <string>\n+#include <algorithm>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416491",
      "id" : 135416491,
      "in_reply_to_id" : 135411597,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 15,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58827317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416491",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416501"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416501"
         }
      },
      "author_association" : "OWNER",
      "body" : "bech32 is far cheaper (no basis conversion, no SHA256).",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T17:12:51Z",
      "diff_hunk" : "@@ -235,13 +237,64 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         return EncodeBase58Check(data);\n     }\n \n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n     std::string operator()(const CNoDestination& no) const { return \"\"; }\n };\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416501",
      "id" : 135416501,
      "in_reply_to_id" : 135411706,
      "original_commit_id" : "ee10c3985e11716b27f1eb0a0bec1e0fcef2e9d9",
      "original_position" : 47,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58827325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416501",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416505"
         }
      },
      "author_association" : "OWNER",
      "body" : "done",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T17:12:56Z",
      "diff_hunk" : "@@ -235,13 +237,64 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         return EncodeBase58Check(data);\n     }\n \n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n     std::string operator()(const CNoDestination& no) const { return \"\"; }\n };\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n+    auto bech = bech32::Decode(str);\n+    if (bech.first == params.Bech32HRP() && bech.second.size() > 0) {\n+        // Bech32 decoding\n+        int version = bech.second[0];\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                if (data.size() == 20) {\n+                    WitnessV0KeyHash id;\n+                    memcpy(id.begin(), data.data(), 20);\n+                    return id;\n+                }\n+                if (data.size() == 32) {\n+                    WitnessV0ScriptHash id;\n+                    memcpy(id.begin(), data.data(), 32);\n+                    return id;\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) return CNoDestination();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416505",
      "id" : 135416505,
      "in_reply_to_id" : 135411584,
      "original_commit_id" : "ee10c3985e11716b27f1eb0a0bec1e0fcef2e9d9",
      "original_position" : 65,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58827328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416505",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416509"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T17:13:06Z",
      "diff_hunk" : "@@ -0,0 +1,35 @@\n+/* Copyright (c) 2017 Pieter Wuille\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+#include <stdint.h>\n+#include <vector>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416509",
      "id" : 135416509,
      "in_reply_to_id" : 135411639,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 23,
      "path" : "src/bech32.h",
      "position" : null,
      "pull_request_review_id" : 58827331,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416509",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416546"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416546"
         }
      },
      "author_association" : "OWNER",
      "body" : "I haven't benchmarked, but Bech32 should be far cheaper (no SHA256, no basis conversion). There should never be overlap between the addresses, so the order shouldn't matter.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T17:14:41Z",
      "diff_hunk" : "@@ -212,79 +215,102 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416546",
      "id" : 135416546,
      "in_reply_to_id" : 135411722,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 120,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58827359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416546",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135420123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135420123"
         }
      },
      "author_association" : "OWNER",
      "body" : "I arbitrarily chose a bech32 prefix for regtest. Feel free to bikeshed (it doesn't even need to be just 2 characters).",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-27T20:11:53Z",
      "diff_hunk" : "@@ -330,6 +334,8 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n+\n+        bech32_hrp = \"rt\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135420123",
      "id" : 135420123,
      "original_commit_id" : "128c21705204610e15c59a07a0138b3c82a0aac7",
      "original_position" : 23,
      "path" : "src/chainparams.cpp",
      "position" : null,
      "pull_request_review_id" : 58830661,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135420123",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491563"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, in terms of functionality the order doesn't matter. But at the moment most addresses  (don't know numbers) are base58 so for now move `bech32::Decode()` after `DecodeBase58Check()`?\r\n\r\nIt would be cool to move this out of `base58.cpp`, follow up maybe?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-28T10:29:46Z",
      "diff_hunk" : "@@ -212,79 +215,102 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491563",
      "id" : 135491563,
      "in_reply_to_id" : 135411722,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 120,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58906945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491563",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491736"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Early return?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-28T10:30:56Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491736",
      "id" : 135491736,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 113,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 58907127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491736",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491824"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Early return?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-28T10:31:29Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491824",
      "id" : 135491824,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 117,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 58907212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491824",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491958"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Early return?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-28T10:32:14Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) ok = false;\n+    size_t pos = str.rfind('1');\n+    if (ok && str.size() <= 90 && pos != str.npos && pos >= 1 && pos + 7 <= str.size()) {\n+        data values;\n+        values.resize(str.size() - 1 - pos);\n+        for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+            unsigned char c = str[i + pos + 1];\n+            if (CHARSET_REV[c] == -1) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491958",
      "id" : 135491958,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 124,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 58907350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491958",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135591494"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135591494"
         }
      },
      "author_association" : "OWNER",
      "body" : "> Right, in terms of functionality the order doesn't matter. But at the moment most addresses (don't know numbers) are base58 so for now move bech32::Decode() after DecodeBase58Check()?\r\n\r\nI was using a fail-fast approach, making the thing that most quickly fails first. You're right that as long as there are hardly any bech32 addresses, putting Base58 would be overall faster. But none of this is performance critical anyway...",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-28T18:03:21Z",
      "diff_hunk" : "@@ -212,79 +215,102 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135591494",
      "id" : 135591494,
      "in_reply_to_id" : 135411722,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 120,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 59019602,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135591494",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671584"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-29T00:57:35Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) ok = false;\n+    size_t pos = str.rfind('1');\n+    if (ok && str.size() <= 90 && pos != str.npos && pos >= 1 && pos + 7 <= str.size()) {\n+        data values;\n+        values.resize(str.size() - 1 - pos);\n+        for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+            unsigned char c = str[i + pos + 1];\n+            if (CHARSET_REV[c] == -1) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671584",
      "id" : 135671584,
      "in_reply_to_id" : 135491958,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 124,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 59107782,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671584",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671593"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-29T00:57:42Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671593",
      "id" : 135671593,
      "in_reply_to_id" : 135491824,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 117,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 59107793,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671593",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671602"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-08-29T00:57:47Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671602",
      "id" : 135671602,
      "in_reply_to_id" : 135491736,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 113,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 59107801,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671602",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136680925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136680925"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you leave a comment referring the reader to more complete documentation on bech32 (either the BIP or reference repo)? Also would be nice to document somewhere in the codebase what `hrp` stands for.\r\n\r\nI'm thinking something as simple as: \"Bech32 is a data encoding used for some newer address formats. Output consists of a human-readable part (HRP) followed by a separator, then the data itself with a checksum. For more details, see documentation of BIP 173.\"",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-01T23:28:55Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136680925",
      "id" : 136680925,
      "original_commit_id" : "ab8942c4056e1d55446715f1dff0b7187bbfd596",
      "original_position" : 9,
      "path" : "src/bech32.h",
      "position" : 16,
      "pull_request_review_id" : 60259721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136680925",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136723550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136723550"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Maybe use [toupper](http://en.cppreference.com/w/cpp/string/byte/toupper) here to be more descriptive and succinct.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-03T18:55:24Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';\n+                dest = unk;\n+            } else {\n                 BOOST_ERROR(\"Bad addrtype: \" << strTest);\n                 continue;\n             }\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+            BOOST_CHECK_MESSAGE(address == exp_base58string, strprintf(\"mismatch: %s: \\\"%s\\\" != \\\"%s\\\"\", strTest, address, exp_base58string));\n+\n+            CTxDestination dest2 = DecodeDestination(address);\n+            BOOST_CHECK_MESSAGE(dest == dest2, strprintf(\"mismatch in encoding: %s\", strTest));\n+\n+            for (char& c : address) {\n+                if (c >= 'a' && c <= 'z') {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136723550",
      "id" : 136723550,
      "original_commit_id" : "fe4e51c27417c8ef98ef83679092a0813babdc1a",
      "original_position" : 83,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 60259721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136723550",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725195"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-03T20:09:11Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725195",
      "id" : 136725195,
      "in_reply_to_id" : 136680925,
      "original_commit_id" : "ab8942c4056e1d55446715f1dff0b7187bbfd596",
      "original_position" : 9,
      "path" : "src/bech32.h",
      "position" : 16,
      "pull_request_review_id" : 60303902,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725195",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725208"
         }
      },
      "author_association" : "OWNER",
      "body" : "Unfortunately, toupper is locale-dependent, so it can't be used for consistent behaviour.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-03T20:09:51Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';\n+                dest = unk;\n+            } else {\n                 BOOST_ERROR(\"Bad addrtype: \" << strTest);\n                 continue;\n             }\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+            BOOST_CHECK_MESSAGE(address == exp_base58string, strprintf(\"mismatch: %s: \\\"%s\\\" != \\\"%s\\\"\", strTest, address, exp_base58string));\n+\n+            CTxDestination dest2 = DecodeDestination(address);\n+            BOOST_CHECK_MESSAGE(dest == dest2, strprintf(\"mismatch in encoding: %s\", strTest));\n+\n+            for (char& c : address) {\n+                if (c >= 'a' && c <= 'z') {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725208",
      "id" : 136725208,
      "in_reply_to_id" : 136723550,
      "original_commit_id" : "fe4e51c27417c8ef98ef83679092a0813babdc1a",
      "original_position" : 83,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 60303915,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725208",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725506"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725506"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`std::toupper(c, std::locale::classic())`?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-03T20:25:08Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';\n+                dest = unk;\n+            } else {\n                 BOOST_ERROR(\"Bad addrtype: \" << strTest);\n                 continue;\n             }\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+            BOOST_CHECK_MESSAGE(address == exp_base58string, strprintf(\"mismatch: %s: \\\"%s\\\" != \\\"%s\\\"\", strTest, address, exp_base58string));\n+\n+            CTxDestination dest2 = DecodeDestination(address);\n+            BOOST_CHECK_MESSAGE(dest == dest2, strprintf(\"mismatch in encoding: %s\", strTest));\n+\n+            for (char& c : address) {\n+                if (c >= 'a' && c <= 'z') {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725506",
      "id" : 136725506,
      "in_reply_to_id" : 136723550,
      "original_commit_id" : "fe4e51c27417c8ef98ef83679092a0813babdc1a",
      "original_position" : 83,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 60304184,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725506",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725581"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725581"
         }
      },
      "author_association" : "OWNER",
      "body" : "Seems overkill.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-03T20:29:34Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';\n+                dest = unk;\n+            } else {\n                 BOOST_ERROR(\"Bad addrtype: \" << strTest);\n                 continue;\n             }\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+            BOOST_CHECK_MESSAGE(address == exp_base58string, strprintf(\"mismatch: %s: \\\"%s\\\" != \\\"%s\\\"\", strTest, address, exp_base58string));\n+\n+            CTxDestination dest2 = DecodeDestination(address);\n+            BOOST_CHECK_MESSAGE(dest == dest2, strprintf(\"mismatch in encoding: %s\", strTest));\n+\n+            for (char& c : address) {\n+                if (c >= 'a' && c <= 'z') {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725581",
      "id" : 136725581,
      "in_reply_to_id" : 136723550,
      "original_commit_id" : "fe4e51c27417c8ef98ef83679092a0813babdc1a",
      "original_position" : 83,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 60304254,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725581",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Include a test with v1+ address?",
      "created_at" : "2017-09-05T23:22:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327330449",
      "id" : 327330449,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-05T23:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327330449",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@instagibbs Done",
      "created_at" : "2017-09-06T00:36:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327341082",
      "id" : 327341082,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-06T00:36:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327341082",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "super surprising to me that regtest has a different human readable part: `bcrt1`.\r\n\r\nLegacy addresses shared prefix between testnet and regtest. Perhaps note this somewhere in the code and/or in this PR description.",
      "created_at" : "2017-09-06T21:05:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327612679",
      "id" : 327612679,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-06T21:06:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327612679",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> super surprising to me that regtest has a different human readable part: bcrt1.\r\n\r\nThat was surprising to me too, but I found it a pleasant surprise. It's not like prefixes are a very rare resource, this decreases ambiguity, and fits in with regtest getting its own RPC port in #10825.",
      "created_at" : "2017-09-06T21:57:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327623706",
      "id" : 327623706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-06T21:57:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327623706",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Definitely not arguing against it!\n\nOn Wed, Sep 6, 2017 at 5:58 PM, Wladimir J. van der Laan <\nnotifications@github.com> wrote:\n\n> super surprising to me that regtest has a different human readable part:\n> bcrt1.\n>\n> That was surprising to me too, but I found it a pleasant surprise. It's\n> not like prefixes are a very rare resource, this decreases ambiguity, and\n> fits in with regtest getting its own RPC port in #10825\n> <https://github.com/bitcoin/bitcoin/pull/10825>.\n>\n> Ã¢ÂÂ\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327623706>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AFgC0yE1TXYCzEvLBbEeCPST4eRCXuW4ks5sfxWYgaJpZM4PDot9>\n> .\n>\n",
      "created_at" : "2017-09-06T22:06:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327625447",
      "id" : 327625447,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-06T22:06:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327625447",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137415679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137415679"
         }
      },
      "author_association" : "MEMBER",
      "body" : "move this inside of the else statement below",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-06T23:29:58Z",
      "diff_hunk" : "@@ -1241,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript redeemscript = GetScriptForDestination(w.result);\n+    if (!w.already_witness) pwallet->AddCScript(redeemscript);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137415679",
      "id" : 137415679,
      "original_commit_id" : "ccc6a163b9e22919c76b0bbe061ed5a6081c2965",
      "original_position" : 102,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61079274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137415679",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137415870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137415870"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this is more aptly described as a witness program script, since `w.result`  will always be a witness program.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-06T23:31:28Z",
      "diff_hunk" : "@@ -1241,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript redeemscript = GetScriptForDestination(w.result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137415870",
      "id" : 137415870,
      "original_commit_id" : "ccc6a163b9e22919c76b0bbe061ed5a6081c2965",
      "original_position" : 101,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61079274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137415870",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137424201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137424201"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-07T00:43:48Z",
      "diff_hunk" : "@@ -1241,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript redeemscript = GetScriptForDestination(w.result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137424201",
      "id" : 137424201,
      "in_reply_to_id" : 137415870,
      "original_commit_id" : "ccc6a163b9e22919c76b0bbe061ed5a6081c2965",
      "original_position" : 101,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61088883,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137424201",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137424207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137424207"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-07T00:43:53Z",
      "diff_hunk" : "@@ -1241,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript redeemscript = GetScriptForDestination(w.result);\n+    if (!w.already_witness) pwallet->AddCScript(redeemscript);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137424207",
      "id" : 137424207,
      "in_reply_to_id" : 137415679,
      "original_commit_id" : "ccc6a163b9e22919c76b0bbe061ed5a6081c2965",
      "original_position" : 102,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61088888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137424207",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "quick nit reminder, TX_WITNESS_UNKNOWN isn't explicitly handled in CombineSignatures/SignStep",
      "created_at" : "2017-09-07T18:30:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327885311",
      "id" : 327885311,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-07T18:30:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327885311",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137915138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137915138"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is this not ```&data[pubkey_prefix.size()]```  (or ```data.data() +  pubkey_prefix.size()```) ?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T01:26:42Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n-\n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // Base58 decoding\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == 20 + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[1], 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137915138",
      "id" : 137915138,
      "original_commit_id" : "2719a42b3b5947f7728530499866eefd4fd5e05a",
      "original_position" : 115,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 61651564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137915138",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK other than those two nits, and excluding the bech32 implementation itself. It looks sane, but I'd like to audit more thoroughly before ACKing.",
      "created_at" : "2017-09-09T01:42:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328246605",
      "id" : 328246605,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-09T01:42:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328246605",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137922308"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137922308"
         }
      },
      "author_association" : "OWNER",
      "body" : "Nice catch, fixed!",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T09:10:08Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n-\n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // Base58 decoding\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == 20 + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[1], 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137922308",
      "id" : 137922308,
      "in_reply_to_id" : 137915138,
      "original_commit_id" : "2719a42b3b5947f7728530499866eefd4fd5e05a",
      "original_position" : 115,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 61658901,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137922308",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923351"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923351"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`{ }` just to be consistent with the previous one-line if statements in this function?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T10:23:20Z",
      "diff_hunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return std::make_pair(std::string(), data());\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    data values;\n+    values.resize(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        if (CHARSET_REV[c] == -1) {\n+            return std::make_pair(std::string(), data());\n+        }\n+        values[i] = CHARSET_REV[c];\n+    }\n+    std::string hrp;\n+    for (size_t i = 0; i < pos; ++i) {\n+        hrp += LowerCase(str[i]);\n+    }\n+    if (!VerifyChecksum(hrp, values)) return std::make_pair(std::string(), data());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923351",
      "id" : 137923351,
      "original_commit_id" : "25b31c16cacec5936d81b2f7e6dcbb4556c3e581",
      "original_position" : 134,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 61659932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923351",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923359"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Tiny nit, end-of-namespace comment? Same for other namespaces in this file and in bech32.h",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T10:23:41Z",
      "diff_hunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923359",
      "id" : 137923359,
      "original_commit_id" : "25b31c16cacec5936d81b2f7e6dcbb4556c3e581",
      "original_position" : 105,
      "path" : "src/bech32.cpp",
      "position" : 156,
      "pull_request_review_id" : 61659932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923359",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923611"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Move `default=true` into the brackets after `optional` to be consistent with other RPCs",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T10:42:12Z",
      "diff_hunk" : "@@ -1213,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional) Embed inside P2SH (default: true)\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923611",
      "id" : 137923611,
      "original_commit_id" : "d46216bc25e5126017a2291740f8ce956f19425b",
      "original_position" : 77,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61659932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923611",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923711"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why BIP173 not Bech32?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T10:49:11Z",
      "diff_hunk" : "@@ -1213,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional) Embed inside P2SH (default: true)\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH or BIP173).\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923711",
      "id" : 137923711,
      "original_commit_id" : "d46216bc25e5126017a2291740f8ce956f19425b",
      "original_position" : 81,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61659932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923711",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923807"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`vSolutions[0].data()`? Same for `TX_WITNESS_V0_SCRIPTHASH` case below",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T10:56:16Z",
      "diff_hunk" : "@@ -198,6 +203,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        memcpy(hash.begin(), &vSolutions[0][0], 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923807",
      "id" : 137923807,
      "original_commit_id" : "0e04862cac417ff021c2268fe1ccef178f7dc0ef",
      "original_position" : 34,
      "path" : "src/script/standard.cpp",
      "position" : null,
      "pull_request_review_id" : 61659932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923807",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934415"
         }
      },
      "author_association" : "OWNER",
      "body" : "Bech32 is the generic encoding format (and should be contrasted with Base58Check), BIP173 specifies a specific way of encoding SegWit addresses using Bech32 (like P2SH/BIP13 specifies a specific way of encoding BIP16 addresses using Base58Check).",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T20:17:52Z",
      "diff_hunk" : "@@ -1213,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional) Embed inside P2SH (default: true)\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH or BIP173).\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934415",
      "id" : 137934415,
      "in_reply_to_id" : 137923711,
      "original_commit_id" : "d46216bc25e5126017a2291740f8ce956f19425b",
      "original_position" : 81,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61670221,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934415",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934921"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done again - I somehow lost this change.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T20:42:56Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934921",
      "id" : 137934921,
      "in_reply_to_id" : 136680925,
      "original_commit_id" : "ab8942c4056e1d55446715f1dff0b7187bbfd596",
      "original_position" : 9,
      "path" : "src/bech32.h",
      "position" : 16,
      "pull_request_review_id" : 61670646,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934921",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934936"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T20:43:32Z",
      "diff_hunk" : "@@ -198,6 +203,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        memcpy(hash.begin(), &vSolutions[0][0], 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934936",
      "id" : 137934936,
      "in_reply_to_id" : 137923807,
      "original_commit_id" : "0e04862cac417ff021c2268fe1ccef178f7dc0ef",
      "original_position" : 34,
      "path" : "src/script/standard.cpp",
      "position" : null,
      "pull_request_review_id" : 61670666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934936",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934939"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T20:43:38Z",
      "diff_hunk" : "@@ -1213,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional) Embed inside P2SH (default: true)\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934939",
      "id" : 137934939,
      "in_reply_to_id" : 137923611,
      "original_commit_id" : "d46216bc25e5126017a2291740f8ce956f19425b",
      "original_position" : 77,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61670668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934939",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934940"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T20:43:43Z",
      "diff_hunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return std::make_pair(std::string(), data());\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    data values;\n+    values.resize(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        if (CHARSET_REV[c] == -1) {\n+            return std::make_pair(std::string(), data());\n+        }\n+        values[i] = CHARSET_REV[c];\n+    }\n+    std::string hrp;\n+    for (size_t i = 0; i < pos; ++i) {\n+        hrp += LowerCase(str[i]);\n+    }\n+    if (!VerifyChecksum(hrp, values)) return std::make_pair(std::string(), data());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934940",
      "id" : 137934940,
      "in_reply_to_id" : 137923351,
      "original_commit_id" : "25b31c16cacec5936d81b2f7e6dcbb4556c3e581",
      "original_position" : 134,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 61670670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934940",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934943"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-09T20:43:51Z",
      "diff_hunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934943",
      "id" : 137934943,
      "in_reply_to_id" : 137923359,
      "original_commit_id" : "25b31c16cacec5936d81b2f7e6dcbb4556c3e581",
      "original_position" : 105,
      "path" : "src/bech32.cpp",
      "position" : 156,
      "pull_request_review_id" : 61670674,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934943",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "I think I've addressed all comments. I've also added a few extra comments in some places.\r\n\r\n> quick nit reminder, TX_WITNESS_UNKNOWN isn't explicitly handled in CombineSignatures/SignStep\r\n\r\nFixed.",
      "created_at" : "2017-09-09T20:44:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328302369",
      "id" : 328302369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-09T20:44:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328302369",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Rebased on top of #11297 to hopefully address the Travis issue.",
      "created_at" : "2017-09-10T06:50:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328323834",
      "id" : 328323834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-10T06:50:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328323834",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "should fix https://github.com/bitcoin/bitcoin/issues/10924 I made tests on https://github.com/NicolasDorier/bitcoin/commits/importaddresssegwit can you include them @sipa  ? (this one https://github.com/NicolasDorier/bitcoin/commit/a17a74708ddfc8628d5943e0835ff45eb54e06b5)",
      "created_at" : "2017-09-10T07:52:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328326104",
      "id" : 328326104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-10T07:56:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328326104",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@NicolasDorier Cherry-picked with some refactoring and merging into segwit.py.",
      "created_at" : "2017-09-10T19:39:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328366344",
      "id" : 328366344,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-10T19:39:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328366344",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "seems good for me.\r\n\r\nWill try later this PR against NTumbleBit. I am using P2SH-P2WSH right now because core was not supporting otherwise. I should be able to move to pure P2WSH thanks to this PR.",
      "created_at" : "2017-09-11T04:10:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328410572",
      "id" : 328410572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-11T04:10:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328410572",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "FYI, this BIP is now supported in Electrum, and will be part of the next release",
      "created_at" : "2017-09-12T09:08:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328791629",
      "id" : 328791629,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-12T09:22:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328791629",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2343238?v=4",
         "events_url" : "https://api.github.com/users/ecdsa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ecdsa/followers",
         "following_url" : "https://api.github.com/users/ecdsa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ecdsa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ecdsa",
         "id" : 2343238,
         "login" : "ecdsa",
         "organizations_url" : "https://api.github.com/users/ecdsa/orgs",
         "received_events_url" : "https://api.github.com/users/ecdsa/received_events",
         "repos_url" : "https://api.github.com/users/ecdsa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ecdsa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ecdsa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ecdsa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138758464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138758464"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and in other places where an empty string is returned prefer:\r\n```cpp\r\nreturn {};\r\n```\r\nSee https://stackoverflow.com/a/26588207.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-13T22:41:59Z",
      "diff_hunk" : "@@ -212,86 +216,103 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138758464",
      "id" : 138758464,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 113,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 62598245,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138758464",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138760424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138760424"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Swap conditions?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-13T22:54:22Z",
      "diff_hunk" : "@@ -212,86 +216,103 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // Base58 decoding\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == 20 + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[pubkey_prefix.size()], 20);\n+            return CKeyID(hash);\n+        }\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == 20 + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[script_prefix.size()], 20);\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.first == params.Bech32HRP() && bech.second.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138760424",
      "id" : 138760424,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 159,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 62600302,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138760424",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138760859"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138760859"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```cpp\r\n} // namespace\r\n```",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-13T22:57:01Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138760859",
      "id" : 138760859,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 90,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 62600747,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138760859",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138794570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138794570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ohh heh I must have misclicked and put my comment on the wrong line, I thought I pointed this one out already but it seems I just commented on the end of a function",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-14T04:25:20Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138794570",
      "id" : 138794570,
      "in_reply_to_id" : 138760859,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 90,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 62637165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138794570",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807493"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-14T06:36:09Z",
      "diff_hunk" : "@@ -212,86 +216,103 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807493",
      "id" : 138807493,
      "in_reply_to_id" : 138758464,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 113,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 62651301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807493",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807508"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-14T06:36:16Z",
      "diff_hunk" : "@@ -212,86 +216,103 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // Base58 decoding\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == 20 + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[pubkey_prefix.size()], 20);\n+            return CKeyID(hash);\n+        }\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == 20 + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[script_prefix.size()], 20);\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.first == params.Bech32HRP() && bech.second.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807508",
      "id" : 138807508,
      "in_reply_to_id" : 138760424,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 159,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 62651314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807508",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807524"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807524"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-14T06:36:23Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807524",
      "id" : 138807524,
      "in_reply_to_id" : 138760859,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 90,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 62651332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807524",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138843438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138843438"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```py\r\ntxid = self.nodes[1].sendrawtransaction(rawtxfund)\r\n```\r\nAnd remove above?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-14T09:35:55Z",
      "diff_hunk" : "@@ -570,6 +584,30 @@ def run_test(self):\n         self.nodes[0].importprivkey(\"cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\")\n         self.create_and_mine_tx_from_txids(solvable_txid)\n \n+        # Test that importing native P2WPKH/P2WSH scripts works\n+        for use_p2wsh in [False, True]:\n+            if use_p2wsh:\n+                scriptPubKey = \"00203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a\"\n+                transaction = \"01000000000100e1f505000000002200203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a00000000\"\n+            else:\n+                scriptPubKey = \"a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d87\"\n+                transaction = \"01000000000100e1f5050000000017a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d8700000000\"\n+\n+            self.nodes[1].importaddress(scriptPubKey, \"\", False)\n+            rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n+            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            txid = self.nodes[1].decoderawtransaction(rawtxfund)[\"txid\"]\n+\n+            self.nodes[1].sendrawtransaction(rawtxfund)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138843438",
      "id" : 138843438,
      "original_commit_id" : "003698729402b9015e101cac3d71d57b7805c0ce",
      "original_position" : 93,
      "path" : "test/functional/segwit.py",
      "position" : null,
      "pull_request_review_id" : 62691977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138843438",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "tACK https://github.com/bitcoin/bitcoin/pull/11167/commits/0571b9271b27ce2767e9c7034c23facb495fab65\r\n\r\nDid a couple commits on top to get hdkey info returned with native segwit keyhashes. Something like this can be done as a quick followup, perhaps a modified version of #11089: https://github.com/instagibbs/bitcoin/commits/fullseg",
      "created_at" : "2017-09-14T21:24:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-329613268",
      "id" : 329613268,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-14T21:24:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/329613268",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183195"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this the right copyright header (here and in `bech32.h` and elsewhere)?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T15:43:00Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183195",
      "id" : 139183195,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 1,
      "path" : "src/bech32.cpp",
      "position" : 1,
      "pull_request_review_id" : 63083455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183195",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183428"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't see the comment... I think you lost it again.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T15:43:58Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183428",
      "id" : 139183428,
      "in_reply_to_id" : 136680925,
      "original_commit_id" : "ab8942c4056e1d55446715f1dff0b7187bbfd596",
      "original_position" : 9,
      "path" : "src/bech32.h",
      "position" : 16,
      "pull_request_review_id" : 63083455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183428",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183925"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this should be above with the `TX_NULL_DATA` and `TX_NONSTANDARD` cases.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T15:46:07Z",
      "diff_hunk" : "@@ -142,6 +142,9 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n             return ISMINE_SPENDABLE;\n         break;\n     }\n+\n+    case TX_WITNESS_UNKNOWN:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183925",
      "id" : 139183925,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 5,
      "path" : "src/script/ismine.cpp",
      "position" : null,
      "pull_request_review_id" : 63083455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183925",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139186921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139186921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It took me a while to figure out how this function implements Bech32.  Not sure if this is out of scope since you're bringing this reference implementation in from another repo, and maybe these idioms here are common for math code, but as a newcomer to this I would have found it helpful to explain:\r\n\r\na) initializing chk = 1 is how we implement the prepending of a {1} to the values being encoded (which is done to prevent zero-prefixing a valid string from being valid); \r\n\r\nb) chk is a 30-bit integer, and each 5 bits is a coefficient of a degree 5 polynomial over GF(32) (perhaps also give the particular construction of GF(32) used here);\r\n\r\nc) the hardcoded values (0x3b6a57b2UL etc) are similar 30-bit integers, each 5 bits of which represents a coefficient of a degree 5 polynomial; the first of which represents the generator function g(x) for the BCH code, and subsequent values represent alpha * g(x), alpha^2 * g(x), etc. (where alpha is in GF(32) and is a generator of the multiplicative group).  (It might be helpful to others to explicitly write out these polynomials; I did that myself to verify them.)\r\n\r\nd) each step through the loop, we're multiplying the existing polynomial stored in chk by x (which corresponds to right shift of 5 bits) and adding in the new value as the constant term, and using the generator polynomial (and its multiples) to replace the x^6 term that is removed by adding in polynomials of degree less than 6.  (Perhaps this can be phrased better than I just did.)",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T15:58:10Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139186921",
      "id" : 139186921,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 35,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63087732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139186921",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139187109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139187109"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps document the fancy bit arithmetic and negation being done here to avoid the conditional?  I find the type conversions here a bit confusing -- we start with a uint8_t and calculate either a 0 or 1.  Then we negate it -- still as a uint8_t? -- and then cast to an unsigned long to do the final bit operation?  It's not clear to me that the negation and then promotion must result in 0xffffffff versus 0xff.  \r\n\r\nOh -- maybe what's happening is that the promotion from uint8_t to uint happens with the initial bitshift or the first bitwise and, so the negation is already on a 32-bit type?  That would seem more logical I guess...",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T15:58:57Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139187109",
      "id" : 139187109,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 45,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63087732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139187109",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139187633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139187633"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps parens around the << operator?  Order of operations between << and ^ was not obvious to me without looking this up.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T16:01:16Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139187633",
      "id" : 139187633,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 40,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63087732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139187633",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139192440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139192440"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Might be helpful to document the `^ 1` here comes from the requirement that the reminder mod g(x) be 1 (rather than 0).",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T16:23:23Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139192440",
      "id" : 139192440,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 81,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63087732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139192440",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232521"
         }
      },
      "author_association" : "OWNER",
      "body" : "I think so.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T19:32:49Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232521",
      "id" : 139232521,
      "in_reply_to_id" : 139183195,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 1,
      "path" : "src/bech32.cpp",
      "position" : 1,
      "pull_request_review_id" : 63141983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232521",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232558"
         }
      },
      "author_association" : "OWNER",
      "body" : "Nice catch, done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T19:33:02Z",
      "diff_hunk" : "@@ -142,6 +142,9 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n             return ISMINE_SPENDABLE;\n         break;\n     }\n+\n+    case TX_WITNESS_UNKNOWN:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232558",
      "id" : 139232558,
      "in_reply_to_id" : 139183925,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 5,
      "path" : "src/script/ismine.cpp",
      "position" : null,
      "pull_request_review_id" : 63142029,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232558",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232621"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232621"
         }
      },
      "author_association" : "OWNER",
      "body" : "I've added a long explanation.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T19:33:21Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232621",
      "id" : 139232621,
      "in_reply_to_id" : 139186921,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 35,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63142098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232621",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232646"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232646"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T19:33:29Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232646",
      "id" : 139232646,
      "in_reply_to_id" : 139187633,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 40,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63142129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232646",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232787"
         }
      },
      "author_association" : "OWNER",
      "body" : "I've replaced it with much more readable conditions. I've verified that at least GCC 6.3 compiles it to efficient code (without any jumps).",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T19:34:15Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232787",
      "id" : 139232787,
      "in_reply_to_id" : 139187109,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 45,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63142304,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232787",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232808"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T19:34:23Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232808",
      "id" : 139232808,
      "in_reply_to_id" : 139192440,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 81,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63142329,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232808",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139233636"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139233636"
         }
      },
      "author_association" : "OWNER",
      "body" : "It's there, just a bit higher up in the file.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-15T19:39:22Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139233636",
      "id" : 139233636,
      "in_reply_to_id" : 136680925,
      "original_commit_id" : "ab8942c4056e1d55446715f1dff0b7187bbfd596",
      "original_position" : 9,
      "path" : "src/bech32.h",
      "position" : 16,
      "pull_request_review_id" : 63143410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139233636",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139290141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139290141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, just checking since most files in this repo have `Copyright (c) The Bitcoin Core developers`",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-16T16:28:43Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139290141",
      "id" : 139290141,
      "in_reply_to_id" : 139183195,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 1,
      "path" : "src/bech32.cpp",
      "position" : 1,
      "pull_request_review_id" : 63206984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139290141",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139556463"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139556463"
         }
      },
      "author_association" : "MEMBER",
      "body" : "gross.  Can these tests be changed to work with whole script pubkeys rather than tweaking the addrType?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-18T22:26:46Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139556463",
      "id" : 139556463,
      "original_commit_id" : "d270d5eee537fe3a769eb9c9fc12b2de59f16047",
      "original_position" : 69,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 63505995,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139556463",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139838199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139838199"
         }
      },
      "author_association" : "OWNER",
      "body" : "> gross\r\n\r\nI agree. \r\n\r\n> Can these tests be changed to work with whole script pubkeys rather than tweaking the addrType?\r\n\r\nDone. I've added an extra commit to first refactor the tests into testing scriptPubKeys.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-19T22:51:40Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139838199",
      "id" : 139838199,
      "in_reply_to_id" : 139556463,
      "original_commit_id" : "d270d5eee537fe3a769eb9c9fc12b2de59f16047",
      "original_position" : 69,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 63826385,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139838199",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139884736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139884736"
         }
      },
      "author_association" : "MEMBER",
      "body" : "no bcrt tests?",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-20T06:32:30Z",
      "diff_hunk" : "@@ -422,5 +422,59 @@\n             \"isPrivkey\": false,\n             \"isTestnet\": false\n         }\n+    ],\n+    [\n+        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\",\n+        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\",\n+        \"00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": true,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx\",\n+        \"5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1sw50qa3jx3s\",\n+        \"6002751e\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj\",\n+        \"5210751e76e8199196d454941c45d1b3a323\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy\",\n+        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": true,\n+            \"tryCaseFlip\": true\n+        }\n     ]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139884736",
      "id" : 139884736,
      "original_commit_id" : "ed22f8e0f98dfa41e8814744d1b905e2bf5c3d23",
      "original_position" : 58,
      "path" : "src/test/data/base58_keys_valid.json",
      "position" : null,
      "pull_request_review_id" : 63877474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139884736",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139893394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139893394"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "6fd6aa6e5682238f0dfe336615c6f2323720aaa8",
      "created_at" : "2017-09-20T07:27:53Z",
      "diff_hunk" : "@@ -422,5 +422,59 @@\n             \"isPrivkey\": false,\n             \"isTestnet\": false\n         }\n+    ],\n+    [\n+        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\",\n+        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\",\n+        \"00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": true,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx\",\n+        \"5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1sw50qa3jx3s\",\n+        \"6002751e\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj\",\n+        \"5210751e76e8199196d454941c45d1b3a323\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy\",\n+        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": true,\n+            \"tryCaseFlip\": true\n+        }\n     ]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139893394",
      "id" : 139893394,
      "in_reply_to_id" : 139884736,
      "original_commit_id" : "ed22f8e0f98dfa41e8814744d1b905e2bf5c3d23",
      "original_position" : 58,
      "path" : "src/test/data/base58_keys_valid.json",
      "position" : null,
      "pull_request_review_id" : 63887124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-20T07:27:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139893394",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Addressed @gmaxwell's comment about `bcrt` tests, by adding an extra commit that introduces regtest examples to base58_tests, and then extending those in the BIP173 tests commit.",
      "created_at" : "2017-09-20T19:35:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-330957618",
      "id" : 330957618,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-20T19:35:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330957618",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Related to these changes: https://github.com/bitcoin/bips/pull/587\r\nI think this is a bug in violation of the BIP, but I'd like feedback on my BIP change proposals, in-case I mis-interpreted something:\r\n```\r\nsegwit_addr.bech32_encode('A', [])\r\n'A1g7sgd8'  # violates \"The lowercase form is used when determining a character's value for checksum purposes.\"\r\n```",
      "created_at" : "2017-09-22T14:54:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331470140",
      "id" : 331470140,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-22T14:54:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/331470140",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/6440430?v=4",
         "events_url" : "https://api.github.com/users/mruddy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mruddy/followers",
         "following_url" : "https://api.github.com/users/mruddy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mruddy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mruddy",
         "id" : 6440430,
         "login" : "mruddy",
         "organizations_url" : "https://api.github.com/users/mruddy/orgs",
         "received_events_url" : "https://api.github.com/users/mruddy/received_events",
         "repos_url" : "https://api.github.com/users/mruddy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mruddy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mruddy"
      }
   }
]
