[
   {
      "author_association" : "MEMBER",
      "body" : "Reviewers: This PR is being discussed in the review club at https://bitcoincore.reviews/19055\r\n\r\n(A `Review club` tag for this PR would be helpful to indicate that review notes and discussion are available there.)",
      "created_at" : "2020-05-26T11:38:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-633971712",
      "id" : 633971712,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzk3MTcxMg==",
      "updated_at" : "2020-05-26T11:38:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633971712",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Some history for the context:\r\n* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html\r\n* based on #10434",
      "created_at" : "2020-05-26T12:02:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-633981639",
      "id" : 633981639,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzk4MTYzOQ==",
      "updated_at" : "2020-05-26T12:02:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633981639",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@gzhao408 I think there is a bit of a miscommunication. The term \"rolling\" here just means efficient addition as well as deletion from the set being hashed. There is no actual window, as sets are unordered. Perhaps the term was chosen badly (which would be my fault).\r\n\r\nAll of LtHash, MuHash, and ECMH support incremental addition and deletion. The \"non-rolling\" mention in @fjahr's document refers to the fact that he hasn't implemented continuous UTXO set hashing with these functions, only a from scratch computation. It has nothing to do with what these functions can or can't do.\r\n\r\nThe primary difference between MuHash and ECMH is caching:\r\n\r\n* ECMH is more CPU time overall, but the time is mostly in computing the \"effect\" of a set of additions/deletions; applying that effect to the overall hash is extremely cheap. Furthermore, a 64-byte precomputed \"patch\" per set of additions/deletions can be created, which means a patch could be cached per-transaction, and then very cheaply applied when the transaction confirms. So it allows doing most of the work ahead of time (before the block arrives).\r\n\r\n* MuHash is cheaper overall, but the time is mostly in applying the changes to the overall hash. This means caching isn't very useful (and also the caches would be 768 bytes, which is pretty large). If the intent is computing things in the background, or at block connection time, then this is a better (and simpler) approach.",
      "created_at" : "2020-05-26T16:45:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634142704",
      "id" : 634142704,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDE0MjcwNA==",
      "updated_at" : "2020-05-26T16:45:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634142704",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "AaaAHhhh, thank you @sipa for the clarification! \r\n\r\n> The term \"rolling\" here just means efficient addition as well as deletion from the set being hashed.\r\n> The \"non-rolling\" mention in @fjahr's document refers to the fact that he hasn't implemented continuous UTXO set hashing with these functions\r\n\r\nThis makes a lot more sense; I had thought he meant the hash function itself is rolling/non-rolling. I didn't have much info but was super interested and went for a textbook definition ð now I feel embarrassed. This information is super helpful, thanks!",
      "created_at" : "2020-05-26T17:08:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634155367",
      "id" : 634155367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDE1NTM2Nw==",
      "updated_at" : "2020-05-26T17:08:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634155367",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/gzhao408/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gzhao408/followers",
         "following_url" : "https://api.github.com/users/gzhao408/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gzhao408/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gzhao408",
         "id" : 25183001,
         "login" : "gzhao408",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/gzhao408/orgs",
         "received_events_url" : "https://api.github.com/users/gzhao408/received_events",
         "repos_url" : "https://api.github.com/users/gzhao408/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gzhao408/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gzhao408/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gzhao408"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It also seems that ECMH (which is noted as non-rolling) performed better and has a maintainability plus since it's part of Secp256k1.\r\n\r\nPlease also note that there is an implementation of ECMH that is an open pull request to Secp256k1 but it is not merged and has been stale for some time. So the work to get it merged is more or less the same and I don't think there is a big difference in maintainability between having it in core or secp.",
      "created_at" : "2020-05-26T18:44:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634207235",
      "id" : 634207235,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDIwNzIzNQ==",
      "updated_at" : "2020-05-26T18:44:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634207235",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fjahr I've written a Python implementation of MuHash3072, so it can be more easily tested: https://github.com/sipa/bitcoin/commits/202005_muhash_python (no tests are included, but I've verified it matches the C++ code in a few simple examples).",
      "created_at" : "2020-05-26T21:14:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634282984",
      "id" : 634282984,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDI4Mjk4NA==",
      "updated_at" : "2020-05-26T21:14:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634282984",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-05-26T21:15:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634283316",
      "id" : 634283316,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDI4MzMxNg==",
      "updated_at" : "2020-05-26T21:15:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634283316",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @fjahr I've written a Python implementation of MuHash3072, so it can be more easily tested: [sipa/bitcoin@`202005_muhash_python` (commits)](https://github.com/sipa/bitcoin/commits/202005_muhash_python) (no tests are included, but I've verified it matches the C++ code in a few simple examples).\r\n\r\nAwesome, I have just pulled it in here and will build further tests on top of it.",
      "created_at" : "2020-05-26T22:22:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634312013",
      "id" : 634312013,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDMxMjAxMw==",
      "updated_at" : "2020-05-26T22:22:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634312013",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased and added a6cf0df104728a587283578735e7f11c5f0f2ae4 which allows the user to use the legacy hash with the use of a flag. This will definitely be squashed but I decided to keep it separate for the moment to make discussions easier in the review club tomorrow. I figured I would need to do something like this anyway in order go through a deprecation cycle with `gettxoutsetinfo`, the question is if that is still needed with the flag. Also added 4438aed09e87de0afb37da64ffb5e7489084e8ab which is @sipa 's python implementation of Muhash, currently unused.",
      "created_at" : "2020-05-26T22:28:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634314204",
      "id" : 634314204,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDMxNDIwNA==",
      "updated_at" : "2020-05-26T22:28:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634314204",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431080029"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431080029"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ced54242 nit: sort",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-27T12:31:37Z",
      "diff_hunk" : "@@ -388,6 +388,8 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/hmac_sha512.h \\\n   crypto/poly1305.h \\\n   crypto/poly1305.cpp \\\n+  crypto/muhash.cpp \\\n+  crypto/muhash.h \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431080029",
      "id" : 431080029,
      "line" : 391,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4MDAyOQ==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 391,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : 4,
      "pull_request_review_id" : 419143541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431080029",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431132007"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431132007"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cda20f3 nit: perhaps sort the functions above and this list, e.g. like\r\n\r\n```\r\n$ src/bench/bench_bitcoin -list\r\n...\r\nMuHash, 5, 5000, 0, 0, 0, 0\r\nMuHashAdd, 5, 5000, 0, 0, 0, 0\r\nMuHashDiv, 5, 100, 0, 0, 0, 0\r\nMuHashPrecompute, 5, 5000, 0, 0, 0, 0\r\n\r\n$ src/bench/bench_bitcoin -filter=MuHash*.*\r\n# Benchmark, evals, iterations, total, min, max, median\r\nMuHash, 5, 5000, 0.287426, 7.45603e-06, 1.72302e-05, 1.08339e-05\r\nMuHashAdd, 5, 5000, 0.243778, 7.93741e-06, 1.17234e-05, 9.61388e-06\r\nMuHashDiv, 5, 100, 8.62069, 0.0146344, 0.0216452, 0.0169485\r\nMuHashPrecompute, 5, 5000, 0.0557224, 1.55965e-06, 4.40565e-06, 1.65373e-06\r\n```\r\n",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-27T13:30:41Z",
      "diff_hunk" : "@@ -101,3 +166,8 @@ BENCHMARK(SipHash_32b, 40 * 1000 * 1000);\n BENCHMARK(SHA256D64_1024, 7400);\n BENCHMARK(FastRandom_32bit, 110 * 1000 * 1000);\n BENCHMARK(FastRandom_1bit, 440 * 1000 * 1000);\n+\n+BENCHMARK(MuHash, 5000);\n+BENCHMARK(MuHashPrecompute, 5000);\n+BENCHMARK(MuHashAdd, 5000);\n+BENCHMARK(MuHashDiv, 100);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431132007",
      "id" : 431132007,
      "line" : 193,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzMjAwNw==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 172,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : 124,
      "pull_request_review_id" : 419143541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431132007",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431151719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431151719"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ced54242 and cda20f3f nit: in these four functions above `++i` is preferred over `i++` per doc/developer-notes.md\r\n\r\n5d67c47 same for `src/crypto/muhash.h::L71`",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-27T13:56:46Z",
      "diff_hunk" : "@@ -91,6 +92,70 @@ static void FastRandom_1bit(benchmark::State& state)\n     }\n }\n \n+static void MuHash(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    while (state.KeepRunning()) {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    }\n+}\n+\n+static void MuHashPrecompute(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    while (state.KeepRunning()) {\n+        MuHash3072{key};\n+    }\n+}\n+\n+static void MuHashAdd(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+    while (state.KeepRunning()) {\n+        acc *= muhash;\n+    }\n+}\n+\n+static void MuHashDiv(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+\n+    for (size_t i = 0; i < state.m_num_iters; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431151719",
      "id" : 431151719,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1MTcxOQ==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 150,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : null,
      "pull_request_review_id" : 419143541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431151719",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431199564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431199564"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a6cf0df1 could add the new `bool GetUTXOStats()` next to the existing one -- to ease review, I moved them together.",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-27T14:53:12Z",
      "diff_hunk" : "@@ -66,9 +97,38 @@ bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void\n         pcursor->Next();\n     }\n     if (!outputs.empty()) {\n-        ApplyStats(stats, ss, prevkey, outputs);\n+        ApplyStats(stats, hash, prevkey, outputs);\n     }\n-    stats.hashSerialized = ss.GetHash();\n+\n+    FinalizeHash(hash, stats);\n+\n     stats.nDiskSize = view->EstimateSize();\n     return true;\n }\n+\n+// The legacy hash serializes the hashBlock\n+void PrepareHash(CHashWriter& hash, CCoinsStats& stats) {\n+    hash << stats.hashBlock;\n+}\n+// Muhash does not need the prepare step\n+void PrepareHash(MuHash3072 hash, CCoinsStats& stats) {}\n+\n+void FinalizeHash(CHashWriter& hash, CCoinsStats& stats) {\n+    stats.hashSerialized = hash.GetHash();\n+}\n+void FinalizeHash(MuHash3072 hash, CCoinsStats& stats) {\n+    unsigned char out[384];\n+    hash.Finalize(out);\n+    stats.hashSerialized = (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+}\n+\n+bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats, const std::function<void()>& interruption_point, bool use_muhash)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431199564",
      "id" : 431199564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5OTU2NA==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 125,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/node/coinstats.cpp",
      "position" : null,
      "pull_request_review_id" : 419143541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431199564",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Also verified that, like your added test in `rpc_blockchain.py`, only `utxo_set_hash` varies between `gettxoutsetinfo` in -regtest with each algo.\r\n\r\n```bash \r\n$ bitcoin-cli -regtest gettxoutsetinfo\r\n{\r\n  \"height\": 15599,\r\n  \"bestblock\": \"6e535bc570f9be1b86d21711b23391e4e8f001682b5c6243883744879cdc4f84\",\r\n  \"transactions\": 3216,\r\n  \"txouts\": 3219,\r\n  \"bogosize\": 234987,\r\n  \"utxo_set_hash\": \"c4926481130f6689950e07e0e1f2060277d349b106a94b83145d577d3db4d225\",\r\n  \"disk_size\": 226234,\r\n  \"total_amount\": 14949.99998350\r\n}\r\n$ bitcoin-cli -regtest gettxoutsetinfo true\r\n{\r\n  \"height\": 15599,\r\n  \"bestblock\": \"6e535bc570f9be1b86d21711b23391e4e8f001682b5c6243883744879cdc4f84\",\r\n  \"transactions\": 3216,\r\n  \"txouts\": 3219,\r\n  \"bogosize\": 234987,\r\n  \"utxo_set_hash\": \"1883e99e56927fd5e3b82ccb9e08acd1be7ed0256d4cafe142626ae2fb66ffb4\",\r\n  \"disk_size\": 226234,\r\n  \"total_amount\": 14949.99998350\r\n}\r\n```",
      "created_at" : "2020-05-27T16:01:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634764233",
      "id" : 634764233,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDc2NDIzMw==",
      "updated_at" : "2020-05-27T18:09:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634764233",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: \"separate\" is misspelled in the commit title of cda20f3f897ff88337756cb0c0345b41cec9014e\r\n\r\nIt might be nice to split this in two PRs: One which adds MuHash, and one which updates `gettxoutsetinfo` to support it. I would definitely at least rebase/squash to put all the MuHash additions first and then layer the functionality changes on top.\r\n\r\nEdited to add thought: The next PR could add rolling as well, so this way we don't have an interim state where `gettxoutsetinfo` is even slower than it is now.",
      "created_at" : "2020-05-27T17:10:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634809748",
      "id" : 634809748,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDgwOTc0OA==",
      "updated_at" : "2020-05-27T17:23:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634809748",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/177646?v=4",
         "events_url" : "https://api.github.com/users/narula/events{/privacy}",
         "followers_url" : "https://api.github.com/users/narula/followers",
         "following_url" : "https://api.github.com/users/narula/following{/other_user}",
         "gists_url" : "https://api.github.com/users/narula/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/narula",
         "id" : 177646,
         "login" : "narula",
         "node_id" : "MDQ6VXNlcjE3NzY0Ng==",
         "organizations_url" : "https://api.github.com/users/narula/orgs",
         "received_events_url" : "https://api.github.com/users/narula/received_events",
         "repos_url" : "https://api.github.com/users/narula/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/narula/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/narula/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/narula"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19181 (Add ASM optimizations for MuHash3072 by fjahr)\n* #19145 (Add hash_type options for gettxoutsetinfo by fjahr)\n* #18014 (lib: Optimizing siphash implementation by elichai)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-05-27T20:04:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634910640",
      "id" : 634910640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDkxMDY0MA==",
      "updated_at" : "2020-06-09T02:16:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634910640",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431778760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431778760"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\r\n```\r\n\r\nHow much time is spent on hashing with the legacy hash vs muhash vs none? Imagine someone just wants the `total_amount` as fast as possible.\r\n\r\nIf hashing is slow in general, maybe there should be an option to skip it?",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-28T11:53:20Z",
      "diff_hunk" : "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431778760",
      "id" : 431778760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3ODc2MA==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 975,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 420031955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431778760",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431944665"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431944665"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's a good question but based on my tests (with commented out hashing code) the performance impact of `hash_serialized2` is only small. Results were volatile but on average `gettxoutsetinfo` without the hash was only a few seconds faster (5s - 20s faster, an improvement of ~10%). I think it's not really worth adding an option for that if we can have the index instead.",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-28T15:54:19Z",
      "diff_hunk" : "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431944665",
      "id" : 431944665,
      "in_reply_to_id" : 431778760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NDY2NQ==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 975,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 420256522,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431944665",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432425903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432425903"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thinking about it a little bit more, I think it would be good to have the option for later on when we want to remove the code for `hash_serialized_2`. So I will add it as an option.",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-29T11:36:13Z",
      "diff_hunk" : "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432425903",
      "id" : 432425903,
      "in_reply_to_id" : 431778760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNTkwMw==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 975,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 420873318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432425903",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426282"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "now out of scope of this PR but will reorg it in the follow-up",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-29T11:37:08Z",
      "diff_hunk" : "@@ -66,9 +97,38 @@ bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void\n         pcursor->Next();\n     }\n     if (!outputs.empty()) {\n-        ApplyStats(stats, ss, prevkey, outputs);\n+        ApplyStats(stats, hash, prevkey, outputs);\n     }\n-    stats.hashSerialized = ss.GetHash();\n+\n+    FinalizeHash(hash, stats);\n+\n     stats.nDiskSize = view->EstimateSize();\n     return true;\n }\n+\n+// The legacy hash serializes the hashBlock\n+void PrepareHash(CHashWriter& hash, CCoinsStats& stats) {\n+    hash << stats.hashBlock;\n+}\n+// Muhash does not need the prepare step\n+void PrepareHash(MuHash3072 hash, CCoinsStats& stats) {}\n+\n+void FinalizeHash(CHashWriter& hash, CCoinsStats& stats) {\n+    stats.hashSerialized = hash.GetHash();\n+}\n+void FinalizeHash(MuHash3072 hash, CCoinsStats& stats) {\n+    unsigned char out[384];\n+    hash.Finalize(out);\n+    stats.hashSerialized = (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+}\n+\n+bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats, const std::function<void()>& interruption_point, bool use_muhash)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426282",
      "id" : 432426282,
      "in_reply_to_id" : 431199564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjI4Mg==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 125,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/node/coinstats.cpp",
      "position" : null,
      "pull_request_review_id" : 420873836,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426282",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426338"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-29T11:37:15Z",
      "diff_hunk" : "@@ -91,6 +92,70 @@ static void FastRandom_1bit(benchmark::State& state)\n     }\n }\n \n+static void MuHash(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    while (state.KeepRunning()) {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    }\n+}\n+\n+static void MuHashPrecompute(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    while (state.KeepRunning()) {\n+        MuHash3072{key};\n+    }\n+}\n+\n+static void MuHashAdd(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+    while (state.KeepRunning()) {\n+        acc *= muhash;\n+    }\n+}\n+\n+static void MuHashDiv(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+\n+    for (size_t i = 0; i < state.m_num_iters; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426338",
      "id" : 432426338,
      "in_reply_to_id" : 431151719,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjMzOA==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 150,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : null,
      "pull_request_review_id" : 420873910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426338",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426405"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-29T11:37:23Z",
      "diff_hunk" : "@@ -101,3 +166,8 @@ BENCHMARK(SipHash_32b, 40 * 1000 * 1000);\n BENCHMARK(SHA256D64_1024, 7400);\n BENCHMARK(FastRandom_32bit, 110 * 1000 * 1000);\n BENCHMARK(FastRandom_1bit, 440 * 1000 * 1000);\n+\n+BENCHMARK(MuHash, 5000);\n+BENCHMARK(MuHashPrecompute, 5000);\n+BENCHMARK(MuHashAdd, 5000);\n+BENCHMARK(MuHashDiv, 100);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426405",
      "id" : 432426405,
      "in_reply_to_id" : 431132007,
      "line" : 193,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjQwNQ==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 172,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : 124,
      "pull_request_review_id" : 420873991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426405",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426468"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426468"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-05-29T11:37:31Z",
      "diff_hunk" : "@@ -388,6 +388,8 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/hmac_sha512.h \\\n   crypto/poly1305.h \\\n   crypto/poly1305.cpp \\\n+  crypto/muhash.cpp \\\n+  crypto/muhash.h \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426468",
      "id" : 432426468,
      "in_reply_to_id" : 431080029,
      "line" : 391,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjQ2OA==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 391,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : 4,
      "pull_request_review_id" : 420874073,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426468",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It looks like you removed a bunch of code, and the functional tests, in the last push? If yes, review effort is being thrown away, and perhaps the PR description needs to be updated.",
      "created_at" : "2020-05-29T12:51:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635955599",
      "id" : 635955599,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTk1NTU5OQ==",
      "updated_at" : "2020-05-29T12:52:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635955599",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It looks like you removed a bunch of code, and the functional tests, in the last push? If yes, review effort is being thrown away, and perhaps the PR description needs to be updated.\r\n\r\nYes, I am writing an update at the moment",
      "created_at" : "2020-05-29T12:53:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635956325",
      "id" : 635956325,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTk1NjMyNQ==",
      "updated_at" : "2020-05-29T12:53:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635956325",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> nit: \"separate\" is misspelled in the commit title of [cda20f3](https://github.com/bitcoin/bitcoin/commit/cda20f3f897ff88337756cb0c0345b41cec9014e)\r\n\r\ndone\r\n\r\n",
      "created_at" : "2020-05-29T12:53:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635956487",
      "id" : 635956487,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTk1NjQ4Nw==",
      "updated_at" : "2020-05-29T12:53:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635956487",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for all the reviews so far! I have addressed comments and, based on feedback from the PR review club and others, split it up further to make reviews more manageable and keep discussions more focussed. This now only adds the implementation of `Muhash3072` and `TruncatedSHA512` in C++. The next in the series is https://github.com/bitcoin/bitcoin/pull/19105 and will only add the Python implementation. A PR review club on it will give another chance to dive deeper into implementation details of Muhash3072. The third PR will add let the user use `gettxoutsetinfo` with Muhash, taking feedback into account (WIP). Progress of the different pull requests is now tracked in #18000 (top of the description).",
      "created_at" : "2020-05-29T13:03:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635960689",
      "id" : 635960689,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTk2MDY4OQ==",
      "updated_at" : "2020-05-29T13:03:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635960689",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> * This PR essentially makes `gettxoutsetinfo` too slow to be useable in testnet and mainnet (it times out and raises after 15 minutes); for that reason, until the -coinstatsindex in #18000 is merged, the MuHash algorithm should be opt-in for rpc `gettxoutsetinfo` and not the default\r\n\r\nWill do so in the follow-up that adds the option to the RPC.\r\n\r\n> * What are your plans regarding ECMH?\r\n\r\nI don't have plans for it unless there is a reason to reconsider it as the algorithm of choice over Muhash. The branch with the ECMH implementation in secp256k1 is still there if people want to play with it.\r\n\r\n> * it looks like `TruncatedSHA512Writer` could use unit tests (perhaps just sanity checks if not viable to use test vectors, `CHashWriter` is also not tested directly but used by other unit tests: addrman, hash, sighash)\r\n\r\nI have laid out some thoughts on it [here]( https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-629296641) why it is hard to add meaningful unit tests. I am still thinking about a better solution and might add an implementation of SHA512/256. There is a single sanity check at the bottom of the Muhash test at least. \r\n\r\n> * a fuzz harness would be ideal\r\n\r\nYeah, as I mention in my answer to Sjors, I would like to add it as a follow-up.\r\n\r\n> * do you plan to add tests using the just-added Python MuHash3072 implementation?\r\n\r\n Yes\r\n\r\n> * [06ae4ab](https://github.com/bitcoin/bitcoin/commit/06ae4ab04f010b24bad03ea6a3c728848cd28545) commit message s/256/512/?\r\n\r\ndone\r\n\r\n> * [04d088d](https://github.com/bitcoin/bitcoin/commit/04d088da106d8c7df0d629d21416c824d6568d18) commit message could mention the renaming of `hash_serialized_2` to `utxo_set_hash` and why it was changed (I didn't see any explanation anywhere)\r\n\r\nI was going back and forth on this, which is probably why it is not mentioned. Initially it was named `muhash`, then I thought it should be more general name that makes more sense to the user. But now my tendency is back to naming it muhash, since we want to keep `hash_serialized_2` for longer and there is no guarantee that there will not be another algo used some time in the future which would mean we would probably need to rename it again in order to avoid confusion.\r\n\r\n> * [04d088d](https://github.com/bitcoin/bitcoin/commit/04d088da106d8c7df0d629d21416c824d6568d18) and [a6cf0df](https://github.com/bitcoin/bitcoin/commit/a6cf0df104728a587283578735e7f11c5f0f2ae4) ought to be squashed to one commit; keeping them separate unnecessarily complicates reviewing -- I squashed them locally in order to see the relevant diff, as ApplyStats() is weird enough to review already\r\n\r\nYes, done in follow-up pr\r\n\r\n> * at some point you'll want to add a release note\r\n\r\nyepp\r\n",
      "created_at" : "2020-05-29T13:17:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635967249",
      "id" : 635967249,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTk2NzI0OQ==",
      "updated_at" : "2020-05-29T13:17:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635967249",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it'd be easier to review this code if the PR didn't include the ASM implementation.",
      "created_at" : "2020-06-05T18:29:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-639690930",
      "id" : 639690930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzOTY5MDkzMA==",
      "updated_at" : "2020-06-05T18:29:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639690930",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r436143516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436143516"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is now implemented in #19145.",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-06-05T20:14:59Z",
      "diff_hunk" : "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r436143516",
      "id" : 436143516,
      "in_reply_to_id" : 431778760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0MzUxNg==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 975,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 425598449,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T15:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436143516",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think it'd be easier to review this code if the PR didn't include the ASM implementation.\r\n\r\nYeah, I can split that out easily as well.",
      "created_at" : "2020-06-05T20:16:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-639776914",
      "id" : 639776914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzOTc3NjkxNA==",
      "updated_at" : "2020-06-05T20:16:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639776914",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ASM optimizations moved to https://github.com/bitcoin/bitcoin/pull/19181",
      "created_at" : "2020-06-05T20:24:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-639783978",
      "id" : 639783978,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzOTc4Mzk3OA==",
      "updated_at" : "2020-06-05T20:24:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639783978",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Is there a particular reason for sha512?  Although for some sizes it can be faster w/ a totally naive implementation It is a lot slower on hardware with sha-ni (and presumably somewhat slower than a parallel implementation using 8-way avx sha256).",
      "created_at" : "2020-06-07T07:22:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640169988",
      "id" : 640169988,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDE2OTk4OA==",
      "updated_at" : "2020-06-07T07:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640169988",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@gmaxwell I assume it's SHA512 because of my original code used that. I've pointed out to @fjahr that we should benchmark if SHA256 isn't faster these days (on x86_64, I expect it to be). I hadn't thought of the possibility of parallellizing; that should shift things even further in favor of SHA256.\r\n\r\nFWIW, the original reason was that for typical UTXOs, only one SHA512 compression is enough (it'd be over 55 bytes but below 119), and at the time this was first written, a SHA256 compression on x86_64 was less than twice as fast as a SHA512 one.",
      "created_at" : "2020-06-07T16:33:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640244825",
      "id" : 640244825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDI0NDgyNQ==",
      "updated_at" : "2020-06-07T18:32:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640244825",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> a SHA256 compression on x86_64 was less than twice as fast as a SHA512 one.\r\n\r\nRight, that was my comment on naive code.\r\n\r\n> I hadn't thought of the possibility of parallellizing; that should shift things even further in favor of SHA256.\r\n\r\nWell, make sha256 preferable on more hardware and not just hardware with sha-ni or similar...\r\n\r\n(FWIW, the muhash updating itself could also be parallelized presumably with good effect)\r\n",
      "created_at" : "2020-06-07T18:46:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640262224",
      "id" : 640262224,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDI2MjIyNA==",
      "updated_at" : "2020-06-07T18:46:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640262224",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I finally got around to run these benchmarks and it appears that Truncated512 is still significantly faster on my hardware (`Intel(R) Core(TM) i5-6287U CPU @ 3.10GHz`). But I have seen some strange benchmarks before on this machine, so it would be great if others could run them as well. I pushed the code in a new commit, I can remove it again if it is not valuable enough to keep.\r\n\r\n`SHA256` results (100 bytes):\r\n```\r\n$ src/bench/bench_bitcoin -filter=SHA256_100b -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nSHA256_100b, 50, 1000000, 38.3667, 6.93112e-07, 9.39267e-07, 7.40312e-07\r\nSHA256_100b, 50, 1000000, 38.4717, 6.93757e-07, 1.08095e-06, 7.47834e-07\r\nSHA256_100b, 50, 1000000, 40.7169, 7.07437e-07, 1.11799e-06, 8.01852e-07\r\n```\r\n\r\n`TruncatedSHA512Writer` results (100 bytes):\r\n```\r\n$ src/bench/bench_bitcoin -filter=TruncatedSHA512_100b -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nTruncatedSHA512_100b, 50, 1000000, 21.6684, 4.17094e-07, 4.98784e-07, 4.30721e-07\r\nTruncatedSHA512_100b, 50, 1000000, 22.3288, 4.17564e-07, 5.26341e-07, 4.46433e-07\r\nTruncatedSHA512_100b, 50, 1000000, 21.9103, 4.17407e-07, 5.02515e-07, 4.33787e-07\r\n```",
      "created_at" : "2020-06-08T15:24:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640699423",
      "id" : 640699423,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDY5OTQyMw==",
      "updated_at" : "2020-06-08T15:24:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640699423",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fjahr It seems the benchmarking framework isn't calling the SHA256AutoDetect() function, which would enable hardware-accelerated versions of SHA256. See #19214 for a fix.\r\n\r\nWith that fixed, I get (on my SHA-NI enabled machine):\r\n\r\n```\r\n$ ./src/bench/bench_bitcoin -filter='.*100b' -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nSHA256_100b, 50, 1000000, 4.73236, 9.27549e-08, 1.35582e-07, 9.35812e-08\r\nTruncatedSHA512_100b, 50, 1000000, 18.3907, 3.63877e-07, 3.88716e-07, 3.67614e-07\r\n```\r\n\r\nAnd on a machine without SHA-NI (but with AVX2):\r\n```\r\n$ ./src/bench/bench_bitcoin -filter='.*100b.*' -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nSHA256_100b, 50, 1000000, 30.8421, 6.10718e-07, 6.40862e-07, 6.14576e-07\r\nTruncatedSHA512_100b, 50, 1000000, 28.2434, 5.57851e-07, 5.87092e-07, 5.62717e-07\r\n```\r\n\r\nSo it seems @gmaxwell's intuition above was right, that non-parallel SHA256 is only preferable on SHA-NI enabled machines. If we'd consider parallellizing updates (e.g. cache up 8 added/deleted UTXOs in the MuHash object itself, and then processing them all at once), SHA256 is probably a win over SHA512 on most modern x86_64 systems.",
      "created_at" : "2020-06-08T18:04:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640785035",
      "id" : 640785035,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDc4NTAzNQ==",
      "updated_at" : "2020-06-08T18:57:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640785035",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa Thanks for your help! Then I will change the code to use SHA256 which should simplify work for reviewers as well.",
      "created_at" : "2020-06-08T20:41:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640875012",
      "id" : 640875012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDg3NTAxMg==",
      "updated_at" : "2020-06-08T20:41:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640875012",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. I'm still worried about a lack of test vectors.\r\n\r\nIt would be useful to rebase #18000 whenever individual PRs are close to merge-ready. It allows reviewers to sanity check that the end result still produces a blazing fast `gettxoutsetinfo` and that the index builds in reasonable time.\r\n\r\nI'm copying the discussion about `TruncatedSHA256Writer` unit tests here (if only to get it in the merge commit):\r\n\r\n> I am currently a bit unsure of what the right way to go is for this. A first observation is that `CHashWriter` is also untested. I think both these classes are pretty thin wrappers of the actual hash functions they use, so a test might not provide much value. But `TruncatedSHA256Writer` does a bit more, so I think it could still be valuable to have a sanity check test. I was looking for any test vectors provided for [SHA-512/256](https://eprint.iacr.org/2010/548.pdf) and while there are is no official set, at least [these](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/examples/sha512_256.pdf) could be enough for a sanity check. However, the problem is that for SHA-512/256 different initializers are used. We reuse SHA-512 for simplicity reasons, I guess. It's easy enough to add the other initializers. I am just not sure it worth the additional review effort. Another fact that I stumbled over, is that the serializer used here is writing the null character of a string into the hash, where I am not sure if that is a bug but it certainly makes working with test vectors hard.\r\n> \r\n> So, I am not sure if adding SHA-512/256 is worth it. And I am also unsure if a test for `TruncatedSHA256Writer` would be valuable without test vectors and given the only limited logic inside the class.\r\n\r\nAnd your comment above:\r\n\r\n> I am still thinking about a better solution and might add an implementation of SHA512/256. There is a single sanity check at the bottom of the Muhash test at least.\r\n\r\nThe performance discussion above suggests dropping 0104b7f33230f8bde09c5a2fb1d8ef4243f2ab1d entirely, which would render the above discussion moot. I'll wait with reviewing until that's settled.",
      "created_at" : "2020-06-09T10:36:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641201795",
      "id" : 641201795,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTIwMTc5NQ==",
      "updated_at" : "2020-06-09T10:36:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641201795",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r437326492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437326492"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe link to the paper and mailinglist discussion here:\r\n* https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf (explains MuHASH in general terms)\r\n* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html (picks SHA512 and ChaCha20)",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-06-09T11:07:41Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r437326492",
      "id" : 437326492,
      "line" : 30,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMyNjQ5Mg==",
      "original_commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 30,
      "pull_request_review_id" : 427030918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T13:50:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437326492",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "We should consider switching to the latest `ChaCha20` per RFC 8439, which may or may not produce a different `MuHash3072`. See #19225",
      "created_at" : "2020-06-09T14:51:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641348347",
      "id" : 641348347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTM0ODM0Nw==",
      "updated_at" : "2020-06-09T14:51:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641348347",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r437515881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437515881"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Let's add some info about the choice of SHA256 + ChaCha20 here. It essentially compresses the item (e.g. a serialised UTXO) into 3072 bits. Because ChaCha20 doesn't compress - it's designed for encryption - we feed it a SHA256() hash; it then decompresses that 256 bits into 3072.\r\n\r\nWhy 3072 bits? Because it's safe enough, according to @sipa's mailinglist post:\r\n```\r\nThankfully, [6] also shows that the k-sum problem cannot be\r\nefficiently solved in groups in which the discrete logarithm problem\r\nis hard, as an efficient k-sum solver can be used to compute discrete\r\nlogarithms. As a result, MuHash modulo a sufficiently large safe prime\r\nis provably secure under the DL assumption. Common guidelines on\r\nsecurity parameters [7] say that 3072-bit DL has about 128 bits of\r\nsecurity. A final 256-bit hash can be applied to the 3072-bit result\r\nwithout loss of security to reduce the final size.\r\n```\r\n\r\nIIUC we could apply any other digest on a serialised UTXO as long as it produces at least ~3000 bits. Since sha256 and ChaCha20 are well studied an we use them for other things, they do the job.",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-06-09T15:22:14Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r437515881",
      "id" : 437515881,
      "line" : 46,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxNTg4MQ==",
      "original_commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "original_line" : 46,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 46,
      "pull_request_review_id" : 427275640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-09T15:22:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437515881",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From the PR Review club minutes: https://bitcoincore.reviews/19055.html#l-195\r\n\r\n> sipa toÂ fjahr: if you're going to cache the hash for every block... that's actually an argument in favor of ECMH, as the minimal \"state\" to keep for ECMH is 33 bytes only, while for MuHash it's 384 bytes\r\n\r\nAnd above:\r\n\r\n> The primary difference between MuHash and ECMH is caching:\r\n> \r\n> * ECMH is more CPU time overall, but the time is mostly in computing the \"effect\" of a set of additions/deletions; applying that effect to the overall hash is extremely cheap. Furthermore, a 64-byte precomputed \"patch\" per set of additions/deletions can be created, which means a patch could be cached per-transaction, and then very cheaply applied when the transaction confirms. So it allows doing most of the work ahead of time (before the block arrives).\r\n> * MuHash is cheaper overall, but the time is mostly in applying the changes to the overall hash. This means caching isn't very useful (and also the caches would be 768 bytes, which is pretty large). If the intent is computing things in the background, or at block connection time, then this is a better (and simpler) approach.\r\n\r\nWe should probably clarify what's meant with \"caching\".\r\n\r\nWith `-coinstatsindex` we store the UTXO set hash for every height. This makes the RPC blazing fast. With MuHash it uses ~500 MB for the current chain vs 39 MB with ECMH. The latter is so small I can see us turning that on by default one day (assuming ECMH calculation adds negligible overhead to IBD). But 500 MB isn't unacceptable for an advanced user who needs `gettxoutsetinfo` (disclaimer: yours truly [needs the index](https://github.com/BitMEXResearch/forkmonitor/issues/139), but has no use for any hash).\r\n\r\nWhen you don't have the index enabled, MuHash is faster than ECMH, but both are unacceptably slow for anyone using the feature more than once. So in practice I expect anyone who needs this feature to turn on the index.\r\n\r\nAssuming this feature is mostly used with an index, then ECMH seems the better option in terms of storage.\r\n\r\nConceptionally I find MuHash very simple and we have all the ingredients here. We might as well use it for the initial `-coinstatsindex`, and add ECMH later, as well as any briljant other ideas.",
      "created_at" : "2020-06-09T16:35:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641420023",
      "id" : 641420023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTQyMDAyMw==",
      "updated_at" : "2020-06-09T16:35:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641420023",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438026185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438026185"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : ">  Because ChaCha20 doesn't compress - it's designed for encryption - we feed it a SHA256() hash; it then decompresses that 256 bits into 3072.\r\n\r\nI think that argument is a little too ad-hoc for serious crypto. The MuHash paper assumes that elements are first hashed with a hash function that they model as a random oracle (RO). Now while SHA256 with fixed inputs itself is a good choice for something modeled as a RO, this is not immediately clear to me for `ChaCha20-3072-bits(key=SHA256(.))`, even though that looks okay.\r\n\r\nIf SHA256 is modeled as a RO and ChaCha20 as an ideal cipher, then this is probably good. And MuHash assumes a RO but AFACT then relies only on the fact that the outputs are uniformly and independently distributed over the target group (see [Lemma 3.1 in the paper](https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf)) and there is no RO-programming or other advanced stuff involved. And indeed, `ChaCha20-3072-bits(key=SHA256(.))` should be negligibly close to this, even if we just assume that ChaCha20 is a PRF instead of an ideal cipher. But this requires some more attention and some more eyes.",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-06-10T10:35:36Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438026185",
      "id" : 438026185,
      "in_reply_to_id" : 437515881,
      "line" : 46,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyNjE4NQ==",
      "original_commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "original_line" : 46,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 46,
      "pull_request_review_id" : 427926624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-10T10:36:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438026185",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Another data point is the implementation complexity (code lines etc). If we want arithmetic incl. ASM here, this needs to be maintained whereas for ECMH the basic primitives may just be there already there in secp256k1. Not sure if that makes a large difference but it's something to keep in mind.",
      "created_at" : "2020-06-10T12:05:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641958916",
      "id" : 641958916,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTk1ODkxNg==",
      "updated_at" : "2020-06-10T12:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641958916",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438102500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438102500"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I think that argument is a little too ad-hoc for serious crypto.\r\n\r\nCompletely agree. I'm trying to tease out what we know. For the purpose of an index it doesn't matter too much. We can use MuHash to experiment with this concept, and abandon it for something better. By the time anyone proposes to use this for consensus, we'll need a much stronger proof.\r\n\r\nThat said, there should be strongly worded warnings in the header, because other project might prematurely run with this if it \"works in Bitcoin\". ",
      "commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "created_at" : "2020-06-10T13:00:47Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438102500",
      "id" : 438102500,
      "in_reply_to_id" : 437515881,
      "line" : 46,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMjUwMA==",
      "original_commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "original_line" : 46,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 46,
      "pull_request_review_id" : 428026795,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-10T13:03:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438102500",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> With `-coinstatsindex` we store the UTXO set hash for every height. This makes the RPC blazing fast. With MuHash it uses ~500 MB for the current chain vs 39 MB with ECMH. The latter is so small I can see us turning that on by default one day (assuming ECMH calculation adds negligible overhead to IBD). But 500 MB isn't unacceptable for an advanced user who needs `gettxoutsetinfo` (disclaimer: yours truly [needs the index](https://github.com/BitMEXResearch/forkmonitor/issues/139), but has no use for any hash).\r\n> \r\n> When you don't have the index enabled, MuHash is faster than ECMH, but both are unacceptably slow for anyone using the feature more than once. So in practice I expect anyone who needs this feature to turn on the index.\r\n> \r\n> Assuming this feature is mostly used with an index, then ECMH seems the better option in terms of storage.\r\n\r\nThere is no real difference in storage because I am not saving the `MuHash3072` object for every block but the finalized hash. I didn't even think about storage when I made that decision tbh. Intuitively this made more sense to me because if we access historical blocks to get their stats all we would do with the MuHash is finalize it anyway. So we save a little bit of CPU every time we do it. There is currently only one `MuHash3072` object maintained at the tip and if there is a reorg I am rolling back the reorged blocks. This takes longer than accessing a stored `MuHash3072` object of course but that trade-off seemed worth it to me even without storage because we don't see too many reorgs these days and it's really not that long to roll back a block and add another.\r\n\r\nOn my current mainnet node the whole `indexes/coinstats` folder is 83 MB large. That includes all the stats, not just the hash. Was the 500 MB number a theoretical calculation or did you see this in practice? If your folder is that large I would need to investigate.\r\n\r\n",
      "created_at" : "2020-06-10T13:01:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641990925",
      "id" : 641990925,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTk5MDkyNQ==",
      "updated_at" : "2020-06-10T13:01:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641990925",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My calculation was based on 768 bytes of cache, but that's off by a factor 2. A finalised MuHash3072 uses 3072 bits. So for 640,000 blocks that's 234 MB.\r\n\r\nI suppose you could store just the sha256 hash for historical blocks, only keep 3072 bits for the most recent block, and use that to move forward or roll back. In that case storage is the same as with ECMH. I can't think of a use case for the full 3072 bits. Initially I was thinking of it as a set, so you potentially query it for the presence of a UTXO, but that's not actually how it works. So perhaps there really is no point in keeping the full 3072 bits for historical blocks.",
      "created_at" : "2020-06-10T13:10:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641996489",
      "id" : 641996489,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTk5NjQ4OQ==",
      "updated_at" : "2020-06-10T13:10:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641996489",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "There would be no reason to cache the internal state except maybe for a few in-memory blocks near the tip or something like that just to speed up reorgs.\r\n",
      "created_at" : "2020-06-11T01:08:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-642345673",
      "id" : 642345673,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjM0NTY3Mw==",
      "updated_at" : "2020-06-11T01:08:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642345673",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Implemented the use of SHA256 and also added some clarification on the \"set\" question in the docs.",
      "created_at" : "2020-06-11T21:54:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-642946245",
      "id" : 642946245,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mjk0NjI0NQ==",
      "updated_at" : "2020-06-11T21:54:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642946245",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   }
]
