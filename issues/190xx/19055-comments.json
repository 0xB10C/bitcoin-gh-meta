[
   {
      "author_association" : "MEMBER",
      "body" : "Reviewers: This PR is being discussed in the review club at https://bitcoincore.reviews/19055\r\n\r\n(A `Review club` tag for this PR would be helpful to indicate that review notes and discussion are available there.)",
      "created_at" : "2020-05-26T11:38:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-633971712",
      "id" : 633971712,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzk3MTcxMg==",
      "updated_at" : "2020-05-26T11:38:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633971712",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Some history for the context:\r\n* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html\r\n* based on #10434",
      "created_at" : "2020-05-26T12:02:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-633981639",
      "id" : 633981639,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzk4MTYzOQ==",
      "updated_at" : "2020-05-26T12:02:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633981639",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@gzhao408 I think there is a bit of a miscommunication. The term \"rolling\" here just means efficient addition as well as deletion from the set being hashed. There is no actual window, as sets are unordered. Perhaps the term was chosen badly (which would be my fault).\r\n\r\nAll of LtHash, MuHash, and ECMH support incremental addition and deletion. The \"non-rolling\" mention in @fjahr's document refers to the fact that he hasn't implemented continuous UTXO set hashing with these functions, only a from scratch computation. It has nothing to do with what these functions can or can't do.\r\n\r\nThe primary difference between MuHash and ECMH is caching:\r\n\r\n* ECMH is more CPU time overall, but the time is mostly in computing the \"effect\" of a set of additions/deletions; applying that effect to the overall hash is extremely cheap. Furthermore, a 64-byte precomputed \"patch\" per set of additions/deletions can be created, which means a patch could be cached per-transaction, and then very cheaply applied when the transaction confirms. So it allows doing most of the work ahead of time (before the block arrives).\r\n\r\n* MuHash is cheaper overall, but the time is mostly in applying the changes to the overall hash. This means caching isn't very useful (and also the caches would be 768 bytes, which is pretty large). If the intent is computing things in the background, or at block connection time, then this is a better (and simpler) approach.",
      "created_at" : "2020-05-26T16:45:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634142704",
      "id" : 634142704,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDE0MjcwNA==",
      "updated_at" : "2020-05-26T16:45:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634142704",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "AaaAHhhh, thank you @sipa for the clarification! \r\n\r\n> The term \"rolling\" here just means efficient addition as well as deletion from the set being hashed.\r\n> The \"non-rolling\" mention in @fjahr's document refers to the fact that he hasn't implemented continuous UTXO set hashing with these functions\r\n\r\nThis makes a lot more sense; I had thought he meant the hash function itself is rolling/non-rolling. I didn't have much info but was super interested and went for a textbook definition ð now I feel embarrassed. This information is super helpful, thanks!",
      "created_at" : "2020-05-26T17:08:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634155367",
      "id" : 634155367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDE1NTM2Nw==",
      "updated_at" : "2020-05-26T17:08:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634155367",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/gzhao408/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gzhao408/followers",
         "following_url" : "https://api.github.com/users/gzhao408/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gzhao408/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gzhao408",
         "id" : 25183001,
         "login" : "gzhao408",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/gzhao408/orgs",
         "received_events_url" : "https://api.github.com/users/gzhao408/received_events",
         "repos_url" : "https://api.github.com/users/gzhao408/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gzhao408/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gzhao408/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gzhao408"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It also seems that ECMH (which is noted as non-rolling) performed better and has a maintainability plus since it's part of Secp256k1.\r\n\r\nPlease also note that there is an implementation of ECMH that is an open pull request to Secp256k1 but it is not merged and has been stale for some time. So the work to get it merged is more or less the same and I don't think there is a big difference in maintainability between having it in core or secp.",
      "created_at" : "2020-05-26T18:44:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634207235",
      "id" : 634207235,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDIwNzIzNQ==",
      "updated_at" : "2020-05-26T18:44:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634207235",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fjahr I've written a Python implementation of MuHash3072, so it can be more easily tested: https://github.com/sipa/bitcoin/commits/202005_muhash_python (no tests are included, but I've verified it matches the C++ code in a few simple examples).",
      "created_at" : "2020-05-26T21:14:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634282984",
      "id" : 634282984,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDI4Mjk4NA==",
      "updated_at" : "2020-05-26T21:14:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634282984",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-05-26T21:15:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634283316",
      "id" : 634283316,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDI4MzMxNg==",
      "updated_at" : "2020-05-26T21:15:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634283316",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @fjahr I've written a Python implementation of MuHash3072, so it can be more easily tested: [sipa/bitcoin@`202005_muhash_python` (commits)](https://github.com/sipa/bitcoin/commits/202005_muhash_python) (no tests are included, but I've verified it matches the C++ code in a few simple examples).\r\n\r\nAwesome, I have just pulled it in here and will build further tests on top of it.",
      "created_at" : "2020-05-26T22:22:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634312013",
      "id" : 634312013,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDMxMjAxMw==",
      "updated_at" : "2020-05-26T22:22:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634312013",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased and added a6cf0df104728a587283578735e7f11c5f0f2ae4 which allows the user to use the legacy hash with the use of a flag. This will definitely be squashed but I decided to keep it separate for the moment to make discussions easier in the review club tomorrow. I figured I would need to do something like this anyway in order go through a deprecation cycle with `gettxoutsetinfo`, the question is if that is still needed with the flag. Also added 4438aed09e87de0afb37da64ffb5e7489084e8ab which is @sipa 's python implementation of Muhash, currently unused.",
      "created_at" : "2020-05-26T22:28:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634314204",
      "id" : 634314204,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDMxNDIwNA==",
      "updated_at" : "2020-05-26T22:28:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634314204",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431080029"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431080029"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ced54242 nit: sort",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-27T12:31:37Z",
      "diff_hunk" : "@@ -388,6 +388,8 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/hmac_sha512.h \\\n   crypto/poly1305.h \\\n   crypto/poly1305.cpp \\\n+  crypto/muhash.cpp \\\n+  crypto/muhash.h \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431080029",
      "id" : 431080029,
      "line" : 400,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4MDAyOQ==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 400,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : 4,
      "pull_request_review_id" : 419143541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431080029",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431132007"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431132007"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cda20f3 nit: perhaps sort the functions above and this list, e.g. like\r\n\r\n```\r\n$ src/bench/bench_bitcoin -list\r\n...\r\nMuHash, 5, 5000, 0, 0, 0, 0\r\nMuHashAdd, 5, 5000, 0, 0, 0, 0\r\nMuHashDiv, 5, 100, 0, 0, 0, 0\r\nMuHashPrecompute, 5, 5000, 0, 0, 0, 0\r\n\r\n$ src/bench/bench_bitcoin -filter=MuHash*.*\r\n# Benchmark, evals, iterations, total, min, max, median\r\nMuHash, 5, 5000, 0.287426, 7.45603e-06, 1.72302e-05, 1.08339e-05\r\nMuHashAdd, 5, 5000, 0.243778, 7.93741e-06, 1.17234e-05, 9.61388e-06\r\nMuHashDiv, 5, 100, 8.62069, 0.0146344, 0.0216452, 0.0169485\r\nMuHashPrecompute, 5, 5000, 0.0557224, 1.55965e-06, 4.40565e-06, 1.65373e-06\r\n```\r\n",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-27T13:30:41Z",
      "diff_hunk" : "@@ -101,3 +166,8 @@ BENCHMARK(SipHash_32b, 40 * 1000 * 1000);\n BENCHMARK(SHA256D64_1024, 7400);\n BENCHMARK(FastRandom_32bit, 110 * 1000 * 1000);\n BENCHMARK(FastRandom_1bit, 440 * 1000 * 1000);\n+\n+BENCHMARK(MuHash, 5000);\n+BENCHMARK(MuHashPrecompute, 5000);\n+BENCHMARK(MuHashAdd, 5000);\n+BENCHMARK(MuHashDiv, 100);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431132007",
      "id" : 431132007,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzMjAwNw==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 172,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : null,
      "pull_request_review_id" : 419143541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431132007",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431151719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431151719"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ced54242 and cda20f3f nit: in these four functions above `++i` is preferred over `i++` per doc/developer-notes.md\r\n\r\n5d67c47 same for `src/crypto/muhash.h::L71`",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-27T13:56:46Z",
      "diff_hunk" : "@@ -91,6 +92,70 @@ static void FastRandom_1bit(benchmark::State& state)\n     }\n }\n \n+static void MuHash(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    while (state.KeepRunning()) {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    }\n+}\n+\n+static void MuHashPrecompute(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    while (state.KeepRunning()) {\n+        MuHash3072{key};\n+    }\n+}\n+\n+static void MuHashAdd(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+    while (state.KeepRunning()) {\n+        acc *= muhash;\n+    }\n+}\n+\n+static void MuHashDiv(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+\n+    for (size_t i = 0; i < state.m_num_iters; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431151719",
      "id" : 431151719,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1MTcxOQ==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 150,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : null,
      "pull_request_review_id" : 419143541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431151719",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431199564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431199564"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a6cf0df1 could add the new `bool GetUTXOStats()` next to the existing one -- to ease review, I moved them together.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-27T14:53:12Z",
      "diff_hunk" : "@@ -66,9 +97,38 @@ bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void\n         pcursor->Next();\n     }\n     if (!outputs.empty()) {\n-        ApplyStats(stats, ss, prevkey, outputs);\n+        ApplyStats(stats, hash, prevkey, outputs);\n     }\n-    stats.hashSerialized = ss.GetHash();\n+\n+    FinalizeHash(hash, stats);\n+\n     stats.nDiskSize = view->EstimateSize();\n     return true;\n }\n+\n+// The legacy hash serializes the hashBlock\n+void PrepareHash(CHashWriter& hash, CCoinsStats& stats) {\n+    hash << stats.hashBlock;\n+}\n+// Muhash does not need the prepare step\n+void PrepareHash(MuHash3072 hash, CCoinsStats& stats) {}\n+\n+void FinalizeHash(CHashWriter& hash, CCoinsStats& stats) {\n+    stats.hashSerialized = hash.GetHash();\n+}\n+void FinalizeHash(MuHash3072 hash, CCoinsStats& stats) {\n+    unsigned char out[384];\n+    hash.Finalize(out);\n+    stats.hashSerialized = (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+}\n+\n+bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats, const std::function<void()>& interruption_point, bool use_muhash)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431199564",
      "id" : 431199564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5OTU2NA==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 125,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/node/coinstats.cpp",
      "position" : null,
      "pull_request_review_id" : 419143541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431199564",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Also verified that, like your added test in `rpc_blockchain.py`, only `utxo_set_hash` varies between `gettxoutsetinfo` in -regtest with each algo.\r\n\r\n```bash \r\n$ bitcoin-cli -regtest gettxoutsetinfo\r\n{\r\n  \"height\": 15599,\r\n  \"bestblock\": \"6e535bc570f9be1b86d21711b23391e4e8f001682b5c6243883744879cdc4f84\",\r\n  \"transactions\": 3216,\r\n  \"txouts\": 3219,\r\n  \"bogosize\": 234987,\r\n  \"utxo_set_hash\": \"c4926481130f6689950e07e0e1f2060277d349b106a94b83145d577d3db4d225\",\r\n  \"disk_size\": 226234,\r\n  \"total_amount\": 14949.99998350\r\n}\r\n$ bitcoin-cli -regtest gettxoutsetinfo true\r\n{\r\n  \"height\": 15599,\r\n  \"bestblock\": \"6e535bc570f9be1b86d21711b23391e4e8f001682b5c6243883744879cdc4f84\",\r\n  \"transactions\": 3216,\r\n  \"txouts\": 3219,\r\n  \"bogosize\": 234987,\r\n  \"utxo_set_hash\": \"1883e99e56927fd5e3b82ccb9e08acd1be7ed0256d4cafe142626ae2fb66ffb4\",\r\n  \"disk_size\": 226234,\r\n  \"total_amount\": 14949.99998350\r\n}\r\n```",
      "created_at" : "2020-05-27T16:01:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634764233",
      "id" : 634764233,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDc2NDIzMw==",
      "updated_at" : "2020-05-27T18:09:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634764233",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: \"separate\" is misspelled in the commit title of cda20f3f897ff88337756cb0c0345b41cec9014e\r\n\r\nIt might be nice to split this in two PRs: One which adds MuHash, and one which updates `gettxoutsetinfo` to support it. I would definitely at least rebase/squash to put all the MuHash additions first and then layer the functionality changes on top.\r\n\r\nEdited to add thought: The next PR could add rolling as well, so this way we don't have an interim state where `gettxoutsetinfo` is even slower than it is now.",
      "created_at" : "2020-05-27T17:10:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634809748",
      "id" : 634809748,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDgwOTc0OA==",
      "updated_at" : "2020-05-27T17:23:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634809748",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/177646?v=4",
         "events_url" : "https://api.github.com/users/narula/events{/privacy}",
         "followers_url" : "https://api.github.com/users/narula/followers",
         "following_url" : "https://api.github.com/users/narula/following{/other_user}",
         "gists_url" : "https://api.github.com/users/narula/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/narula",
         "id" : 177646,
         "login" : "narula",
         "node_id" : "MDQ6VXNlcjE3NzY0Ng==",
         "organizations_url" : "https://api.github.com/users/narula/orgs",
         "received_events_url" : "https://api.github.com/users/narula/received_events",
         "repos_url" : "https://api.github.com/users/narula/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/narula/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/narula/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/narula"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19845 (net: CNetAddr: add support to (un)serialize as ADDRv2 by vasild)\n* #19841 (Implement Keccak and SHA3_256 by sipa)\n* #19145 (Add hash_type MUHASH for gettxoutsetinfo by fjahr)\n* #19031 (Implement ADDRv2 support (part of BIP155) by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-05-27T20:04:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634910640",
      "id" : 634910640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDkxMDY0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-02T20:00:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634910640",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431778760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431778760"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\r\n```\r\n\r\nHow much time is spent on hashing with the legacy hash vs muhash vs none? Imagine someone just wants the `total_amount` as fast as possible.\r\n\r\nIf hashing is slow in general, maybe there should be an option to skip it?",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-28T11:53:20Z",
      "diff_hunk" : "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431778760",
      "id" : 431778760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3ODc2MA==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 975,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 420031955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431778760",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431944665"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431944665"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's a good question but based on my tests (with commented out hashing code) the performance impact of `hash_serialized2` is only small. Results were volatile but on average `gettxoutsetinfo` without the hash was only a few seconds faster (5s - 20s faster, an improvement of ~10%). I think it's not really worth adding an option for that if we can have the index instead.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-28T15:54:19Z",
      "diff_hunk" : "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431944665",
      "id" : 431944665,
      "in_reply_to_id" : 431778760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NDY2NQ==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 975,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 420256522,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431944665",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432425903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432425903"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thinking about it a little bit more, I think it would be good to have the option for later on when we want to remove the code for `hash_serialized_2`. So I will add it as an option.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-29T11:36:13Z",
      "diff_hunk" : "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432425903",
      "id" : 432425903,
      "in_reply_to_id" : 431778760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNTkwMw==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 975,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 420873318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432425903",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426282"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "now out of scope of this PR but will reorg it in the follow-up",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-29T11:37:08Z",
      "diff_hunk" : "@@ -66,9 +97,38 @@ bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void\n         pcursor->Next();\n     }\n     if (!outputs.empty()) {\n-        ApplyStats(stats, ss, prevkey, outputs);\n+        ApplyStats(stats, hash, prevkey, outputs);\n     }\n-    stats.hashSerialized = ss.GetHash();\n+\n+    FinalizeHash(hash, stats);\n+\n     stats.nDiskSize = view->EstimateSize();\n     return true;\n }\n+\n+// The legacy hash serializes the hashBlock\n+void PrepareHash(CHashWriter& hash, CCoinsStats& stats) {\n+    hash << stats.hashBlock;\n+}\n+// Muhash does not need the prepare step\n+void PrepareHash(MuHash3072 hash, CCoinsStats& stats) {}\n+\n+void FinalizeHash(CHashWriter& hash, CCoinsStats& stats) {\n+    stats.hashSerialized = hash.GetHash();\n+}\n+void FinalizeHash(MuHash3072 hash, CCoinsStats& stats) {\n+    unsigned char out[384];\n+    hash.Finalize(out);\n+    stats.hashSerialized = (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+}\n+\n+bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats, const std::function<void()>& interruption_point, bool use_muhash)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426282",
      "id" : 432426282,
      "in_reply_to_id" : 431199564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjI4Mg==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 125,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/node/coinstats.cpp",
      "position" : null,
      "pull_request_review_id" : 420873836,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426282",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426338"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-29T11:37:15Z",
      "diff_hunk" : "@@ -91,6 +92,70 @@ static void FastRandom_1bit(benchmark::State& state)\n     }\n }\n \n+static void MuHash(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    while (state.KeepRunning()) {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    }\n+}\n+\n+static void MuHashPrecompute(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    while (state.KeepRunning()) {\n+        MuHash3072{key};\n+    }\n+}\n+\n+static void MuHashAdd(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+    while (state.KeepRunning()) {\n+        acc *= muhash;\n+    }\n+}\n+\n+static void MuHashDiv(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+\n+    for (size_t i = 0; i < state.m_num_iters; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426338",
      "id" : 432426338,
      "in_reply_to_id" : 431151719,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjMzOA==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 150,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : null,
      "pull_request_review_id" : 420873910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426338",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426405"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-29T11:37:23Z",
      "diff_hunk" : "@@ -101,3 +166,8 @@ BENCHMARK(SipHash_32b, 40 * 1000 * 1000);\n BENCHMARK(SHA256D64_1024, 7400);\n BENCHMARK(FastRandom_32bit, 110 * 1000 * 1000);\n BENCHMARK(FastRandom_1bit, 440 * 1000 * 1000);\n+\n+BENCHMARK(MuHash, 5000);\n+BENCHMARK(MuHashPrecompute, 5000);\n+BENCHMARK(MuHashAdd, 5000);\n+BENCHMARK(MuHashDiv, 100);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426405",
      "id" : 432426405,
      "in_reply_to_id" : 431132007,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjQwNQ==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 172,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : null,
      "pull_request_review_id" : 420873991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426405",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426468"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426468"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-05-29T11:37:31Z",
      "diff_hunk" : "@@ -388,6 +388,8 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/hmac_sha512.h \\\n   crypto/poly1305.h \\\n   crypto/poly1305.cpp \\\n+  crypto/muhash.cpp \\\n+  crypto/muhash.h \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426468",
      "id" : 432426468,
      "in_reply_to_id" : 431080029,
      "line" : 400,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjQ2OA==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 400,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : 4,
      "pull_request_review_id" : 420874073,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426468",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It looks like you removed a bunch of code, and the functional tests, in the last push? If yes, review effort is being thrown away, and perhaps the PR description needs to be updated.",
      "created_at" : "2020-05-29T12:51:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635955599",
      "id" : 635955599,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTk1NTU5OQ==",
      "updated_at" : "2020-05-29T12:52:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635955599",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It looks like you removed a bunch of code, and the functional tests, in the last push? If yes, review effort is being thrown away, and perhaps the PR description needs to be updated.\r\n\r\nYes, I am writing an update at the moment",
      "created_at" : "2020-05-29T12:53:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635956325",
      "id" : 635956325,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTk1NjMyNQ==",
      "updated_at" : "2020-05-29T12:53:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635956325",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> nit: \"separate\" is misspelled in the commit title of [cda20f3](https://github.com/bitcoin/bitcoin/commit/cda20f3f897ff88337756cb0c0345b41cec9014e)\r\n\r\ndone\r\n\r\n",
      "created_at" : "2020-05-29T12:53:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635956487",
      "id" : 635956487,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTk1NjQ4Nw==",
      "updated_at" : "2020-05-29T12:53:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635956487",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for all the reviews so far! I have addressed comments and, based on feedback from the PR review club and others, split it up further to make reviews more manageable and keep discussions more focussed. This now only adds the implementation of `Muhash3072` and `TruncatedSHA512` in C++. The next in the series is https://github.com/bitcoin/bitcoin/pull/19105 and will only add the Python implementation. A PR review club on it will give another chance to dive deeper into implementation details of Muhash3072. The third PR will add let the user use `gettxoutsetinfo` with Muhash, taking feedback into account (WIP). Progress of the different pull requests is now tracked in #18000 (top of the description).",
      "created_at" : "2020-05-29T13:03:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635960689",
      "id" : 635960689,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTk2MDY4OQ==",
      "updated_at" : "2020-05-29T13:03:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635960689",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> * This PR essentially makes `gettxoutsetinfo` too slow to be useable in testnet and mainnet (it times out and raises after 15 minutes); for that reason, until the -coinstatsindex in #18000 is merged, the MuHash algorithm should be opt-in for rpc `gettxoutsetinfo` and not the default\r\n\r\nWill do so in the follow-up that adds the option to the RPC.\r\n\r\n> * What are your plans regarding ECMH?\r\n\r\nI don't have plans for it unless there is a reason to reconsider it as the algorithm of choice over Muhash. The branch with the ECMH implementation in secp256k1 is still there if people want to play with it.\r\n\r\n> * it looks like `TruncatedSHA512Writer` could use unit tests (perhaps just sanity checks if not viable to use test vectors, `CHashWriter` is also not tested directly but used by other unit tests: addrman, hash, sighash)\r\n\r\nI have laid out some thoughts on it [here]( https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-629296641) why it is hard to add meaningful unit tests. I am still thinking about a better solution and might add an implementation of SHA512/256. There is a single sanity check at the bottom of the Muhash test at least. \r\n\r\n> * a fuzz harness would be ideal\r\n\r\nYeah, as I mention in my answer to Sjors, I would like to add it as a follow-up.\r\n\r\n> * do you plan to add tests using the just-added Python MuHash3072 implementation?\r\n\r\n Yes\r\n\r\n> * [06ae4ab](https://github.com/bitcoin/bitcoin/commit/06ae4ab04f010b24bad03ea6a3c728848cd28545) commit message s/256/512/?\r\n\r\ndone\r\n\r\n> * [04d088d](https://github.com/bitcoin/bitcoin/commit/04d088da106d8c7df0d629d21416c824d6568d18) commit message could mention the renaming of `hash_serialized_2` to `utxo_set_hash` and why it was changed (I didn't see any explanation anywhere)\r\n\r\nI was going back and forth on this, which is probably why it is not mentioned. Initially it was named `muhash`, then I thought it should be more general name that makes more sense to the user. But now my tendency is back to naming it muhash, since we want to keep `hash_serialized_2` for longer and there is no guarantee that there will not be another algo used some time in the future which would mean we would probably need to rename it again in order to avoid confusion.\r\n\r\n> * [04d088d](https://github.com/bitcoin/bitcoin/commit/04d088da106d8c7df0d629d21416c824d6568d18) and [a6cf0df](https://github.com/bitcoin/bitcoin/commit/a6cf0df104728a587283578735e7f11c5f0f2ae4) ought to be squashed to one commit; keeping them separate unnecessarily complicates reviewing -- I squashed them locally in order to see the relevant diff, as ApplyStats() is weird enough to review already\r\n\r\nYes, done in follow-up pr\r\n\r\n> * at some point you'll want to add a release note\r\n\r\nyepp\r\n",
      "created_at" : "2020-05-29T13:17:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635967249",
      "id" : 635967249,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTk2NzI0OQ==",
      "updated_at" : "2020-05-29T13:17:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635967249",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it'd be easier to review this code if the PR didn't include the ASM implementation.",
      "created_at" : "2020-06-05T18:29:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-639690930",
      "id" : 639690930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzOTY5MDkzMA==",
      "updated_at" : "2020-06-05T18:29:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639690930",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r436143516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436143516"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is now implemented in #19145.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-05T20:14:59Z",
      "diff_hunk" : "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r436143516",
      "id" : 436143516,
      "in_reply_to_id" : 431778760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0MzUxNg==",
      "original_commit_id" : "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "original_line" : 975,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 425598449,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436143516",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think it'd be easier to review this code if the PR didn't include the ASM implementation.\r\n\r\nYeah, I can split that out easily as well.",
      "created_at" : "2020-06-05T20:16:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-639776914",
      "id" : 639776914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzOTc3NjkxNA==",
      "updated_at" : "2020-06-05T20:16:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639776914",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ASM optimizations moved to https://github.com/bitcoin/bitcoin/pull/19181",
      "created_at" : "2020-06-05T20:24:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-639783978",
      "id" : 639783978,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzOTc4Mzk3OA==",
      "updated_at" : "2020-06-05T20:24:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639783978",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Is there a particular reason for sha512?  Although for some sizes it can be faster w/ a totally naive implementation It is a lot slower on hardware with sha-ni (and presumably somewhat slower than a parallel implementation using 8-way avx sha256).",
      "created_at" : "2020-06-07T07:22:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640169988",
      "id" : 640169988,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDE2OTk4OA==",
      "updated_at" : "2020-06-07T07:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640169988",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@gmaxwell I assume it's SHA512 because of my original code used that. I've pointed out to @fjahr that we should benchmark if SHA256 isn't faster these days (on x86_64, I expect it to be). I hadn't thought of the possibility of parallellizing; that should shift things even further in favor of SHA256.\r\n\r\nFWIW, the original reason was that for typical UTXOs, only one SHA512 compression is enough (it'd be over 55 bytes but below 119), and at the time this was first written, a SHA256 compression on x86_64 was less than twice as fast as a SHA512 one.",
      "created_at" : "2020-06-07T16:33:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640244825",
      "id" : 640244825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDI0NDgyNQ==",
      "updated_at" : "2020-06-07T18:32:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640244825",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> a SHA256 compression on x86_64 was less than twice as fast as a SHA512 one.\r\n\r\nRight, that was my comment on naive code.\r\n\r\n> I hadn't thought of the possibility of parallellizing; that should shift things even further in favor of SHA256.\r\n\r\nWell, make sha256 preferable on more hardware and not just hardware with sha-ni or similar...\r\n\r\n(FWIW, the muhash updating itself could also be parallelized presumably with good effect)\r\n",
      "created_at" : "2020-06-07T18:46:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640262224",
      "id" : 640262224,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDI2MjIyNA==",
      "updated_at" : "2020-06-07T18:46:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640262224",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I finally got around to run these benchmarks and it appears that Truncated512 is still significantly faster on my hardware (`Intel(R) Core(TM) i5-6287U CPU @ 3.10GHz`). But I have seen some strange benchmarks before on this machine, so it would be great if others could run them as well. I pushed the code in a new commit, I can remove it again if it is not valuable enough to keep.\r\n\r\n`SHA256` results (100 bytes):\r\n```\r\n$ src/bench/bench_bitcoin -filter=SHA256_100b -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nSHA256_100b, 50, 1000000, 38.3667, 6.93112e-07, 9.39267e-07, 7.40312e-07\r\nSHA256_100b, 50, 1000000, 38.4717, 6.93757e-07, 1.08095e-06, 7.47834e-07\r\nSHA256_100b, 50, 1000000, 40.7169, 7.07437e-07, 1.11799e-06, 8.01852e-07\r\n```\r\n\r\n`TruncatedSHA512Writer` results (100 bytes):\r\n```\r\n$ src/bench/bench_bitcoin -filter=TruncatedSHA512_100b -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nTruncatedSHA512_100b, 50, 1000000, 21.6684, 4.17094e-07, 4.98784e-07, 4.30721e-07\r\nTruncatedSHA512_100b, 50, 1000000, 22.3288, 4.17564e-07, 5.26341e-07, 4.46433e-07\r\nTruncatedSHA512_100b, 50, 1000000, 21.9103, 4.17407e-07, 5.02515e-07, 4.33787e-07\r\n```",
      "created_at" : "2020-06-08T15:24:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640699423",
      "id" : 640699423,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDY5OTQyMw==",
      "updated_at" : "2020-06-08T15:24:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640699423",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fjahr It seems the benchmarking framework isn't calling the SHA256AutoDetect() function, which would enable hardware-accelerated versions of SHA256. See #19214 for a fix.\r\n\r\nWith that fixed, I get (on my SHA-NI enabled machine):\r\n\r\n```\r\n$ ./src/bench/bench_bitcoin -filter='.*100b' -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nSHA256_100b, 50, 1000000, 4.73236, 9.27549e-08, 1.35582e-07, 9.35812e-08\r\nTruncatedSHA512_100b, 50, 1000000, 18.3907, 3.63877e-07, 3.88716e-07, 3.67614e-07\r\n```\r\n\r\nAnd on a machine without SHA-NI (but with AVX2):\r\n```\r\n$ ./src/bench/bench_bitcoin -filter='.*100b.*' -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nSHA256_100b, 50, 1000000, 30.8421, 6.10718e-07, 6.40862e-07, 6.14576e-07\r\nTruncatedSHA512_100b, 50, 1000000, 28.2434, 5.57851e-07, 5.87092e-07, 5.62717e-07\r\n```\r\n\r\nSo it seems @gmaxwell's intuition above was right, that non-parallel SHA256 is only preferable on SHA-NI enabled machines. If we'd consider parallellizing updates (e.g. cache up 8 added/deleted UTXOs in the MuHash object itself, and then processing them all at once), SHA256 is probably a win over SHA512 on most modern x86_64 systems.",
      "created_at" : "2020-06-08T18:04:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640785035",
      "id" : 640785035,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDc4NTAzNQ==",
      "updated_at" : "2020-06-08T18:57:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640785035",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa Thanks for your help! Then I will change the code to use SHA256 which should simplify work for reviewers as well.",
      "created_at" : "2020-06-08T20:41:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640875012",
      "id" : 640875012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDg3NTAxMg==",
      "updated_at" : "2020-06-08T20:41:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640875012",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. I'm still worried about a lack of test vectors.\r\n\r\nIt would be useful to rebase #18000 whenever individual PRs are close to merge-ready. It allows reviewers to sanity check that the end result still produces a blazing fast `gettxoutsetinfo` and that the index builds in reasonable time.\r\n\r\nI'm copying the discussion about `TruncatedSHA256Writer` unit tests here (if only to get it in the merge commit):\r\n\r\n> I am currently a bit unsure of what the right way to go is for this. A first observation is that `CHashWriter` is also untested. I think both these classes are pretty thin wrappers of the actual hash functions they use, so a test might not provide much value. But `TruncatedSHA256Writer` does a bit more, so I think it could still be valuable to have a sanity check test. I was looking for any test vectors provided for [SHA-512/256](https://eprint.iacr.org/2010/548.pdf) and while there are is no official set, at least [these](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/examples/sha512_256.pdf) could be enough for a sanity check. However, the problem is that for SHA-512/256 different initializers are used. We reuse SHA-512 for simplicity reasons, I guess. It's easy enough to add the other initializers. I am just not sure it worth the additional review effort. Another fact that I stumbled over, is that the serializer used here is writing the null character of a string into the hash, where I am not sure if that is a bug but it certainly makes working with test vectors hard.\r\n> \r\n> So, I am not sure if adding SHA-512/256 is worth it. And I am also unsure if a test for `TruncatedSHA256Writer` would be valuable without test vectors and given the only limited logic inside the class.\r\n\r\nAnd your comment above:\r\n\r\n> I am still thinking about a better solution and might add an implementation of SHA512/256. There is a single sanity check at the bottom of the Muhash test at least.\r\n\r\nThe performance discussion above suggests dropping 0104b7f33230f8bde09c5a2fb1d8ef4243f2ab1d entirely, which would render the above discussion moot. I'll wait with reviewing until that's settled.",
      "created_at" : "2020-06-09T10:36:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641201795",
      "id" : 641201795,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTIwMTc5NQ==",
      "updated_at" : "2020-06-09T10:36:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641201795",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r437326492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437326492"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe link to the paper and mailinglist discussion here:\r\n* https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf (explains MuHASH in general terms)\r\n* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html (picks SHA512 and ChaCha20)",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-09T11:07:41Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r437326492",
      "id" : 437326492,
      "line" : 31,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMyNjQ5Mg==",
      "original_commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "original_line" : 31,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 31,
      "pull_request_review_id" : 427030918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437326492",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "We should consider switching to the latest `ChaCha20` per RFC 8439, which may or may not produce a different `MuHash3072`. See #19225",
      "created_at" : "2020-06-09T14:51:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641348347",
      "id" : 641348347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTM0ODM0Nw==",
      "updated_at" : "2020-06-09T14:51:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641348347",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r437515881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437515881"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Let's add some info about the choice of SHA256 + ChaCha20 here. It essentially compresses the item (e.g. a serialised UTXO) into 3072 bits. Because ChaCha20 doesn't compress - it's designed for encryption - we feed it a SHA256() hash; it then decompresses that 256 bits into 3072.\r\n\r\nWhy 3072 bits? Because it's safe enough, according to @sipa's mailinglist post:\r\n```\r\nThankfully, [6] also shows that the k-sum problem cannot be\r\nefficiently solved in groups in which the discrete logarithm problem\r\nis hard, as an efficient k-sum solver can be used to compute discrete\r\nlogarithms. As a result, MuHash modulo a sufficiently large safe prime\r\nis provably secure under the DL assumption. Common guidelines on\r\nsecurity parameters [7] say that 3072-bit DL has about 128 bits of\r\nsecurity. A final 256-bit hash can be applied to the 3072-bit result\r\nwithout loss of security to reduce the final size.\r\n```\r\n\r\nIIUC we could apply any other digest on a serialised UTXO as long as it produces at least ~3000 bits. Since sha256 and ChaCha20 are well studied an we use them for other things, they do the job.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-09T15:22:14Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r437515881",
      "id" : 437515881,
      "line" : 47,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxNTg4MQ==",
      "original_commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "original_line" : 47,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 47,
      "pull_request_review_id" : 427275640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437515881",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From the PR Review club minutes: https://bitcoincore.reviews/19055.html#l-195\r\n\r\n> sipa toÂ fjahr: if you're going to cache the hash for every block... that's actually an argument in favor of ECMH, as the minimal \"state\" to keep for ECMH is 33 bytes only, while for MuHash it's 384 bytes\r\n\r\nAnd above:\r\n\r\n> The primary difference between MuHash and ECMH is caching:\r\n> \r\n> * ECMH is more CPU time overall, but the time is mostly in computing the \"effect\" of a set of additions/deletions; applying that effect to the overall hash is extremely cheap. Furthermore, a 64-byte precomputed \"patch\" per set of additions/deletions can be created, which means a patch could be cached per-transaction, and then very cheaply applied when the transaction confirms. So it allows doing most of the work ahead of time (before the block arrives).\r\n> * MuHash is cheaper overall, but the time is mostly in applying the changes to the overall hash. This means caching isn't very useful (and also the caches would be 768 bytes, which is pretty large). If the intent is computing things in the background, or at block connection time, then this is a better (and simpler) approach.\r\n\r\nWe should probably clarify what's meant with \"caching\".\r\n\r\nWith `-coinstatsindex` we store the UTXO set hash for every height. This makes the RPC blazing fast. With MuHash it uses ~500 MB for the current chain vs 39 MB with ECMH. The latter is so small I can see us turning that on by default one day (assuming ECMH calculation adds negligible overhead to IBD). But 500 MB isn't unacceptable for an advanced user who needs `gettxoutsetinfo` (disclaimer: yours truly [needs the index](https://github.com/BitMEXResearch/forkmonitor/issues/139), but has no use for any hash).\r\n\r\nWhen you don't have the index enabled, MuHash is faster than ECMH, but both are unacceptably slow for anyone using the feature more than once. So in practice I expect anyone who needs this feature to turn on the index.\r\n\r\nAssuming this feature is mostly used with an index, then ECMH seems the better option in terms of storage.\r\n\r\nConceptionally I find MuHash very simple and we have all the ingredients here. We might as well use it for the initial `-coinstatsindex`, and add ECMH later, as well as any briljant other ideas.",
      "created_at" : "2020-06-09T16:35:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641420023",
      "id" : 641420023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTQyMDAyMw==",
      "updated_at" : "2020-06-09T16:35:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641420023",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438026185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438026185"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : ">  Because ChaCha20 doesn't compress - it's designed for encryption - we feed it a SHA256() hash; it then decompresses that 256 bits into 3072.\r\n\r\nI think that argument is a little too ad-hoc for serious crypto. The MuHash paper assumes that elements are first hashed with a hash function that they model as a random oracle (RO). Now while SHA256 with fixed inputs itself is a good choice for something modeled as a RO, this is not immediately clear to me for `ChaCha20-3072-bits(key=SHA256(.))`, even though that looks okay.\r\n\r\nIf SHA256 is modeled as a RO and ChaCha20 as an ideal cipher, then this is probably good. And MuHash assumes a RO but AFACT then relies only on the fact that the outputs are uniformly and independently distributed over the target group (see [Lemma 3.1 in the paper](https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf)) and there is no RO-programming or other advanced stuff involved. And indeed, `ChaCha20-3072-bits(key=SHA256(.))` should be negligibly close to this, even if we just assume that ChaCha20 is a PRF instead of an ideal cipher. But this requires some more attention and some more eyes.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-10T10:35:36Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438026185",
      "id" : 438026185,
      "in_reply_to_id" : 437515881,
      "line" : 47,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyNjE4NQ==",
      "original_commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "original_line" : 47,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 47,
      "pull_request_review_id" : 427926624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438026185",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Another data point is the implementation complexity (code lines etc). If we want arithmetic incl. ASM here, this needs to be maintained whereas for ECMH the basic primitives may just be there already there in secp256k1. Not sure if that makes a large difference but it's something to keep in mind.",
      "created_at" : "2020-06-10T12:05:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641958916",
      "id" : 641958916,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTk1ODkxNg==",
      "updated_at" : "2020-06-10T12:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641958916",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438102500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438102500"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I think that argument is a little too ad-hoc for serious crypto.\r\n\r\nCompletely agree. I'm trying to tease out what we know. For the purpose of an index it doesn't matter too much. We can use MuHash to experiment with this concept, and abandon it for something better. By the time anyone proposes to use this for consensus, we'll need a much stronger proof.\r\n\r\nThat said, there should be strongly worded warnings in the header, because other project might prematurely run with this if it \"works in Bitcoin\". ",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-10T13:00:47Z",
      "diff_hunk" : "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438102500",
      "id" : 438102500,
      "in_reply_to_id" : 437515881,
      "line" : 47,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMjUwMA==",
      "original_commit_id" : "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "original_line" : 47,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 47,
      "pull_request_review_id" : 428026795,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438102500",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> With `-coinstatsindex` we store the UTXO set hash for every height. This makes the RPC blazing fast. With MuHash it uses ~500 MB for the current chain vs 39 MB with ECMH. The latter is so small I can see us turning that on by default one day (assuming ECMH calculation adds negligible overhead to IBD). But 500 MB isn't unacceptable for an advanced user who needs `gettxoutsetinfo` (disclaimer: yours truly [needs the index](https://github.com/BitMEXResearch/forkmonitor/issues/139), but has no use for any hash).\r\n> \r\n> When you don't have the index enabled, MuHash is faster than ECMH, but both are unacceptably slow for anyone using the feature more than once. So in practice I expect anyone who needs this feature to turn on the index.\r\n> \r\n> Assuming this feature is mostly used with an index, then ECMH seems the better option in terms of storage.\r\n\r\nThere is no real difference in storage because I am not saving the `MuHash3072` object for every block but the finalized hash. I didn't even think about storage when I made that decision tbh. Intuitively this made more sense to me because if we access historical blocks to get their stats all we would do with the MuHash is finalize it anyway. So we save a little bit of CPU every time we do it. There is currently only one `MuHash3072` object maintained at the tip and if there is a reorg I am rolling back the reorged blocks. This takes longer than accessing a stored `MuHash3072` object of course but that trade-off seemed worth it to me even without storage because we don't see too many reorgs these days and it's really not that long to roll back a block and add another.\r\n\r\nOn my current mainnet node the whole `indexes/coinstats` folder is 83 MB large. That includes all the stats, not just the hash. Was the 500 MB number a theoretical calculation or did you see this in practice? If your folder is that large I would need to investigate.\r\n\r\n",
      "created_at" : "2020-06-10T13:01:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641990925",
      "id" : 641990925,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTk5MDkyNQ==",
      "updated_at" : "2020-06-10T13:01:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641990925",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My calculation was based on 768 bytes of cache, but that's off by a factor 2. A finalised MuHash3072 uses 3072 bits. So for 640,000 blocks that's 234 MB.\r\n\r\nI suppose you could store just the sha256 hash for historical blocks, only keep 3072 bits for the most recent block, and use that to move forward or roll back. In that case storage is the same as with ECMH. I can't think of a use case for the full 3072 bits. Initially I was thinking of it as a set, so you potentially query it for the presence of a UTXO, but that's not actually how it works. So perhaps there really is no point in keeping the full 3072 bits for historical blocks.",
      "created_at" : "2020-06-10T13:10:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641996489",
      "id" : 641996489,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTk5NjQ4OQ==",
      "updated_at" : "2020-06-10T13:10:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641996489",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "There would be no reason to cache the internal state except maybe for a few in-memory blocks near the tip or something like that just to speed up reorgs.\r\n",
      "created_at" : "2020-06-11T01:08:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-642345673",
      "id" : 642345673,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjM0NTY3Mw==",
      "updated_at" : "2020-06-11T01:08:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642345673",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Implemented the use of SHA256 and also added some clarification on the \"set\" question in the docs.",
      "created_at" : "2020-06-11T21:54:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-642946245",
      "id" : 642946245,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mjk0NjI0NQ==",
      "updated_at" : "2020-06-11T21:54:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642946245",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439532565"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439532565"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit fe9ea729fc67e012de773975018a0f749c03790f: might as well move all bench code to 5675d28f22b3e3745226f40aac023c0d689b5acd ",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-12T16:49:17Z",
      "diff_hunk" : "@@ -4,6 +4,7 @@\n \n \n #include <bench/bench.h>\n+#include <crypto/muhash.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439532565",
      "id" : 439532565,
      "line" : 7,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMjU2NQ==",
      "original_commit_id" : "fe9ea729fc67e012de773975018a0f749c03790f",
      "original_line" : 7,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : 4,
      "pull_request_review_id" : 429893490,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439532565",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439537666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439537666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`unsigned char out[32];` is added in 106f9148848ffa64b433f1bc2dd6980930a4cb02 and dropped in fe9ea729fc67e012de773975018a0f749c03790f",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-12T16:59:28Z",
      "diff_hunk" : "@@ -212,7 +212,6 @@ class SHA256Writer\n \n     uint256 GetHash() {\n         uint256 result;\n-        unsigned char out[32];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439537666",
      "id" : 439537666,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNzY2Ng==",
      "original_commit_id" : "fe9ea729fc67e012de773975018a0f749c03790f",
      "original_line" : 215,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/hash.h",
      "position" : null,
      "pull_request_review_id" : 429893490,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439537666",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors If you mean a bigint library for the C++ side, sure - my original email points out that GMP is faster than this code, but I don't want to add a new dependency for this. The Python code uses Python's native bigint support.",
      "created_at" : "2020-06-12T18:09:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643415794",
      "id" : 643415794,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzQxNTc5NA==",
      "updated_at" : "2020-06-12T18:09:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643415794",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> a bigint library for the C++ side\r\n\r\nThat's what I meant. I agree adding all of GMP is overkill.",
      "created_at" : "2020-06-12T18:18:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643419477",
      "id" : 643419477,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzQxOTQ3Nw==",
      "updated_at" : "2020-06-12T18:18:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643419477",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "There's some discussion about tradeoffs and here's another small point to consider. MuHash3072 introduces cryptographic assumptions that are not used in Bitcoin yet. This is unusual but not a big thing given these are very mild assumptions (i.e., either finite field DL is hard enough *or* Wagner's algorithm is the best method to find collisions here), and most importantly, this is currently just intended to be used for sanity checks. Still, everything else equal, EC-MuHash would not introduce new assumptions. If this functionality will ever be used in relation with chain validation, one should keep this in mind.",
      "created_at" : "2020-06-12T19:17:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643442664",
      "id" : 643442664,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzQ0MjY2NA==",
      "updated_at" : "2020-06-12T19:17:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643442664",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I find the claim that the EC alternative does not introduce a new cryptographic assumption implausible: You can't break a discrete log by finding a number of random points that you do not know the discrete log of that add to a selected point. ",
      "created_at" : "2020-06-13T01:49:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643551262",
      "id" : 643551262,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzU1MTI2Mg==",
      "updated_at" : "2020-06-13T01:49:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643551262",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@gmaxwell Solving the generalized birthday problem is provably as hard as the DL problem in the same group (but it may be much harder as well), I think. So under the assumption that DL is hard in secp256k1, then the generalized birthday problem is hard over it, and that implies collision resistance for the ECMH hash based on it.",
      "created_at" : "2020-06-13T01:57:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643552222",
      "id" : 643552222,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzU1MjIyMg==",
      "updated_at" : "2020-06-13T01:57:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643552222",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sorry, some theory crypto stuff ahead...\r\n\r\n> I find the claim that the EC alternative does not introduce a new cryptographic assumption implausible: You can't break a discrete log by finding a number of random points that you do not know the discrete log of that add to a selected point.\r\n\r\nOh, in the (programmable) random oracle model, you can! It's in fact straight forward and it's buried in the proof of Lemma 3.1 in the [MuHash paper](https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf). I missed that this Lemma relies on programming the random oracle when I wrote https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438026185. It's not immediately obvious because they split the proof in Lemma 3.1 (reducing collisions to balance problem) and Lemma B.2 (reducing balance problem to DL). Say you're given an algorithm C that finds collisions in MuHash, and it needs to access the prehashing function H as a random oracle. Then when C asks you for H(q_i) for some query q_i, you can draw a random r_i, set a_i = r_i*G, and reply with H(q_i) = a_i. Then you know the DL of all the a_i, and you can continue from that.\r\n\r\nHowever this requires modeling the prehashing function as a programmable random oracle. In our case, this function is `ChaCha20-3072-bits(key=SHA256(.))`. This means that we should really have a closer look at this function. I still believe that this is as good as a random oracle if we assume SHA256 is a random oracle and ChaCha20 is an ideal cipher, and this may very well be clear to someone who has worked on random oracle indifferentiability and the ideal cipher model but I haven't, so I'd need to do some reading or ask people who are more familiar with this stuff. \r\n",
      "created_at" : "2020-06-13T09:39:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643598704",
      "id" : 643598704,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzU5ODcwNA==",
      "updated_at" : "2020-06-13T09:39:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643598704",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439813927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439813927"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-14T10:17:29Z",
      "diff_hunk" : "@@ -4,6 +4,7 @@\n \n \n #include <bench/bench.h>\n+#include <crypto/muhash.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439813927",
      "id" : 439813927,
      "in_reply_to_id" : 439532565,
      "line" : 7,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMzkyNw==",
      "original_commit_id" : "fe9ea729fc67e012de773975018a0f749c03790f",
      "original_line" : 7,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : 4,
      "pull_request_review_id" : 430205685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439813927",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439813934"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439813934"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-14T10:17:33Z",
      "diff_hunk" : "@@ -212,7 +212,6 @@ class SHA256Writer\n \n     uint256 GetHash() {\n         uint256 result;\n-        unsigned char out[32];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439813934",
      "id" : 439813934,
      "in_reply_to_id" : 439537666,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMzkzNA==",
      "original_commit_id" : "fe9ea729fc67e012de773975018a0f749c03790f",
      "original_line" : 215,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/hash.h",
      "position" : null,
      "pull_request_review_id" : 430205691,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439813934",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed @Sjors comments.",
      "created_at" : "2020-06-14T10:18:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643746561",
      "id" : 643746561,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc0NjU2MQ==",
      "updated_at" : "2020-06-14T10:18:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643746561",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879174"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879174"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d111135a3c928d1915f48cb4d46ca89a3d179686\r\n\r\nnit, space after `for`.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-14T23:37:26Z",
      "diff_hunk" : "@@ -73,6 +74,13 @@ class MuHash3072\n \n     /* Finalize into a 384-byte hash. Does not change this object's value. */\n     void Finalize(unsigned char* hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        for(int i = 0; i < obj.LIMBS; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879174",
      "id" : 439879174,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3OTE3NA==",
      "original_commit_id" : "d111135a3c928d1915f48cb4d46ca89a3d179686",
      "original_line" : 80,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : null,
      "pull_request_review_id" : 430260841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879174",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879324"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879324"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d111135a3c928d1915f48cb4d46ca89a3d179686\r\n\r\nnit, newline after, usually project headers are split from others.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-14T23:39:36Z",
      "diff_hunk" : "@@ -9,6 +9,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <serialize.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879324",
      "id" : 439879324,
      "line" : 12,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3OTMyNA==",
      "original_commit_id" : "d111135a3c928d1915f48cb4d46ca89a3d179686",
      "original_line" : 12,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 12,
      "pull_request_review_id" : 430260841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879324",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879455"
         }
      },
      "author_association" : "MEMBER",
      "body" : "4b493677ab2c1d90cb8b11659660d18c3f61171f\r\n\r\nShould these assertions be conditional to `#ifdef DEBUG`? Same in `Multiply`.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-14T23:41:04Z",
      "diff_hunk" : "@@ -0,0 +1,277 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879455",
      "id" : 439879455,
      "line" : 189,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3OTQ1NQ==",
      "original_commit_id" : "4b493677ab2c1d90cb8b11659660d18c3f61171f",
      "original_line" : 189,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : 189,
      "pull_request_review_id" : 430260841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879455",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879482"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879482"
         }
      },
      "author_association" : "MEMBER",
      "body" : "4b493677ab2c1d90cb8b11659660d18c3f61171f\r\n\r\nnit, add `// namespace`.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-14T23:41:26Z",
      "diff_hunk" : "@@ -0,0 +1,277 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[9]);\n+    for (int j = 0; j < 256; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[8]);\n+    for (int j = 0; j < 128; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[7]);\n+    for (int j = 0; j < 64; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[6]);\n+    for (int j = 0; j < 32; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[5]);\n+    for (int j = 0; j < 8; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[3]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 1; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 5; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[2]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+\n+    *out = x;\n+}\n+\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879482",
      "id" : 439879482,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3OTQ4Mg==",
      "original_commit_id" : "4b493677ab2c1d90cb8b11659660d18c3f61171f",
      "original_line" : 232,
      "original_position" : 232,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : null,
      "pull_request_review_id" : 430260841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879482",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439880752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439880752"
         }
      },
      "author_association" : "MEMBER",
      "body" : "18c4d69f8d771aa596a321cf1d6c8e6e106d42a9\r\n\r\nnit, should fix format.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-14T23:55:13Z",
      "diff_hunk" : "@@ -191,6 +191,39 @@ class CHashVerifier : public CHashWriter\n     }\n };\n \n+/** A writer stream that computes a SHA256 hash. */\n+class SHA256Writer\n+{\n+private:\n+    CSHA256 ctx;\n+\n+    const int nType;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439880752",
      "id" : 439880752,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4MDc1Mg==",
      "original_commit_id" : "18c4d69f8d771aa596a321cf1d6c8e6e106d42a9",
      "original_line" : 200,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/hash.h",
      "position" : null,
      "pull_request_review_id" : 430260841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439880752",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> However this requires modeling the prehashing function as a programmable random oracle. In our case, this function is `ChaCha20-3072-bits(key=SHA256(.))`. This means that we should really have a closer look at this function. I still believe that this is as good as a random oracle if we assume SHA256 is a random oracle and ChaCha20 is an ideal cipher, and this may very well be clear to someone who has worked on random oracle indifferentiability and the ideal cipher model but I haven't, so I'd need to do some reading or ask people who are more familiar with this stuff.\r\n\r\nOkay, this is indeed pretty direct from the ideal cipher model, which is not less a stretch than the random oracle model in the end. In the ideal cipher model, the cipher is modeled as a function E(k,x), which is a perfectly random permutation for every key k, and by giving the attacker *oracle access* to this function (and it's inverse). So it's very similar to the random oracle model for some hash function H and you can play the same programming tricks. That is, if you get a query H(q_i), you can use a random H(q_i) and program E(H(q_i), 0)|| ... ||E(H(x), 5) = r_i * G. (Note here that 3072/512 = 6, where 512 is the bitsize of the ChaCha permutation.) And if you get a query E(k, x) / E^-1(k, x) for some key k* you've never seen before, just give a random answer, the attacker will find a preimage of H that maps to k* only with negligible probability.\r\n\r\n__tl;dr (or if I lost you)__:\r\nIf you believe in provable security of cryptographic constructions, and we compare to the common assumptions we already need for working consensus, then\r\n - ECMH (= MuHash on secp256k1) needs the additional assumption that ChaCha20 is a good PRG.\r\n - MuHash3072 needs the additional assumption that ChaCha20 is a good PRG *and* that either i) the finite field discrete logarithm is hard in 3072-bit fields or ii) Wagner's algorithm is the best method to find collisions here.\r\n\r\nAs I all these assumptions are fine. However, there's indeed a difference, so \r\n\r\n> If this functionality will ever be used in relation with chain validation, one should keep this in mind. \r\n",
      "created_at" : "2020-06-15T11:45:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-644079086",
      "id" : 644079086,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDA3OTA4Ng==",
      "updated_at" : "2020-06-15T11:45:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644079086",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221681"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-15T14:35:28Z",
      "diff_hunk" : "@@ -191,6 +191,39 @@ class CHashVerifier : public CHashWriter\n     }\n };\n \n+/** A writer stream that computes a SHA256 hash. */\n+class SHA256Writer\n+{\n+private:\n+    CSHA256 ctx;\n+\n+    const int nType;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221681",
      "id" : 440221681,
      "in_reply_to_id" : 439880752,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTY4MQ==",
      "original_commit_id" : "18c4d69f8d771aa596a321cf1d6c8e6e106d42a9",
      "original_line" : 200,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/hash.h",
      "position" : null,
      "pull_request_review_id" : 430704951,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221681",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221759"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-15T14:35:34Z",
      "diff_hunk" : "@@ -0,0 +1,277 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[9]);\n+    for (int j = 0; j < 256; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[8]);\n+    for (int j = 0; j < 128; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[7]);\n+    for (int j = 0; j < 64; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[6]);\n+    for (int j = 0; j < 32; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[5]);\n+    for (int j = 0; j < 8; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[3]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 1; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 5; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[2]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+\n+    *out = x;\n+}\n+\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221759",
      "id" : 440221759,
      "in_reply_to_id" : 439879482,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTc1OQ==",
      "original_commit_id" : "4b493677ab2c1d90cb8b11659660d18c3f61171f",
      "original_line" : 232,
      "original_position" : 232,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : null,
      "pull_request_review_id" : 430705047,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221759",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221831"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221831"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Makes sense to me. Added.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-15T14:35:39Z",
      "diff_hunk" : "@@ -0,0 +1,277 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221831",
      "id" : 440221831,
      "in_reply_to_id" : 439879455,
      "line" : 189,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTgzMQ==",
      "original_commit_id" : "4b493677ab2c1d90cb8b11659660d18c3f61171f",
      "original_line" : 189,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : 189,
      "pull_request_review_id" : 430705145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221831",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221890"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-15T14:35:44Z",
      "diff_hunk" : "@@ -9,6 +9,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <serialize.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221890",
      "id" : 440221890,
      "in_reply_to_id" : 439879324,
      "line" : 12,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTg5MA==",
      "original_commit_id" : "d111135a3c928d1915f48cb4d46ca89a3d179686",
      "original_line" : 12,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 12,
      "pull_request_review_id" : 430705216,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221890",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221999"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221999"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-15T14:35:53Z",
      "diff_hunk" : "@@ -73,6 +74,13 @@ class MuHash3072\n \n     /* Finalize into a 384-byte hash. Does not change this object's value. */\n     void Finalize(unsigned char* hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        for(int i = 0; i < obj.LIMBS; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221999",
      "id" : 440221999,
      "in_reply_to_id" : 439879174,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTk5OQ==",
      "original_commit_id" : "d111135a3c928d1915f48cb4d46ca89a3d179686",
      "original_line" : 80,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : null,
      "pull_request_review_id" : 430705362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221999",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed @promag 's review comments.",
      "created_at" : "2020-06-15T14:36:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-644174444",
      "id" : 644174444,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDE3NDQ0NA==",
      "updated_at" : "2020-06-15T14:36:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644174444",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  That's what I meant. I agree adding all of GMP is overkill.\r\n\r\nAlso mind that GMP is not license-compatible with bitcoin (it's LGPL). So, that's another stumbling block besides our desire to limit third-party dependencies.\r\n\r\n> As I all these assumptions are fine. However, there's indeed a difference, so\r\n\r\nI have a hard time reading how serious your concerns are. So to be clear: in your opinion, this is not a blocker for merging this?",
      "created_at" : "2020-06-18T13:06:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-646004470",
      "id" : 646004470,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjAwNDQ3MA==",
      "updated_at" : "2020-06-18T13:12:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646004470",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r442211563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442211563"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why are these implemented as macros instead of (inline) functions?",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-06-18T13:07:41Z",
      "diff_hunk" : "@@ -0,0 +1,281 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r442211563",
      "id" : 442211563,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMTU2Mw==",
      "original_commit_id" : "3585297e5e7578150683b809dd7b46bcaf63351f",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : null,
      "pull_request_review_id" : 433263304,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442211563",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I have a hard time reading how serious your concerns are. So to be clear: in your opinion, this is not a blocker for merging this?\r\n\r\nSorry if my posts are confusing. I don't have serious concerns at all and no, I don't believe this is a blocker. \r\n\r\nLet me try to explain. After I looked at the details, I believe that both MuHash3072 and ECMH (= MuHash on secp256k1) are very solid choices and we do not need to worry about either. What I was pointing out is that ECMH is a slightly more conservative choice if you look at the cryptographic assumptions because ECMH is better aligned with the assumptions that we already make in Bitcoin. But this is just a very small point in all the tradeoffs discussed between MuHash3072 and ECMH, and it's perfectly reasonable that we prefer performance over being super conservative here, in  particular because MuHash is intended for `gettxoutsetinfo`, which serves merely as a sanity check. I believe if MuHash was planned to be used in the consensus implementation, then we might come to the conclusion that we prefer being a little more conservative over getting a little bit more performance out of it. But as far as I understand, there are currently no plans to use MuHash in consensus, so this is not relevant currently.",
      "created_at" : "2020-06-19T12:47:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-646616902",
      "id" : 646616902,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjYxNjkwMg==",
      "updated_at" : "2020-06-19T12:47:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646616902",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Could rebase on top of #19286 and add fuzzing of the MuHash3072 class to the `src/test/fuzz/crypto.cpp` fuzzing harness in order to demonstrate (some level of) code robustness (more specifically: absence of warnings from ASan, MSan and UBSan when processing malformed/unexpected inputs)? :)",
      "created_at" : "2020-06-22T13:28:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-647519700",
      "id" : 647519700,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NzUxOTcwMA==",
      "updated_at" : "2020-06-22T13:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647519700",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Could rebase on top of #19286 and add fuzzing of the MuHash3072 class to the `src/test/fuzz/crypto.cpp` fuzzing harness in order to demonstrate (some level of) code robustness (more specifically: absence of warnings from ASan, MSan and UBSan when processing malformed/unexpected inputs)? :)\r\n\r\nDone. I am still learning more about fuzzing so looking forward to your feedback. :)",
      "created_at" : "2020-07-01T21:06:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-652646724",
      "id" : 652646724,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1MjY0NjcyNA==",
      "updated_at" : "2020-07-01T21:06:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652646724",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448624203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448624203"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I am not aware of a reason why inline functions couldn't be used here. From my side, the only reason is that this is @sipa 's original code and I did not feel so strongly about it that it justified a bigger change. Of course, I will do it if that's preferred by reviewers.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-01T21:25:06Z",
      "diff_hunk" : "@@ -0,0 +1,281 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448624203",
      "id" : 448624203,
      "in_reply_to_id" : 442211563,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDIwMw==",
      "original_commit_id" : "3585297e5e7578150683b809dd7b46bcaf63351f",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : null,
      "pull_request_review_id" : 441206737,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448624203",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448630059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448630059"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It may have been that I copied this from code that was originally written for C.\r\n\r\nFeel free to change it; inline functions would be far more C++ish.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-01T21:39:01Z",
      "diff_hunk" : "@@ -0,0 +1,281 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448630059",
      "id" : 448630059,
      "in_reply_to_id" : 442211563,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMDA1OQ==",
      "original_commit_id" : "3585297e5e7578150683b809dd7b46bcaf63351f",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : null,
      "pull_request_review_id" : 441213789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448630059",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448630571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448630571"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: `MuHash3072 muhash;` is enough :)",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-01T21:40:17Z",
      "diff_hunk" : "@@ -33,6 +34,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     CSHA256 sha256;\n     CSHA512 sha512;\n     CSipHasher sip_hasher{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>()};\n+    MuHash3072 muhash = MuHash3072();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448630571",
      "id" : 448630571,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMDU3MQ==",
      "original_commit_id" : "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "original_line" : 37,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto.cpp",
      "position" : null,
      "pull_request_review_id" : 441214410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448630571",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448633047"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448633047"
         }
      },
      "author_association" : "MEMBER",
      "body" : "To not interfere with the other fuzzers by changing the data size, what about either creating a new `case 3` specifically for this MuHash3072 code (the resize and the lines immediately below), or alternatively do something along the lines of `std::vector<uint8_t> muhash_data = data;` + `muhash_data.resize(32);`?",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-01T21:46:14Z",
      "diff_hunk" : "@@ -58,6 +60,14 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)Hash160(data);\n             (void)Hash160(data.begin(), data.end());\n             (void)sha512.Size();\n+\n+            // MuHash3072 only accepts a fixed key length of 32 bytes\n+            data.resize(32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448633047",
      "id" : 448633047,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMzA0Nw==",
      "original_commit_id" : "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "original_line" : 65,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto.cpp",
      "position" : null,
      "pull_request_review_id" : 441214410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448633047",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448634840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448634840"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Make sure you also exercise the other constructor `MuHash3072::MuHash3072(const unsigned char* key32)`. Perhaps `ConsumeBool()` to choose which constructor to use?\r\n\r\nGenerally a good thing to do when testing a fuzzer is to add `assert(false);` to all code paths you want to reach and then fuzz/tweak/repeat until you've reached them all.\r\n\r\nIn this case we want to make sure that relevant code paths in the following functions are covered:\r\n\r\n```\r\nMuHash3072::MuHash3072() noexcept\r\nMuHash3072::MuHash3072(const unsigned char* key32) noexcept\r\nvoid MuHash3072::Finalize(unsigned char* hash384) noexcept\r\nMuHash3072& MuHash3072::operator*=(const MuHash3072& x) noexcept\r\nMuHash3072& MuHash3072::operator/=(const MuHash3072& x) noexcept\r\n```",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-01T21:50:38Z",
      "diff_hunk" : "@@ -67,10 +77,11 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)sha1.Reset();\n             (void)sha256.Reset();\n             (void)sha512.Reset();\n+            muhash = MuHash3072();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448634840",
      "id" : 448634840,
      "line" : 81,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNDg0MA==",
      "original_commit_id" : "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "original_line" : 81,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto.cpp",
      "position" : 37,
      "pull_request_review_id" : 441214410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448634840",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448638490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448638490"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Brevity is the soul of wit",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-01T22:00:07Z",
      "diff_hunk" : "@@ -33,6 +34,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     CSHA256 sha256;\n     CSHA512 sha512;\n     CSipHasher sip_hasher{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>()};\n+    MuHash3072 muhash = MuHash3072();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448638490",
      "id" : 448638490,
      "in_reply_to_id" : 448630571,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODQ5MA==",
      "original_commit_id" : "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "original_line" : 37,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto.cpp",
      "position" : null,
      "pull_request_review_id" : 441223837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448638490",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK 62e842c15eeb7af5d195200d6a605113f16a7e39 modulo \"not interfere with the other fuzzers by changing the data size\". Complete code coverage can wait for a followup (it already covers the basics).",
      "created_at" : "2020-07-06T11:34:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-654179346",
      "id" : 654179346,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NDE3OTM0Ng==",
      "updated_at" : "2020-07-06T11:34:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654179346",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r452886409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452886409"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-10T14:40:33Z",
      "diff_hunk" : "@@ -33,6 +34,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     CSHA256 sha256;\n     CSHA512 sha512;\n     CSipHasher sip_hasher{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>()};\n+    MuHash3072 muhash = MuHash3072();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r452886409",
      "id" : 452886409,
      "in_reply_to_id" : 448630571,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NjQwOQ==",
      "original_commit_id" : "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "original_line" : 37,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto.cpp",
      "position" : null,
      "pull_request_review_id" : 446457462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452886409",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r452886730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452886730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done, opted for your second suggestion.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-10T14:41:01Z",
      "diff_hunk" : "@@ -58,6 +60,14 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)Hash160(data);\n             (void)Hash160(data.begin(), data.end());\n             (void)sha512.Size();\n+\n+            // MuHash3072 only accepts a fixed key length of 32 bytes\n+            data.resize(32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r452886730",
      "id" : 452886730,
      "in_reply_to_id" : 448633047,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NjczMA==",
      "original_commit_id" : "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "original_line" : 65,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto.cpp",
      "position" : null,
      "pull_request_review_id" : 446457867,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452886730",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r452887936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452887936"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That constructor is used for the MuHash objects that get added or removed. I checked all the public functions as you suggested and they seem to all be covered.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-10T14:43:00Z",
      "diff_hunk" : "@@ -67,10 +77,11 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)sha1.Reset();\n             (void)sha256.Reset();\n             (void)sha512.Reset();\n+            muhash = MuHash3072();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r452887936",
      "id" : 452887936,
      "in_reply_to_id" : 448634840,
      "line" : 81,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NzkzNg==",
      "original_commit_id" : "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "original_line" : 81,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto.cpp",
      "position" : 37,
      "pull_request_review_id" : 446459430,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452887936",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed @practicalswift 's feedback and turned the macros into inline functions.",
      "created_at" : "2020-07-10T14:43:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-656713016",
      "id" : 656713016,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NjcxMzAxNg==",
      "updated_at" : "2020-07-10T14:43:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656713016",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fjahr Thanks for addressing the fuzzing feedback. The fuzzing changes look good (`src/test/fuzz/crypto.cpp`). (I haven't reviewed the rest yet.)",
      "created_at" : "2020-07-10T19:03:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-656837402",
      "id" : 656837402,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NjgzNzQwMg==",
      "updated_at" : "2020-07-10T19:03:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656837402",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Replaced the first commit which added `SHA256Writer` with commit 284ca85e3fc4d30f60e7fbb903303b4dc935d82c from #17977 (Taproot) which provides the same functionality in fewer LOC. It uses `CHashWriter` instead of creating a new class, which is nice, and if this gets merged before #17977 there is one less commit to review.",
      "created_at" : "2020-07-11T21:23:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-657132203",
      "id" : 657132203,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzEzMjIwMw==",
      "updated_at" : "2020-07-11T21:23:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657132203",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r455770853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455770853"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't `GetCheapHash` be calling `GetSHA256`? I.e. \"Cheap\" refers to a single rather than a double hash. cc @JeremyRubin @sipa ",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-16T13:06:48Z",
      "diff_hunk" : "@@ -132,20 +132,33 @@ class CHashWriter\n         ctx.Write((const unsigned char*)pch, size);\n     }\n \n-    // invalidates the object\n+    /** Compute the double-SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n     uint256 GetHash() {\n         uint256 result;\n-        ctx.Finalize((unsigned char*)&result);\n+        ctx.Finalize(result.begin());\n+        ctx.Reset().Write(result.begin(), CSHA256::OUTPUT_SIZE).Finalize(result.begin());\n+        return result;\n+    }\n+\n+    /** Compute the SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n+    uint256 GetSHA256() {\n+        uint256 result;\n+        ctx.Finalize(result.begin());\n         return result;\n     }\n \n     /**\n      * Returns the first 64 bits from the resulting hash.\n      */\n     inline uint64_t GetCheapHash() {\n-        unsigned char result[CHash256::OUTPUT_SIZE];\n-        ctx.Finalize(result);\n-        return ReadLE64(result);\n+        uint256 result = GetHash();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r455770853",
      "id" : 455770853,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3MDg1Mw==",
      "original_commit_id" : "00a578e9bc5a2b691d529780824c90333013f1d6",
      "original_line" : 142,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/hash.h",
      "position" : null,
      "pull_request_review_id" : 449827562,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455770853",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Let's try to get #18071 in first (for the first commit)",
      "created_at" : "2020-07-24T10:23:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-663471922",
      "id" : 663471922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MzQ3MTkyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-24T10:23:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663471922",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r460171013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460171013"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No because it's a behavior change :/\r\n\r\nIf someone wants to make sure that we don't rely on cheaphashes being consistent across boots then yes.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-24T16:49:32Z",
      "diff_hunk" : "@@ -132,20 +132,33 @@ class CHashWriter\n         ctx.Write((const unsigned char*)pch, size);\n     }\n \n-    // invalidates the object\n+    /** Compute the double-SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n     uint256 GetHash() {\n         uint256 result;\n-        ctx.Finalize((unsigned char*)&result);\n+        ctx.Finalize(result.begin());\n+        ctx.Reset().Write(result.begin(), CSHA256::OUTPUT_SIZE).Finalize(result.begin());\n+        return result;\n+    }\n+\n+    /** Compute the SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n+    uint256 GetSHA256() {\n+        uint256 result;\n+        ctx.Finalize(result.begin());\n         return result;\n     }\n \n     /**\n      * Returns the first 64 bits from the resulting hash.\n      */\n     inline uint64_t GetCheapHash() {\n-        unsigned char result[CHash256::OUTPUT_SIZE];\n-        ctx.Finalize(result);\n-        return ReadLE64(result);\n+        uint256 result = GetHash();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r460171013",
      "id" : 460171013,
      "in_reply_to_id" : 455770853,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MTAxMw==",
      "original_commit_id" : "00a578e9bc5a2b691d529780824c90333013f1d6",
      "original_line" : 142,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/hash.h",
      "position" : null,
      "pull_request_review_id" : 455038093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460171013",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r460172516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460172516"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Addrman's bucketing relies on it.\n\nWith a new addrman version we could change it to siphash instead, which would let us get rid of GetCheapHash entirely.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-24T16:52:08Z",
      "diff_hunk" : "@@ -132,20 +132,33 @@ class CHashWriter\n         ctx.Write((const unsigned char*)pch, size);\n     }\n \n-    // invalidates the object\n+    /** Compute the double-SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n     uint256 GetHash() {\n         uint256 result;\n-        ctx.Finalize((unsigned char*)&result);\n+        ctx.Finalize(result.begin());\n+        ctx.Reset().Write(result.begin(), CSHA256::OUTPUT_SIZE).Finalize(result.begin());\n+        return result;\n+    }\n+\n+    /** Compute the SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n+    uint256 GetSHA256() {\n+        uint256 result;\n+        ctx.Finalize(result.begin());\n         return result;\n     }\n \n     /**\n      * Returns the first 64 bits from the resulting hash.\n      */\n     inline uint64_t GetCheapHash() {\n-        unsigned char result[CHash256::OUTPUT_SIZE];\n-        ctx.Finalize(result);\n-        return ReadLE64(result);\n+        uint256 result = GetHash();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r460172516",
      "id" : 460172516,
      "in_reply_to_id" : 455770853,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MjUxNg==",
      "original_commit_id" : "00a578e9bc5a2b691d529780824c90333013f1d6",
      "original_line" : 142,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/hash.h",
      "position" : null,
      "pull_request_review_id" : 455039920,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460172516",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK bb3098bbaf1305aa9091ee5e3cd92f2973e04c68\r\nI have reviewed everything but the MuHash implementation in detail, and looked broadly at the MuHash code but could not follow all the specifics.\r\n\r\n> Let's try to get #18071 in first (for the first commit)\r\n\r\nMind that there doesn't seem to be agreement on that PR yet.",
      "created_at" : "2020-07-30T12:57:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-666348096",
      "id" : 666348096,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NjM0ODA5Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-30T13:03:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666348096",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r462991147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462991147"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would be nice to document here in a comment why this particular cascade is used, and how it works. It is not obvious to me.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-07-30T13:21:41Z",
      "diff_hunk" : "@@ -0,0 +1,288 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r462991147",
      "id" : 462991147,
      "line" : 215,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MTE0Nw==",
      "original_commit_id" : "bb3098bbaf1305aa9091ee5e3cd92f2973e04c68",
      "original_line" : 215,
      "original_position" : 211,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : 215,
      "pull_request_review_id" : 458393720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462991147",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-07-30T14:29:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-666400406",
      "id" : 666400406,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NjQwMDQwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-30T14:29:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666400406",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Let's try to get #18071 in first (for the first commit)\r\n\r\nIt's closed now in favor of #19601.\r\n",
      "created_at" : "2020-08-20T14:14:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-677692503",
      "id" : 677692503,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NzY5MjUwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-20T14:14:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677692503",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r475233273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475233273"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I have added a reference to a paper that explains this algorithm. Unfortunately, I think there is no publicly accessible version of that paper that we can link to here. The paid version is here: https://link.springer.com/chapter/10.1007/978-3-540-69485-4_10.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-08-23T15:36:02Z",
      "diff_hunk" : "@@ -0,0 +1,288 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r475233273",
      "id" : 475233273,
      "in_reply_to_id" : 462991147,
      "line" : 215,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzMzI3Mw==",
      "original_commit_id" : "bb3098bbaf1305aa9091ee5e3cd92f2973e04c68",
      "original_line" : 215,
      "original_position" : 211,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : 215,
      "pull_request_review_id" : 473021093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-11T11:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475233273",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased since #19601 was merged.",
      "created_at" : "2020-08-27T09:55:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-681848903",
      "id" : 681848903,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MTg0ODkwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-27T09:55:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681848903",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review re-ACK 24317aa5a1bd91b90e5971016e842b58f0b4ba62\r\nThanks for adding a comment to the Inverse function.",
      "created_at" : "2020-08-27T14:35:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-681989062",
      "id" : 681989062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MTk4OTA2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-27T14:38:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681989062",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-09-10T16:42:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-690481472",
      "id" : 690481472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MDQ4MTQ3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-10T16:42:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/690481472",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased",
      "created_at" : "2020-09-11T11:15:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-691034042",
      "id" : 691034042,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MTAzNDA0Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-11T11:15:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/691034042",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489117810"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489117810"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this should be `obj.data.LIMBS` and `obj.data.limbs[i]` ? Can add:\r\n\r\n```c++\r\n#include <streams.h>\r\n...\r\n    CDataStream ss(SER_DISK, PROTOCOL_VERSION);\r\n    ss << acc;\r\n```\r\n\r\nto exercise the code.\r\n\r\nIf this is being serialized by directly dumping the limbs, is there a problem if the code that serializes it uses `uint64_t` limbs and the code that deserializes uses `uint32_t` limbs? I think we read/write everything in little endian and `limbs[0]` is the least-significant limb so this works out okay.\r\n\r\nMight be good to add a test that serializing some constant ends up as a predictable constant, and deserializes back to the same thing, something like:\r\n\r\n```c++\r\n    MuHash3072 serchk = FromInt(1); serchk *= FromInt(2);\r\n    std::string ser_exp = \"ad5d5a19c789b21f95f9c2a09f264f8aab4ef29ca30824f7330a8c3f4c61c25a6035bc27476ade3a38f2f2bc576bfbeabdf69641a91b99631ef904d37103eff744129842b1fd83158db6466ab4b752278f04add175a7a41ab8ea1305f66855068730dd3baf1ad29d6e13c7ba3350864a8f96e2e9e5c1ca65e11ab3e361184213a3fb395ac5c86efe3997c671cc5d46df3e1b2f00bf09120ae252a0e985b2452be64d5f626c0bc03747355d91ff2aa31ea4087797b91c80af5003d4b3a2ba5c34cd4a8785712897cd2331bac1b749e4fe9d17a5bb68395e2571d1759dceb5609dfae38ec6186e8c2eb22ffeb9bb8330083ee15d4b816e117e6bc1399c707b3e9d01ae74d2f589d6eb8e9e58c572088476e0444e3dbc05c95867acdb7c18be551e0eb2189d3c39dd86dbc844dc70ac33f9328be9e3b0d792bb359498f5fb385e2d8a8e3a5cde7e3e4e8ba123d3e1eda0b859d3a56e548dd6d23a03ce82e01493f96a67abd3109f9f4315c966f8cba311d71899c04a7fd9618ed028580ffcd21263\";\r\n    CDataStream ss_chk(SER_DISK, PROTOCOL_VERSION);\r\n    ss_chk << serchk;\r\n    BOOST_CHECK_EQUAL(ser_exp, HexStr(ss_chk.str()));\r\n\r\n    MuHash3072 deserchk;\r\n    ss_chk >> deserchk;\r\n    unsigned char out2[384];\r\n    serchk.Finalize(out); deserchk.Finalize(out2);\r\n    BOOST_CHECK_EQUAL(HexStr(out), HexStr(out2));\r\n```\r\n",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-09-16T02:05:46Z",
      "diff_hunk" : "@@ -73,6 +75,13 @@ class MuHash3072\n \n     /* Finalize into a 384-byte hash. Does not change this object's value. */\n     void Finalize(unsigned char* hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        for (int i = 0; i < obj.LIMBS; ++i) {\n+            READWRITE(obj.limbs[i]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489117810",
      "id" : 489117810,
      "line" : 82,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNzgxMA==",
      "original_commit_id" : "4cb77c70d3d43ebe004dc130d51ab0c75913c3f5",
      "original_line" : 82,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 82,
      "pull_request_review_id" : 489223281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-16T03:20:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489117810",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489131218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489131218"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Might be better to accept a `Span` rather than having an implicit length? Also for `Finalize` perhaps -- sha3.cpp does it that way.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-09-16T02:55:58Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * This class does not enforce the use of a set as the data it represents.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, it is not clear if\n+ * security assumptions still hold in this case, so it should for now\n+ * only be used to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+private:\n+    Num3072 data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(const unsigned char* key32) noexcept;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489131218",
      "id" : 489131218,
      "line" : 68,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMTIxOA==",
      "original_commit_id" : "c540f8edc143e856474a27626cc0bd08018ed734",
      "original_line" : 66,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 68,
      "pull_request_review_id" : 489223281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-16T03:20:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489131218",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489133613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489133613"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Might be worth clarifying that muhash does not support checking if an element is a member of the set, and therefore it's not possible to (efficiently) enforce that you don't add members that are already in the set, or remove members that aren't in the set?\r\n\r\nMight also be worth being more explicit that the \"represent the running value as a fraction\" optimisation is a TODO.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-09-16T03:05:10Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * This class does not enforce the use of a set as the data it represents.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489133613",
      "id" : 489133613,
      "line" : 49,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMzYxMw==",
      "original_commit_id" : "c540f8edc143e856474a27626cc0bd08018ed734",
      "original_line" : 47,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.h",
      "position" : 49,
      "pull_request_review_id" : 489223281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-16T03:20:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489133613",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489135525"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489135525"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The headers suggest that removing things that aren't in the set is a bad idea (\"not clear if the security assumptions still hold\", \"should for now only be used to represent a set of elements\") so seems a bit odd to be doing it in the tests. Could convert it to `z *= x; z *= y; y *= x; z /= y;` to only add things that aren't present/remove things that are present.\r\n\r\nI think the comment in the header doesn't make sense though -- as I understand it, it should be equally fine (in security terms even) to remove a set by saying:\r\n\r\n```\r\n    MuHash3072 to_remove;\r\n    for (x : spent) { to_remove *= MuHash3072(x); }\r\n    set /= to_remove;\r\n```\r\n\r\nand\r\n\r\n```\r\n    MuHash3072 changes;\r\n    for (x : arrived) { changes *= MuHash3072(x); }\r\n    for (x : spent) { changes /= MuHash3072(x); }\r\n    set *= changes;\r\n```\r\n\r\neven though that's removing things from `changes` before they've been added.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-09-16T03:12:53Z",
      "diff_hunk" : "@@ -857,4 +858,58 @@ BOOST_AUTO_TEST_CASE(sha3_256_tests)\n     TestSHA3_256(\"72c57c359e10684d0517e46653a02d18d29eff803eb009e4d5eb9e95add9ad1a4ac1f38a70296f3a369a16985ca3c957de2084cdc9bdd8994eb59b8815e0debad4ec1f001feac089820db8becdaf896aaf95721e8674e5d476b43bd2b873a7d135cd685f545b438210f9319e4dcd55986c85303c1ddf18dc746fe63a409df0a998ed376eb683e16c09e6e9018504152b3e7628ef350659fb716e058a5263a18823d2f2f6ee6a8091945a48ae1c5cb1694cf2c1fe76ef9177953afe8899cfa2b7fe0603bfa3180937dadfb66fbbdd119bbf8063338aa4a699075a3bfdbae8db7e5211d0917e9665a702fc9b0a0a901d08bea97654162d82a9f05622b060b634244779c33427eb7a29353a5f48b07cbefa72f3622ac5900bef77b71d6b314296f304c8426f451f32049b1f6af156a9dab702e8907d3cd72bb2c50493f4d593e731b285b70c803b74825b3524cda3205a8897106615260ac93c01c5ec14f5b11127783989d1824527e99e04f6a340e827b559f24db9292fcdd354838f9339a5fa1d7f6b2087f04835828b13463dd40927866f16ae33ed501ec0e6c4e63948768c5aeea3e4f6754985954bea7d61088c44430204ef491b74a64bde1358cecb2cad28ee6a3de5b752ff6a051104d88478653339457ac45ba44cbb65f54d1969d047cda746931d5e6a8b48e211416aefd5729f3d60b56b54e7f85aa2f42de3cb69419240c24e67139a11790a709edef2ac52cf35dd0a08af45926ebe9761f498ff83bfe263d6897ee97943a4b982fe3404ef0b4a45e06113c60340e0664f14799bf59cb4b3934b465fabefd87155905ee5309ba41e9e402973311831ea600b16437f71df39ee77130490c4d0227e5d1757fdc66af3ae6b9953053ed9aafca0160209858a7d4dd38fe10e0cb153672d08633ed6c54977aa0a6e67f9ff2f8c9d22dd7b21de08192960fd0e0da68d77c8d810db11dcaa61c725cd4092cbff76c8e1debd8d0361bb3f2e607911d45716f53067bdc0d89dd4889177765166a424e9fc0cb711201099dda213355e6639ac7eb86eca2ae0ab38b7f674f37ef8a6fcca1a6f52f55d9e1dcd631d2c3c82bba129172feb991d5af51afecd9d61a88b6832e4107480e392aed61a8644f551665ebff6b20953b635737a4f895e429fddcfe801f606fbda74b3bf6f5767d0fac14907fcfd0aa1d4c11b9e91b01d68052399b51a29f1ae6acd965109977c14a555cbcbd21ad8cb9f8853506d4bc21c01e62d61d7b21be1b923be54914e6b0a7ca84dd11f1159193e1184568a6134a6bbadf5b4df986edcf2019390ae841cfaa44435e28ce877d3dae4177992fa5d4e5c005876dbe3d1e63bec7dcc0942762b48b1ecc6c1a918409a8a72812a1e245c0c67be6e729c2b49bc6ee4d24a8f63e78e75db45655c26a9a78aff36fcd67117f26b8f654dca664b9f0e30681874cb749e1a692720078856286c2560b0292cc837933423147569350955c9571bf8941ba128fd339cb4268f46b94bc6ee203eb7026813706ea51c4f24c91866fc23a724bf2501327e6ae89c29f8db315dc28d2c7c719514036367e018f4835f63fdecd71f9bdced7132b6c4f8b13c69a517026fcd3622d67cb632320d5e7308f78f4b7cea11f6291b137851dc6cd6366f2785c71c3f237f81a7658b2a8d512b61e0ad5a4710b7b124151689fcb2116063fbff7e9115fed7b93de834970b838e49f8f8ba5f1f874c354078b5810a55ae289a56da563f1da6cd80a3757d6073fa55e016e45ac6cec1f69d871c92fd0ae9670c74249045e6b464787f9504128736309fed205f8df4d90e332908581298d9c75a3fa36ab0c3c9272e62de53ab290c803d67b696fd615c260a47bffad16746f18ba1a10a061bacbea9369693b3c042eec36bed289d7d12e52bca8aa1c2dff88ca7816498d25626d0f1e106ebb0b4a12138e00f3df5b1c2f49d98b1756e69b641b7c6353d99dbff050f4d76842c6cf1c2a4b062fc8e6336fa689b7c9d5c6b4ab8c15a5c20e514ff070a602d85ae52fa7810c22f8eeffd34a095b93342144f7a98d024216b3d68ed7bea047517bfcd83ec83febd1ba0e5858e2bdc1d8b1f7b0f89e90ccc432a3f930cb8209462e64556c5054c56ca2a85f16b32eb83a10459d13516faa4d23302b7607b9bd38dab2239ac9e9440c314433fdfb3ceadab4b4f87415ed6f240e017221f3b5f7ac196cdf54957bec42fe6893994b46de3d27dc7fb58ca88feb5b9e79cf20053d12530ac524337b22a3629bea52f40b06d3e2128f32060f9105847daed81d35f20e2002817434659baff64494c5b5c7f9216bfda38412a0f70511159dc73bb6bae1f8eaa0ef08d99bcb31f94f6be12c29c83df45926430b366c99fca3270c15fc4056398fdf3135b7779e3066a006961d1ac0ad1c83179ce39e87a96b722ec23aabc065badf3e188347a360772ca6a447abac7e6a44f0d4632d52926332e44a0a86bff5ce699fd063bdda3ffd4c41b53ded49fecec67f40599b934e16e3fd1bc063ad7026f8d71bfd4cbaf56599586774723194b692036f1b6bb242e2ffb9c600b5215b412764599476ce475c9e5b396fbcebd6be323dcf4d0048077400aac7500db41dc95fc7f7edbe7c9c2ec5ea89943fe13b42217eef530bbd023671509e12dfce4e1c1c82955d965e6a68aa66f6967dba48feda572db1f099d9a6dc4bc8edade852b5e824a06890dc48a6a6510ecaf8cf7620d757290e3166d431abecc624fa9ac2234d2eb783308ead45544910c633a94964b2ef5fbc409cb8835ac4147d384e12e0a5e13951f7de0ee13eafcb0ca0c04946d7804040c0a3cd088352424b097adb7aad1ca4495952f3e6c0158c02d2bcec33bfda69301434a84d9027ce02c0b9725dad118\", \"d894b86261436362e64241e61f6b3e6589daf64dc641f60570c4c0bf3b1f2ca3\");\n }\n \n+static MuHash3072 FromInt(unsigned char i) {\n+    unsigned char tmp[32] = {i, 0};\n+    return MuHash3072(tmp);\n+}\n+\n+BOOST_AUTO_TEST_CASE(muhash_tests)\n+{\n+    unsigned char out[384];\n+\n+    for (int iter = 0; iter < 10; ++iter) {\n+        unsigned char res[384];\n+        int table[4];\n+        for (int i = 0; i < 4; ++i) {\n+            table[i] = g_insecure_rand_ctx.randbits(3);\n+        }\n+        for (int order = 0; order < 4; ++order) {\n+            MuHash3072 acc;\n+            for (int i = 0; i < 4; ++i) {\n+                int t = table[i ^ order];\n+                if (t & 4) {\n+                    acc /= FromInt(t & 3);\n+                } else {\n+                    acc *= FromInt(t & 3);\n+                }\n+            }\n+            acc.Finalize(out);\n+            if (order == 0) {\n+                memcpy(res, out, 384);\n+            } else {\n+                BOOST_CHECK(memcmp(res, out, 384) == 0);\n+            }\n+        }\n+\n+        MuHash3072 x = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X\n+        MuHash3072 y = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X, y=Y\n+        MuHash3072 z; // x=X, y=Y, z=1\n+        z *= x; // x=X, y=Y, z=X\n+        z /= y; // x=X, y=Y, z=X/Y",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489135525",
      "id" : 489135525,
      "line" : 898,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTUyNQ==",
      "original_commit_id" : "c540f8edc143e856474a27626cc0bd08018ed734",
      "original_line" : 898,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 49,
      "pull_request_review_id" : 489223281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-16T03:20:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489135525",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489161487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489161487"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Might as well move the `d->limbs[0]` case prior to the for loop.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-09-16T04:56:58Z",
      "diff_hunk" : "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489161487",
      "id" : 489161487,
      "line" : 114,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2MTQ4Nw==",
      "original_commit_id" : "c540f8edc143e856474a27626cc0bd08018ed734",
      "original_line" : 114,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : 114,
      "pull_request_review_id" : 489274591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-16T07:14:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489161487",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489167116"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489167116"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think the for loop should be `i = 1; i < LIMBS; ++i` not `LIMBS-1`?\r\n\r\nMight be clever to have `data` be `protected` rather than `private` so it can be initialised directly to edge cases via a subclass in the unit tests, without having to find a chacha-primage for them.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-09-16T05:12:58Z",
      "diff_hunk" : "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489167116",
      "id" : 489167116,
      "line" : 111,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NzExNg==",
      "original_commit_id" : "c540f8edc143e856474a27626cc0bd08018ed734",
      "original_line" : 111,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : 111,
      "pull_request_review_id" : 489274591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-16T07:14:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489167116",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489171646"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489171646"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is only ever called with `out == a`, so could take a single argument. Similarly for Multiply which is also always in-place.",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-09-16T05:28:26Z",
      "diff_hunk" : "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489171646",
      "id" : 489171646,
      "line" : 162,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3MTY0Ng==",
      "original_commit_id" : "c540f8edc143e856474a27626cc0bd08018ed734",
      "original_line" : 162,
      "original_position" : 162,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : 162,
      "pull_request_review_id" : 489274591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-16T07:14:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489171646",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489200958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489200958"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Dropping all the `Num3072::` prefixes might make the code a little less noisy:\r\n\r\n```c++\r\nusing limb_type = Num3072::limb_type;\r\nusing double_limb_type = Num3072::double_limb_type;\r\nconstexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\r\nconstexpr int LIMBS = Num3072::LIMBS;\r\n```\r\n\r\n(also, wouldn't `limb_t` be more normal than `limb_type`?)\r\n\r\nProbably overkill, but maybe consider checking the `Num3072` constants make sense:\r\n\r\n```c++\r\nstatic_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\r\nstatic_assert(sizeof(double_limb_type) == sizeof(limb_type) * 2, \"bad size for double_limb_type\");\r\nstatic_assert(sizeof(limb_type) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\r\n\r\n// hard coded values in MuHash3072 constructor and Finalize\r\nstatic_assert(sizeof(limb_type) == 4 || sizeof(limb_type) == 8, \"bad size for limb_type\");\r\n```",
      "commit_id" : "b30ddf39ac75f2965068218daeafd35fa0705758",
      "created_at" : "2020-09-16T06:47:08Z",
      "diff_hunk" : "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489200958",
      "id" : 489200958,
      "line" : 15,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMDk1OA==",
      "original_commit_id" : "c540f8edc143e856474a27626cc0bd08018ed734",
      "original_line" : 15,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/crypto/muhash.cpp",
      "position" : 15,
      "pull_request_review_id" : 489274591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-16T07:14:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489200958",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   }
]
