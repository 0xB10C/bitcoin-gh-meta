[
   {
      "author_association" : "MEMBER",
      "body" : "I've dropped the amalgamation file",
      "created_at" : "2020-05-27T03:19:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634403350",
      "id" : 634403350,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDQwMzM1MA==",
      "updated_at" : "2020-05-27T03:19:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634403350",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Pretty amazing work! Thanks for doing this.\r\nFor testing purposes, would it make sense to add logdb (#5686, simple implementation) in order to test and benchmark?\r\n\r\nConcept ACK on a BDB replacement for descriptor wallets.\r\nStill unsure wether sqlite or an internal format should be chosen. Maybe a comparison(-matrix) of internal vs. sqlite could be done?\r\n\r\nAs for concrete implementation steps, maybe it would make sense to PR the DB flexibility first, then additional storage engines later.",
      "created_at" : "2020-05-27T15:54:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634758099",
      "id" : 634758099,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDc1ODA5OQ==",
      "updated_at" : "2020-05-27T15:55:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634758099",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> For testing purposes, would it make sense to add logdb (#5686, simple implementation) in order to test and benchmark?\r\n\r\nI don't think it really makes sense to add a database system that we aren't going to use.\r\n\r\n> Still unsure wether sqlite or an internal format should be chosen. Maybe a comparison(-matrix) of internal vs. sqlite could be done?\r\n\r\nI think there's two primary reasons to choose sqlite over an internal format.\r\n\r\n1. Review and implementation are much simpler The library already exists so implementation just means correctly using the API. Reviewers won't have to review a file format implementation and convince themselves that that format won't corrupt and is robust.\r\n\r\n2. Better guarantees of consistency and non-corruption. SQLite is very well tested and very widely used. I think they are able better guarantee that data will get written, won't get lost, and won't get corrupted, than we would be able to with an internal format.\r\n\r\n> As for concrete implementation steps, maybe it would make sense to PR the DB flexibility first, then additional storage engines later.\r\n\r\n#18971 does the DB class stuff that gives us this flexibility. This PR is adding in the storage engine and the logic for CWallet to choose which storage to use.",
      "created_at" : "2020-05-27T16:25:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634780861",
      "id" : 634780861,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDc4MDg2MQ==",
      "updated_at" : "2020-05-27T16:25:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634780861",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nNice work! Very readable code!",
      "created_at" : "2020-05-27T19:21:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634887122",
      "id" : 634887122,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDg4NzEyMg==",
      "updated_at" : "2020-05-27T19:21:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634887122",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20094 (wallet: Unify wallet directory lock error message by hebasto)\n* #19419 (wallet: let Listwalletdir do not iterate trough our blocksdata. by Saibato)\n* #19101 (refactor: remove ::vpwallets and related global variables by ryanofsky)\n* #18750 (build: optionally skip external warnings by vasild)\n* #18095 (Fix crashes and infinite loop in ListWalletDir() by uhliksk)\n* #18077 (net: Add NAT-PMP port forwarding support by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-05-27T19:50:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-634903672",
      "id" : 634903672,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDkwMzY3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-07T21:31:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634903672",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "CONCEPT ACK\r\n :tada: :partying_face: :tada: \r\nVery happy to move on from BerkeleyDB and I've always liked sqlite as a versatile but still minimalistic replacement.",
      "created_at" : "2020-05-28T10:41:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-635262568",
      "id" : 635262568,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTI2MjU2OA==",
      "updated_at" : "2020-05-28T10:42:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635262568",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. I'm able to build and run the test suite (including `feature_backwards_compatibility.py`) on macOS 10.15.4 with Homebrew `brew install sqlite3` (don't forget to add). I'm also able to build with `/depends`. I'm able to load an existing descriptor wallet (bdb) and create a new one.\r\n\r\nIs there a particular reason to stick to `.dat` as the file extension, rather than `.sqlite`? If you do the latter, `listwalletdir` and the Open Wallet GUI need a trivial change.\r\n\r\nWould it make sense to switch some of the records over to a format that's more easy to inspect with a SQLite viewer? As well as use tables like \"transactions\"? Or would that make this PR far too complicated?",
      "created_at" : "2020-06-01T15:28:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-636923373",
      "id" : 636923373,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNjkyMzM3Mw==",
      "updated_at" : "2020-06-01T15:29:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/636923373",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Is there a particular reason to stick to `.dat` as the file extension, rather than `.sqlite`? If you do the latter, `listwalletdir` and the Open Wallet GUI need a trivial change.\r\n\r\nThere are 2 reasons. The first is that it's easier on review on implementation to stick to one filename. As you mentioned, if I make it `.sqlite`, `listwalletdir` and other places need to be changed. There are several places throughout the codebase where we specifically look for `wallet.dat` and not changing those to also use `wallet.sqlite` could be very bad. Additionally, some of those places may need to know whether they are looking for `wallet.dat` or `wallet.sqlite` so they would need access to whether a wallet is a descriptor wallet. They may need to know what kind of storage to look for which exposes more information than we currently already do. It's much simpler to just keep it `wallet.dat`. This avoids issues where the wrong filename could be used and makes review simpler.\r\n\r\nThe second reason is that there are already lots of tooling, documentation, and discussion that use `wallet.dat`. Things like backup scripts or instructions telling people how to backup their wallet won't be invalidated as we keep the same naming. For the most part, the end user doesn't care about how the data is being stored within the file, they just need to know to preserve the `wallet.dat` file. So by keeping the naming, all of these things stay the same and make it less likely for people to lose their money.\r\n\r\nThere are, of course, a few cases where tooling does need to be updated because of the format change. But this tooling is all for manual inspection of the wallet.dat file and most users aren't using that tooling.\r\n\r\n> Would it make sense to switch some of the records over to a format that's more easy to inspect with a SQLite viewer? As well as use tables like \"transactions\"? Or would that make this PR far too complicated?\r\n\r\nI would like to do that in the future. But I think that is too complicated for right now.",
      "created_at" : "2020-06-01T15:58:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-636939984",
      "id" : 636939984,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNjkzOTk4NA==",
      "updated_at" : "2020-06-01T15:58:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/636939984",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't think it really makes sense to add a database system that we aren't going to use.\r\n\r\nMaybe it's time to use logdb.\r\n\r\n>Review and implementation are much simpler\r\n\r\nRealistically, this should be phrased \"review and implementation are behind closed doors by another team, and non-transparent\".\r\n\r\nWhile SQLite has a free license, it is not open development. I'm not sure if their review standards are even documented.\r\n\r\n> I've always liked sqlite as a versatile but still minimalistic\r\n\r\nNot sure SQLite counts as minimalistic... :p",
      "created_at" : "2020-06-03T18:03:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-638366578",
      "id" : 638366578,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzODM2NjU3OA==",
      "updated_at" : "2020-06-03T18:03:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638366578",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Awesome.",
      "created_at" : "2020-06-11T20:33:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-642914167",
      "id" : 642914167,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjkxNDE2Nw==",
      "updated_at" : "2020-06-11T20:33:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642914167",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Since #19334 has been merged, this is now ready for review.",
      "created_at" : "2020-07-23T03:50:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-662805756",
      "id" : 662805756,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MjgwNTc1Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-23T03:50:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662805756",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460269271"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460269271"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Change WalletLocation::Exists to check for wallet file existence\" (6e7ef52e359e55bc82a30207a701995f0ca255d7)\r\n\r\nMinor: I can't really figure out what this commit and also the previous commit \"wallet: Don't Verify if database location doesn't exist\" (b64e40310742e3975ae704a801ccafa73d8617bf) are doing. Changes seem harmless, but they are making code more complicated. It would be good if commit messages mentioned motivations in commits like these where the motivations aren't obvious.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-24T20:20:16Z",
      "diff_hunk" : "@@ -101,9 +101,23 @@ WalletLocation::WalletLocation(const std::string& name)\n bool WalletLocation::Exists() const\n {\n     fs::path path = m_path;\n-    // For the default wallet, check specifically for the wallet.dat file\n-    if (m_name.empty()) {\n+\n+    fs::file_type path_type = fs::symlink_status(path).type();\n+    // Short circuit if it just doesn't exist\n+    if (path_type == fs::file_not_found) {\n+        return false;\n+    }\n+\n+    // If it's a file, it exists (duh)\n+    if (path_type == fs::regular_file) {\n+        return true;\n+    }\n+\n+    // If it's a directory, check specifically for the wallet.dat files\n+    if (path_type == fs::directory_file || (path_type == fs::symlink_file && fs::is_directory(path))) {\n         path = fs::absolute(\"wallet.dat\", m_path);\n+        return fs::symlink_status(path).type() != fs::file_not_found;\n     }\n-    return fs::symlink_status(path).type() != fs::file_not_found;\n+    // Something exists here but we don't know what it is... Just say something exists so an error can be caught later",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460269271",
      "id" : 460269271,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2OTI3MQ==",
      "original_commit_id" : "6e7ef52e359e55bc82a30207a701995f0ca255d7",
      "original_line" : 138,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/wallet/walletutil.cpp",
      "position" : null,
      "pull_request_review_id" : 455162194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460269271",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460275191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460275191"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add libsqlite3\" (31243f5482bb1c8a71affbe7ced6653a09bd6829)\r\n\r\nWould suggest splitting this commit and other build and depends and travis related commits into a separate build PR so it can get feedback from bitcoin build aficionados (and so this PR can more approachable for regular and wallet reviewers).\r\n\r\nI think probably build reviewers will want a `--with-sqlite` configure option to allow sqlite to be disabled in the build even if it is present in the system. They might also want the sqlite location to be determined through pkgconfig instead of assumed to be in the system include directory.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-24T20:34:37Z",
      "diff_hunk" : "@@ -1138,6 +1138,9 @@ fi\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+\n+    dnl Check for sqlite3\n+    AC_CHECK_HEADERS([sqlite3.h], [AC_CHECK_LIB([sqlite3], [sqlite3_open], [SQLITE_LIBS=-lsqlite3], [AC_MSG_ERROR(sqlite3_open missing from libsqlite3)], [-pthread -lpthread])], [AC_MSG_ERROR(sqlite3.h headers missing)])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460275191",
      "id" : 460275191,
      "line" : 1180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3NTE5MQ==",
      "original_commit_id" : "31243f5482bb1c8a71affbe7ced6653a09bd6829",
      "original_line" : 1180,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : 6,
      "pull_request_review_id" : 455162194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460275191",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460276199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460276199"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch\" (08847ca4de58c112da4b6455230f7b454afa543c)\r\n\r\nMinor: Suggest `sqlite3* m_db{nullptr};` or `sqlite3* m_db = nullptr;` here to be sure this is safe without looking and even if someone adds another constructor.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-24T20:37:14Z",
      "diff_hunk" : "@@ -83,6 +92,8 @@ class SQLiteDatabase : public WalletDatabase\n \n     /** Make a SQLiteBatch connected to this database */\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460276199",
      "id" : 460276199,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3NjE5OQ==",
      "original_commit_id" : "08847ca4de58c112da4b6455230f7b454afa543c",
      "original_line" : 96,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 455162194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460276199",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460278213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460278213"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Introduce g_file_paths\" (d038d04a4e3e0522a51cf0d39110749f8395f61a)\r\n\r\nMinor: Pretty sure we can get rid of these globals with more sane loading code in the wallet, but in any case could consider switching RecursiveMutex to Mutex if possible and switching `cs_sqlite` to `g_sqlite_mutex` to follow newer conventions",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-24T20:41:46Z",
      "diff_hunk" : "@@ -5,12 +5,20 @@\n #include <wallet/sqlite.h>\n \n #include <logging.h>\n+#include <sync.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n #include <wallet/db.h>\n \n #include <sqlite3.h>\n #include <stdint.h>\n+#include <unordered_set>\n+\n+namespace {\n+    RecursiveMutex cs_sqlite;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460278213",
      "id" : 460278213,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3ODIxMw==",
      "original_commit_id" : "d038d04a4e3e0522a51cf0d39110749f8395f61a",
      "original_line" : 18,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 455162194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460278213",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460279135"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460279135"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabaseVersion\" (b2f2e7171861fe2998f2c27af44b65b0e1f558aa)\r\n\r\nMinor: SQLiteLibraryVersion might be a more descriptive name",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-24T20:43:50Z",
      "diff_hunk" : "@@ -124,3 +125,8 @@ bool SQLiteBatch::TxnAbort()\n {\n     return false;\n }\n+\n+std::string SQLiteDatabaseVersion()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460279135",
      "id" : 460279135,
      "line" : 579,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3OTEzNQ==",
      "original_commit_id" : "b2f2e7171861fe2998f2c27af44b65b0e1f558aa",
      "original_line" : 579,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 579,
      "pull_request_review_id" : 455162194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460279135",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460280638"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460280638"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Initialize and Shutdown sqlite3 globals\" (5c78c9094a0158e4d466b696a3bbbcbd35b51b15)\r\n\r\nMinor: Would add comment saying this is a no-op if it is already called. Another option would be to only call it when g_file_paths is empty.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-24T20:47:36Z",
      "diff_hunk" : "@@ -34,6 +34,10 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n \n+    int ret = sqlite3_initialize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460280638",
      "id" : 460280638,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI4MDYzOA==",
      "original_commit_id" : "5c78c9094a0158e4d466b696a3bbbcbd35b51b15",
      "original_line" : 37,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 455162194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460280638",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460281099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460281099"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Initialize and Shutdown sqlite3 globals\" (5c78c9094a0158e4d466b696a3bbbcbd35b51b15)\r\n\r\nReturn value isn't checked here. Would suggest at least logging an error so we know if something has gone wrong.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-24T20:48:46Z",
      "diff_hunk" : "@@ -44,6 +48,9 @@ SQLiteDatabase::~SQLiteDatabase()\n     Close();\n     LOCK(cs_sqlite);\n     g_file_paths.erase(m_file_path);\n+    if (g_file_paths.empty()) {\n+        sqlite3_shutdown();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460281099",
      "id" : 460281099,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI4MTA5OQ==",
      "original_commit_id" : "5c78c9094a0158e4d466b696a3bbbcbd35b51b15",
      "original_line" : 52,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 455162194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460281099",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> If it's available, I'd be curious to see a diff of the additional changes that switch `wallet.dat` to `wallet.sqlite` and how complicated they are.\r\n\r\nhttps://github.com/achow101/bitcoin/tree/sqlite-wallet-w-rename is a copy of the original branch with the rename. It's a bit outdated, but it should give you an idea of what was needed for renaming.\r\n\r\n  > Do we know how current & previous versions of bitcoins react if they load a `wallet.dat` file that doesn't contain berkeley db data? Hopefully they show a sensible error instead of crashing obscurely or doing something worse like modifying the file.\r\n\r\nThe wallets won't be listed by `listwalletdir` as the bdb magic is checked in that function. BDB itself will error with `Not a Berkeley DB` (or something like that) when it tries to open the sqlite file and that error makes it's way to the user.",
      "created_at" : "2020-07-24T21:17:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-663738278",
      "id" : 663738278,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MzczODI3OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-24T21:17:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663738278",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460293438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460293438"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The motivation is so that we check the wallet file itself as part of the db type checking later on. IIRC there were some issues with where the wrong file type was being used that necessitated these changes.\r\n\r\nI'll try to expand the commit message ",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-24T21:20:52Z",
      "diff_hunk" : "@@ -101,9 +101,23 @@ WalletLocation::WalletLocation(const std::string& name)\n bool WalletLocation::Exists() const\n {\n     fs::path path = m_path;\n-    // For the default wallet, check specifically for the wallet.dat file\n-    if (m_name.empty()) {\n+\n+    fs::file_type path_type = fs::symlink_status(path).type();\n+    // Short circuit if it just doesn't exist\n+    if (path_type == fs::file_not_found) {\n+        return false;\n+    }\n+\n+    // If it's a file, it exists (duh)\n+    if (path_type == fs::regular_file) {\n+        return true;\n+    }\n+\n+    // If it's a directory, check specifically for the wallet.dat files\n+    if (path_type == fs::directory_file || (path_type == fs::symlink_file && fs::is_directory(path))) {\n         path = fs::absolute(\"wallet.dat\", m_path);\n+        return fs::symlink_status(path).type() != fs::file_not_found;\n     }\n-    return fs::symlink_status(path).type() != fs::file_not_found;\n+    // Something exists here but we don't know what it is... Just say something exists so an error can be caught later",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460293438",
      "id" : 460293438,
      "in_reply_to_id" : 460269271,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5MzQzOA==",
      "original_commit_id" : "6e7ef52e359e55bc82a30207a701995f0ca255d7",
      "original_line" : 138,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/wallet/walletutil.cpp",
      "position" : null,
      "pull_request_review_id" : 455192029,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460293438",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596136"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-27T00:47:32Z",
      "diff_hunk" : "@@ -83,6 +92,8 @@ class SQLiteDatabase : public WalletDatabase\n \n     /** Make a SQLiteBatch connected to this database */\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596136",
      "id" : 460596136,
      "in_reply_to_id" : 460276199,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NjEzNg==",
      "original_commit_id" : "08847ca4de58c112da4b6455230f7b454afa543c",
      "original_line" : 96,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 455413175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596136",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596148"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596148"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Renamed",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-27T00:47:39Z",
      "diff_hunk" : "@@ -5,12 +5,20 @@\n #include <wallet/sqlite.h>\n \n #include <logging.h>\n+#include <sync.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n #include <wallet/db.h>\n \n #include <sqlite3.h>\n #include <stdint.h>\n+#include <unordered_set>\n+\n+namespace {\n+    RecursiveMutex cs_sqlite;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596148",
      "id" : 460596148,
      "in_reply_to_id" : 460278213,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NjE0OA==",
      "original_commit_id" : "d038d04a4e3e0522a51cf0d39110749f8395f61a",
      "original_line" : 18,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 455413190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596148",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596211"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Probably, but I'm also following the convention set by `BerkeleyDatabaseVersion`.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-27T00:48:16Z",
      "diff_hunk" : "@@ -124,3 +125,8 @@ bool SQLiteBatch::TxnAbort()\n {\n     return false;\n }\n+\n+std::string SQLiteDatabaseVersion()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596211",
      "id" : 460596211,
      "in_reply_to_id" : 460279135,
      "line" : 579,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NjIxMQ==",
      "original_commit_id" : "b2f2e7171861fe2998f2c27af44b65b0e1f558aa",
      "original_line" : 579,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 579,
      "pull_request_review_id" : 455413266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596211",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596216"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-27T00:48:21Z",
      "diff_hunk" : "@@ -34,6 +34,10 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n \n+    int ret = sqlite3_initialize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596216",
      "id" : 460596216,
      "in_reply_to_id" : 460280638,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NjIxNg==",
      "original_commit_id" : "5c78c9094a0158e4d466b696a3bbbcbd35b51b15",
      "original_line" : 37,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 455413284,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596216",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596231"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-07-27T00:48:27Z",
      "diff_hunk" : "@@ -44,6 +48,9 @@ SQLiteDatabase::~SQLiteDatabase()\n     Close();\n     LOCK(cs_sqlite);\n     g_file_paths.erase(m_file_path);\n+    if (g_file_paths.empty()) {\n+        sqlite3_shutdown();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460596231",
      "id" : 460596231,
      "in_reply_to_id" : 460281099,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NjIzMQ==",
      "original_commit_id" : "5c78c9094a0158e4d466b696a3bbbcbd35b51b15",
      "original_line" : 52,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 455413296,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460596231",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-07-27T01:04:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-664067917",
      "id" : 664067917,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NDA2NzkxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-27T01:04:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664067917",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r464085954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464085954"
         }
      },
      "author_association" : "MEMBER",
      "body" : "A couple of comments here:\r\n\r\n- file at path is opened twice.\r\n- nit, in `DetermineStorageType` you check `IsSQLiteFile` first, maybe change there for now as most is BDB.\r\n- maybe follow up, this could use `DetermineStorageType`.\r\n",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-08-02T14:41:06Z",
      "diff_hunk" : "@@ -40,18 +42,7 @@ static bool IsBerkeleyBtree(const fs::path& path)\n     if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n     if (size < 4096) return false;\n \n-    fsbridge::ifstream file(path, std::ios::binary);\n-    if (!file.is_open()) return false;\n-\n-    file.seekg(12, std::ios::beg); // Magic bytes start at offset 12\n-    uint32_t data = 0;\n-    file.read((char*) &data, sizeof(data)); // Read 4 bytes of file to compare against magic\n-\n-    // Berkeley DB Btree magic bytes, from:\n-    //  https://github.com/file/file/blob/5824af38469ec1ca9ac3ffd251e7afe9dc11e227/magic/Magdir/database#L74-L75\n-    //  - big endian systems - 00 05 31 62\n-    //  - little endian systems - 62 31 05 00\n-    return data == 0x00053162 || data == 0x62310500;\n+    return IsBDBFile(path) || IsSQLiteFile(path);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r464085954",
      "id" : 464085954,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4NTk1NA==",
      "original_commit_id" : "e68484878b539692be5030b8941fd3fe81d79870",
      "original_line" : 45,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/wallet/walletutil.cpp",
      "position" : null,
      "pull_request_review_id" : 459654361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464085954",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r465347410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465347410"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> file at path is opened twice.\r\n\r\nIt is?\r\n\r\nDone the other 2 suggestions.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-08-04T21:43:46Z",
      "diff_hunk" : "@@ -40,18 +42,7 @@ static bool IsBerkeleyBtree(const fs::path& path)\n     if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n     if (size < 4096) return false;\n \n-    fsbridge::ifstream file(path, std::ios::binary);\n-    if (!file.is_open()) return false;\n-\n-    file.seekg(12, std::ios::beg); // Magic bytes start at offset 12\n-    uint32_t data = 0;\n-    file.read((char*) &data, sizeof(data)); // Read 4 bytes of file to compare against magic\n-\n-    // Berkeley DB Btree magic bytes, from:\n-    //  https://github.com/file/file/blob/5824af38469ec1ca9ac3ffd251e7afe9dc11e227/magic/Magdir/database#L74-L75\n-    //  - big endian systems - 00 05 31 62\n-    //  - little endian systems - 62 31 05 00\n-    return data == 0x00053162 || data == 0x62310500;\n+    return IsBDBFile(path) || IsSQLiteFile(path);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r465347410",
      "id" : 465347410,
      "in_reply_to_id" : 464085954,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NzQxMA==",
      "original_commit_id" : "e68484878b539692be5030b8941fd3fe81d79870",
      "original_line" : 45,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/wallet/walletutil.cpp",
      "position" : null,
      "pull_request_review_id" : 461195815,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465347410",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r465348577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465348577"
         }
      },
      "author_association" : "MEMBER",
      "body" : "At worst case it is.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-08-04T21:46:23Z",
      "diff_hunk" : "@@ -40,18 +42,7 @@ static bool IsBerkeleyBtree(const fs::path& path)\n     if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n     if (size < 4096) return false;\n \n-    fsbridge::ifstream file(path, std::ios::binary);\n-    if (!file.is_open()) return false;\n-\n-    file.seekg(12, std::ios::beg); // Magic bytes start at offset 12\n-    uint32_t data = 0;\n-    file.read((char*) &data, sizeof(data)); // Read 4 bytes of file to compare against magic\n-\n-    // Berkeley DB Btree magic bytes, from:\n-    //  https://github.com/file/file/blob/5824af38469ec1ca9ac3ffd251e7afe9dc11e227/magic/Magdir/database#L74-L75\n-    //  - big endian systems - 00 05 31 62\n-    //  - little endian systems - 62 31 05 00\n-    return data == 0x00053162 || data == 0x62310500;\n+    return IsBDBFile(path) || IsSQLiteFile(path);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r465348577",
      "id" : 465348577,
      "in_reply_to_id" : 464085954,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODU3Nw==",
      "original_commit_id" : "e68484878b539692be5030b8941fd3fe81d79870",
      "original_line" : 45,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/wallet/walletutil.cpp",
      "position" : null,
      "pull_request_review_id" : 461197201,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465348577",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-08-05T12:10:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-669156764",
      "id" : 669156764,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2OTE1Njc2NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-05T12:10:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669156764",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r467193743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467193743"
         }
      },
      "author_association" : "MEMBER",
      "body" : "787047133d22f014bea2646d3b23cd18801f19c2: you can drop the `else if (fs::is_directory(location.GetPath()` branch from `rpcwallet.cpp`",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-08-07T18:09:06Z",
      "diff_hunk" : "@@ -269,7 +269,7 @@ def wallet_file(name):\n \n         # Fail to load if a directory is specified that doesn't contain a wallet\n         os.mkdir(wallet_dir('empty_wallet_dir'))\n-        assert_raises_rpc_error(-18, \"Directory empty_wallet_dir does not contain a wallet.dat file\", self.nodes[0].loadwallet, 'empty_wallet_dir')\n+        assert_raises_rpc_error(-18, \"Wallet empty_wallet_dir not found.\", self.nodes[0].loadwallet, 'empty_wallet_dir')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r467193743",
      "id" : 467193743,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5Mzc0Mw==",
      "original_commit_id" : "787047133d22f014bea2646d3b23cd18801f19c2",
      "original_line" : 272,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multiwallet.py",
      "position" : null,
      "pull_request_review_id" : 463507539,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467193743",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r467304981"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467304981"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add/Remove m_file_path to/from g_file_paths in con/destructor\" (316002da052cad68c54a48e918d1d5f2ca58c0d0)\r\n\r\nMinor: Developer notes and current clang-format config don't indent namespace contents\r\n\r\nAlso, I wonder if these variables are even necessary. If sqlite supports opening databases in an exclusive mode, there should be no need for our code to maintain this additional list of database files.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-08-07T22:02:29Z",
      "diff_hunk" : "@@ -5,12 +5,20 @@\n #include <wallet/sqlite.h>\n \n #include <logging.h>\n+#include <sync.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n #include <wallet/db.h>\n \n #include <sqlite3.h>\n #include <stdint.h>\n+#include <unordered_set>\n+\n+namespace {\n+    Mutex g_sqlite_mutex;\n+    //! Set of wallet file paths in use\n+    std::unordered_set<std::string> g_file_paths GUARDED_BY(g_sqlite_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r467304981",
      "id" : 467304981,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNDk4MQ==",
      "original_commit_id" : "fe790158c8a6c2019ebcb97b6637e1c069b76ed6",
      "original_line" : 22,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 463662644,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467304981",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've taken @ryanofsky's rebase and made a few changes. Notably I removed the filename change and the related tests. Also I made a slight change to CreateWallet` so that the GUI would also make sqlite wallets for descriptor wallets.",
      "created_at" : "2020-08-10T22:11:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-671615437",
      "id" : 671615437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MTYxNTQzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-10T22:11:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671615437",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r468239295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468239295"
         }
      },
      "author_association" : "MEMBER",
      "body" : "sqlite does have a way to open databases in an exclusive mode but we don't use it. But we also do that ourselves with the `.walletlock` file. So I think this is just unnecessary anyways and thus I've removed it.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-08-10T23:24:53Z",
      "diff_hunk" : "@@ -5,12 +5,20 @@\n #include <wallet/sqlite.h>\n \n #include <logging.h>\n+#include <sync.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n #include <wallet/db.h>\n \n #include <sqlite3.h>\n #include <stdint.h>\n+#include <unordered_set>\n+\n+namespace {\n+    Mutex g_sqlite_mutex;\n+    //! Set of wallet file paths in use\n+    std::unordered_set<std::string> g_file_paths GUARDED_BY(g_sqlite_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r468239295",
      "id" : 468239295,
      "in_reply_to_id" : 467304981,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzOTI5NQ==",
      "original_commit_id" : "fe790158c8a6c2019ebcb97b6637e1c069b76ed6",
      "original_line" : 22,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 464651826,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468239295",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-08-14T15:03:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-674117920",
      "id" : 674117920,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDExNzkyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-14T15:03:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674117920",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-08-31T10:17:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-683693307",
      "id" : 683693307,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzY5MzMwNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-31T10:17:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683693307",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-09-03T17:35:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-686643954",
      "id" : 686643954,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NjY0Mzk1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-03T17:35:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686643954",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This can now be rebased after #19619 merge ",
      "created_at" : "2020-09-06T23:48:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-687936981",
      "id" : 687936981,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzkzNjk4MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-06T23:48:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687936981",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2020-09-06T23:55:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-687938563",
      "id" : 687938563,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzkzODU2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-06T23:55:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687938563",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Should probably be setting the application_id pragma to something constant and random.\r\n\r\nIt's also important that fullfsync be set because Mac OS X is a liar.\r\n\r\nCould also be setting user_version, which is a way of versioning the schema.",
      "created_at" : "2020-09-07T17:18:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-688444710",
      "id" : 688444710,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODQ0NDcxMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-07T17:18:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688444710",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/620611?v=4",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "node_id" : "MDQ6VXNlcjYyMDYxMQ==",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Should probably be setting the application_id pragma to something constant and random.\r\n\r\nCould just set it to the network magic bytes? I think that might even let us deal with #12805 by ensuring that we only open a wallet that was created with the correct network magic as the application_id.\r\n\r\n> Could also be setting user_version, which is a way of versioning the schema.\r\n\r\nWould it be useful to set it to the wallet version number or should this just be a new schema version number?",
      "created_at" : "2020-09-07T22:05:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-688523403",
      "id" : 688523403,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODUyMzQwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-07T22:05:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688523403",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added application_id as the network magic. Also added user_version.",
      "created_at" : "2020-09-10T00:23:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-689894349",
      "id" : 689894349,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4OTg5NDM0OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-10T00:23:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/689894349",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-09-15T11:39:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-692659595",
      "id" : 692659595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MjY1OTU5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-15T11:39:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692659595",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491332879"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491332879"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "1) I suppose the locking is done in the calling code. Do I understand correctly that it's managed by `cs_wallet`? \r\n\r\n2) nit: I believe it's better to have all members private. Why not make `SQLiteBatch` a friend class or just pass the statement handlers when we construct `SQLiteBatch` object.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-19T08:37:16Z",
      "diff_hunk" : "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491332879",
      "id" : 491332879,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMzMjg3OQ==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 491982796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491332879",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491354812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491354812"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I double pstratem's comment regarding `fullsync` and `checkpoint_fullsync`",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-19T09:45:04Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491354812",
      "id" : 491354812,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM1NDgxMg==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 142,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 491982796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491354812",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491360876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491360876"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What if we create read-only batch first and then a read-write batch? Looks like it's going to fail since the connection will remain read-only.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-19T10:03:19Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491360876",
      "id" : 491360876,
      "line" : 200,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM2MDg3Ng==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 200,
      "original_position" : 227,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 200,
      "pull_request_review_id" : 491982796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491360876",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491362245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491362245"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: IIUC we need to close db handler even in the case of an error.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-19T10:06:55Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491362245",
      "id" : 491362245,
      "line" : 204,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM2MjI0NQ==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 204,
      "original_position" : 231,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 204,
      "pull_request_review_id" : 491982796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491362245",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491651973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491651973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: why not verify `m_cursor_init` just in case?",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-20T04:46:01Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";\n+            ret = sqlite3_prepare_v2(db, check_main.c_str(), -1, &check_main_stmt, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            ret = sqlite3_step(check_main_stmt);\n+            if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            if (ret == SQLITE_DONE) {\n+                table_exists = false;\n+            } else if (ret == SQLITE_ROW) {\n+                table_exists = true;\n+            } else {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            if (!table_exists) {\n+                // Make the table for our key-value pairs\n+                std::string create_stmt = \"CREATE TABLE main(key BLOB PRIMARY KEY, value BLOB)\";\n+                ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+                if (ret != SQLITE_OK) {\n+                    throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+                }\n+            }\n+\n+            // Set the application id\n+            uint32_t app_id = ReadBE32(Params().MessageStart());\n+            std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", (int32_t)app_id);\n+            ret = sqlite3_exec(db, set_app_id.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the application id: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Set the user version\n+            std::string set_user_ver = strprintf(\"PRAGMA user_version = %d\", WALLET_SCHEMA_VERSION);\n+            ret = sqlite3_exec(db, set_user_ver.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the wallet schema version: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    }\n+    SetupSQLStatements();\n+}\n+\n+bool SQLiteDatabase::Rewrite(const char* skip)\n+{\n+    while (true) {\n+        if (m_refcount == 0) {\n+            break;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{100});\n+    }\n+\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html\n+    int ret = sqlite3_exec(m_db, \"VACUUM\", nullptr, nullptr, nullptr);\n+    return ret == SQLITE_OK;\n+}\n+\n+bool SQLiteDatabase::PeriodicFlush()\n+{\n+    return true;\n+}\n+\n+bool SQLiteDatabase::Backup(const std::string& dest) const\n+{\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Copy all of the pages using -1\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    res = sqlite3_backup_finish(backup);\n+    sqlite3_close(db_copy);\n+    return res == SQLITE_OK;\n+}\n+\n+void SQLiteDatabase::Close()\n+{\n+    if (!m_db) return;\n+\n+    assert(m_refcount == 0);\n+\n+    // Free all of the prepared statements\n+    sqlite3_finalize(m_read_stmt);\n+    sqlite3_finalize(m_insert_stmt);\n+    sqlite3_finalize(m_overwrite_stmt);\n+    sqlite3_finalize(m_delete_stmt);\n+    sqlite3_finalize(m_cursor_stmt);\n+\n+    int res = sqlite3_close(m_db);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n+    }\n+    m_db = nullptr;\n+\n+    UnlockDirectory(m_dir_path, \".walletlock\");\n+}\n+\n+void SQLiteDatabase::Flush() {}\n+\n+void SQLiteDatabase::ReloadDbEnv() {}\n+\n+void SQLiteDatabase::RemoveRef()\n+{\n+    m_refcount--;\n+}\n+\n+void SQLiteDatabase::AddRef()\n+{\n+    m_refcount++;\n+}\n+\n+std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool flush_on_close)\n+{\n+    // We ignore flush_on_close because we don't do manual flushing for SQLite\n+    return MakeUnique<SQLiteBatch>(*this, mode);\n+}\n+\n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();\n+    m_database.Open(mode);\n+}\n+\n+void SQLiteBatch::Flush() {}\n+\n+void SQLiteBatch::Close()\n+{\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();\n+    }\n+    m_database.RemoveRef();\n+}\n+\n+bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_database.m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_database.m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_database.m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return true;\n+}\n+\n+bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n+{\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Write called on database in read-only mode\");\n+    assert(m_database.m_insert_stmt && m_database.m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_database.m_overwrite_stmt;\n+    } else {\n+        stmt = m_database.m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::EraseKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Erase called on database in read-only mode\");\n+    assert(m_database.m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_delete_stmt);\n+        sqlite3_reset(m_database.m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_database.m_delete_stmt);\n+    sqlite3_clear_bindings(m_database.m_delete_stmt);\n+    sqlite3_reset(m_database.m_delete_stmt);\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::HasKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res == SQLITE_OK) {\n+        res = sqlite3_step(m_database.m_read_stmt);\n+        if (res == SQLITE_ROW) {\n+            ret = true;\n+        }\n+    }\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return ret;\n+}\n+\n+bool SQLiteBatch::StartCursor()\n+{\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n+}\n+\n+bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+{\n+    complete = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491651973",
      "id" : 491651973,
      "line" : 498,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY1MTk3Mw==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 498,
      "original_position" : 505,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 498,
      "pull_request_review_id" : 491982796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491651973",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491662874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491662874"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: maybe add an upper limit to avoid hanging the thread in case something went wrong?",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-20T07:22:39Z",
      "diff_hunk" : "@@ -170,7 +170,16 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    while (true) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r491662874",
      "id" : 491662874,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2Mjg3NA==",
      "original_commit_id" : "ceac790fb2be0bcd5a1e20b275612c3b75df7786",
      "original_line" : 293,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 491982796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491662874",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492397526"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492397526"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I suppose the locking is done in the calling code. Do I understand correctly that it's managed by `cs_wallet`?\r\n\r\nFor the most part, yes. Sometimes we do need to handle concurrency withing `SQLiteDatabase` but those should already be handled by `m_refcount` and sqlite itself.\r\n\r\n> nit: I believe it's better to have all members private. Why not make `SQLiteBatch` a friend class or just pass the statement handlers when we construct `SQLiteBatch` object.\r\n\r\nI suppose now we could pass them in. In a previous revision, I don't think that was possible.\r\n\r\nBut it's easier to just let them be public members. It would be 6 extra arguments to pass them in and we are already giving the `SQLiteDatabase` container.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-21T23:14:48Z",
      "diff_hunk" : "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492397526",
      "id" : 492397526,
      "in_reply_to_id" : 491332879,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5NzUyNg==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 493042692,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492397526",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492417032"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think we always open in read-write mode first so that doesn't have any effect. But I suppose we should still have a check for that.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T00:25:12Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417032",
      "id" : 492417032,
      "in_reply_to_id" : 491360876,
      "line" : 200,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxNzAzMg==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 200,
      "original_position" : 227,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 200,
      "pull_request_review_id" : 493064287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492417032",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417585"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492417585"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It will be closed when the `SQLiteDatabase` is destructed.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T00:27:30Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417585",
      "id" : 492417585,
      "in_reply_to_id" : 491362245,
      "line" : 204,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxNzU4NQ==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 204,
      "original_position" : 231,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 204,
      "pull_request_review_id" : 493064873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492417585",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492418121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492418121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it's fine",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T00:29:49Z",
      "diff_hunk" : "@@ -170,7 +170,16 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    while (true) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492418121",
      "id" : 492418121,
      "in_reply_to_id" : 491662874,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxODEyMQ==",
      "original_commit_id" : "ceac790fb2be0bcd5a1e20b275612c3b75df7786",
      "original_line" : 293,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 493065456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492418121",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428340"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added `fullfsync` enabling. `checkpoint_fullsync` is not needed as we don't use WAL mode.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T01:13:56Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428340",
      "id" : 492428340,
      "in_reply_to_id" : 491354812,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODM0MA==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 142,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 493076274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428340",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428354"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T01:14:02Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";\n+            ret = sqlite3_prepare_v2(db, check_main.c_str(), -1, &check_main_stmt, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            ret = sqlite3_step(check_main_stmt);\n+            if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            if (ret == SQLITE_DONE) {\n+                table_exists = false;\n+            } else if (ret == SQLITE_ROW) {\n+                table_exists = true;\n+            } else {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            if (!table_exists) {\n+                // Make the table for our key-value pairs\n+                std::string create_stmt = \"CREATE TABLE main(key BLOB PRIMARY KEY, value BLOB)\";\n+                ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+                if (ret != SQLITE_OK) {\n+                    throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+                }\n+            }\n+\n+            // Set the application id\n+            uint32_t app_id = ReadBE32(Params().MessageStart());\n+            std::string set_app_id = strprintf(\"PRAGMA application_id = %d\", (int32_t)app_id);\n+            ret = sqlite3_exec(db, set_app_id.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the application id: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Set the user version\n+            std::string set_user_ver = strprintf(\"PRAGMA user_version = %d\", WALLET_SCHEMA_VERSION);\n+            ret = sqlite3_exec(db, set_user_ver.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to set the wallet schema version: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    }\n+    SetupSQLStatements();\n+}\n+\n+bool SQLiteDatabase::Rewrite(const char* skip)\n+{\n+    while (true) {\n+        if (m_refcount == 0) {\n+            break;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{100});\n+    }\n+\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html\n+    int ret = sqlite3_exec(m_db, \"VACUUM\", nullptr, nullptr, nullptr);\n+    return ret == SQLITE_OK;\n+}\n+\n+bool SQLiteDatabase::PeriodicFlush()\n+{\n+    return true;\n+}\n+\n+bool SQLiteDatabase::Backup(const std::string& dest) const\n+{\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    // Copy all of the pages using -1\n+    res = sqlite3_backup_step(backup, -1);\n+    if (res != SQLITE_DONE) {\n+        sqlite3_backup_finish(backup);\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    res = sqlite3_backup_finish(backup);\n+    sqlite3_close(db_copy);\n+    return res == SQLITE_OK;\n+}\n+\n+void SQLiteDatabase::Close()\n+{\n+    if (!m_db) return;\n+\n+    assert(m_refcount == 0);\n+\n+    // Free all of the prepared statements\n+    sqlite3_finalize(m_read_stmt);\n+    sqlite3_finalize(m_insert_stmt);\n+    sqlite3_finalize(m_overwrite_stmt);\n+    sqlite3_finalize(m_delete_stmt);\n+    sqlite3_finalize(m_cursor_stmt);\n+\n+    int res = sqlite3_close(m_db);\n+    if (res != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n+    }\n+    m_db = nullptr;\n+\n+    UnlockDirectory(m_dir_path, \".walletlock\");\n+}\n+\n+void SQLiteDatabase::Flush() {}\n+\n+void SQLiteDatabase::ReloadDbEnv() {}\n+\n+void SQLiteDatabase::RemoveRef()\n+{\n+    m_refcount--;\n+}\n+\n+void SQLiteDatabase::AddRef()\n+{\n+    m_refcount++;\n+}\n+\n+std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool flush_on_close)\n+{\n+    // We ignore flush_on_close because we don't do manual flushing for SQLite\n+    return MakeUnique<SQLiteBatch>(*this, mode);\n+}\n+\n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();\n+    m_database.Open(mode);\n+}\n+\n+void SQLiteBatch::Flush() {}\n+\n+void SQLiteBatch::Close()\n+{\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();\n+    }\n+    m_database.RemoveRef();\n+}\n+\n+bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_database.m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_database.m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_database.m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return true;\n+}\n+\n+bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n+{\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Write called on database in read-only mode\");\n+    assert(m_database.m_insert_stmt && m_database.m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_database.m_overwrite_stmt;\n+    } else {\n+        stmt = m_database.m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::EraseKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Erase called on database in read-only mode\");\n+    assert(m_database.m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_delete_stmt);\n+        sqlite3_reset(m_database.m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_database.m_delete_stmt);\n+    sqlite3_clear_bindings(m_database.m_delete_stmt);\n+    sqlite3_reset(m_database.m_delete_stmt);\n+    return res == SQLITE_DONE;\n+}\n+\n+bool SQLiteBatch::HasKey(CDataStream&& key)\n+{\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res == SQLITE_OK) {\n+        res = sqlite3_step(m_database.m_read_stmt);\n+        if (res == SQLITE_ROW) {\n+            ret = true;\n+        }\n+    }\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return ret;\n+}\n+\n+bool SQLiteBatch::StartCursor()\n+{\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n+}\n+\n+bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n+{\n+    complete = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428354",
      "id" : 492428354,
      "in_reply_to_id" : 491651973,
      "line" : 498,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODM1NA==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 498,
      "original_position" : 505,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 498,
      "pull_request_review_id" : 493076299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428354",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428410"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T01:14:14Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492428410",
      "id" : 492428410,
      "in_reply_to_id" : 491360876,
      "line" : 200,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODQxMA==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 200,
      "original_position" : 227,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 200,
      "pull_request_review_id" : 493076352,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492428410",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492632145"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492632145"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`NO_SQLITE` and `NO_BDB` (hooray!) needs a mention in depends/README",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T10:33:08Z",
      "diff_hunk" : "@@ -134,7 +134,10 @@ qrencode_packages_$(NO_QR) = $(qrencode_packages)\n \n qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages) $(qrencode_packages_)\n \n-wallet_packages_$(NO_WALLET) = $(wallet_packages)\n+bdb_packages_$(NO_BDB) = $(bdb_packages)\n+sqlite_packages_$(NO_SQLITE) = $(sqlite_packages)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492632145",
      "id" : 492632145,
      "line" : 138,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzMjE0NQ==",
      "original_commit_id" : "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "original_line" : 138,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "depends/Makefile",
      "position" : 6,
      "pull_request_review_id" : 493324893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492632145",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492663400"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492663400"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> For the most part, yes. Sometimes we do need to handle concurrency withing SQLiteDatabase but those should already be handled by m_refcount and sqlite itself.\r\n\r\nCould you please elaborate on this part? It looks like there are indeed places when we access `WalletDatabase` instance from another thread without acquiring lock first. For example `CWallet::chainStateFlushed`. From my understanding of sqlite it's safe to use by multiple threads, but they should be using different connections. Which is not the case in this example. And I'm not sure how `m_refcount` will help with that.\r\n\r\nI guess in BDB this was handled by `cs_db` within `BerkeleyDatabase::Open`",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T11:35:09Z",
      "diff_hunk" : "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492663400",
      "id" : 492663400,
      "in_reply_to_id" : 491332879,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MzQwMA==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 493367050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492663400",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492671660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492671660"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Actually, I couldn't find a single place when we create read-only batch at all. Maybe I'm missing something. Do you know what was the original purpose to add read-only mode?",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T11:51:14Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492671660",
      "id" : 492671660,
      "in_reply_to_id" : 491360876,
      "line" : 200,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3MTY2MA==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 200,
      "original_position" : 227,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 200,
      "pull_request_review_id" : 493378039,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492671660",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492889600"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492889600"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's pretty much just a leftover from BDB. The single place a readonly batch is used is in `BerkeleyDatabase::Rewrite`. Maybe we should just remove the readonly stuff, but that could be done in a followup.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T16:53:14Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492889600",
      "id" : 492889600,
      "in_reply_to_id" : 491360876,
      "line" : 200,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg4OTYwMA==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 200,
      "original_position" : 227,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 200,
      "pull_request_review_id" : 493663647,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492889600",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492892531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492892531"
         }
      },
      "author_association" : "MEMBER",
      "body" : "According to https://sqlite.org/threadsafe.html, the default multithreading mode is serialized which means that a single database connection can be used from multiple threads safely. So no locking is needed with that.\r\n\r\nI suppose we should enforce that when opening by setting `SQLITE_OPEN_FULLMUTEX`?",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-22T16:57:47Z",
      "diff_hunk" : "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492892531",
      "id" : 492892531,
      "in_reply_to_id" : 491332879,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5MjUzMQ==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 493667274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492892531",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493400426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493400426"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for clarification.\r\n\r\n> I suppose we should enforce that when opening by setting `SQLITE_OPEN_FULLMUTEX`?\r\n\r\nI think that's a great idea. I would say that [SQLITE_CONFIG_SERIALIZED](https://sqlite.org/c3ref/c_config_covering_index_scan.html#sqliteconfigserialized) is even better. It explicitly say that it's safe to use both connection and **prepared statement** objects.\r\n",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-23T10:03:20Z",
      "diff_hunk" : "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493400426",
      "id" : 493400426,
      "in_reply_to_id" : 491332879,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwMDQyNg==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 494498634,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493400426",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493721352"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493721352"
         }
      },
      "author_association" : "MEMBER",
      "body" : "DOne",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-23T16:17:04Z",
      "diff_hunk" : "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+    bool m_cursor_init = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+    ~SQLiteBatch() override { Close(); }\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+    bool PrepareDirectory() const;\n+\n+    void SetupSQLStatements();\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    bool Verify(bilingual_str& error);\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush() override;\n+\n+    void IncrementUpdateCounter() override { ++nUpdateCounter; }\n+\n+    void ReloadDbEnv() override;\n+\n+    std::string Filename() override { return m_file_path; };\n+\n+    /** Make a SQLiteBatch connected to this database */\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+\n+    sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493721352",
      "id" : 493721352,
      "in_reply_to_id" : 491332879,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyMTM1Mg==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 494830394,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493721352",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK 46db9cd\r\nCode reviewed and lightly tested. I built it on macOS 10.13.6 with sqlite (3.19.3) installed from brew.\r\n * Created, loaded and unloaded a wallet; loaded multiple sqlite wallets\r\n * Verified checks for `application_id` and schema version (`user_version`)\r\n * Verified SQLite global log configuration; errors appear in the log file as expected\r\n * Integrity check gives a proper error while loading wallet from a corrupted file\r\n * Wallet encryption; this involves transactions, so I verified it works and no records are visible before commit\r\n * Backup\r\n * Opened wallet file with another tool and explored the contents of the database\r\n * Triggered wallet rewrite and vacuum, verified db size shrinks as expected",
      "created_at" : "2020-09-24T13:54:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-698359773",
      "id" : 698359773,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5ODM1OTc3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-24T13:54:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698359773",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK and Approach ACK. From my initial shallow pass, the code looks very good already. Local build, automated tests, and some manual testing were all successful. Will keep going and dig into SQLite documentation at the same time since I am not experienced with it.",
      "created_at" : "2020-09-25T14:00:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-698946207",
      "id" : 698946207,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5ODk0NjIwNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-25T14:00:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698946207",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. On my review shortlist. ",
      "created_at" : "2020-09-25T19:25:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699111834",
      "id" : 699111834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5OTExMTgzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-25T19:25:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699111834",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I have run coverage checks on the current state of this PR [here](https://fjahr.com/files/19077_cov_baseline/src/wallet/index.html) (these are the total coverage number, i.e. including functional tests). The `wallet/sqlite.cpp` numbers are low because of many lines dedicated to error checking but also `HasKey()` and `TxnAbort()` are not covered while they are covered on the BDB class. I suppose the reason for that is that these functions are not covered by wallet tests but other tests where a BDB based wallet is used. We currently only run the wallet tests with a descriptor wallet AFAICT. Should this be changed now? Maybe there are already plans for this were I missed the discussion.",
      "created_at" : "2020-09-26T18:24:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699530872",
      "id" : 699530872,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5OTUzMDg3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-26T18:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699530872",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "`TxnAbort` isn't covered by either SQLite or BDB, and that is expected as it is only called in an failure case.\r\n\r\n`HasKey` seems to be only used by `DatabaseBatch::Exists` which is currently only used by `BerkeleyBatch` for a backwards compatibility case that SQLite doesn't need.\r\n\r\n> We currently only run the wallet tests with a descriptor wallet AFAICT. Should this be changed now? Maybe there are already plans for this were I missed the discussion.\r\n\r\nWith #18788, more tests will be enabled for descriptor wallets as well as the option to run all tests with descriptor wallets.",
      "created_at" : "2020-09-26T19:50:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699540371",
      "id" : 699540371,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5OTU0MDM3MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-26T19:52:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699540371",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495585293"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495585293"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "5ece9f577a6e6463b15b0d88f35a7f18808936f2\r\n\r\nWhy not keep it as `NO_WALLET`?",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-27T15:40:32Z",
      "diff_hunk" : "@@ -15,7 +15,7 @@ export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n \n export CONTAINER_NAME=\"ci_native_msan\"\n export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_WALLET=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495585293",
      "id" : 495585293,
      "line" : 18,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4NTI5Mw==",
      "original_commit_id" : "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "original_line" : 18,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "ci/test/00_setup_env_native_msan.sh",
      "position" : 5,
      "pull_request_review_id" : 497090123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495585293",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495589636"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495589636"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "8c7832a45f9acb088a87689573c2be47870b5c8a\r\n\r\nIt feels strange to me that the log callback makes everything blow up in a special case. I think we use asserts for developer errors but I don't think that's the case here. Also doesn't this mean that the `throw std::runtime_error` on L36 will never be used? ",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-27T16:25:30Z",
      "diff_hunk" : "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495589636",
      "id" : 495589636,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4OTYzNg==",
      "original_commit_id" : "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "original_line" : 27,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 497090123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495589636",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495591171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495591171"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "cf3a2373b0aa7a20ff15367730161ac18f3f302b\r\n\r\nnit\r\n```suggestion\r\n    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\r\n    const bool create = strchr(mode, 'c') != nullptr;\r\n    int flags;\r\n\r\n```",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-27T16:41:32Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495591171",
      "id" : 495591171,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MTE3MQ==",
      "original_commit_id" : "cf3a2373b0aa7a20ff15367730161ac18f3f302b",
      "original_line" : 234,
      "original_position" : 10,
      "original_start_line" : 58,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 497090123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495591171",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495602648"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495602648"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "e4d88e26a5da6f119b6a0124fb18ee9909e486a4\r\n\r\nMaybe use a runtime_error here instead of an assert? Same in `EraseKey`.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-27T18:47:36Z",
      "diff_hunk" : "@@ -259,22 +259,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_database.m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_database.m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_database.m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return true;\n }\n \n bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Write called on database in read-only mode\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495602648",
      "id" : 495602648,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwMjY0OA==",
      "original_commit_id" : "e4d88e26a5da6f119b6a0124fb18ee9909e486a4",
      "original_line" : 291,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 497090123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495602648",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495611715"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495611715"
         }
      },
      "author_association" : "MEMBER",
      "body" : "01b3cb026806784ae20eb670bd9aa40c43a94e54\r\n\r\nnit, use initializer `{nullptr}`?",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-27T20:21:44Z",
      "diff_hunk" : "@@ -97,6 +99,12 @@ class SQLiteDatabase : public WalletDatabase\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n \n     sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495611715",
      "id" : 495611715,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxMTcxNQ==",
      "original_commit_id" : "01b3cb026806784ae20eb670bd9aa40c43a94e54",
      "original_line" : 103,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 497108156,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495611715",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495612384"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495612384"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "94d5ee30677b2282e87f79a6f945bceff41faaad\r\n\r\nThis is the case when neither DB exists and a new one is created, right? Would be worth a comment here I think.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-27T20:27:46Z",
      "diff_hunk" : "@@ -1029,6 +1038,18 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n+    if (format && options.require_format && *format != options.require_format) {\n+        error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is not in required format.\", path.string()));\n+        status = DatabaseStatus::FAILED_BAD_FORMAT;\n+        return nullptr;\n+    }\n+\n+    if (!format && options.require_format) format = options.require_format;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495612384",
      "id" : 495612384,
      "line" : 1049,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxMjM4NA==",
      "original_commit_id" : "94d5ee30677b2282e87f79a6f945bceff41faaad",
      "original_line" : 1049,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 35,
      "pull_request_review_id" : 497090123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495612384",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495613541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495613541"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "81d9ce910f61aed16c7298150775b973102db498\r\n\r\nMaybe check and error if a different format was passed?",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-27T20:38:22Z",
      "diff_hunk" : "@@ -243,11 +243,13 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     uint64_t wallet_creation_flags = options.create_flags;\n     const SecureString& passphrase = options.create_passphrase;\n \n+    if (wallet_creation_flags & WALLET_FLAG_DESCRIPTORS) options.require_format = DatabaseFormat::SQLITE;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495613541",
      "id" : 495613541,
      "line" : 251,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxMzU0MQ==",
      "original_commit_id" : "81d9ce910f61aed16c7298150775b973102db498",
      "original_line" : 251,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 10,
      "pull_request_review_id" : 497090123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495613541",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495653143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495653143"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`NO_WALLET` means both no BDB and no SQLite",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-28T01:54:36Z",
      "diff_hunk" : "@@ -15,7 +15,7 @@ export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n \n export CONTAINER_NAME=\"ci_native_msan\"\n export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_WALLET=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495653143",
      "id" : 495653143,
      "in_reply_to_id" : 495585293,
      "line" : 18,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MzE0Mw==",
      "original_commit_id" : "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "original_line" : 18,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "ci/test/00_setup_env_native_msan.sh",
      "position" : 5,
      "pull_request_review_id" : 497145104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495653143",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495654073"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495654073"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> It feels strange to me that the log callback makes everything blow up in a special case. I think we use asserts for developer errors but I don't think that's the case here.\r\n\r\nThis would only be hit in a developer error or a sqlite bug.\r\n\r\n> Also doesn't this mean that the `throw std::runtime_error` on L36 will never be used?\r\n\r\nI don't think so?",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-28T01:59:12Z",
      "diff_hunk" : "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r495654073",
      "id" : 495654073,
      "in_reply_to_id" : 495589636,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NDA3Mw==",
      "original_commit_id" : "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "original_line" : 27,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 497146093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495654073",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It's not clear to me how concurrent accesses are handled, how sqlite guarantees a concurrent thread B waits until after thread A calls `sqlite3_reset`.\r\n\r\nHave you read https://sqlite.org/lockingv3.html?",
      "created_at" : "2020-09-28T01:59:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-699728618",
      "id" : 699728618,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5OTcyODYxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-28T01:59:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699728618",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I left a few comments but I don't consider any of them blocking.\r\n\r\nGreat! I'll leave them until something blocking comes up.\r\n\r\n> There are no changes to the docs so far. Do you plan to do these in a follow-up?\r\n\r\nOh yeah, documentation... I'll do them in a follow up.",
      "created_at" : "2020-09-28T16:21:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-700139275",
      "id" : 700139275,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMDEzOTI3NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-28T16:21:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/700139275",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496121953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496121953"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "My question was unclear: I meant to ask why are we adding SQLite to this environment while we are excluding BDB here?",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-28T17:36:50Z",
      "diff_hunk" : "@@ -15,7 +15,7 @@ export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n \n export CONTAINER_NAME=\"ci_native_msan\"\n export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_WALLET=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496121953",
      "id" : 496121953,
      "in_reply_to_id" : 495585293,
      "line" : 18,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyMTk1Mw==",
      "original_commit_id" : "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "original_line" : 18,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "ci/test/00_setup_env_native_msan.sh",
      "position" : 5,
      "pull_request_review_id" : 497754498,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496121953",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496121996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496121996"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hm, the docs aren't very clear on this (or I can't find the right place) so I can not say yet if there are cases where `ret == SQLITE_OK` but the log callback is still being called. That would be the only case when this seems valuable because otherwise the `runtime_error` would be hit in case there is a problem and the error message would be clearer I think? Yes, this could be a bug in SQLite but in general, we are trusting that the ret/res codes are not lying so I don't know why we would do it differently here.\r\n\r\nOn the flip side, the `runtime_error` will currently only be hit if `ret != SQLITE_OK` but the `ErrorLogCallback` is not being called. Again, I couldn't find details/guarantees on this in the docs but at least they say the callback will be used ['whenever anomalies occur'](https://www.sqlite.org/errlog.html), so my expectation is that it would always be called as whenever `ret != SQLITE_OK` is true. So I think the `runtime_error` may never be hit unless there is a bug in SQLite.\r\n\r\nOverall it just feels strange to do anything but logging in a function that is called `*LogCallback`.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-28T17:36:54Z",
      "diff_hunk" : "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496121996",
      "id" : 496121996,
      "in_reply_to_id" : 495589636,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyMTk5Ng==",
      "original_commit_id" : "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "original_line" : 27,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 497754542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496121996",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496132342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496132342"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This test environment is a little weird.\r\n\r\nThe wallet is actually enabled and BDB is being used. However the BDB being used needs to be built with some special flags, so it can't be built via depends. What this option does is disable BDB in depends so that BDB can be built separately with whatever it needs to work in this env. Because SQLite doesn't need this special building, it can be built by depends. So we don't want `NO_WALLET` because we actually still want the wallet here. We just want `NO_BDB` so we can deal with it later.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-28T17:54:57Z",
      "diff_hunk" : "@@ -15,7 +15,7 @@ export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n \n export CONTAINER_NAME=\"ci_native_msan\"\n export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_WALLET=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"\n+export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++11 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' zeromq_cxxflags='-std=c++11 ${MSAN_AND_LIBCXX_FLAGS}'\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496132342",
      "id" : 496132342,
      "in_reply_to_id" : 495585293,
      "line" : 18,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzMjM0Mg==",
      "original_commit_id" : "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "original_line" : 18,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "ci/test/00_setup_env_native_msan.sh",
      "position" : 5,
      "pull_request_review_id" : 497767319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496132342",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496134921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496134921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think if `ret != SQLITE_OK` both `ErrorLogCallback` and `runtime_error` get called. The `ErrorLogCallback` doesn't change `ret` to `SQLITE_OK` and it doesn't throw it's own exception. The assertion should never fail so that won't cause a program exit either.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-28T17:59:21Z",
      "diff_hunk" : "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496134921",
      "id" : 496134921,
      "in_reply_to_id" : 495589636,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNDkyMQ==",
      "original_commit_id" : "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "original_line" : 27,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 497770582,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/496134921",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-09-30T07:10:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-701204549",
      "id" : 701204549,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMTIwNDU0OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-30T07:10:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701204549",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497629841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497629841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think that is necessary.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-30T16:07:04Z",
      "diff_hunk" : "@@ -243,11 +243,13 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     uint64_t wallet_creation_flags = options.create_flags;\n     const SecureString& passphrase = options.create_passphrase;\n \n+    if (wallet_creation_flags & WALLET_FLAG_DESCRIPTORS) options.require_format = DatabaseFormat::SQLITE;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497629841",
      "id" : 497629841,
      "in_reply_to_id" : 495613541,
      "line" : 251,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyOTg0MQ==",
      "original_commit_id" : "81d9ce910f61aed16c7298150775b973102db498",
      "original_line" : 251,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 10,
      "pull_request_review_id" : 499591972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497629841",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641658"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641658"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-30T16:24:48Z",
      "diff_hunk" : "@@ -97,6 +99,12 @@ class SQLiteDatabase : public WalletDatabase\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n \n     sqlite3* m_db{nullptr};\n+\n+    sqlite3_stmt* m_read_stmt = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641658",
      "id" : 497641658,
      "in_reply_to_id" : 495611715,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY0MTY1OA==",
      "original_commit_id" : "01b3cb026806784ae20eb670bd9aa40c43a94e54",
      "original_line" : 103,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 499607409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641658",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641719"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-30T16:24:53Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641719",
      "id" : 497641719,
      "in_reply_to_id" : 495591171,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY0MTcxOQ==",
      "original_commit_id" : "cf3a2373b0aa7a20ff15367730161ac18f3f302b",
      "original_line" : 234,
      "original_position" : 10,
      "original_start_line" : 58,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 499607503,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641719",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641745"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-30T16:24:56Z",
      "diff_hunk" : "@@ -259,22 +259,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_database.m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_database.m_read_stmt);\n+        sqlite3_reset(m_database.m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_database.m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_database.m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_database.m_read_stmt);\n+    sqlite3_reset(m_database.m_read_stmt);\n+    return true;\n }\n \n bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) assert(!\"Write called on database in read-only mode\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641745",
      "id" : 497641745,
      "in_reply_to_id" : 495602648,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY0MTc0NQ==",
      "original_commit_id" : "e4d88e26a5da6f119b6a0124fb18ee9909e486a4",
      "original_line" : 291,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 499607533,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641745",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641790"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641790"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-30T16:24:59Z",
      "diff_hunk" : "@@ -1029,6 +1038,18 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n+    if (format && options.require_format && *format != options.require_format) {\n+        error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is not in required format.\", path.string()));\n+        status = DatabaseStatus::FAILED_BAD_FORMAT;\n+        return nullptr;\n+    }\n+\n+    if (!format && options.require_format) format = options.require_format;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497641790",
      "id" : 497641790,
      "in_reply_to_id" : 495612384,
      "line" : 1049,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY0MTc5MA==",
      "original_commit_id" : "94d5ee30677b2282e87f79a6f945bceff41faaad",
      "original_line" : 1049,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 35,
      "pull_request_review_id" : 499607593,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497641790",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased, so addressed comments. Also added some basic documentation to the build docs.",
      "created_at" : "2020-09-30T16:25:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-701499340",
      "id" : 701499340,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMTQ5OTM0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-30T16:25:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701499340",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497825930"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497825930"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r460275191\r\n\r\nIn commit \"Add libsqlite3\" (10124c3d6c5176d5df94964e530a4b0c6edd8381)\r\n\r\nMinor: Maybe someone more familiar with the build can weigh in, but it seems like it could be desirable to allow building bitcoin without sqlite even if sqlite is installed on the system. Also, I think other dependency checks have been switched to use pkg-config (#18307) instead ad-hoc methods like this.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-30T22:01:21Z",
      "diff_hunk" : "@@ -1138,6 +1138,9 @@ fi\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+\n+    dnl Check for sqlite3\n+    AC_CHECK_HEADERS([sqlite3.h], [AC_CHECK_LIB([sqlite3], [sqlite3_open], [SQLITE_LIBS=-lsqlite3], [AC_MSG_ERROR(sqlite3_open missing from libsqlite3)], [-pthread -lpthread])], [AC_MSG_ERROR(sqlite3.h headers missing)])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497825930",
      "id" : 497825930,
      "in_reply_to_id" : 460275191,
      "line" : 1180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyNTkzMA==",
      "original_commit_id" : "31243f5482bb1c8a71affbe7ced6653a09bd6829",
      "original_line" : 1180,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : 6,
      "pull_request_review_id" : 499843408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497825930",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497826540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497826540"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add sqlite to travis and depends\" (443d029fb859262c56b8be32205a2b4540dbb843)\r\n\r\nMinor: Would be nice to preserve alphabetical order and avoid need to change unrelated lines",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-30T22:02:51Z",
      "diff_hunk" : "@@ -14,6 +14,7 @@\n       \"name\": \"libevent\",\n       \"features\": [\"thread\"]\n     },\n-    \"zeromq\"\n+    \"zeromq\",\n+    \"sqlite3\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497826540",
      "id" : 497826540,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyNjU0MA==",
      "original_commit_id" : "443d029fb859262c56b8be32205a2b4540dbb843",
      "original_line" : 18,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "build_msvc/vcpkg.json",
      "position" : null,
      "pull_request_review_id" : 499843408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497826540",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497827306"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497827306"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add sqlite to travis and depends\" (443d029fb859262c56b8be32205a2b4540dbb843)\r\n\r\nMinor: Spacing on this line is inconsistent with the rest of the file",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-30T22:04:47Z",
      "diff_hunk" : "@@ -10,7 +10,8 @@ qt_android_packages=qt\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-wallet_packages=bdb\n+bdb_packages=bdb\n+sqlite_packages = sqlite",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497827306",
      "id" : 497827306,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyNzMwNg==",
      "original_commit_id" : "443d029fb859262c56b8be32205a2b4540dbb843",
      "original_line" : 14,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "depends/packages/packages.mk",
      "position" : null,
      "pull_request_review_id" : 499843408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497827306",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497829773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497829773"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (f35f89f1ae53914f6183ec3d7da6a1d0c27bed16)\r\n\r\nSee main comment for reasoning, but this is awkward to change later so I think the commit introducing this should start with the appropriate final value (hopefully \"wallet.sqlite\" or similar)",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-30T22:11:05Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497829773",
      "id" : 497829773,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyOTc3Mw==",
      "original_commit_id" : "f35f89f1ae53914f6183ec3d7da6a1d0c27bed16",
      "original_line" : 20,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 20,
      "pull_request_review_id" : 499843408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497829773",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497833472"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497833472"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Initialize and Shutdown sqlite3 globals\" (13cca0d881acc81dbf4a6496bb02d4fefc905a77)\r\n\r\nThere's still a race condition here if two databases are opened at the same time. sqlite3_config will only be called once for both databases, but only one of the databases will actually block waiting for the call to complete, so the other database open will most likely fail. Similar races can happen on close.\r\n\r\nInstead of trying to be clever and lock-free, it would be better to be dumb and mutex-full.\r\n\r\n```c++\r\nstatic Mutex g_sqlite_mutex;\r\nstatic int g_sqlite_count GUARDED_BY(g_sqlite_mutex) = 0;\r\n```\r\n\r\n```c++\r\nLOCK(g_sqlite_mutex);\r\nif (++g_sqlite_count == 1) {\r\n   sqlite_config...\r\n}\r\n```\r\n\r\n```c++\r\nLOCK(g_sqlite_mutex);\r\nif (--g_sqlite_count == 0) {\r\n   sqlite_shutdown...\r\n}\r\n```",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-09-30T22:21:02Z",
      "diff_hunk" : "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n     WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n {\n     LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r497833472",
      "id" : 497833472,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzMzQ3Mg==",
      "original_commit_id" : "13cca0d881acc81dbf4a6496bb02d4fefc905a77",
      "original_line" : 32,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 499843408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497833472",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498140301"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498140301"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@achow101 I'd like to follow up on this if you don't have plans to do it yourself",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T10:24:24Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498140301",
      "id" : 498140301,
      "in_reply_to_id" : 491360876,
      "line" : 200,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0MDMwMQ==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 200,
      "original_position" : 227,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 200,
      "pull_request_review_id" : 500208905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498140301",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498362766"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498362766"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@S3RK Go ahead",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T16:12:01Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498362766",
      "id" : 498362766,
      "in_reply_to_id" : 491360876,
      "line" : 200,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2Mjc2Ng==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 200,
      "original_position" : 227,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 200,
      "pull_request_review_id" : 500508229,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498362766",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498421232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498421232"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r496134921\r\n\r\nAgree with achow that this is an appropriate place to assert. We're passing along a context value, and asserting we are passed back the same value. We're not checking for a runtime error, just documenting an assumption about how the code should is supposed to work, and adding a sanity check to detect if the assumption is wrong.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T17:56:18Z",
      "diff_hunk" : "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498421232",
      "id" : 498421232,
      "in_reply_to_id" : 495589636,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTIzMg==",
      "original_commit_id" : "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "original_line" : 27,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 499843408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498421232",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498435139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498435139"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (ecc06767e1a91b11179ffb5b70808b69a9c6b552)\r\n\r\nNote for future improvement: We should probaby stop this non-standard use of flags. \"w\" or \"a\" normally creates a new file not \"c\". https://www.gnu.org/software/libc/manual/html_node/Opening-Streams.html. It might also be better to switch away from modes strings to `readonly` / `require_new` / `require_existing` boolean options.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T18:22:58Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498435139",
      "id" : 498435139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNTEzOQ==",
      "original_commit_id" : "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "original_line" : 233,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 499843408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498435139",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498437365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498437365"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (ecc06767e1a91b11179ffb5b70808b69a9c6b552)\r\n\r\nCould avoid the need for this preamble using CREATE TABLE IF NOT EXISTS syntax: https://www.sqlite.org/draft/lang_createtable.html",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T18:27:09Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498437365",
      "id" : 498437365,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNzM2NQ==",
      "original_commit_id" : "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "original_line" : 86,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 499843408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498437365",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498440461"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498440461"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (ecc06767e1a91b11179ffb5b70808b69a9c6b552)\r\n\r\nI think you need to do this check even in the (m_db == nullptr) case above in case the file or filesystem is read-only. According to https://www.oreilly.com/library/view/using-sqlite/9781449394592/re303.html SQLITE_OPEN_READWRITE will \"Attempt to open the file read/write. If this is not possible, open the file read-only. Opening the file read-only will not result in an error.\"",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T18:32:40Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";\n+            ret = sqlite3_prepare_v2(db, check_main.c_str(), -1, &check_main_stmt, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            ret = sqlite3_step(check_main_stmt);\n+            if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            if (ret == SQLITE_DONE) {\n+                table_exists = false;\n+            } else if (ret == SQLITE_ROW) {\n+                table_exists = true;\n+            } else {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            if (!table_exists) {\n+                // Make the table for our key-value pairs\n+                std::string create_stmt = \"CREATE TABLE main(key BLOB PRIMARY KEY, value BLOB)\";\n+                ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+                if (ret != SQLITE_OK) {\n+                    throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+                }\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it\n+            std::string fullfsync_stmt = \"PRAGMA fullfsync = true\";\n+            ret = sqlite3_exec(db, fullfsync_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    } else if (!read_only && sqlite3_db_readonly(m_db, \"main\") != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498440461",
      "id" : 498440461,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MDQ2MQ==",
      "original_commit_id" : "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "original_line" : 121,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 499843408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498440461",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498455603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498455603"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"sqlitedb: Create and lock the wallet directory\" (af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3)\r\n\r\nThis doesn't seem like the most ideal approach. We were forced to use .walletlock in #11904 because the old version of BDB we use doesn't support set_lk_exclusive. But with sqlite it would seem simpler and safer to use its exclusive locking functionality: https://www.sqlite.org/pragma.html#pragma_locking_mode instead of rolling our own which is probably [less portable and reliable](https://github.com/bitcoin/bitcoin/issues/19167#issuecomment-698594254), requires code duplication, and is nonstandard not working with other sqlite database tools.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T19:02:41Z",
      "diff_hunk" : "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498455603",
      "id" : 498455603,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTYwMw==",
      "original_commit_id" : "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "original_line" : 66,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 499843408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498455603",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I think this change should be merged with more tests enabled. Particularly wallet_backup.py and wallet_multiwallet.py tests would be good to have running, but probably others would be good as well. Doing this is pretty straightforward after #20034, and I took a shot at in a branch: [master...ryanofsky:pr/sql](https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/sql) ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/sql))\r\n\r\nI think #18788 is needed to enable those tests.\r\n\r\n> I think this change should start off on the right foot using sqlite naming and locking conventions. We don't disguise sqlite journal or WAL log files as BDB log files, and I don't think there's a reason to disguise the new data file with the old name. Using \"wallet.sqlite\" clearly identifies file format and wallet directory type to provide transparency and help debugging, and should avoid tools that aren't equipped to access these files from trying to access them\r\n\r\nI have two main arguments to retain the `wallet.dat` naming:\r\n\r\n1. Existing external backup tooling, documentation, and other information refer to the wallet file as wallet.dat. In the vast majority of those cases, the exact file format is irrelevant so they will still be applicable to a sqlite wallet.dat. In the cases where the file format matters (only pywallet AFAIK), the file format is checked so the tool will error if it isn't correct.\r\n2. If the user has specified a sqlite wallet in their conf file, downgrading may result in a new bdb wallet.dat file being created in that directory. This can be confusing the user (they \"lost\" all of their money) and potentially issues with a subsequent upgrade to a version with sqlite (there would be both wallet.dat and wallet.sqlite in the same dir). I think it would be better to explicitly error (and a sqlite wallet.dat would cause an error for old software) rather than fail silently.",
      "created_at" : "2020-10-01T19:54:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-702362595",
      "id" : 702362595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMjM2MjU5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-01T20:10:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702362595",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498484152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498484152"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree that flags would probably be better. Also, I think there's an argument for dropping `read_only` considering it is only used by BerkeleyDatagbase::Rewrite.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T20:03:13Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498484152",
      "id" : 498484152,
      "in_reply_to_id" : 498435139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4NDE1Mg==",
      "original_commit_id" : "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "original_line" : 233,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 500677137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498484152",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498486168"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498486168"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since only an EXCLUSIVE lock is acquired after the first write, I'm not sure that the locking pragma provides strong enough guarantees for us. Another bitcoind could conceivably open the same wallet while only the SHARED lock is held.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T20:07:37Z",
      "diff_hunk" : "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498486168",
      "id" : 498486168,
      "in_reply_to_id" : 498455603,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4NjE2OA==",
      "original_commit_id" : "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "original_line" : 66,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 500680065,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498486168",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498530916"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498530916"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T21:50:36Z",
      "diff_hunk" : "@@ -14,6 +14,7 @@\n       \"name\": \"libevent\",\n       \"features\": [\"thread\"]\n     },\n-    \"zeromq\"\n+    \"zeromq\",\n+    \"sqlite3\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498530916",
      "id" : 498530916,
      "in_reply_to_id" : 497826540,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDkxNg==",
      "original_commit_id" : "443d029fb859262c56b8be32205a2b4540dbb843",
      "original_line" : 18,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "build_msvc/vcpkg.json",
      "position" : null,
      "pull_request_review_id" : 500742887,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498530916",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498530950"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498530950"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T21:50:42Z",
      "diff_hunk" : "@@ -10,7 +10,8 @@ qt_android_packages=qt\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-wallet_packages=bdb\n+bdb_packages=bdb\n+sqlite_packages = sqlite",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498530950",
      "id" : 498530950,
      "in_reply_to_id" : 497827306,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDk1MA==",
      "original_commit_id" : "443d029fb859262c56b8be32205a2b4540dbb843",
      "original_line" : 14,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "depends/packages/packages.mk",
      "position" : null,
      "pull_request_review_id" : 500742937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498530950",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531001"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531001"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T21:50:51Z",
      "diff_hunk" : "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n     WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n {\n     LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531001",
      "id" : 498531001,
      "in_reply_to_id" : 497833472,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTAwMQ==",
      "original_commit_id" : "13cca0d881acc81dbf4a6496bb02d4fefc905a77",
      "original_line" : 32,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 500743009,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531001",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531025"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T21:50:57Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531025",
      "id" : 498531025,
      "in_reply_to_id" : 498437365,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTAyNQ==",
      "original_commit_id" : "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "original_line" : 86,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 500743045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531025",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531047"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531047"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-01T21:51:01Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";\n+            ret = sqlite3_prepare_v2(db, check_main.c_str(), -1, &check_main_stmt, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to prepare statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            ret = sqlite3_step(check_main_stmt);\n+            if (sqlite3_finalize(check_main_stmt) != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to finalize statement checking table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+            if (ret == SQLITE_DONE) {\n+                table_exists = false;\n+            } else if (ret == SQLITE_ROW) {\n+                table_exists = true;\n+            } else {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to execute statement to check table existence: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            if (!table_exists) {\n+                // Make the table for our key-value pairs\n+                std::string create_stmt = \"CREATE TABLE main(key BLOB PRIMARY KEY, value BLOB)\";\n+                ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+                if (ret != SQLITE_OK) {\n+                    throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+                }\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it\n+            std::string fullfsync_stmt = \"PRAGMA fullfsync = true\";\n+            ret = sqlite3_exec(db, fullfsync_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    } else if (!read_only && sqlite3_db_readonly(m_db, \"main\") != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498531047",
      "id" : 498531047,
      "in_reply_to_id" : 498440461,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTA0Nw==",
      "original_commit_id" : "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "original_line" : 121,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 500743069,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498531047",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498571179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498571179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I attempted to make it so that BDB or sqlite could be disabled, but I wasn't able to get it to work. I'll leave that for a followup for someone more familiar with autotools.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-02T00:19:17Z",
      "diff_hunk" : "@@ -1138,6 +1138,9 @@ fi\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n+\n+    dnl Check for sqlite3\n+    AC_CHECK_HEADERS([sqlite3.h], [AC_CHECK_LIB([sqlite3], [sqlite3_open], [SQLITE_LIBS=-lsqlite3], [AC_MSG_ERROR(sqlite3_open missing from libsqlite3)], [-pthread -lpthread])], [AC_MSG_ERROR(sqlite3.h headers missing)])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498571179",
      "id" : 498571179,
      "in_reply_to_id" : 460275191,
      "line" : 1180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3MTE3OQ==",
      "original_commit_id" : "31243f5482bb1c8a71affbe7ced6653a09bd6829",
      "original_line" : 1180,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : 6,
      "pull_request_review_id" : 500797085,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498571179",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498750983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498750983"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe we can bump from 3.32.1 to 3.33.0 in a followup, but before the release.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-02T10:50:54Z",
      "diff_hunk" : "@@ -0,0 +1,26 @@\n+package=sqlite\n+$(package)_version=3320100",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498750983",
      "id" : 498750983,
      "line" : 2,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1MDk4Mw==",
      "original_commit_id" : "61b650b6f7cf3f2163e1d1fc2db3cd51870b128b",
      "original_line" : 2,
      "original_position" : 2,
      "original_start_line" : null,
      "path" : "depends/packages/sqlite.mk",
      "position" : 2,
      "pull_request_review_id" : 493324893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498750983",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499125987"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499125987"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I did [an implementation](https://github.com/achow101/bitcoin/compare/sqlite-wallet...S3RK:wallet_db_remove_read_only?expand=1) based on this PR to move from modes string to bool flags; and removed read-only mode as well. I'll open a PR once this one will be merged.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-03T07:49:24Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499125987",
      "id" : 499125987,
      "in_reply_to_id" : 498435139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyNTk4Nw==",
      "original_commit_id" : "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "original_line" : 233,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 501528624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499125987",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499506296"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499506296"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a09ce35e302f1da3b13e16b4837a6e4a1b3de6bb: using an enum to handle modes would seem more readable, especially because these mode strings are a BDB artefact. See also https://github.com/bitcoin/bitcoin/pull/19077/commits/0344ccea4dcc0692e736dd759fc3945272a3266c#r498435139",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T10:44:42Z",
      "diff_hunk" : "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499506296",
      "id" : 499506296,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNjI5Ng==",
      "original_commit_id" : "a09ce35e302f1da3b13e16b4837a6e4a1b3de6bb",
      "original_line" : 407,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 493324893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499506296",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499518957"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499518957"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps citing from the [sqlite3 manual](https://www.sqlite.org/c3ref/c_config_covering_index_scan.html) in the comment is more clear:\r\n\r\n```\r\n// From sqlite3_config() documentation for the SQLITE_CONFIG_LOG option: \r\n// \"The void pointer that is the second argument to SQLITE_CONFIG_LOG is passed through as\r\n// the first parameter to the application-defined logger function whenever that function is \r\n// invoked.\"\r\n// Assert that this is the case:\r\n```",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T11:10:03Z",
      "diff_hunk" : "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499518957",
      "id" : 499518957,
      "in_reply_to_id" : 495589636,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxODk1Nw==",
      "original_commit_id" : "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "original_line" : 27,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 493324893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499518957",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499532896"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499532896"
         }
      },
      "author_association" : "MEMBER",
      "body" : "0344ccea4dcc0692e736dd759fc3945272a3266c  let's drop `IF NOT EXISTS`. If `create` is only set for new database then no table should exist. Alternatively, if `create` is meant as \"create if needed\", then it's seems safer to explicitly check if the table doesn't exist yet. In that case the error  \"Failed to create new database\" is incorrect.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T11:36:33Z",
      "diff_hunk" : "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499532896",
      "id" : 499532896,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzMjg5Ng==",
      "original_commit_id" : "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "original_line" : 254,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 493324893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499532896",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499536692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499536692"
         }
      },
      "author_association" : "MEMBER",
      "body" : "0344cce: is `PRAGMA fullfsync` ephemeral? [Documentation](https://www.sqlite.org/pragma.html#pragma_checkpoint_fullfsync) isn't very clear about that. If so, it shouldn't be under `create`. On macOS 10.15.7 with sqlite 3.28.0 when I call `PRAGMA fullfsync;` it returns `0`.\r\n\r\n_Update_: it's fine, `create` is confusingly named, but this is code is run every time you load a wallet",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T11:44:00Z",
      "diff_hunk" : "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499536692",
      "id" : 499536692,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzNjY5Mg==",
      "original_commit_id" : "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "original_line" : 266,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 493324893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499536692",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499550279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499550279"
         }
      },
      "author_association" : "MEMBER",
      "body" : "0344cce: you may want to add this check early in the `create` block too. E.g. if I make an existing wallet read-only, it will throw a confusing \"Failed to set the application id\" (its first attempt to write).",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T12:09:45Z",
      "diff_hunk" : "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it\n+            std::string fullfsync_stmt = \"PRAGMA fullfsync = true\";\n+            ret = sqlite3_exec(db, fullfsync_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    }\n+    if (!read_only && sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: SQLiteBatch requested read-write permission but database only has readonly\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499550279",
      "id" : 499550279,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU1MDI3OQ==",
      "original_commit_id" : "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "original_line" : 329,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 493324893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499550279",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499643317"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499643317"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just noticed @ryanofsky's comment: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498437365\r\n\r\nI think it's safer to explicitly check if the table is present. In general it's nice to have a clearly separate code path for stuff we only do on wallet creation (and upgrade).",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T14:31:41Z",
      "diff_hunk" : "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499643317",
      "id" : 499643317,
      "in_reply_to_id" : 499532896,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0MzMxNw==",
      "original_commit_id" : "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "original_line" : 254,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502117808,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499643317",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499660884"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499660884"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499643317\r\n\r\n> Just noticed @ryanofsky's comment: [#19077 (comment)](https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498437365)\r\n> \r\n> I think it's safer to explicitly check if the table is present. In general it's nice to have a clearly separate code path for stuff we only do on wallet creation (and upgrade).\r\n\r\nDropping 'if not exists' and adding an error sounds good (though it might be helpful to say what is unsafe or what dangerous cases you are thinking of). I only suggested using 'if not exists' SQL syntax to avoid reimplementing it in C++.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T14:54:50Z",
      "diff_hunk" : "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499660884",
      "id" : 499660884,
      "in_reply_to_id" : 499532896,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2MDg4NA==",
      "original_commit_id" : "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "original_line" : 254,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 501674099,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499660884",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499713449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499713449"
         }
      },
      "author_association" : "MEMBER",
      "body" : ">  Alternatively, if `create` is meant as \"create if needed\", then it's seems safer to explicitly check if the table doesn't exist yet. In that case the error \"Failed to create new database\" is incorrect.\r\n\r\nIt is use as a \"create if needed.\" All wallet DBs are created with the mode \"cr+\". I don't think we should be giving an error if the table doesn't exist in that case either.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T16:10:20Z",
      "diff_hunk" : "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499713449",
      "id" : 499713449,
      "in_reply_to_id" : 499532896,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMzQ0OQ==",
      "original_commit_id" : "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "original_line" : 254,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502210874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499713449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499714803"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499714803"
         }
      },
      "author_association" : "MEMBER",
      "body" : "AFAICT it is persistent.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T16:12:28Z",
      "diff_hunk" : "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499714803",
      "id" : 499714803,
      "in_reply_to_id" : 499536692,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNDgwMw==",
      "original_commit_id" : "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "original_line" : 266,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502212678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499714803",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499717981"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499717981"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, this should be done as a followup.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T16:17:20Z",
      "diff_hunk" : "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499717981",
      "id" : 499717981,
      "in_reply_to_id" : 499506296,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNzk4MQ==",
      "original_commit_id" : "a09ce35e302f1da3b13e16b4837a6e4a1b3de6bb",
      "original_line" : 407,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502216919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499717981",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499723594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499723594"
         }
      },
      "author_association" : "MEMBER",
      "body" : "sqlite has a fairly aggressive release cycle, so I think we can leave this for later.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T16:26:27Z",
      "diff_hunk" : "@@ -0,0 +1,26 @@\n+package=sqlite\n+$(package)_version=3320100",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499723594",
      "id" : 499723594,
      "in_reply_to_id" : 498750983,
      "line" : 2,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMzU5NA==",
      "original_commit_id" : "61b650b6f7cf3f2163e1d1fc2db3cd51870b128b",
      "original_line" : 2,
      "original_position" : 2,
      "original_start_line" : null,
      "path" : "depends/packages/sqlite.mk",
      "position" : 2,
      "pull_request_review_id" : 502224182,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499723594",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727144"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T16:32:33Z",
      "diff_hunk" : "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it\n+            std::string fullfsync_stmt = \"PRAGMA fullfsync = true\";\n+            ret = sqlite3_exec(db, fullfsync_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+        }\n+\n+        m_db = db;\n+    }\n+    if (!read_only && sqlite3_db_readonly(m_db, \"main\") != 0) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: SQLiteBatch requested read-write permission but database only has readonly\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727144",
      "id" : 499727144,
      "in_reply_to_id" : 499550279,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNzE0NA==",
      "original_commit_id" : "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "original_line" : 329,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502228876,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727144",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727257"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727257"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T16:32:45Z",
      "diff_hunk" : "@@ -134,7 +134,10 @@ qrencode_packages_$(NO_QR) = $(qrencode_packages)\n \n qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages) $(qrencode_packages_)\n \n-wallet_packages_$(NO_WALLET) = $(wallet_packages)\n+bdb_packages_$(NO_BDB) = $(bdb_packages)\n+sqlite_packages_$(NO_SQLITE) = $(sqlite_packages)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727257",
      "id" : 499727257,
      "in_reply_to_id" : 492632145,
      "line" : 138,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNzI1Nw==",
      "original_commit_id" : "5ece9f577a6e6463b15b0d88f35a7f18808936f2",
      "original_line" : 138,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "depends/Makefile",
      "position" : 6,
      "pull_request_review_id" : 502229019,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727257",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727925"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added this comment.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T16:33:57Z",
      "diff_hunk" : "@@ -15,16 +15,42 @@\n \n static const char* DATABASE_FILENAME = \"wallet.dat\";\n \n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499727925",
      "id" : 499727925,
      "in_reply_to_id" : 495589636,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNzkyNQ==",
      "original_commit_id" : "8c7832a45f9acb088a87689573c2be47870b5c8a",
      "original_line" : 27,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502229883,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499727925",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499932369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499932369"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add sqlite to travis and depends\" (8bfbad00d4bd94f2b9006e6375ea7dc11adee6fb)\r\n\r\ns/NO_SQLITET/NO_SQLITE",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-05T23:51:31Z",
      "diff_hunk" : "@@ -99,6 +99,10 @@ The following can be set when running make: `make FOO=bar`\n <dd>Don't download/build/cache packages needed for enabling zeromq</dd>\n <dt>NO_WALLET</dt>\n <dd>Don't download/build/cache libs needed to enable the wallet</dd>\n+<dt>NO_BDB</dt>\n+<dd>Don't download/build/cache BerkeleyDB</dd>\n+<dt>NO_SQLITET</dt>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499932369",
      "id" : 499932369,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzMjM2OQ==",
      "original_commit_id" : "8bfbad00d4bd94f2b9006e6375ea7dc11adee6fb",
      "original_line" : 104,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "depends/README.md",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499932369",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499939951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499939951"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (b6eeb2b5ee6964a9034aca6f4be2b72d532589ca)\r\n\r\nI think the refcounting code in this PR is confusing and should be removed. Rewrite method can just vacuum without sleeping. Close method can unconditionally close m_db it's not null. m_refcount doesn't ever need be referenced, AddRef and RemoveRef don't ever need to be called, and they be implemented in a transparent way to make it clear they are unused holdovers:\r\n\r\n```c++\r\nvoid AddRef() override { assert(0); /* unused */ }\r\nvoid RemoveRef() override { assert(0); /* unused */ }\r\n```\r\n",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T00:18:23Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499939951",
      "id" : 499939951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzOTk1MQ==",
      "original_commit_id" : "b6eeb2b5ee6964a9034aca6f4be2b72d532589ca",
      "original_line" : 65,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499939951",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499940422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499940422"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch\" (46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce)\r\n\r\nCan drop reference counting (see dummy classes comment)",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T00:20:09Z",
      "diff_hunk" : "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499940422",
      "id" : 499940422,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MDQyMg==",
      "original_commit_id" : "46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce",
      "original_line" : 78,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499940422",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499946057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499946057"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteBatch::Close\" (fbf44184de758271e759978cd5037efcb4ba4eb1)\r\n\r\nThis should log an error if TxnAbort() fails. It might also be useful to log an error if TxnAbort succeeds, since this condition should never happen unless there is unpaired TxnBegin call or an unhandled exception.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T00:42:50Z",
      "diff_hunk" : "@@ -176,6 +176,10 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499946057",
      "id" : 499946057,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NjA1Nw==",
      "original_commit_id" : "fbf44184de758271e759978cd5037efcb4ba4eb1",
      "original_line" : 180,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499946057",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499946323"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499946323"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteBatch::Close\" (fbf44184de758271e759978cd5037efcb4ba4eb1)\r\n\r\nCan drop reference counting (see dummy classes comment)",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T00:44:00Z",
      "diff_hunk" : "@@ -176,6 +176,10 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();\n+    }\n+    m_database.RemoveRef();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499946323",
      "id" : 499946323,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NjMyMw==",
      "original_commit_id" : "fbf44184de758271e759978cd5037efcb4ba4eb1",
      "original_line" : 182,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499946323",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499962753"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499962753"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Constructors, destructors, and relevant private fields for SQLiteDatabase/Batch\" (46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce)\r\n\r\nI don't think it makes sense to open the database in the batch constructor instead of in the database constructor. It makes the batch constructor assymetric (there's no database close in the destructor), forces database to be needlessly opened, closed, and reopened when verification is enabled, delays error checking done on open (making debugging and diagnosis more difficult), and prevents taking full advantages of sqlite's exclusive locking to prevent the database from being opened in different processes.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T01:50:36Z",
      "diff_hunk" : "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();\n+    m_database.Open(mode);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499962753",
      "id" : 499962753,
      "line" : 330,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2Mjc1Mw==",
      "original_commit_id" : "46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce",
      "original_line" : 330,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 330,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499962753",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499964465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499964465"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499713449\r\n\r\n> It is use as a \"create if needed.\" All wallet DBs are created with the mode \"cr+\". I don't think we should be giving an error if the table doesn't exist in that case either.\r\n\r\nIt would require changes outside sqlite.cpp/sqlite.h but it should be possible to throw an error instead of defensively creating tables if the database already already exists and the tables are missing. I think it would be a little safer and probably preferable, but not critical.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T01:58:06Z",
      "diff_hunk" : "@@ -57,8 +57,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499964465",
      "id" : 499964465,
      "in_reply_to_id" : 499532896,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2NDQ2NQ==",
      "original_commit_id" : "0344ccea4dcc0692e736dd759fc3945272a3266c",
      "original_line" : 254,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499964465",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499968299"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499968299"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (96d2a5f8b8ea7dd512deaac4d1d70702517af6c1)\r\n\r\nShould drop this comment. Copying a wallet may be a problem if you do it in a crazy way, or it may be perfectly safe. BDB code started checking for copies only as a kludge (initial kludge protected against ambiguity in the bdb log format when multiple databases were opened in the same environment, and later the kludge was extended to work around inability to lock BDB databases with set_lk_exclusive.)",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T02:14:20Z",
      "diff_hunk" : "@@ -62,8 +62,57 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499968299",
      "id" : 499968299,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2ODI5OQ==",
      "original_commit_id" : "96d2a5f8b8ea7dd512deaac4d1d70702517af6c1",
      "original_line" : 89,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499968299",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499969112"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499969112"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (96d2a5f8b8ea7dd512deaac4d1d70702517af6c1)\r\n\r\nShould add `NOT NULL` constraint to key and value columns. Code already has to deal with empty string values, so it would be better not to throw in NULL values and errors as well where we don't need them.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T02:17:42Z",
      "diff_hunk" : "@@ -62,8 +62,57 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499969112",
      "id" : 499969112,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2OTExMg==",
      "original_commit_id" : "96d2a5f8b8ea7dd512deaac4d1d70702517af6c1",
      "original_line" : 97,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499969112",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499970587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499970587"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (b6eeb2b5ee6964a9034aca6f4be2b72d532589ca)\r\n\r\nparam is renamed to `mode` in later commit, could just call it mode here to avoid rename",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T02:24:16Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+}\n+\n+void SQLiteDatabase::Open(const char* pszMode)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499970587",
      "id" : 499970587,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3MDU4Nw==",
      "original_commit_id" : "b6eeb2b5ee6964a9034aca6f4be2b72d532589ca",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499970587",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499973617"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499973617"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"sqlitedb: Create and lock the wallet directory\" (4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r498486168\r\n\r\n> Since only an EXCLUSIVE lock is acquired after the first write, I'm not sure that the locking pragma provides strong enough guarantees for us. Another bitcoind could conceivably open the same wallet while only the SHARED lock is held.\r\n\r\nNo bitcoind should open the wallet in shared mode. The simplest approach is for every bitcoind to open the wallet in exclusive mode and fail if exclusive lock cannot be acquired\r\n\r\nI did write another suggestion about opening the database earlier to simplify code and avoid closing, unlocking, and reopening the database after verifying, but this is orthogonal to type of locking used.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T02:37:05Z",
      "diff_hunk" : "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499973617",
      "id" : 499973617,
      "in_reply_to_id" : 498455603,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3MzYxNw==",
      "original_commit_id" : "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "original_line" : 66,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499973617",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499976815"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499976815"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Verify\" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\r\n\r\nI don't think you can close the db if opening failed. I think even on cases where we don't act on errors, we should at least log them. It would be best if all the sqlite_* calls in this PR logged errors so we are never blindly debugging or guessing about errors like this. ",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T02:50:14Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499976815",
      "id" : 499976815,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3NjgxNQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 132,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499976815",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499977375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499977375"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Verify\" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\r\n\r\nThis looks like a bug. You can't delete a prepared statement that wasn't created, and this might lead to a bad pointer dereference since since stmt pointer is not initialized.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T02:52:38Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499977375",
      "id" : 499977375,
      "line" : 163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3NzM3NQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 163,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 163,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499977375",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499978292"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499978292"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Verify\" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\r\n\r\nWould be good to disambiguate this error from error immediately above (step failed vs read failed)",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T02:56:35Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499978292",
      "id" : 499978292,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3ODI5Mg==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 147,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499978292",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499978706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499978706"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Verify\" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\r\n\r\nWould be good to prefix sqlite error lines with \"Failed to verify\" text if error string is currently empty here.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T02:58:20Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499978706",
      "id" : 499978706,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3ODcwNg==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 154,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499978706",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499981600"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499981600"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Verify\" (fabd187ccb43d0cc266ae89cd2b2e3b3d098949a)\r\n\r\nIt is odd to lock the wallet here because it means the wallet will be locked on opening when `options.verify` is true, but not locked until later when `options.verify` is false (later when the first batch is created).\r\n\r\nThe simplest thing approach would seem to just open and lock the database once when the database object is created instead of opening and locking multiple times in different circumstances.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T03:10:40Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499981600",
      "id" : 499981600,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4MTYwMA==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 116,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499981600",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499983328"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499983328"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Flush, PeriodicFlush, and ReloadDbEnv as No-ops\" (addc4630a2a6587b0e07b9c45644117542685fed)\r\n\r\nAll the comments in the commit description should be comments in the code, so they are not lost in git history and so code makes sense. Would also suggest implementing these methods inline in the header file to avoid giving a misleading impression from reading the class definition that they are implemented to do things.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T03:17:50Z",
      "diff_hunk" : "@@ -176,7 +176,7 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::PeriodicFlush()\n {\n-    return false;\n+    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499983328",
      "id" : 499983328,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4MzMyOA==",
      "original_commit_id" : "addc4630a2a6587b0e07b9c45644117542685fed",
      "original_line" : 342,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499983328",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499984258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499984258"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"sqlitedb: Create and lock the wallet directory\" (4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a)\r\n\r\nThis fails to unlock the wallet if it was opened with options.verify = true, but m_db is null because no batch was created. In practice, I'm guessing this never happens, but this is the type of complication which would go away if we used sqlite locking instead of implementing our own locking.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T03:21:56Z",
      "diff_hunk" : "@@ -139,6 +156,8 @@ void SQLiteDatabase::Close()\n         throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n     }\n     m_db = nullptr;\n+\n+    UnlockDirectory(m_dir_path, \".walletlock\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499984258",
      "id" : 499984258,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4NDI1OA==",
      "original_commit_id" : "4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a",
      "original_line" : 379,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499984258",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499984625"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499984625"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::RemoveRef and AddRef\" (e63b9504257165780b2c56ec46bc842b8d680dbc)\r\n\r\nCan drop reference counting (see dummy classes comment) and this whole commit\r\n",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T03:23:43Z",
      "diff_hunk" : "@@ -151,6 +151,7 @@ void SQLiteDatabase::Close()\n {\n     if (!m_db) return;\n \n+    assert(m_refcount == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499984625",
      "id" : 499984625,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4NDYyNQ==",
      "original_commit_id" : "e63b9504257165780b2c56ec46bc842b8d680dbc",
      "original_line" : 154,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499984625",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499985602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499985602"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add SetupSQLStatements\" (fcee39162e5713f581443eb26d36c65c2c0b9cda)\r\n\r\nShould log errors if these fail so potential bugs don't go undetected and so we are less likely to have to debug blindly.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T03:28:07Z",
      "diff_hunk" : "@@ -152,6 +189,14 @@ void SQLiteDatabase::Close()\n     if (!m_db) return;\n \n     assert(m_refcount == 0);\n+\n+    // Free all of the prepared statements\n+    sqlite3_finalize(m_read_stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499985602",
      "id" : 499985602,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4NTYwMg==",
      "original_commit_id" : "fcee39162e5713f581443eb26d36c65c2c0b9cda",
      "original_line" : 194,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499985602",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499989994"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499989994"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey\" (21289de5fd85b4510032393902b0dec84704cf77)\r\n\r\nThis whole commit does not seem thread safe. Wallet RPC calls can come in from multiple threads and validation events come in on their own thread, so I would think multiple batch objects and reads and writes could happen simultaneously. If this is the case bind_blob/step calls to the same statement objects from different threads would all interfere with each other.\r\n\r\nThe simplest approach would seem to just create prepared statements on demand instead of trying to share them between different batches.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T03:47:24Z",
      "diff_hunk" : "@@ -251,22 +251,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499989994",
      "id" : 499989994,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4OTk5NA==",
      "original_commit_id" : "21289de5fd85b4510032393902b0dec84704cf77",
      "original_line" : 258,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499989994",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499991129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499991129"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::TxnBegin, TxnCommit, and TxnAbort\" (d448c6c362642f24b08b754cb09066ced847f867)\r\n\r\nIt would seem best to log errors if these calls fail. TxnBegin, TxnCommit, TxnAbort should never return false unless there's a bug in our code or a runtime error and in either case having more debug information would be useful",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T03:52:42Z",
      "diff_hunk" : "@@ -414,17 +414,23 @@ void SQLiteBatch::CloseCursor()\n \n bool SQLiteBatch::TxnBegin()\n {\n-    return false;\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499991129",
      "id" : 499991129,
      "line" : 530,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk5MTEyOQ==",
      "original_commit_id" : "d448c6c362642f24b08b754cb09066ced847f867",
      "original_line" : 530,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 530,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499991129",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499992082"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499992082"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492418121\r\n\r\nIn commit \"Implement SQLiteDatabase::Rewrite\" (0d75b4013400b5a6bfa1f5c75082a8ff0701bd84)\r\n\r\n> I think it's fine\r\n\r\nThis whole loop doesn't seem like a good idea. If it actually serves a purpose, there should be a comment about it with specifics. Otherwise I think Rewrite should directly vacuum, and this sleepy loop thing just looks like voodoo.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T03:57:16Z",
      "diff_hunk" : "@@ -170,7 +170,16 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    while (true) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499992082",
      "id" : 499992082,
      "in_reply_to_id" : 491662874,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk5MjA4Mg==",
      "original_commit_id" : "ceac790fb2be0bcd5a1e20b275612c3b75df7786",
      "original_line" : 293,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502495880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499992082",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500018582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500018582"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think we've discussed it already here https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493400426",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T05:45:38Z",
      "diff_hunk" : "@@ -251,22 +251,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500018582",
      "id" : 500018582,
      "in_reply_to_id" : 499989994,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxODU4Mg==",
      "original_commit_id" : "21289de5fd85b4510032393902b0dec84704cf77",
      "original_line" : 258,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502599027,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500018582",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021272"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021272"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "From the [docs](https://www.sqlite.org/c3ref/open.html)\r\n> Whether or not an error occurs when it is opened, resources associated with the database connection handle should be released by passing it to sqlite3_close() when it is no longer required.\r\n\r\nLogging is handled by [global error log](https://www.sqlite.org/errlog.html)\r\n",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T05:54:31Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021272",
      "id" : 500021272,
      "in_reply_to_id" : 499976815,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTI3Mg==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 132,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502602437,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021272",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021625"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021625"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not sure if we SHOULD finalize failed prepared statement, but it's a no-op to finalize a NULL pointer.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T05:55:38Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021625",
      "id" : 500021625,
      "in_reply_to_id" : 499977375,
      "line" : 163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTYyNQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 163,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 163,
      "pull_request_review_id" : 502602882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021625",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021921"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Logging is handled by [global error log](https://www.sqlite.org/errlog.html)",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T05:56:29Z",
      "diff_hunk" : "@@ -152,6 +189,14 @@ void SQLiteDatabase::Close()\n     if (!m_db) return;\n \n     assert(m_refcount == 0);\n+\n+    // Free all of the prepared statements\n+    sqlite3_finalize(m_read_stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021921",
      "id" : 500021921,
      "in_reply_to_id" : 499985602,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyMTkyMQ==",
      "original_commit_id" : "fcee39162e5713f581443eb26d36c65c2c0b9cda",
      "original_line" : 194,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502603239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500021921",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500029597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500029597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500018582\r\n\r\n> I think we've discussed it already here [#19077 (comment)](https://github.com/bitcoin/bitcoin/pull/19077#discussion_r493400426)\r\n\r\nYou can use the same prepared statement from different threads but you can't use the same statement for different purposes with different values at the same time from different threads. The only thing that might prevent bugs in practice is the fact that most of the database is copied into memory and not actually accessed through database lookups, and the fact that the cs_wallet mutex makes most wallet operations single threaded in practice. But these things only make the code accidentally correct instead of correct by design. The sqlite implementation shouldn't have object sharing and reference counting code that makes it more complicated than it needs to be, and less safe than the bdb implementation (or any sane key/value API). You shouldn't get undefined results, for example, simply reading two keys from two different threads.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T06:19:08Z",
      "diff_hunk" : "@@ -251,22 +251,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500029597",
      "id" : 500029597,
      "in_reply_to_id" : 499989994,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyOTU5Nw==",
      "original_commit_id" : "21289de5fd85b4510032393902b0dec84704cf77",
      "original_line" : 258,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502612841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500029597",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500033853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500033853"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021272\r\n\r\n> Logging is handled by [global error log](https://www.sqlite.org/errlog.html)\r\n\r\nThanks for explaining sqlite3_close. How do you know whether or not something is logged to the error log? Does every function call that doesn't return SQLITE_OK log to the error log? If so, then I guess there's no technical reason to handle errors twice even if code looks like it is silently discarding them. I would prefer the uniform approach of handling all errors, but this would give more of excuse not to.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T06:30:26Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500033853",
      "id" : 500033853,
      "in_reply_to_id" : 499976815,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAzMzg1Mw==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 132,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502618282,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500033853",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500035085"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500035085"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500021625\r\n\r\n> I'm not sure if we SHOULD finalize failed prepared statement, but it's a no-op to finalize a NULL pointer.\r\n\r\nThe pointer looks uninitialized, not null. Even if this actually works, I wouldn't code that looks so fragile and broken.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T06:33:22Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500035085",
      "id" : 500035085,
      "in_reply_to_id" : 499977375,
      "line" : 163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAzNTA4NQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 163,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 163,
      "pull_request_review_id" : 502619773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500035085",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500146185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500146185"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Does every function call that doesn't return SQLITE_OK log to the error log?\r\n\r\nThis is my current understanding of how it works based on my tests and the following line from documentation. \r\n\r\n> SQLite can be configured to invoke a callback function containing an error code and a terse error message whenever anomalies occur.\r\n\r\nI can check particular scenarios if you'd like.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T09:47:30Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500146185",
      "id" : 500146185,
      "in_reply_to_id" : 499976815,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE0NjE4NQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 132,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502766389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500146185",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500152129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500152129"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "As an out parameter It's set to NULL in case of an error. This is documented and to me the code in question looks like an intended use of sqlite api. The sqlite3_finalize routine can be called at any point during the life cycle. I'm not sure whether it's possible for an error to happen when statement is initialized. But it looks reasonable and safer to finalize whenever we encounter an error at any step of the life cycle.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T09:57:32Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500152129",
      "id" : 500152129,
      "in_reply_to_id" : 499977375,
      "line" : 163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1MjEyOQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 163,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 163,
      "pull_request_review_id" : 502774373,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500152129",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500167882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500167882"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Now I think you're correct. Looks like the locking in sqlite will guarantee safety for a single call, but we ourselves still have to take care for the sequence of the calls.\r\n\r\n> You can use the same prepared statement from different threads but you can't use the same statement for different purposes with different values at the same time from different threads.\r\n\r\nThis is what I failed to articulate before and was to quick to agree it's safe.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T10:26:00Z",
      "diff_hunk" : "@@ -251,22 +251,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500167882",
      "id" : 500167882,
      "in_reply_to_id" : 499989994,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2Nzg4Mg==",
      "original_commit_id" : "21289de5fd85b4510032393902b0dec84704cf77",
      "original_line" : 258,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502795635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500167882",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500208899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500208899"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500152129\r\n\r\n> As an out parameter It's set to NULL in case of an error. This is documented and to me the code in question looks like an intended use of sqlite api.\r\n\r\nSorry, where is this documented? Even assuming it is documented, would you expect anybody else reading the code to know this? Or will the next person maintaining or debugging this waste development time checking it, instead of just being able to look and see that the code won't dereference an uninitialized pointer. If I were writing this, I would initialize the pointer to null. Fixing this is just a suggestion. It is fine to ignore the suggestion.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T11:43:54Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500208899",
      "id" : 500208899,
      "in_reply_to_id" : 499977375,
      "line" : 163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwODg5OQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 163,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 163,
      "pull_request_review_id" : 502850624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500208899",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500214610"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500214610"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500146185\r\n\r\n> This is my current understanding of how it works based on my tests and the following line from documentation.\r\n\r\nThis looks like a misreading to me. The documentation could easily say every failing call is logged, but it doesn't, and even goes out of it's way to say it \"strives to keep error logger traffic low.\" But even all errors were guaranteed to be logged, would you expect someone else reading the code to know it? Or will the next person maintaining or debugging this code waste development time checking unchecked return values, instead of just being able to look at the code and see that every call is succeeding. That is why if I were writing this code, I would check for unexpected return values everywhere and print them. Fixing this is just a suggestion. It is fine to ignore the suggestion.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T11:54:26Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500214610",
      "id" : 500214610,
      "in_reply_to_id" : 499976815,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxNDYxMA==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 132,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502850624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500214610",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500261927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500261927"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499125987\r\n\r\n> I did [an implementation](https://github.com/achow101/bitcoin/compare/sqlite-wallet...S3RK:wallet_db_remove_read_only?expand=1) based on this PR to move from modes string to bool flags; and removed read-only mode as well. I'll open a PR once this one will be merged.\r\n\r\nSince these changes would only simplify this PR, and the more complicated parts don't involve sqlite, I think you could open a separate PR based on master just omitting the sqlite parts. Also, the change can go further and drop the batch create option, just using the DatabaseOptions::require_existing option instead (storing it if needed).",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T13:09:47Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500261927",
      "id" : 500261927,
      "in_reply_to_id" : 498435139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MTkyNw==",
      "original_commit_id" : "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "original_line" : 233,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500261927",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500285658"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500285658"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just not to sound unfounded â here is the link https://www.sqlite.org/c3ref/prepare.html\r\nMaybe I misunderstood your point, I didn't mean to say that I'm against initializing it to null, it's a good idea. It was more to the fact that I believe calling finalize is fine in the case of an error.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T13:39:37Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500285658",
      "id" : 500285658,
      "in_reply_to_id" : 499977375,
      "line" : 163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4NTY1OA==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 163,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 163,
      "pull_request_review_id" : 502972738,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500285658",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500304585"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500304585"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Indeed I assumed (maybe falsely) that the next maintainer is familiar with SQLite C api. My humble personal preference is not to complicate the code by duplicating the error messages, when the library can do it for us. I just tried to provide more context for the author and the reviewers, sorry if it wasn't helpful. ",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T13:59:10Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500304585",
      "id" : 500304585,
      "in_reply_to_id" : 499976815,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwNDU4NQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 132,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502994125,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500304585",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500317531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500317531"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500304585\r\n\r\n> Indeed I assumed (maybe falsely) that the next maintainer is familiar with SQLite C api. My humble personal preference is not to complicate the code by duplicating the error messages, when the library can do it for us. I just tried to provide more context for the author and the reviewers, sorry if it wasn't helpful.\r\n\r\nThis was helpful, but it's not just assuming some basic level of familiarity with sqlite, it is  assuming knowledge of undocumented behavior of the API. Debug logging and error handling are two overlapping things code can do, but neither is a subset of the other. We aren't using bash/go/C style programming, and we have good non-verbose error handling options available, so I wouldn't ignore error codes just because sqlite has a debug feature that prints some subset of errors with less context.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T14:12:29Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500317531",
      "id" : 500317531,
      "in_reply_to_id" : 499976815,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNzUzMQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 132,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500317531",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500419009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500419009"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The purpose of opening the database within a batch is to only open it when the database is going to be used. It is then left open to avoid constantly closing and reopening it.\r\n\r\nWe also do it to set the mode on the database, but the usefulness of that is arguable but we can deal with that in a followup.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T16:04:07Z",
      "diff_hunk" : "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();\n+    m_database.Open(mode);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500419009",
      "id" : 500419009,
      "in_reply_to_id" : 499962753,
      "line" : 330,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxOTAwOQ==",
      "original_commit_id" : "46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce",
      "original_line" : 330,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 330,
      "pull_request_review_id" : 503128006,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500419009",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500422742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500422742"
         }
      },
      "author_association" : "MEMBER",
      "body" : "From https://sqlite.org/pragma.html#pragma_locking_mode\r\n\r\n> The first time the database is read in EXCLUSIVE mode, a shared lock is obtained and held. The first time the database is written, an exclusive lock is obtained and held.\r\n\r\nSo opening in exclusive mode means that there is a potential case where bitcoind has not yet written anything and thus only has a shared lock. In that case, another bitcoind could open the same file (and not write anything) and also acquire a shared lock. See https://sqlite.org/lockingv3.html for the definitions of shared and exclusive locks in sqlite3.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T16:09:28Z",
      "diff_hunk" : "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500422742",
      "id" : 500422742,
      "in_reply_to_id" : 498455603,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyMjc0Mg==",
      "original_commit_id" : "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "original_line" : 66,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503133043,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500422742",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500428260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500428260"
         }
      },
      "author_association" : "MEMBER",
      "body" : "From https://sqlite.org/c3ref/open.html\r\n\r\n> Whether or not an error occurs when it is opened, resources associated with the database connection handle should be released by passing it to sqlite3_close() when it is no longer required.\r\n\r\nSince it is ok for a database to not exist when we do `Verify`, I think it is correct to not log anything on the `NOTFOUND` error here.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T16:18:04Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500428260",
      "id" : 500428260,
      "in_reply_to_id" : 499976815,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyODI2MA==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 132,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503140536,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500428260",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500431876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500431876"
         }
      },
      "author_association" : "MEMBER",
      "body" : "From https://sqlite.org/c3ref/prepare.html\r\n\r\n> *ppStmt is left pointing to a compiled prepared statement that can be executed using sqlite3_step(). If there is an error, *ppStmt is set to NULL.\r\n\r\nSo `stmt` should be NULL after prepare if it fails.\r\n\r\nFrom https://sqlite.org/c3ref/finalize.html\r\n\r\n> Invoking sqlite3_finalize() on a NULL pointer is a harmless no-op.\r\n>\r\n> The application must finalize every prepared statement in order to avoid resource leaks.\r\n\r\nFinalizing a nullptr is safe. It also seems like it is recommended to finalize on failure, just in case.\r\n\r\nRegardless, I will initialize `stmt` to nullptr.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T16:23:24Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500431876",
      "id" : 500431876,
      "in_reply_to_id" : 499977375,
      "line" : 163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMTg3Ng==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 163,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 163,
      "pull_request_review_id" : 503145331,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500431876",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504040"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:19:22Z",
      "diff_hunk" : "@@ -99,6 +99,10 @@ The following can be set when running make: `make FOO=bar`\n <dd>Don't download/build/cache packages needed for enabling zeromq</dd>\n <dt>NO_WALLET</dt>\n <dd>Don't download/build/cache libs needed to enable the wallet</dd>\n+<dt>NO_BDB</dt>\n+<dd>Don't download/build/cache BerkeleyDB</dd>\n+<dt>NO_SQLITET</dt>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504040",
      "id" : 500504040,
      "in_reply_to_id" : 499932369,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDA0MA==",
      "original_commit_id" : "8bfbad00d4bd94f2b9006e6375ea7dc11adee6fb",
      "original_line" : 104,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "depends/README.md",
      "position" : null,
      "pull_request_review_id" : 503239575,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504040",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504081"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:19:27Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504081",
      "id" : 500504081,
      "in_reply_to_id" : 499939951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDA4MQ==",
      "original_commit_id" : "b6eeb2b5ee6964a9034aca6f4be2b72d532589ca",
      "original_line" : 65,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 503239629,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504081",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504175"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:19:33Z",
      "diff_hunk" : "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504175",
      "id" : 500504175,
      "in_reply_to_id" : 499940422,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDE3NQ==",
      "original_commit_id" : "46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce",
      "original_line" : 78,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503239732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504175",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504235"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:19:38Z",
      "diff_hunk" : "@@ -176,6 +176,10 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504235",
      "id" : 500504235,
      "in_reply_to_id" : 499946057,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDIzNQ==",
      "original_commit_id" : "fbf44184de758271e759978cd5037efcb4ba4eb1",
      "original_line" : 180,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503239796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504235",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504286"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:19:43Z",
      "diff_hunk" : "@@ -176,6 +176,10 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        TxnAbort();\n+    }\n+    m_database.RemoveRef();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504286",
      "id" : 500504286,
      "in_reply_to_id" : 499946323,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDI4Ng==",
      "original_commit_id" : "fbf44184de758271e759978cd5037efcb4ba4eb1",
      "original_line" : 182,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503239867,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504286",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504376"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504376"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:19:50Z",
      "diff_hunk" : "@@ -62,8 +62,57 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504376",
      "id" : 500504376,
      "in_reply_to_id" : 499968299,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDM3Ng==",
      "original_commit_id" : "96d2a5f8b8ea7dd512deaac4d1d70702517af6c1",
      "original_line" : 89,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503239964,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504376",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504579"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504579"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`PRIMARY KEY` implies not null, so i've just added `NOT NULL` for `value`.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:20:07Z",
      "diff_hunk" : "@@ -62,8 +62,57 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB)\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504579",
      "id" : 500504579,
      "in_reply_to_id" : 499969112,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDU3OQ==",
      "original_commit_id" : "96d2a5f8b8ea7dd512deaac4d1d70702517af6c1",
      "original_line" : 97,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503240182,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504579",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504637"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:20:12Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+}\n+\n+void SQLiteDatabase::Open(const char* pszMode)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504637",
      "id" : 500504637,
      "in_reply_to_id" : 499970587,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDYzNw==",
      "original_commit_id" : "b6eeb2b5ee6964a9034aca6f4be2b72d532589ca",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503240249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504637",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504885"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Made `stmt` nullptr, and also done for other statements.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:20:33Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500504885",
      "id" : 500504885,
      "in_reply_to_id" : 499977375,
      "line" : 163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNDg4NQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 163,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 163,
      "pull_request_review_id" : 503240555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500504885",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505229"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:21:08Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505229",
      "id" : 500505229,
      "in_reply_to_id" : 499978292,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNTIyOQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 147,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503241030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505229",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505300"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:21:15Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505300",
      "id" : 500505300,
      "in_reply_to_id" : 499978706,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNTMwMA==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 154,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503241115,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505300",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505689"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've changed `Verify` to unlock the directory at the end of the function.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:21:52Z",
      "diff_hunk" : "@@ -111,6 +111,53 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505689",
      "id" : 500505689,
      "in_reply_to_id" : 499981600,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNTY4OQ==",
      "original_commit_id" : "fabd187ccb43d0cc266ae89cd2b2e3b3d098949a",
      "original_line" : 116,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503241610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505689",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505741"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:21:58Z",
      "diff_hunk" : "@@ -176,7 +176,7 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::PeriodicFlush()\n {\n-    return false;\n+    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500505741",
      "id" : 500505741,
      "in_reply_to_id" : 499983328,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNTc0MQ==",
      "original_commit_id" : "addc4630a2a6587b0e07b9c45644117542685fed",
      "original_line" : 342,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503241698,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500505741",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507420"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507420"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've removed `if (!m_db) return;` so this will always be run. This is safe because `sqlite3_close` on a nullptr is a no-op. This will unconditionally unlock the directory on db close.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:24:32Z",
      "diff_hunk" : "@@ -139,6 +156,8 @@ void SQLiteDatabase::Close()\n         throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to close database: %s\\n\", sqlite3_errstr(res)));\n     }\n     m_db = nullptr;\n+\n+    UnlockDirectory(m_dir_path, \".walletlock\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507420",
      "id" : 500507420,
      "in_reply_to_id" : 499984258,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzQyMA==",
      "original_commit_id" : "4f3e5569c3c0eb83d50f7f88e9b673fa857fa08a",
      "original_line" : 379,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503243824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507420",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507483"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:24:38Z",
      "diff_hunk" : "@@ -151,6 +151,7 @@ void SQLiteDatabase::Close()\n {\n     if (!m_db) return;\n \n+    assert(m_refcount == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507483",
      "id" : 500507483,
      "in_reply_to_id" : 499984625,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzQ4Mw==",
      "original_commit_id" : "e63b9504257165780b2c56ec46bc842b8d680dbc",
      "original_line" : 154,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503243916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507483",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507778"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Moved all of the statements into `SQLiteBatch`.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:25:02Z",
      "diff_hunk" : "@@ -251,22 +251,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_database.m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_database.m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507778",
      "id" : 500507778,
      "in_reply_to_id" : 499989994,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzc3OA==",
      "original_commit_id" : "21289de5fd85b4510032393902b0dec84704cf77",
      "original_line" : 258,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503244253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507778",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507852"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:25:08Z",
      "diff_hunk" : "@@ -414,17 +414,23 @@ void SQLiteBatch::CloseCursor()\n \n bool SQLiteBatch::TxnBegin()\n {\n-    return false;\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507852",
      "id" : 500507852,
      "in_reply_to_id" : 499991129,
      "line" : 530,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzg1Mg==",
      "original_commit_id" : "d448c6c362642f24b08b754cb09066ced847f867",
      "original_line" : 530,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 530,
      "pull_request_review_id" : 503244335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507852",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507977"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the loop",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:25:20Z",
      "diff_hunk" : "@@ -170,7 +170,16 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    while (true) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500507977",
      "id" : 500507977,
      "in_reply_to_id" : 491662874,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNzk3Nw==",
      "original_commit_id" : "ceac790fb2be0bcd5a1e20b275612c3b75df7786",
      "original_line" : 293,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503244476,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500507977",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500512372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500512372"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-06T18:32:11Z",
      "diff_hunk" : "@@ -152,6 +189,14 @@ void SQLiteDatabase::Close()\n     if (!m_db) return;\n \n     assert(m_refcount == 0);\n+\n+    // Free all of the prepared statements\n+    sqlite3_finalize(m_read_stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500512372",
      "id" : 500512372,
      "in_reply_to_id" : 499985602,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxMjM3Mg==",
      "original_commit_id" : "fcee39162e5713f581443eb26d36c65c2c0b9cda",
      "original_line" : 194,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 503250068,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500512372",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've also made a few changes to pass a couple of tests with #18788 merged. https://github.com/achow101/bitcoin/tree/sqlite-master is a branch with this and #18788 merged in, based on master. That branch also has an additional commit so that tool_wallet works with sqlite.",
      "created_at" : "2020-10-06T18:39:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-704474094",
      "id" : 704474094,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwNDQ3NDA5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-06T18:39:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704474094",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500684600"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500684600"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (f747380289b06ba1631e1cec30b96b5aecb61f36)\r\n\r\nComment \"Indicate the a new database user has began using the database. Increments m_refcount\" isn't accurate",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T01:27:29Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500684600",
      "id" : 500684600,
      "in_reply_to_id" : 499939951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NDYwMA==",
      "original_commit_id" : "b6eeb2b5ee6964a9034aca6f4be2b72d532589ca",
      "original_line" : 65,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500684600",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500684857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500684857"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (f747380289b06ba1631e1cec30b96b5aecb61f36)\r\n\r\nComment about pszSkip doesn't apply here",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T01:28:35Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500684857",
      "id" : 500684857,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NDg1Nw==",
      "original_commit_id" : "f747380289b06ba1631e1cec30b96b5aecb61f36",
      "original_line" : 70,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500684857",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500685968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500685968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (f747380289b06ba1631e1cec30b96b5aecb61f36)\r\n\r\nComment isn't true since method is a no-op. I think this method and other methods which are no-ops like PeriodicFlush ReloadDbEn or never called AddRef RemoveRef should be inlined here so it's obvious what their role is in the sqlite implementation and how they are not normal methods",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T01:33:02Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500685968",
      "id" : 500685968,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NTk2OA==",
      "original_commit_id" : "f747380289b06ba1631e1cec30b96b5aecb61f36",
      "original_line" : 78,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500685968",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500686157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500686157"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add SQLiteDatabase and SQLiteBatch dummy classes\" (f747380289b06ba1631e1cec30b96b5aecb61f36)\r\n\r\nComment is also incorrect",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T01:33:52Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.\n+     */\n+    void Flush() override;\n+    /* flush the wallet passively (TRY_LOCK)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500686157",
      "id" : 500686157,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4NjE1Nw==",
      "original_commit_id" : "f747380289b06ba1631e1cec30b96b5aecb61f36",
      "original_line" : 81,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500686157",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500688620"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500688620"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500419009\r\n> The purpose of opening the database within a batch is to only open it when the database is going to be used. It is then left open to avoid constantly closing and reopening it.\r\n\r\nIt sounds like my suggestion was not clear. My suggestion is to open the database when the database object is created, and close it when it is destroyed. This opens and closes the database *fewer* times than the current implementation (due to not having to open close and reopen for verification) and is *simpler* (also due to not having to open close and reopen for verification). Feel free to ignore the suggestion or to follow it up later, but I hope I am getting it across clearly.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T01:43:42Z",
      "diff_hunk" : "@@ -67,6 +71,14 @@ std::unique_ptr<DatabaseBatch> SQLiteDatabase::MakeBatch(const char* mode, bool\n     return nullptr;\n }\n \n+SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n+    : m_database(database)\n+{\n+    m_read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+    m_database.AddRef();\n+    m_database.Open(mode);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500688620",
      "id" : 500688620,
      "in_reply_to_id" : 499962753,
      "line" : 330,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4ODYyMA==",
      "original_commit_id" : "46aa20b62e77b33e62e1e17ac6f6a6eb1a9efdce",
      "original_line" : 330,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 330,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500688620",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692052"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r492417585\r\n\r\n> It will be closed when the `SQLiteDatabase` is destructed.\r\n\r\nIt does looks like `db` pointer can be leaked here if ret is not OK.\r\n",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T01:55:58Z",
      "diff_hunk" : "@@ -0,0 +1,606 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/sqlite.h>\n+\n+#include <chainparams.h>\n+#include <crypto/common.h>\n+#include <logging.h>\n+#include <util/memory.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/db.h>\n+\n+#include <sqlite3.h>\n+#include <stdint.h>\n+\n+static const char* DATABASE_FILENAME = \"wallet.dat\";\n+\n+static const int32_t WALLET_SCHEMA_VERSION = 0;\n+\n+std::atomic<int> g_dbs_open{0};\n+\n+static void ErrorLogCallback(void* arg, int code, const char* msg)\n+{\n+    assert(arg == nullptr); // That's what we tell it to do during the setup\n+    LogPrintf(\"SQLite Error. Code: %d. Message: %s\\n\", code, msg);\n+}\n+\n+SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock) :\n+    WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+{\n+    LogPrintf(\"Using SQLite Version %s\\n\", SQLiteDatabaseVersion());\n+    LogPrintf(\"Using wallet %s\\n\", m_dir_path);\n+\n+    if (g_dbs_open.fetch_add(1) == 0) {\n+        // Setup logging\n+        int ret = sqlite3_config(SQLITE_CONFIG_LOG, ErrorLogCallback, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup error log: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+    }\n+    int ret = sqlite3_initialize(); // This is a no-op if sqlite3 is already initialized\n+    if (ret != SQLITE_OK) {\n+        throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to initialize SQLite: %s\\n\", sqlite3_errstr(ret)));\n+    }\n+}\n+\n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {\n+        LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", m_dir_path);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void SQLiteDatabase::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_insert_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, insert_sql.c_str(), -1, &m_insert_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_overwrite_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, overwrite_sql.c_str(), -1, &m_overwrite_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_delete_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, delete_sql.c_str(), -1, &m_delete_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+    if (!m_cursor_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_db, cursor_sql.c_str(), -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n+}\n+\n+SQLiteDatabase::~SQLiteDatabase()\n+{\n+    Close();\n+    if (g_dbs_open.fetch_sub(1) == 1) {\n+        int ret = sqlite3_shutdown();\n+        if (ret != SQLITE_OK) {\n+            LogPrintf(\"SQLiteDatabase: Failed to shutdown SQLite: %s\\n\", sqlite3_errstr(ret));\n+        }\n+    }\n+}\n+\n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) return false;\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);\n+    if (ret == SQLITE_NOTFOUND) {\n+        sqlite3_close(db);\n+        return true; // Return true if the file doesn't exist\n+    } else if (ret != SQLITE_OK) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+\n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);\n+        return false;\n+    }\n+\n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);\n+        return false;\n+    }\n+\n+    sqlite3_stmt* stmt;\n+    ret = sqlite3_prepare_v2(db, \"PRAGMA integrity_check\", -1, &stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(stmt);\n+        sqlite3_close(db);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    while (true) {\n+        ret = sqlite3_step(stmt);\n+        if (ret == SQLITE_DONE) {\n+            break;\n+        } else if (ret != SQLITE_ROW) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        const char* msg = (const char*)sqlite3_column_text(stmt, 0);\n+        if (!msg) {\n+            error = strprintf(_(\"SQLiteDatabase: Failed to verify database: %s\"), sqlite3_errstr(ret));\n+            break;\n+        }\n+        std::string str_msg(msg);\n+        if (str_msg == \"ok\") {\n+            continue;\n+        }\n+        error += Untranslated(\"\\n\" + str_msg);\n+    }\n+    sqlite3_finalize(stmt);\n+    sqlite3_close(db);\n+    return error.original.empty();\n+}\n+\n+void SQLiteDatabase::Open(const char* mode)\n+{\n+    if (!PrepareDirectory()) {\n+        throw std::runtime_error(\"Cannot obtain a lock on wallet directory\");\n+    }\n+\n+    bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692052",
      "id" : 500692052,
      "in_reply_to_id" : 491362245,
      "line" : 204,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5MjA1Mg==",
      "original_commit_id" : "69f7321f8d3e8cd8b3901dee8b08b948dabe5465",
      "original_line" : 204,
      "original_position" : 231,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 204,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692052",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692290"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\nIt looks like `db` pointer can be leaked here if this error is thrown\r\n",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T01:56:46Z",
      "diff_hunk" : "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692290",
      "id" : 500692290,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5MjI5MA==",
      "original_commit_id" : "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "original_line" : 92,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692290",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692495"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\nIt looks like `db` pointer can be leaked here if ret is not OK.\r\n",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T01:57:24Z",
      "diff_hunk" : "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500692495",
      "id" : 500692495,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5MjQ5NQ==",
      "original_commit_id" : "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "original_line" : 99,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500692495",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500699840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500699840"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\n`key` needs `NOT NULL` constraint to prevent nulls (primary key isn't enough).\r\n\r\n```\r\n$ sqlite3\r\nSQLite version 3.30.1 2019-10-10 20:19:45\r\nsqlite> CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL);\r\nsqlite> insert into main values (null, 'value');\r\nsqlite> select * from main;\r\n|value\r\n```",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T02:21:40Z",
      "diff_hunk" : "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL)\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500699840",
      "id" : 500699840,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5OTg0MA==",
      "original_commit_id" : "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "original_line" : 96,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500699840",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500700087"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500700087"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\nIt looks like `db` pointer can be leaked here if ret is not OK.\r\n",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T02:22:25Z",
      "diff_hunk" : "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL)\";\n+            ret = sqlite3_exec(db, create_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to create new database: %s\\n\", sqlite3_errstr(ret)));\n+            }\n+\n+            // Enable fullfysnc for the platforms that use it\n+            std::string fullfsync_stmt = \"PRAGMA fullfsync = true\";\n+            ret = sqlite3_exec(db, fullfsync_stmt.c_str(), nullptr, nullptr, nullptr);\n+            if (ret != SQLITE_OK) {\n+                throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to enable fullfsync: %s\\n\", sqlite3_errstr(ret)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500700087",
      "id" : 500700087,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMDA4Nw==",
      "original_commit_id" : "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "original_line" : 106,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500700087",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500702146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500702146"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteBatch::Close\" (29395e28698978dc65e16c4eaf9bb8f8e7429e7d)\r\n\r\nWould be good to `s/Batch closed/Batch closed unexpectedly without explicit commit or abort/` here and below to be clear this is an error, not an informational log",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T02:30:01Z",
      "diff_hunk" : "@@ -172,6 +172,13 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed and transaction was aborted\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500702146",
      "id" : 500702146,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjE0Ng==",
      "original_commit_id" : "29395e28698978dc65e16c4eaf9bb8f8e7429e7d",
      "original_line" : 177,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500702146",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500705096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500705096"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteBatch::Close\" (29395e28698978dc65e16c4eaf9bb8f8e7429e7d)\r\n\r\nWould be good to `s/could not abort/failed to abort/` to be clear abort call was made rather than considered",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T02:42:03Z",
      "diff_hunk" : "@@ -172,6 +172,13 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed and transaction was aborted\\n\");\n+        } else {\n+            LogPrintf(\"SQLiteBatch: Batch closed and could not abort transaction\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500705096",
      "id" : 500705096,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwNTA5Ng==",
      "original_commit_id" : "29395e28698978dc65e16c4eaf9bb8f8e7429e7d",
      "original_line" : 179,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500705096",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500715649"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500715649"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"sqlitedb: Create and lock the wallet directory\" (a6415a4dc752db171bd842fb376c5c5a919c04e5)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500422742\r\n\r\n> From [sqlite.org/pragma.html#pragma_locking_mode](https://sqlite.org/pragma.html#pragma_locking_mode)\r\n\r\nOh, you are absolutely right. Just setting the pragma doesn't get the lock, you have to do an empty transaction to acquire it. This just means you need 3 statements to open the database: `pragma locking_mode=exclusive; begin exclusive transaction; commit;` instead of 1 statement.\r\n\r\nUsing the sqlite exclusive lock would be more reliable than .walletlock and simpler because it would be a part of database opening, not in some other code path separate from opening, and because it would no longer requiring extra code removing .walletlock at shutdown (this code already had a bug previously in this PR).\r\n\r\nIn case it helps, I found it pretty straightforward to test locking from the command line:\r\n\r\n- Terminal 1\r\n  ```bash\r\n  $ sqlite3 db.sqlite\r\n  sqlite> pragma locking_mode=exclusive;\r\n  exclusive\r\n  sqlite> begin exclusive transaction;\r\n  sqlite> commit;\r\n  sqlite> \r\n  ```\r\n\r\n- Terminal 2\r\n  ```bash\r\n  $ sqlite3 db.sqlite\r\n  sqlite> pragma locking_mode=exclusive;\r\n  exclusive\r\n  sqlite> begin exclusive transaction;\r\n  Error: database is locked\r\n  sqlite> \r\n  ```",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T03:24:10Z",
      "diff_hunk" : "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500715649",
      "id" : 500715649,
      "in_reply_to_id" : 498455603,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNTY0OQ==",
      "original_commit_id" : "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "original_line" : 66,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500715649",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500718150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500718150"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add SetupSQLStatements\" (f86afc53406448428dadaf59d0ccf78fb1421220)\r\n\r\nIt looks like there are double-delete bugs in this method depending on how it's called. Statement pointers are not set to null if finalize returns `SQLITE_OK`, so if Close is called twice sqlite3_finalize will be called with invalid deleted pointers and possibly segfault.\r\n\r\nOne fix would be to set the pointers to null if finalize returns `SQLITE_OK`. Another fix would be move the code out of this method into the destructor.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T03:35:19Z",
      "diff_hunk" : "@@ -202,6 +239,28 @@ void SQLiteBatch::Close()\n             LogPrintf(\"SQLiteBatch: Batch closed and could not abort transaction\\n\");\n         }\n     }\n+\n+    // Free all of the prepared statements\n+    int ret = sqlite3_finalize(m_read_stmt);\n+    if (ret != SQLITE_OK) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500718150",
      "id" : 500718150,
      "line" : 347,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxODE1MA==",
      "original_commit_id" : "f86afc53406448428dadaf59d0ccf78fb1421220",
      "original_line" : 347,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 347,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500718150",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500720094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500720094"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey\" (36ea015032ddf1aa7d424b463c2c6c531d832295)\r\n\r\nThroughout the PR would be good to check all return codes and log errors with context information whenever any sqlite3_* calls fail. But if the practice of checking return codes is going to be set aside when calling sqlite, feel free to ignore the suggestion.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T03:44:21Z",
      "diff_hunk" : "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500720094",
      "id" : 500720094,
      "line" : 382,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyMDA5NA==",
      "original_commit_id" : "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "original_line" : 382,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 382,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500720094",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500722270"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500722270"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteBatch::ReadKey, WriteKey, EraseKey, and HasKey\" (36ea015032ddf1aa7d424b463c2c6c531d832295)\r\n\r\nTheoretically it might be more efficient to use \r\n`SELECT EXISTS(SELECT * FROM main WHERE key = ?)` instead of `SELECT value FROM main WHERE key = ?` to avoid needing to read the table and just use the index. But probably does not matter in practice.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T03:52:59Z",
      "diff_hunk" : "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);\n+    if (res != SQLITE_ROW) {\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    // Leftmost column in result is index 0\n+    const char* data = (const char*)sqlite3_column_blob(m_read_stmt, 0);\n+    int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n+    value.write(data, data_size);\n+\n+    sqlite3_clear_bindings(m_read_stmt);\n+    sqlite3_reset(m_read_stmt);\n+    return true;\n }\n \n bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) throw std::runtime_error(\"Write called on database in read-only mode\");\n+    assert(m_insert_stmt && m_overwrite_stmt);\n+\n+    sqlite3_stmt* stmt;\n+    if (overwrite) {\n+        stmt = m_overwrite_stmt;\n+    } else {\n+        stmt = m_insert_stmt;\n+    }\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    // Insert index 1 is key, 2 is value\n+    int res = sqlite3_bind_blob(stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+    res = sqlite3_bind_blob(stmt, 2, value.data(), value.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n+    return res == SQLITE_DONE;\n }\n \n bool SQLiteBatch::EraseKey(CDataStream&& key)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    if (m_read_only) throw std::runtime_error(\"Erase called on database in read-only mode\");\n+    assert(m_delete_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_delete_stmt);\n+        sqlite3_reset(m_delete_stmt);\n+        return false;\n+    }\n+\n+    // Execute\n+    res = sqlite3_step(m_delete_stmt);\n+    sqlite3_clear_bindings(m_delete_stmt);\n+    sqlite3_reset(m_delete_stmt);\n+    return res == SQLITE_DONE;\n }\n \n bool SQLiteBatch::HasKey(CDataStream&& key)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    bool ret = false;\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500722270",
      "id" : 500722270,
      "line" : 475,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyMjI3MA==",
      "original_commit_id" : "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "original_line" : 475,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 475,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500722270",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500723715"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500723715"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Backup\" (273e8adfe8e96d45dca0e44fe194bf2548dd6686)\r\n\r\nShould drop this line. \"There should be exactly one call to sqlite3_backup_finish() for each successful call to sqlite3_backup_init().\" https://www.sqlite.org/c3ref/backup_finish.html",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T03:59:00Z",
      "diff_hunk" : "@@ -179,7 +179,28 @@ bool SQLiteDatabase::PeriodicFlush()\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_backup_finish(backup);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500723715",
      "id" : 500723715,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyMzcxNQ==",
      "original_commit_id" : "273e8adfe8e96d45dca0e44fe194bf2548dd6686",
      "original_line" : 190,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500723715",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500732068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500732068"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Verify\" (90a7a6b371d1106f1cab02bcdda2454a828add1d)\r\n\r\nI know the history of the PR, but at this point post-#19619, I think it is a little nuts to keep using the sequence:\r\n\r\n1. Lock wallet directory\r\n2. Open database\r\n3. Verify database\r\n4. Unlock wallet directory\r\n5. Lock wallet directory\r\n6. Open database\r\n7. Use database\r\n8. Close database\r\n9. Unlock wallet directory\r\n\r\nwhen `DatabaseOptions::verify` is true, instead of simply:\r\n\r\n1. Open database in exclusive mode\r\n2. Verify database\r\n3. Use database\r\n4. Close database\r\n\r\nBut feel free to ignore the suggested simplification or to follow up in a future PR.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T04:35:14Z",
      "diff_hunk" : "@@ -111,6 +111,60 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) {\n+        error = strprintf(_(\"SQLiteDatabase: Unable to obtain lock on wallet directory \\\"%s\\\"\"), m_dir_path);\n+        return false;\n+    }\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r500732068",
      "id" : 500732068,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczMjA2OA==",
      "original_commit_id" : "90a7a6b371d1106f1cab02bcdda2454a828add1d",
      "original_line" : 122,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500732068",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501113175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501113175"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement SQLiteDatabase::Open\" (d1559561a68dd6604efd91baa5dbd28c995d0074)\r\n\r\nLooking at [S3RK's branch](https://github.com/achow101/bitcoin/compare/sqlite-wallet...S3RK:wallet_db_remove_read_only?expand=1) https://github.com/bitcoin/bitcoin/pull/19077/#discussion_r499125987, I don't see a need to parse the mode argument at all. I think `SQLiteDatabase::Open` should ignore the mode argument just like `SQLiteDatabase::Rewrite` ignores the skip argument. It would simplify the implementation here in various ways. And later I think the mode argument should be dropped from BDB as well in favor of simply respecting the `DatabaseOptions.require_existing` value passed when creating the database object.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T15:38:15Z",
      "diff_hunk" : "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501113175",
      "id" : 501113175,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExMzE3NQ==",
      "original_commit_id" : "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "original_line" : 67,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 502926188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501113175",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501156002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501156002"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> This just means you need 3 statements to open the database:\r\n\r\nThen there's the potential for race conditions in 2 instances: before the pragma is executed, and after it is executed but before the transaction begins.\r\n\r\nEdit: Oh I guess we just exit with the database is in use error when `begin transaction` fails.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T16:39:12Z",
      "diff_hunk" : "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501156002",
      "id" : 501156002,
      "in_reply_to_id" : 498455603,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NjAwMg==",
      "original_commit_id" : "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "original_line" : 66,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 504069662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501156002",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501162929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501162929"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501156002\r\n\r\n> Then there's the potential for race conditions in 2 instances: before the pragma is executed, and after it is executed but before the transaction begins.\r\n\r\nThere's no race condition here:\r\n\r\n```c++\r\ndb = sqlite_open(path); // Or error \"sorry, couldn't open database\"\r\nsqlite_exec(db, \"pragma locking_mode=exclusive\"); // Or error \"sorry, couldn't set locking mode\"\r\nsqlite_exec(db, \"begin exclusive transaction\"); // Or error \"sorry, database is currently in use\"\r\nsqlite_exec(db, \"commit\"); // Or error \"sorry, unexpected failure\"\r\n```\r\n\r\nThere would be a race condition if the exclusive lock was released after the commit statement. But the point of the pragma is to extend the exclusive lock from point where it is first acquired until the point where the database is closed.\r\n",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T16:49:53Z",
      "diff_hunk" : "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501162929",
      "id" : 501162929,
      "in_reply_to_id" : 498455603,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MjkyOQ==",
      "original_commit_id" : "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "original_line" : 66,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 504078426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501162929",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245126"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245126"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:04:39Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245126",
      "id" : 501245126,
      "in_reply_to_id" : 500684857,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTEyNg==",
      "original_commit_id" : "f747380289b06ba1631e1cec30b96b5aecb61f36",
      "original_line" : 70,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 504183697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245126",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245213"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed and inlined these functions.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:04:49Z",
      "diff_hunk" : "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SQLITE_H\n+#define BITCOIN_WALLET_SQLITE_H\n+\n+#include <wallet/db.h>\n+\n+struct bilingual_str;\n+class SQLiteDatabase;\n+\n+/** RAII class that provides access to a WalletDatabase */\n+class SQLiteBatch : public DatabaseBatch\n+{\n+private:\n+    SQLiteDatabase& m_database;\n+\n+    bool m_read_only = false;\n+\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n+\n+public:\n+    explicit SQLiteBatch(SQLiteDatabase& database, const char* mode);\n+\n+    void Flush() override;\n+    void Close() override;\n+\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n+};\n+\n+/** An instance of this class represents one SQLite3 database.\n+ **/\n+class SQLiteDatabase : public WalletDatabase\n+{\n+private:\n+    bool m_mock = false;\n+\n+    const std::string m_dir_path;\n+\n+    const std::string m_file_path;\n+\n+public:\n+    SQLiteDatabase() = delete;\n+\n+    /** Create DB handle to real database */\n+    SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock=false);\n+\n+    ~SQLiteDatabase();\n+\n+    /** Open the database if it is not already opened */\n+    void Open(const char* mode) override;\n+\n+    /** Close the database */\n+    void Close() override;\n+\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    void AddRef() override;\n+    /** Indicate that database user has stopped using the database. Decrement m_refcount */\n+    void RemoveRef() override;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    bool Rewrite(const char* skip=nullptr) override;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    bool Backup(const std::string& dest) const override;\n+\n+    /** Make sure all changes are flushed to disk.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245213",
      "id" : 501245213,
      "in_reply_to_id" : 500685968,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTIxMw==",
      "original_commit_id" : "f747380289b06ba1631e1cec30b96b5aecb61f36",
      "original_line" : 78,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.h",
      "position" : null,
      "pull_request_review_id" : 504183811,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245213",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245501"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245501"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've changed this to just use `m_db` so on failure it will be cleaned up by the destructor.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:05:17Z",
      "diff_hunk" : "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245501",
      "id" : 501245501,
      "in_reply_to_id" : 500692290,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTUwMQ==",
      "original_commit_id" : "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "original_line" : 92,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 504184142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245501",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245594"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:05:29Z",
      "diff_hunk" : "@@ -64,6 +64,54 @@ SQLiteDatabase::~SQLiteDatabase()\n \n void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+\n+        if (create) {\n+            if (sqlite3_db_readonly(db, \"main\") != 0) {\n+                throw std::runtime_error(\"SQLiteDatabase: Database opened in readonly mode but read-write permissions are needed\");\n+            }\n+\n+            // Make the table for our key-value pairs\n+            std::string create_stmt = \"CREATE TABLE IF NOT EXISTS main(key BLOB PRIMARY KEY, value BLOB NOT NULL)\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245594",
      "id" : 501245594,
      "in_reply_to_id" : 500699840,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTU5NA==",
      "original_commit_id" : "d1559561a68dd6604efd91baa5dbd28c995d0074",
      "original_line" : 96,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 504184280,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245594",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245688"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245688"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:05:39Z",
      "diff_hunk" : "@@ -172,6 +172,13 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed and transaction was aborted\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245688",
      "id" : 501245688,
      "in_reply_to_id" : 500702146,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTY4OA==",
      "original_commit_id" : "29395e28698978dc65e16c4eaf9bb8f8e7429e7d",
      "original_line" : 177,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 504184402,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245688",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245718"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245718"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:05:43Z",
      "diff_hunk" : "@@ -172,6 +172,13 @@ void SQLiteBatch::Flush()\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed and transaction was aborted\\n\");\n+        } else {\n+            LogPrintf(\"SQLiteBatch: Batch closed and could not abort transaction\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245718",
      "id" : 501245718,
      "in_reply_to_id" : 500705096,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTcxOA==",
      "original_commit_id" : "29395e28698978dc65e16c4eaf9bb8f8e7429e7d",
      "original_line" : 179,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 504184438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245718",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245832"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245832"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Set the pointers to nullptr.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:05:57Z",
      "diff_hunk" : "@@ -202,6 +239,28 @@ void SQLiteBatch::Close()\n             LogPrintf(\"SQLiteBatch: Batch closed and could not abort transaction\\n\");\n         }\n     }\n+\n+    // Free all of the prepared statements\n+    int ret = sqlite3_finalize(m_read_stmt);\n+    if (ret != SQLITE_OK) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245832",
      "id" : 501245832,
      "in_reply_to_id" : 500718150,
      "line" : 347,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTgzMg==",
      "original_commit_id" : "f86afc53406448428dadaf59d0ccf78fb1421220",
      "original_line" : 347,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 347,
      "pull_request_review_id" : 504184585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245832",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245965"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it's fine to skip checking the return codes for clear_bindings and reset.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:06:15Z",
      "diff_hunk" : "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501245965",
      "id" : 501245965,
      "in_reply_to_id" : 500720094,
      "line" : 382,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NTk2NQ==",
      "original_commit_id" : "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "original_line" : 382,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 382,
      "pull_request_review_id" : 504184766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501245965",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246061"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246061"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:06:25Z",
      "diff_hunk" : "@@ -179,7 +179,28 @@ bool SQLiteDatabase::PeriodicFlush()\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_backup_finish(backup);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246061",
      "id" : 501246061,
      "in_reply_to_id" : 500723715,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NjA2MQ==",
      "original_commit_id" : "273e8adfe8e96d45dca0e44fe194bf2548dd6686",
      "original_line" : 190,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 504184887,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246061",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246525"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246525"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.\r\n\r\nAs a result of this, I've also dropped the usage of `mode` and the database will always be created if it does not exist. This is fine as we enforce existence during `MakeDatabase`, but it would be better to have a `create` flag for this.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:07:19Z",
      "diff_hunk" : "@@ -111,6 +111,60 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n+bool SQLiteDatabase::Verify(bilingual_str& error)\n+{\n+    if (!PrepareDirectory()) {\n+        error = strprintf(_(\"SQLiteDatabase: Unable to obtain lock on wallet directory \\\"%s\\\"\"), m_dir_path);\n+        return false;\n+    }\n+\n+    sqlite3* db = nullptr;\n+    int ret = sqlite3_open_v2(m_file_path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246525",
      "id" : 501246525,
      "in_reply_to_id" : 500732068,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NjUyNQ==",
      "original_commit_id" : "90a7a6b371d1106f1cab02bcdda2454a828add1d",
      "original_line" : 122,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 504185486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246525",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246716"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246716"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-07T19:07:43Z",
      "diff_hunk" : "@@ -42,6 +43,18 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     }\n }\n \n+bool SQLiteDatabase::PrepareDirectory() const\n+{\n+    if (m_mock) return true;\n+    // Try to create the directory containing the wallet file and lock it\n+    TryCreateDirectories(m_dir_path);\n+    if (!LockDirectory(m_dir_path, \".walletlock\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501246716",
      "id" : 501246716,
      "in_reply_to_id" : 498455603,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NjcxNg==",
      "original_commit_id" : "af798a8fd9b3b1a1e0a63a665f6d89c73e8614a3",
      "original_line" : 66,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 504185748,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501246716",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've done the suggested changes except for `wallet.sqlite`. I think we should discuss this during the wallet meeting this week.\r\n\r\nI've also pulled in the suggested test changes.",
      "created_at" : "2020-10-07T19:08:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705136747",
      "id" : 705136747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwNTEzNjc0Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-07T19:08:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705136747",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've done some testing with the behavior around a downgrading and different filenames.\r\n\r\n* Downgrading with the sqlite wallet named `wallet.dat`\r\n  * Previous versions will attempt to open the `wallet.dat` file and fail to do so because the file magic does not match BDB's. However on that failure, a salvage will be attempted. This will do nothing because the file magic does not match BDB's. The file remains unchanged when this occurs and it fails with the error message `Error: wallet.dat corrupt, salvage failed`.\r\n* Downgrading with the sqlite wallet named `wallet.sqlite`\r\n  * When attempting to load via `loadwallet`, the wallet will not be loaded as the RPC checks for existence of the `wallet.dat` file in the wallet's directory. It fails with the error message `Directory does not contain a wallet.dat file.`\r\n  * When specified with `-wallet` (either in cli options or bitcoin.conf), **a new `wallet.dat` file will be created and used.** This is a wholly new wallet unrelated to the `wallet.sqlite` file. There are no errors. This is dangerous.\r\n\r\nFor that last case, we either must keep the `wallet.dat` name, or come up with some workaround that prevents previous versions from creating a wallet.dat file.\r\n\r\nThe only possible solution I can think of is to create a dummy `wallet.dat` file to prevent previous versions from making a new file. However this is potentially dangerous because users may are expecting a `wallet.dat` file and may have tooling to interact with the `wallet.dat` file (such as creating and restoring backups) and thus they may be accidentally interacting with a useless dummy file instead of the real `wallet.sqlite` file. So I don't think this is a good approach.\r\n\r\nFurthermore, as mentioned previously, there is a lot of tooling and documentation involving the name `wallet.dat`. Users are expecting their wallet file to be named `wallet.dat`. While we have a `backupwallet` RPC and backup option in the GUI, many users probably don't use these because there is \"common knowledge\" of directly backing up the wallet.dat file. And while copying the `wallet.dat` file while Bitcoin Core is running is not a supported use case, copying it after a clean shutdown is. Users may be doing that for their backups. Retaining the `wallet.dat` naming means that those tools and documentation are still valid.",
      "created_at" : "2020-10-07T20:36:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705180018",
      "id" : 705180018,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwNTE4MDAxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-07T20:36:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705180018",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501625111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501625111"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d993dee317b93b11296282b9e97fa66e8c5ca152:\r\n```\r\n// If m_db is not in autocommit mode, try to abort the transaction in progress\r\n```",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T10:48:03Z",
      "diff_hunk" : "@@ -146,6 +146,13 @@ SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501625111",
      "id" : 501625111,
      "line" : 337,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyNTExMQ==",
      "original_commit_id" : "d993dee317b93b11296282b9e97fa66e8c5ca152",
      "original_line" : 337,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 337,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501625111",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501627285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501627285"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d993dee317b93b11296282b9e97fa66e8c5ca152: `TxnAbort()` returns `true` if and only if `ROLLBACK TRANSACTION` succeeds, so I'm confused what you mean by \"without the transaction being explicitly commited or aborted\"\r\n\r\nSee also @ryanofsky: https://github.com/bitcoin/bitcoin/pull/19077#discussion_r499991129",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T10:51:58Z",
      "diff_hunk" : "@@ -146,6 +146,13 @@ SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly commited or aborted\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501627285",
      "id" : 501627285,
      "line" : 339,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyNzI4NQ==",
      "original_commit_id" : "d993dee317b93b11296282b9e97fa66e8c5ca152",
      "original_line" : 339,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 339,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501627285",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501634132"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501634132"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is it worth (in a followup) using `sqlite3_prepare_v3` with the `SQLITE_PREPARE_PERSISTENT` flag?\r\nhttps://www.sqlite.org/c3ref/c_prepare_normalize.html#sqlitepreparepersistent\r\n\r\nI guess that's only useful if these prepared statements can live longer than a single batch.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T11:04:39Z",
      "diff_hunk" : "@@ -53,6 +53,42 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     Open(\"\"); // mode is unused\n }\n \n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501634132",
      "id" : 501634132,
      "line" : 74,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNDEzMg==",
      "original_commit_id" : "fe12f7946e96727166900bdc18a3c4000a5b1447",
      "original_line" : 74,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 74,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501634132",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501654556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501654556"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fac0cf3d1edff440cdbd19d2615cba701bb4a17d  Agree, but logging why `sqlite3_bind_blob` and `sqlite3_step` fail does seem useful.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T11:43:28Z",
      "diff_hunk" : "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501654556",
      "id" : 501654556,
      "in_reply_to_id" : 500720094,
      "line" : 382,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY1NDU1Ng==",
      "original_commit_id" : "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "original_line" : 382,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 382,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501654556",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501660749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501660749"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fac0cf3d1edff440cdbd19d2615cba701bb4a17d: you could move the `sqlite3_step` to a common function (especially if it has more error handling)",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T11:55:01Z",
      "diff_hunk" : "@@ -221,22 +221,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501660749",
      "id" : 501660749,
      "line" : 386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY2MDc0OQ==",
      "original_commit_id" : "fac0cf3d1edff440cdbd19d2615cba701bb4a17d",
      "original_line" : 386,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 386,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501660749",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501667010"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501667010"
         }
      },
      "author_association" : "MEMBER",
      "body" : "87d8fbfe58c5daa61326f67c228f09e7758ea368: this warrants a log message",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T12:06:08Z",
      "diff_hunk" : "@@ -325,16 +325,40 @@ bool SQLiteBatch::HasKey(CDataStream&& key)\n \n bool SQLiteBatch::StartCursor()\n {\n-    return false;\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n }\n \n bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n {\n-    return false;\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    } else if (res != SQLITE_ROW) {\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501667010",
      "id" : 501667010,
      "line" : 508,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY2NzAxMA==",
      "original_commit_id" : "87d8fbfe58c5daa61326f67c228f09e7758ea368",
      "original_line" : 508,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 508,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501667010",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501668061"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501668061"
         }
      },
      "author_association" : "MEMBER",
      "body" : "0584828e2a9022d5b548ebda6a9a8329296bcafb: worth logging why opening the destination file failed, and why backup failed to initialize, step or finish",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T12:07:59Z",
      "diff_hunk" : "@@ -157,7 +157,27 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_close(db_copy);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501668061",
      "id" : 501668061,
      "line" : 296,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY2ODA2MQ==",
      "original_commit_id" : "0584828e2a9022d5b548ebda6a9a8329296bcafb",
      "original_line" : 296,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 296,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501668061",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501674265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501674265"
         }
      },
      "author_association" : "MEMBER",
      "body" : "4e8011a868d10650880cf5c5c01f005bc9fcc402 (maybe for followup): does it make sense to make this a prepared statement?",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T12:18:05Z",
      "diff_hunk" : "@@ -414,17 +414,23 @@ void SQLiteBatch::CloseCursor()\n \n bool SQLiteBatch::TxnBegin()\n {\n-    return false;\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501674265",
      "id" : 501674265,
      "in_reply_to_id" : 499991129,
      "line" : 530,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3NDI2NQ==",
      "original_commit_id" : "d448c6c362642f24b08b754cb09066ced847f867",
      "original_line" : 530,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 530,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501674265",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501682189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501682189"
         }
      },
      "author_association" : "MEMBER",
      "body" : "dfa867392725f999a331404205635ee7a331886f maybe explicitly mention in `EncryptWallet` that SQLite also leaves data behind when you delete a row (docs say: \"This can allow deleted content to be recovered by a hacker or by forensic analysis.\")\r\n\r\nMaybe throw/assert that `skip` is not set, since the argument is ignored.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T12:31:33Z",
      "diff_hunk" : "@@ -152,7 +152,9 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501682189",
      "id" : 501682189,
      "line" : 280,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4MjE4OQ==",
      "original_commit_id" : "dfa867392725f999a331404205635ee7a331886f",
      "original_line" : 280,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 280,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501682189",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501744252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501744252"
         }
      },
      "author_association" : "MEMBER",
      "body" : "4eaffb807d7050dd95a1939585cc4df3caf57118: I tried opening a signet wallet (`loadwallet`) in testnet mode. It failed with `Data is not in recognized format.`, rather than this error. That's probably because `IsSQLiteFile` also checks this.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T13:59:58Z",
      "diff_hunk" : "@@ -106,6 +108,28 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n {\n     assert(m_db);\n \n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501744252",
      "id" : 501744252,
      "line" : 135,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0NDI1Mg==",
      "original_commit_id" : "4eaffb807d7050dd95a1939585cc4df3caf57118",
      "original_line" : 135,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 135,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501744252",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501753764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501753764"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I changed `WALLET_SCHEMA_VERSION` to `1`, recompiled and was able to open an existing wallet...\r\nDitto if I create a new wallet with version 10, set it back to 0 and load it.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T14:12:32Z",
      "diff_hunk" : "@@ -130,6 +131,27 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n         return false;\n     }\n \n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501753764",
      "id" : 501753764,
      "line" : 156,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1Mzc2NA==",
      "original_commit_id" : "810f3de3643cc0330cc8005126e47adf406152d0",
      "original_line" : 156,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 156,
      "pull_request_review_id" : 504655969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501753764",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501762050"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501762050"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I'm confused what you mean by \"without the transaction being explicitly commited or aborted\"\r\n\r\nIt means that the caller didn't call `TxnAbort` or `TxnCommit` and instead it is being done on the batch close.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T14:23:08Z",
      "diff_hunk" : "@@ -146,6 +146,13 @@ SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {\n+        if (TxnAbort()) {\n+            LogPrintf(\"SQLiteBatch: Batch closed unexpectedly without the transaction being explicitly commited or aborted\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501762050",
      "id" : 501762050,
      "in_reply_to_id" : 501627285,
      "line" : 339,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MjA1MA==",
      "original_commit_id" : "d993dee317b93b11296282b9e97fa66e8c5ca152",
      "original_line" : 339,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 339,
      "pull_request_review_id" : 504838346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501762050",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501762891"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501762891"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since we've moved the statements to `SQLiteBatch`, I don't think that makes sense to do.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T14:24:08Z",
      "diff_hunk" : "@@ -53,6 +53,42 @@ SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_pa\n     Open(\"\"); // mode is unused\n }\n \n+void SQLiteBatch::SetupSQLStatements()\n+{\n+    std::string read_sql = \"SELECT value FROM main WHERE key = ?\";\n+    std::string insert_sql = \"INSERT INTO main VALUES(?, ?)\";\n+    std::string overwrite_sql = \"INSERT OR REPLACE INTO main VALUES(?, ?)\";\n+    std::string delete_sql = \"DELETE FROM main WHERE key = ?\";\n+    std::string cursor_sql = \"SELECT key, value FROM main\";\n+\n+    int res;\n+    if (!m_read_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, read_sql.c_str(), -1, &m_read_stmt, nullptr)) != SQLITE_OK) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501762891",
      "id" : 501762891,
      "in_reply_to_id" : 501634132,
      "line" : 74,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2Mjg5MQ==",
      "original_commit_id" : "fe12f7946e96727166900bdc18a3c4000a5b1447",
      "original_line" : 74,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 74,
      "pull_request_review_id" : 504839390,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501762891",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> We could also stick to wallet.dat for the main wallet, but use `.sqlite` for all freshly created ones.\r\n\r\nNot sure what you mean by \"main wallet\"",
      "created_at" : "2020-10-08T14:25:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705606970",
      "id" : 705606970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwNTYwNjk3MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-08T14:25:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705606970",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The default wallet.",
      "created_at" : "2020-10-08T14:33:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705612296",
      "id" : 705612296,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwNTYxMjI5Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-08T14:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705612296",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501782793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501782793"
         }
      },
      "author_association" : "MEMBER",
      "body" : ":shrug: I guess that error is fine too. `IsSQLiteFile` needs to check the app id to avoid it showing up in `listwallets`.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T14:49:15Z",
      "diff_hunk" : "@@ -106,6 +108,28 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n {\n     assert(m_db);\n \n+    // Check the application ID matches our network magic\n+    sqlite3_stmt* app_id_stmt{nullptr};\n+    int ret = sqlite3_prepare_v2(m_db, \"PRAGMA application_id\", -1, &app_id_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(app_id_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(app_id_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch the application id: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    uint32_t app_id = (uint32_t)sqlite3_column_int(app_id_stmt, 0);\n+    sqlite3_finalize(app_id_stmt);\n+    uint32_t net_magic = ReadBE32(Params().MessageStart());\n+    if (app_id != net_magic) {\n+        error = strprintf(_(\"SQLiteDatabase: Unexpected application id. Expected %u, got %u\"), net_magic, app_id);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501782793",
      "id" : 501782793,
      "in_reply_to_id" : 501744252,
      "line" : 135,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4Mjc5Mw==",
      "original_commit_id" : "4eaffb807d7050dd95a1939585cc4df3caf57118",
      "original_line" : 135,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 135,
      "pull_request_review_id" : 504866058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501782793",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796450"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796450"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Had to revert back to this as it is necessary to know whether we are creating the wallet for other stuff.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T15:06:38Z",
      "diff_hunk" : "@@ -53,8 +53,74 @@ SQLiteDatabase::~SQLiteDatabase()\n     }\n }\n \n-void SQLiteDatabase::Open(const char* pszMode)\n+void SQLiteDatabase::Open(const char* mode)\n {\n+    const bool read_only = (!strchr(mode, '+') && !strchr(mode, 'w'));\n+\n+    const bool create = strchr(mode, 'c') != nullptr;\n+    int flags;\n+    if (read_only) {\n+        flags = SQLITE_OPEN_READONLY;\n+    } else {\n+        flags = SQLITE_OPEN_READWRITE;\n+    }\n+    if (create) {\n+        flags |= SQLITE_OPEN_CREATE;\n+    }\n+    if (m_mock) {\n+        flags |= SQLITE_OPEN_MEMORY; // In memory database for mock db\n+    }\n+\n+    if (m_db == nullptr) {\n+        sqlite3* db = nullptr;\n+        int ret = sqlite3_open_v2(m_file_path.c_str(), &db, flags, nullptr);\n+        if (ret != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to open database: %s\\n\", sqlite3_errstr(ret)));\n+        }\n+        // TODO: Maybe(?) Check the file wasn't copied and a duplicate opened\n+\n+        if (create) {\n+            bool table_exists;\n+            // Check that the main table exists\n+            sqlite3_stmt* check_main_stmt;\n+            std::string check_main = \"SELECT name FROM sqlite_master WHERE type='table' AND name='main'\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796450",
      "id" : 501796450,
      "in_reply_to_id" : 498437365,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NjQ1MA==",
      "original_commit_id" : "ecc06767e1a91b11179ffb5b70808b69a9c6b552",
      "original_line" : 86,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : null,
      "pull_request_review_id" : 504884510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796450",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T15:06:48Z",
      "diff_hunk" : "@@ -146,6 +146,13 @@ SQLiteBatch::SQLiteBatch(SQLiteDatabase& database, const char* mode)\n \n void SQLiteBatch::Close()\n {\n+    if (m_database.m_db && sqlite3_get_autocommit(m_database.m_db) == 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796568",
      "id" : 501796568,
      "in_reply_to_id" : 501625111,
      "line" : 337,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NjU2OA==",
      "original_commit_id" : "d993dee317b93b11296282b9e97fa66e8c5ca152",
      "original_line" : 337,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 337,
      "pull_request_review_id" : 504884689,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796568",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796793"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think that is necessary.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T15:07:06Z",
      "diff_hunk" : "@@ -221,22 +221,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);\n+        sqlite3_reset(m_read_stmt);\n+        return false;\n+    }\n+    res = sqlite3_step(m_read_stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796793",
      "id" : 501796793,
      "in_reply_to_id" : 501660749,
      "line" : 386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5Njc5Mw==",
      "original_commit_id" : "fac0cf3d1edff440cdbd19d2615cba701bb4a17d",
      "original_line" : 386,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 386,
      "pull_request_review_id" : 504885004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796793",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T15:07:11Z",
      "diff_hunk" : "@@ -325,16 +325,40 @@ bool SQLiteBatch::HasKey(CDataStream&& key)\n \n bool SQLiteBatch::StartCursor()\n {\n-    return false;\n+    assert(!m_cursor_init);\n+    if (!m_database.m_db) return false;\n+    m_cursor_init = true;\n+    return true;\n }\n \n bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& complete)\n {\n-    return false;\n+    complete = false;\n+\n+    if (!m_cursor_init) return false;\n+\n+    int res = sqlite3_step(m_cursor_stmt);\n+    if (res == SQLITE_DONE) {\n+        complete = true;\n+        return true;\n+    } else if (res != SQLITE_ROW) {\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796843",
      "id" : 501796843,
      "in_reply_to_id" : 501667010,
      "line" : 508,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5Njg0Mw==",
      "original_commit_id" : "87d8fbfe58c5daa61326f67c228f09e7758ea368",
      "original_line" : 508,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 508,
      "pull_request_review_id" : 504885070,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796843",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796902"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796902"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T15:07:16Z",
      "diff_hunk" : "@@ -157,7 +157,27 @@ bool SQLiteDatabase::Rewrite(const char* skip)\n \n bool SQLiteDatabase::Backup(const std::string& dest) const\n {\n-    return false;\n+    sqlite3* db_copy;\n+    int res = sqlite3_open(dest.c_str(), &db_copy);\n+    if (res != SQLITE_OK) {\n+        sqlite3_close(db_copy);\n+        return false;\n+    }\n+    sqlite3_backup* backup = sqlite3_backup_init(db_copy, \"main\", m_db, \"main\");\n+    if (!backup) {\n+        sqlite3_close(db_copy);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501796902",
      "id" : 501796902,
      "in_reply_to_id" : 501668061,
      "line" : 296,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NjkwMg==",
      "original_commit_id" : "0584828e2a9022d5b548ebda6a9a8329296bcafb",
      "original_line" : 296,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 296,
      "pull_request_review_id" : 504885158,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501796902",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501797166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501797166"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think that is necessary.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T15:07:40Z",
      "diff_hunk" : "@@ -152,7 +152,9 @@ void SQLiteDatabase::Open(const char* mode)\n \n bool SQLiteDatabase::Rewrite(const char* skip)\n {\n-    return false;\n+    // Rewrite the database using the VACUUM command: https://sqlite.org/lang_vacuum.html",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501797166",
      "id" : 501797166,
      "in_reply_to_id" : 501682189,
      "line" : 280,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NzE2Ng==",
      "original_commit_id" : "dfa867392725f999a331404205635ee7a331886f",
      "original_line" : 280,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 280,
      "pull_request_review_id" : 504885551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501797166",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501797364"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501797364"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this should be fixed now.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T15:07:55Z",
      "diff_hunk" : "@@ -130,6 +131,27 @@ bool SQLiteDatabase::Verify(bilingual_str& error)\n         return false;\n     }\n \n+    // Check our schema version\n+    sqlite3_stmt* user_ver_stmt{nullptr};\n+    ret = sqlite3_prepare_v2(m_db, \"PRAGMA user_version\", -1, &user_ver_stmt, nullptr);\n+    if (ret != SQLITE_OK) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to prepare the statement to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    ret = sqlite3_step(user_ver_stmt);\n+    if (ret != SQLITE_ROW) {\n+        sqlite3_finalize(user_ver_stmt);\n+        error = strprintf(_(\"SQLiteDatabase: Failed to fetch sqlite wallet schema version: %s\"), sqlite3_errstr(ret));\n+        return false;\n+    }\n+    int32_t user_ver = sqlite3_column_int(user_ver_stmt, 0);\n+    sqlite3_finalize(user_ver_stmt);\n+    if (user_ver != WALLET_SCHEMA_VERSION) {\n+        error = strprintf(_(\"SQLiteDatabase: Unknown sqlite wallet schema version %d. Only version %d is supported\"), user_ver, WALLET_SCHEMA_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501797364",
      "id" : 501797364,
      "in_reply_to_id" : 501753764,
      "line" : 156,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NzM2NA==",
      "original_commit_id" : "810f3de3643cc0330cc8005126e47adf406152d0",
      "original_line" : 156,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 156,
      "pull_request_review_id" : 504885818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501797364",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The default wallet.\r\n\r\nNo. That's way more confusing. We also stopped making the default wallet.",
      "created_at" : "2020-10-08T15:08:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#issuecomment-705634683",
      "id" : 705634683,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19077",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwNTYzNDY4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-08T15:08:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705634683",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501798002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501798002"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added logging.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T15:08:44Z",
      "diff_hunk" : "@@ -265,22 +265,106 @@ void SQLiteBatch::Close()\n \n bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n {\n-    return false;\n+    if (!m_database.m_db) return false;\n+    assert(m_read_stmt);\n+\n+    // Bind: leftmost parameter in statement is index 1\n+    int res = sqlite3_bind_blob(m_read_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    if (res != SQLITE_OK) {\n+        sqlite3_clear_bindings(m_read_stmt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501798002",
      "id" : 501798002,
      "in_reply_to_id" : 500720094,
      "line" : 382,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5ODAwMg==",
      "original_commit_id" : "36ea015032ddf1aa7d424b463c2c6c531d832295",
      "original_line" : 382,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 382,
      "pull_request_review_id" : 504886713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501798002",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501799116"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501799116"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> [4e8011a](https://github.com/bitcoin/bitcoin/commit/4e8011a868d10650880cf5c5c01f005bc9fcc402) (maybe for followup): does it make sense to make this a prepared statement?\r\n\r\nNo. There's nothing to prepare.",
      "commit_id" : "41af0d7a79322a25423f2ea9d1ffb2ce751c338b",
      "created_at" : "2020-10-08T15:10:12Z",
      "diff_hunk" : "@@ -414,17 +414,23 @@ void SQLiteBatch::CloseCursor()\n \n bool SQLiteBatch::TxnBegin()\n {\n-    return false;\n+    if (!m_database.m_db || sqlite3_get_autocommit(m_database.m_db) == 0) return false;\n+    int res = sqlite3_exec(m_database.m_db, \"BEGIN TRANSACTION\", nullptr, nullptr, nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19077#discussion_r501799116",
      "id" : 501799116,
      "in_reply_to_id" : 499991129,
      "line" : 530,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5OTExNg==",
      "original_commit_id" : "d448c6c362642f24b08b754cb09066ced847f867",
      "original_line" : 530,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/sqlite.cpp",
      "position" : 530,
      "pull_request_review_id" : 504888201,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19077",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-08T15:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501799116",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
