[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK and approach half-ACK. This seems like a good change to make with the caveat that it shouldn't be necessary to add new global `NodeContext` variables and add new node initialization and caching code to fix a GUI problem.\r\n\r\nInstead of having `AppInitMain` set global variables in `NodeContext` that get returned by a new `Node::getInitialChainState` method, and having the node cache information about itself on behalf of the GUI, I think the GUI should be able to query the node at the right time and pass the information where it needs to go during its initialization.\r\n\r\nThis would mean instead of having a new `Node::getInitialChainState` method returning cached information, there would be a new `Node::getBlockTip` method [1] returning live information. The GUI could call this right after it calls `Node::appInitMain`, and pass the returned values along to `setClientModel`. It might also be good to define a `BlockTip` struct to avoid repeating the same function arguments multiple places.\r\n\r\n[1] Suggesting `getBlockTip` as a method name to be consistent with other existing method names: [`getHeaderTip`](https://github.com/bitcoin/bitcoin/blob/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b/src/interfaces/node.h#L146), [`handleNotifyBlockTip`](https://github.com/bitcoin/bitcoin/blob/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b/src/interfaces/node.h#L253), [`handleNotifyHeaderTip`](https://github.com/bitcoin/bitcoin/blob/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b/src/interfaces/node.h#L258) as well as the new struct [`BlockTip`](https://github.com/bitcoin/bitcoin/blob/a33fd3fa4e668b19495a1d11e44c7d405aaa6e10/src/interfaces/node.h#L270-L276) from #17993\r\n\r\n",
      "created_at" : "2020-05-18T22:15:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19011#issuecomment-630464246",
      "id" : 630464246,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDQ2NDI0Ng==",
      "updated_at" : "2020-05-18T22:15:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630464246",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19007 (relax GUI locks: avoid unnecesarry calls to ::ChainstateActive().IsInitialBlockDownload by jonasschnelli)\n* #18152 (qt: Use SynchronizationState enum for signals to GUI by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-05-18T23:55:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19011#issuecomment-630494779",
      "id" : 630494779,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDQ5NDc3OQ==",
      "updated_at" : "2020-05-19T10:30:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630494779",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> This would mean instead of having a new Node::getInitialChainState method returning cached information, there would be a new Node::getBlockTip method [1] returning live information. The GUI could call this right after it calls Node::appInitMain, and pass the returned values along to setClientModel. It might also be good to define a BlockTip struct to avoid repeating the same function arguments multiple places.\r\n\r\nI thought about this and agree that this PRs solution might not be very elegant.\r\n\r\nThe approach you described should work,.. the main difference is that the networking is running then already which might lead to additional cs_main locking (within this PR, we fetch the information before we start the networking). Your approach would also require at least another locking of cs_main (right?).\r\n\r\nWhat I was looking for was using an existing cs_main lock to gather the information required for the GUI (avoid collecting the same information into concurrency-safe primitives over and over).",
      "created_at" : "2020-05-19T07:23:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19011#issuecomment-630635994",
      "id" : 630635994,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDYzNTk5NA==",
      "updated_at" : "2020-05-19T07:23:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630635994",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The approach you described should work,.. the main difference is that the networking is running then already which might lead to additional cs_main locking (within this PR, we fetch the information before we start the networking). Your approach would also require at least another locking of cs_main (right?).\r\n\r\nOh, I thought I might have been missing something. Now I understand why this is saving tip information inside AppInitMain. I think you're right that there is a possibility of cs_main blocking if information is retrieved after the AppInitMain call instead of during it (though in this case it still wouldn't be happening on the qt event loop thread, so might not be an actual problem).\r\n\r\nIf this is a problem, it could be solved most directly by having AppInitMain just return tip information, instead of stashing it into a global struct to be retrieved later. Using something like [`struct BlockTip`](https://github.com/bitcoin/bitcoin/blob/a33fd3fa4e668b19495a1d11e44c7d405aaa6e10/src/interfaces/node.h#L270-L276) from #17993 and having AppInitMain take an optional `BlockTip*` output argument would be a pretty clean way for it to return information.",
      "created_at" : "2020-05-19T11:38:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19011#issuecomment-630762720",
      "id" : 630762720,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19011",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDc2MjcyMA==",
      "updated_at" : "2020-05-19T11:39:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630762720",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
