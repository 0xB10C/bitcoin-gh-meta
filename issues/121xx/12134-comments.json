[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Can you explain why exactly the patching is needed in this case? It would definitely seem better to test against unpatched previous releases if possible.",
      "created_at" : "2018-01-09T20:27:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356404252",
      "id" : 356404252,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12134",
      "updated_at" : "2018-01-09T20:27:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356404252",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@ryanofsky the regtest parameters were changed to activate SegWit at the genesis block, which causes nodes after #11389 to reject blocks created by v0.15.1 and older nodes (and vice versa). Maybe there's a less drastic way to change the regtest consensus params for these older releases?",
      "created_at" : "2018-01-09T20:33:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356405725",
      "id" : 356405725,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12134",
      "updated_at" : "2018-01-09T20:33:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356405725",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Not sure, but is passing `-vbparams=segwit:0:0` an option?",
      "created_at" : "2018-01-09T20:42:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356407978",
      "id" : 356407978,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12134",
      "updated_at" : "2018-01-09T20:42:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356407978",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sjors I've spent some time looking into how feasible it would be to write functional tests that would run against older versions of our software, which I think would be great if we could pull off -- for instance, I thought it would be nice in something like the `p2p-segwit.py` test for us to use an actual old binary in the `upgrade_after_activation` test, rather than mocking it with a current binary by setting the bip9 parameters to 0.\r\n\r\nHowever, in my experience this proved to be impractical.  It seems like we periodically make changes to the RPC test framework infrastructure itself, in such ways that cause problems with backward compatibility.  Here are a few examples I have run into, so you get a flavor of some of the issues:\r\n\r\n- `sync_blocks()` was rewritten to use an rpc call, `waitforblockheight`, that was introduced in 0.14.  So no test that uses sync_blocks can run on a pre-0.14 version of the code (which is basically every test we have!).\r\n\r\n- Even if you solve that problem somehow (eg by rewriting `sync_blocks`, or avoiding it somehow), we also introduced in 0.14 support for RPC named arguments.  This also breaks compatibility with pre-0.14 software (so without a patch, I believe no RPC calls work at all).\r\n\r\n- I might have the details of this one slightly wrong, but I think we made a change at some point to support parsing numbers as strings, versus floats, and then I think our JSON library started to take advantage of that as well?  Not sure if that's exactly right, but I remember having an issue running newer tests against older releases when using RPC calls involving numbers, and needing a patch for that.\r\n\r\nSo my takeaway from this exercise was that if we want to support running modern tests against older binaries, we need to change the way we do things, so that we (a) have a better split between the python test code, and the python utilities/RPC handlers/etc that allow us to talk to a node, and (b) come up with a way to use older python utility code when talking to older nodes.",
      "created_at" : "2018-01-09T21:16:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356416607",
      "id" : 356416607,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12134",
      "updated_at" : "2018-01-09T21:16:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356416607",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> So no test that uses sync_blocks can run on a pre-0.14 version of the code (which is basically every test we have!).\r\n\r\nI don't understand why this would matter. I think the goal here is just to be able to write a small test that brings up a specific version of bitcoind (0.15) and tests a few things with it, not to be able to run large swathes of the test framework against arbitrary bitcoin releases. It doesn't seem it would require a lot of code to support this, and if the tests are run on travis it doesn't seem like whatever code is added could get broken easily.",
      "created_at" : "2018-01-09T21:38:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356422423",
      "id" : 356422423,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12134",
      "updated_at" : "2018-01-09T21:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356422423",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky Perhaps I phrased that sentence poorly -- my point wasn't that we'd want to run all the tests against older code (I think that would be absurd), just that we take it for granted that we can call `sync_blocks` in all sorts of places, so to not have such a basic utility at your disposal can be surprising and hard to work around.\r\n\r\nAnother way to look at it: imagine you wanted to run a test against 0.15 now, so you write one and you can even use `sync_blocks` and everything works fine (I agree that this shouldn't be too hard, as 0.15 was very recent).  Based on our history, I imagine there will come a time when someone wants to do something which will break the test, because some utility code -- like `sync_blocks`, or the way we make RPC calls, or something else -- will change, and the test will be busted, and we won't have a good way to fix it.",
      "created_at" : "2018-01-09T21:49:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356425374",
      "id" : 356425374,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12134",
      "updated_at" : "2018-01-09T21:49:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356425374",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This seems possible for small, limited tests which don't use the full range of test framework capabilities (for example, if we just want to test downgrading to v0.15 to test segwit wallets). As Suhas has pointed out, there are lots of reasons why this is difficult in the general case, but I think we can work around them for a targeted test cases:\r\n\r\n> sync_blocks() was rewritten to use an rpc call, waitforblockheight, that was introduced in 0.14. \r\n\r\nNot relevant if we only want to test as far back as v0.15, but we can add a `waitforblockheight` method to `TestNode` for versions that don't have a `waitforblockheight` RPC method.\r\n\r\n> Even if you solve that problem somehow (eg by rewriting sync_blocks, or avoiding it somehow), we also introduced in 0.14 support for RPC named arguments.\r\n\r\nWe could be careful to not use named arguments in tests where we want to use earlier versions. Or we could add a shim to `TestNode` to convert named -> positional.\r\n\r\n> I think we made a change at some point to support parsing numbers as strings, versus floats, and then I think our JSON library started to take advantage of that as well?\r\n\r\nAs above.\r\n\r\n> I imagine there will come a time when someone wants to do something which will break the test, because some utility code -- like sync_blocks, or the way we make RPC calls, or something else -- will change, and the test will be busted, and we won't have a good way to fix it.\r\n\r\nI expect we'll only want to have tests covering the last one or two releases, so I don't see this as a huge problem.\r\n\r\n> I think the goal here is ... not to be able to run large swathes of the test framework against arbitrary bitcoin releases.\r\n\r\nYes - I agree that would be almost impossible.\r\n\r\n@Sjors - if the goal is only to test official releases, why not download the binaries directly from https://bitcoincore.org/bin/ rather than building them locally?",
      "created_at" : "2018-01-09T22:00:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356428226",
      "id" : 356428226,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12134",
      "updated_at" : "2018-01-09T22:00:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356428226",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
