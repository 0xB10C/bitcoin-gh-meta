[
   {
      "author_association" : "MEMBER",
      "body" : "Why is it pubkeys and not addresses for the pubkey part?  (obviously xpubs are xpubs and need to be)",
      "created_at" : "2018-01-16T07:14:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-357872742",
      "id" : 357872742,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12196",
      "updated_at" : "2018-01-16T07:14:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357872742",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "After a short discussion on IRC (https://botbot.me/freenode/bitcoin-core-dev/2018-01-16/?msg=95804115&page=2) support for addresses and pubkeys makes most sense. Will add support for an array of addresses.",
      "created_at" : "2018-01-16T07:33:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-357876083",
      "id" : 357876083,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12196",
      "updated_at" : "2018-01-16T07:33:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357876083",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719264"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161719264"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IMO there is no need to throw, a `bool` in the response is enough? Otherwise, missing test.",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T10:42:29Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"scantxoutset <action> {\\\"pubkeys\\\": [\\\"pubkey\\\",...], \\\"xpubs\\\":[{\\\"xpub\\\": \\\"<xpub>\\\"}], other options}\\n\"\n+            \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"action\\\"                      (string, required) The action to execute\\n\"\n+            \"                                          \\\"start\\\" for starting a scan\\n\"\n+            \"                                          \\\"abort\\\" for aborting the current scan\\n\"\n+            \"                                          \\\"status\\\" for progress report (in %) of the current scan\\n\"\n+            \"2. \\\"options\\\"                     (object, optional)\\n\"\n+            \"      \\\"pubkeys\\\":[\\\"pubkey\\\",...]   (array of strings, optional) An array of HEX encoded public keys\\n\"\n+            \"      \\\"xpubs\\\":                   (array of xpub objects that will be used to derive child keys with the given lookup window after m/0/k and m/1/k scheme)\\n\"\n+            \"           [\\n\"\n+            \"               {\\\"xpub\\\":\\\"<xpub>\\\", (base58check encoded extended public key (xpub)\\n\"\n+            \"                \\\"lookupwindow\\\": [<startindex>, <stopindex>] (An array with two integers that does define the range of keys that will be deriven for the given xpubs, default is 0 to 1000)\\n\"\n+            \"                }\\n\"\n+            \"           ]\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"unspents\\\": [\\n\"\n+            \"    {\\n\"\n+            \"    \\\"txid\\\" : \\\"transactionid\\\",    (string) The transaction id\\n\"\n+            \"    \\\"vout\\\": n,                   (numeric) the vout value\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"script\\\",   (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,            (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n+            \"    \\\"height\\\" : n,                (numeric) Height of the unspent transaction output\\n\"\n+            \"   }\\n\"\n+            \"   ,...], \\n\"\n+            \" \\\"total_amount\\\" : x.xxx,         (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"]\\n\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+\n+    UniValue result(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");\n+        }\n+        result.pushKV(\"progress\", g_scan_progress);\n+    }\n+    else if (request.params[0].get_str() == \"abort\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719264",
      "id" : 161719264,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 97,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161719264",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719526"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161719526"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Remove `other options`? There are none.",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T10:43:33Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"scantxoutset <action> {\\\"pubkeys\\\": [\\\"pubkey\\\",...], \\\"xpubs\\\":[{\\\"xpub\\\": \\\"<xpub>\\\"}], other options}\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719526",
      "id" : 161719526,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 54,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161719526",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161719731"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`request.params.size() != 2`?",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T10:44:02Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719731",
      "id" : 161719731,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 52,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 53,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161719731",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719989"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161719989"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, newline after `{`.",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T10:44:58Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"scantxoutset <action> {\\\"pubkeys\\\": [\\\"pubkey\\\",...], \\\"xpubs\\\":[{\\\"xpub\\\": \\\"<xpub>\\\"}], other options}\\n\"\n+            \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"action\\\"                      (string, required) The action to execute\\n\"\n+            \"                                          \\\"start\\\" for starting a scan\\n\"\n+            \"                                          \\\"abort\\\" for aborting the current scan\\n\"\n+            \"                                          \\\"status\\\" for progress report (in %) of the current scan\\n\"\n+            \"2. \\\"options\\\"                     (object, optional)\\n\"\n+            \"      \\\"pubkeys\\\":[\\\"pubkey\\\",...]   (array of strings, optional) An array of HEX encoded public keys\\n\"\n+            \"      \\\"xpubs\\\":                   (array of xpub objects that will be used to derive child keys with the given lookup window after m/0/k and m/1/k scheme)\\n\"\n+            \"           [\\n\"\n+            \"               {\\\"xpub\\\":\\\"<xpub>\\\", (base58check encoded extended public key (xpub)\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719989",
      "id" : 161719989,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 65,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161719989",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161720229"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing test for error.",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T10:45:50Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"scantxoutset <action> {\\\"pubkeys\\\": [\\\"pubkey\\\",...], \\\"xpubs\\\":[{\\\"xpub\\\": \\\"<xpub>\\\"}], other options}\\n\"\n+            \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"action\\\"                      (string, required) The action to execute\\n\"\n+            \"                                          \\\"start\\\" for starting a scan\\n\"\n+            \"                                          \\\"abort\\\" for aborting the current scan\\n\"\n+            \"                                          \\\"status\\\" for progress report (in %) of the current scan\\n\"\n+            \"2. \\\"options\\\"                     (object, optional)\\n\"\n+            \"      \\\"pubkeys\\\":[\\\"pubkey\\\",...]   (array of strings, optional) An array of HEX encoded public keys\\n\"\n+            \"      \\\"xpubs\\\":                   (array of xpub objects that will be used to derive child keys with the given lookup window after m/0/k and m/1/k scheme)\\n\"\n+            \"           [\\n\"\n+            \"               {\\\"xpub\\\":\\\"<xpub>\\\", (base58check encoded extended public key (xpub)\\n\"\n+            \"                \\\"lookupwindow\\\": [<startindex>, <stopindex>] (An array with two integers that does define the range of keys that will be deriven for the given xpubs, default is 0 to 1000)\\n\"\n+            \"                }\\n\"\n+            \"           ]\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"unspents\\\": [\\n\"\n+            \"    {\\n\"\n+            \"    \\\"txid\\\" : \\\"transactionid\\\",    (string) The transaction id\\n\"\n+            \"    \\\"vout\\\": n,                   (numeric) the vout value\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"script\\\",   (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,            (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n+            \"    \\\"height\\\" : n,                (numeric) Height of the unspent transaction output\\n\"\n+            \"   }\\n\"\n+            \"   ,...], \\n\"\n+            \" \\\"total_amount\\\" : x.xxx,         (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"]\\n\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+\n+    UniValue result(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720229",
      "id" : 161720229,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 90,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 93,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161720229",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161720355"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, `else {` here.",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T10:46:20Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"scantxoutset <action> {\\\"pubkeys\\\": [\\\"pubkey\\\",...], \\\"xpubs\\\":[{\\\"xpub\\\": \\\"<xpub>\\\"}], other options}\\n\"\n+            \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"action\\\"                      (string, required) The action to execute\\n\"\n+            \"                                          \\\"start\\\" for starting a scan\\n\"\n+            \"                                          \\\"abort\\\" for aborting the current scan\\n\"\n+            \"                                          \\\"status\\\" for progress report (in %) of the current scan\\n\"\n+            \"2. \\\"options\\\"                     (object, optional)\\n\"\n+            \"      \\\"pubkeys\\\":[\\\"pubkey\\\",...]   (array of strings, optional) An array of HEX encoded public keys\\n\"\n+            \"      \\\"xpubs\\\":                   (array of xpub objects that will be used to derive child keys with the given lookup window after m/0/k and m/1/k scheme)\\n\"\n+            \"           [\\n\"\n+            \"               {\\\"xpub\\\":\\\"<xpub>\\\", (base58check encoded extended public key (xpub)\\n\"\n+            \"                \\\"lookupwindow\\\": [<startindex>, <stopindex>] (An array with two integers that does define the range of keys that will be deriven for the given xpubs, default is 0 to 1000)\\n\"\n+            \"                }\\n\"\n+            \"           ]\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"unspents\\\": [\\n\"\n+            \"    {\\n\"\n+            \"    \\\"txid\\\" : \\\"transactionid\\\",    (string) The transaction id\\n\"\n+            \"    \\\"vout\\\": n,                   (numeric) the vout value\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"script\\\",   (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,            (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n+            \"    \\\"height\\\" : n,                (numeric) Height of the unspent transaction output\\n\"\n+            \"   }\\n\"\n+            \"   ,...], \\n\"\n+            \" \\\"total_amount\\\" : x.xxx,         (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"]\\n\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+\n+    UniValue result(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");\n+        }\n+        result.pushKV(\"progress\", g_scan_progress);\n+    }\n+    else if (request.params[0].get_str() == \"abort\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");\n+        }\n+        g_should_abourt_scan = true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        CoinsViewScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" \\\"status\\\"\");\n+        }\n+        std::set<CScript> needles;\n+        CBasicKeyStore tempKeystore;\n+        CAmount total_in = 0;\n+\n+        // look for posssible pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        UniValue pubkeysU = find_value(request.params[1], \"pubkeys\");\n+        if (pubkeysU.isArray()) {\n+            for (const UniValue& pubkeyU : pubkeysU.get_array().getValues()) {\n+                if (!pubkeyU.isStr() || !IsHex(pubkeyU.get_str())) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"public key must be hex encoded\");\n+                }\n+                std::vector<unsigned char> data(ParseHex(pubkeyU.get_str()));\n+                CPubKey pubKey(data.begin(), data.end());\n+                if (!pubKey.IsFullyValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid public key\");\n+                }\n+                pubkeys.push_back(pubKey);\n+            }\n+        }\n+\n+        // check for xpubs and derive a lookup window\n+        UniValue xpubsU = find_value(request.params[1], \"xpubs\");\n+        if (xpubsU.isArray()) {\n+            for (const UniValue& xpubObjectU : xpubsU.get_array().getValues()) {\n+                if (!xpubObjectU.isObject()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid xpub object\");\n+                }\n+\n+                UniValue xpubU = find_value(xpubObjectU, \"xpub\");\n+                UniValue lookupWindowU = find_value(xpubObjectU, \"lookupwindow\");\n+                //default lookup window\n+                unsigned int windowStart = 0;\n+                unsigned int windowEnd = 1000;\n+                if (!lookupWindowU.isNull()) {\n+                    if (lookupWindowU.isArray() && lookupWindowU.get_array().size() != 2) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, \"xpub lookupwindow must be an array with two elements (range)\");\n+                    }\n+                    else {\n+                        windowStart = (unsigned int)lookupWindowU.get_array().getValues()[0].get_int();\n+                        windowEnd = (unsigned int)lookupWindowU.get_array().getValues()[1].get_int();\n+                    }\n+                }\n+                CBitcoinExtPubKey xpubBase58(xpubU.get_str()); //will throw if xpubU does not contain a string\n+\n+                // Derive internal- and external-chain keys\n+                CExtPubKey xpub = xpubBase58.GetKey();\n+                CExtPubKey c0;\n+                CExtPubKey c1;\n+                xpub.Derive(c0, 0);\n+                xpub.Derive(c1, 1);\n+\n+                for (unsigned int i = windowStart; i <= windowEnd; i++) {\n+                    // derive both (internal and external chain) child keys\n+                    CExtPubKey k;\n+                    c0.Derive(k, i);\n+                    pubkeys.push_back(k.pubkey);\n+                    c1.Derive(k, i);\n+                    pubkeys.push_back(k.pubkey);\n+                }\n+            }\n+        }\n+        if (!pubkeysU.isArray() && !xpubsU.isArray()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid or empty public or xpub key array\");\n+        }\n+\n+        // add all common scripts for the given and derived pubkeys\n+        for (const CPubKey& pubKey : pubkeys) {\n+            // add legacy P2PKH script\n+            CKeyID address = pubKey.GetID();\n+            CScript script = GetScriptForDestination(address);\n+            if (!script.empty()) {\n+                needles.insert(script);\n+                tempKeystore.AddWatchOnly(script);\n+            }\n+            // add P2SH-P2WPKH script\n+            CScript witscript = GetScriptForWitness(script);\n+            CTxDestination result;\n+            ExtractDestination(witscript, result);\n+            CScript p2wpkh_script = GetScriptForDestination(result);\n+            CScript p2sh_p2wpkh_script = GetScriptForDestination(CScriptID(p2wpkh_script));\n+            if (!p2wpkh_script.empty()) {\n+                needles.insert(p2wpkh_script);\n+                tempKeystore.AddWatchOnly(p2wpkh_script);\n+            }\n+            if (!p2sh_p2wpkh_script.empty()) {\n+                needles.insert(p2sh_p2wpkh_script);\n+                tempKeystore.AddWatchOnly(p2sh_p2wpkh_script);\n+            }\n+            // add 1of1 multisig (used by Bitpay for a while)\n+            script = GetScriptForMultisig(1, std::vector<CPubKey>(1, pubKey));\n+            if (!script.empty()) {\n+                needles.insert(script);\n+                tempKeystore.AddWatchOnly(script);\n+            }\n+            // add legacy P2PK\n+            script = GetScriptForRawPubKey(pubKey);\n+            if (!script.empty()) {\n+                needles.insert(script);\n+                tempKeystore.AddWatchOnly(script);\n+            }\n+        }\n+\n+        // Scan the unspent transaction output set for inputs\n+        UniValue unspents(UniValue::VARR);\n+        std::vector<CTxOut> input_txos;\n+        {\n+            std::map<COutPoint, Coin> coins;\n+            {\n+                g_should_abourt_scan = false;\n+                g_scan_progress = 0;\n+                int64_t count = 0;\n+                FlushStateToDisk();\n+                bool res = pcoinsdbview->FindScriptPubKey(g_scan_progress, g_should_abourt_scan, count, needles, coins);\n+                result.push_back(Pair(\"success\", res ? \"yes\" : \"no\"));\n+                result.push_back(Pair(\"searched_items\", count));\n+            }\n+\n+            for (auto& it : coins) {\n+                const COutPoint& outpoint = it.first;\n+                const Coin& coin = it.second;\n+                const CTxOut& txo = coin.out;\n+                input_txos.push_back(txo);\n+                total_in += txo.nValue;\n+\n+                UniValue unspent(UniValue::VOBJ);\n+                unspent.push_back(Pair(\"txid\", outpoint.hash.GetHex()));\n+                unspent.push_back(Pair(\"vout\", (int32_t)outpoint.n));\n+                unspent.push_back(Pair(\"scriptPubKey\", HexStr(txo.scriptPubKey.begin(), txo.scriptPubKey.end())));\n+                unspent.push_back(Pair(\"amount\", ValueFromAmount(txo.nValue)));\n+                unspent.push_back(Pair(\"height\", (int32_t)coin.nHeight));\n+\n+                unspents.push_back(unspent);\n+            }\n+        }\n+        result.push_back(Pair(\"unspents\", unspents));\n+        result.push_back(Pair(\"total_amount\", ValueFromAmount(total_in)));\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720355",
      "id" : 161720355,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 243,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161720355",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161720471"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, `else if () {` here.",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T10:46:42Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"scantxoutset <action> {\\\"pubkeys\\\": [\\\"pubkey\\\",...], \\\"xpubs\\\":[{\\\"xpub\\\": \\\"<xpub>\\\"}], other options}\\n\"\n+            \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"action\\\"                      (string, required) The action to execute\\n\"\n+            \"                                          \\\"start\\\" for starting a scan\\n\"\n+            \"                                          \\\"abort\\\" for aborting the current scan\\n\"\n+            \"                                          \\\"status\\\" for progress report (in %) of the current scan\\n\"\n+            \"2. \\\"options\\\"                     (object, optional)\\n\"\n+            \"      \\\"pubkeys\\\":[\\\"pubkey\\\",...]   (array of strings, optional) An array of HEX encoded public keys\\n\"\n+            \"      \\\"xpubs\\\":                   (array of xpub objects that will be used to derive child keys with the given lookup window after m/0/k and m/1/k scheme)\\n\"\n+            \"           [\\n\"\n+            \"               {\\\"xpub\\\":\\\"<xpub>\\\", (base58check encoded extended public key (xpub)\\n\"\n+            \"                \\\"lookupwindow\\\": [<startindex>, <stopindex>] (An array with two integers that does define the range of keys that will be deriven for the given xpubs, default is 0 to 1000)\\n\"\n+            \"                }\\n\"\n+            \"           ]\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"unspents\\\": [\\n\"\n+            \"    {\\n\"\n+            \"    \\\"txid\\\" : \\\"transactionid\\\",    (string) The transaction id\\n\"\n+            \"    \\\"vout\\\": n,                   (numeric) the vout value\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"script\\\",   (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,            (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n+            \"    \\\"height\\\" : n,                (numeric) Height of the unspent transaction output\\n\"\n+            \"   }\\n\"\n+            \"   ,...], \\n\"\n+            \" \\\"total_amount\\\" : x.xxx,         (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"]\\n\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+\n+    UniValue result(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");\n+        }\n+        result.pushKV(\"progress\", g_scan_progress);\n+    }\n+    else if (request.params[0].get_str() == \"abort\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");\n+        }\n+        g_should_abourt_scan = true;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720471",
      "id" : 161720471,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 100,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161720471",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720621"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161720621"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Typo, abort.",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T10:47:17Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720621",
      "id" : 161720621,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 23,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161720621",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161722614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161722614"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Lock only when changing `g_scan_in_progress`?\r\n```cpp\r\nif (m_could_reserve) {\r\n    std::lock_guard<std::mutex> lock(g_utxosetscan);\r\n    g_scan_in_progress = false;\r\n}\r\n```",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T10:55:14Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161722614",
      "id" : 161722614,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 43,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161722614",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161723685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161723685"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Remove \"status\"? Otherwise add ` or ` between actions.",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T10:59:50Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"scantxoutset <action> {\\\"pubkeys\\\": [\\\"pubkey\\\",...], \\\"xpubs\\\":[{\\\"xpub\\\": \\\"<xpub>\\\"}], other options}\\n\"\n+            \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"action\\\"                      (string, required) The action to execute\\n\"\n+            \"                                          \\\"start\\\" for starting a scan\\n\"\n+            \"                                          \\\"abort\\\" for aborting the current scan\\n\"\n+            \"                                          \\\"status\\\" for progress report (in %) of the current scan\\n\"\n+            \"2. \\\"options\\\"                     (object, optional)\\n\"\n+            \"      \\\"pubkeys\\\":[\\\"pubkey\\\",...]   (array of strings, optional) An array of HEX encoded public keys\\n\"\n+            \"      \\\"xpubs\\\":                   (array of xpub objects that will be used to derive child keys with the given lookup window after m/0/k and m/1/k scheme)\\n\"\n+            \"           [\\n\"\n+            \"               {\\\"xpub\\\":\\\"<xpub>\\\", (base58check encoded extended public key (xpub)\\n\"\n+            \"                \\\"lookupwindow\\\": [<startindex>, <stopindex>] (An array with two integers that does define the range of keys that will be deriven for the given xpubs, default is 0 to 1000)\\n\"\n+            \"                }\\n\"\n+            \"           ]\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"unspents\\\": [\\n\"\n+            \"    {\\n\"\n+            \"    \\\"txid\\\" : \\\"transactionid\\\",    (string) The transaction id\\n\"\n+            \"    \\\"vout\\\": n,                   (numeric) the vout value\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"script\\\",   (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,            (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n+            \"    \\\"height\\\" : n,                (numeric) Height of the unspent transaction output\\n\"\n+            \"   }\\n\"\n+            \"   ,...], \\n\"\n+            \" \\\"total_amount\\\" : x.xxx,         (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"]\\n\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+\n+    UniValue result(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");\n+        }\n+        result.pushKV(\"progress\", g_scan_progress);\n+    }\n+    else if (request.params[0].get_str() == \"abort\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");\n+        }\n+        g_should_abourt_scan = true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        CoinsViewScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" \\\"status\\\"\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161723685",
      "id" : 161723685,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 104,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161723685",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161723933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161723933"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "const auto&",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T11:00:53Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"scantxoutset <action> {\\\"pubkeys\\\": [\\\"pubkey\\\",...], \\\"xpubs\\\":[{\\\"xpub\\\": \\\"<xpub>\\\"}], other options}\\n\"\n+            \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"action\\\"                      (string, required) The action to execute\\n\"\n+            \"                                          \\\"start\\\" for starting a scan\\n\"\n+            \"                                          \\\"abort\\\" for aborting the current scan\\n\"\n+            \"                                          \\\"status\\\" for progress report (in %) of the current scan\\n\"\n+            \"2. \\\"options\\\"                     (object, optional)\\n\"\n+            \"      \\\"pubkeys\\\":[\\\"pubkey\\\",...]   (array of strings, optional) An array of HEX encoded public keys\\n\"\n+            \"      \\\"xpubs\\\":                   (array of xpub objects that will be used to derive child keys with the given lookup window after m/0/k and m/1/k scheme)\\n\"\n+            \"           [\\n\"\n+            \"               {\\\"xpub\\\":\\\"<xpub>\\\", (base58check encoded extended public key (xpub)\\n\"\n+            \"                \\\"lookupwindow\\\": [<startindex>, <stopindex>] (An array with two integers that does define the range of keys that will be deriven for the given xpubs, default is 0 to 1000)\\n\"\n+            \"                }\\n\"\n+            \"           ]\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"unspents\\\": [\\n\"\n+            \"    {\\n\"\n+            \"    \\\"txid\\\" : \\\"transactionid\\\",    (string) The transaction id\\n\"\n+            \"    \\\"vout\\\": n,                   (numeric) the vout value\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"script\\\",   (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,            (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n+            \"    \\\"height\\\" : n,                (numeric) Height of the unspent transaction output\\n\"\n+            \"   }\\n\"\n+            \"   ,...], \\n\"\n+            \" \\\"total_amount\\\" : x.xxx,         (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"]\\n\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+\n+    UniValue result(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");\n+        }\n+        result.pushKV(\"progress\", g_scan_progress);\n+    }\n+    else if (request.params[0].get_str() == \"abort\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");\n+        }\n+        g_should_abourt_scan = true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        CoinsViewScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" \\\"status\\\"\");\n+        }\n+        std::set<CScript> needles;\n+        CBasicKeyStore tempKeystore;\n+        CAmount total_in = 0;\n+\n+        // look for posssible pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        UniValue pubkeysU = find_value(request.params[1], \"pubkeys\");\n+        if (pubkeysU.isArray()) {\n+            for (const UniValue& pubkeyU : pubkeysU.get_array().getValues()) {\n+                if (!pubkeyU.isStr() || !IsHex(pubkeyU.get_str())) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"public key must be hex encoded\");\n+                }\n+                std::vector<unsigned char> data(ParseHex(pubkeyU.get_str()));\n+                CPubKey pubKey(data.begin(), data.end());\n+                if (!pubKey.IsFullyValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid public key\");\n+                }\n+                pubkeys.push_back(pubKey);\n+            }\n+        }\n+\n+        // check for xpubs and derive a lookup window\n+        UniValue xpubsU = find_value(request.params[1], \"xpubs\");\n+        if (xpubsU.isArray()) {\n+            for (const UniValue& xpubObjectU : xpubsU.get_array().getValues()) {\n+                if (!xpubObjectU.isObject()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid xpub object\");\n+                }\n+\n+                UniValue xpubU = find_value(xpubObjectU, \"xpub\");\n+                UniValue lookupWindowU = find_value(xpubObjectU, \"lookupwindow\");\n+                //default lookup window\n+                unsigned int windowStart = 0;\n+                unsigned int windowEnd = 1000;\n+                if (!lookupWindowU.isNull()) {\n+                    if (lookupWindowU.isArray() && lookupWindowU.get_array().size() != 2) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, \"xpub lookupwindow must be an array with two elements (range)\");\n+                    }\n+                    else {\n+                        windowStart = (unsigned int)lookupWindowU.get_array().getValues()[0].get_int();\n+                        windowEnd = (unsigned int)lookupWindowU.get_array().getValues()[1].get_int();\n+                    }\n+                }\n+                CBitcoinExtPubKey xpubBase58(xpubU.get_str()); //will throw if xpubU does not contain a string\n+\n+                // Derive internal- and external-chain keys\n+                CExtPubKey xpub = xpubBase58.GetKey();\n+                CExtPubKey c0;\n+                CExtPubKey c1;\n+                xpub.Derive(c0, 0);\n+                xpub.Derive(c1, 1);\n+\n+                for (unsigned int i = windowStart; i <= windowEnd; i++) {\n+                    // derive both (internal and external chain) child keys\n+                    CExtPubKey k;\n+                    c0.Derive(k, i);\n+                    pubkeys.push_back(k.pubkey);\n+                    c1.Derive(k, i);\n+                    pubkeys.push_back(k.pubkey);\n+                }\n+            }\n+        }\n+        if (!pubkeysU.isArray() && !xpubsU.isArray()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid or empty public or xpub key array\");\n+        }\n+\n+        // add all common scripts for the given and derived pubkeys\n+        for (const CPubKey& pubKey : pubkeys) {\n+            // add legacy P2PKH script\n+            CKeyID address = pubKey.GetID();\n+            CScript script = GetScriptForDestination(address);\n+            if (!script.empty()) {\n+                needles.insert(script);\n+                tempKeystore.AddWatchOnly(script);\n+            }\n+            // add P2SH-P2WPKH script\n+            CScript witscript = GetScriptForWitness(script);\n+            CTxDestination result;\n+            ExtractDestination(witscript, result);\n+            CScript p2wpkh_script = GetScriptForDestination(result);\n+            CScript p2sh_p2wpkh_script = GetScriptForDestination(CScriptID(p2wpkh_script));\n+            if (!p2wpkh_script.empty()) {\n+                needles.insert(p2wpkh_script);\n+                tempKeystore.AddWatchOnly(p2wpkh_script);\n+            }\n+            if (!p2sh_p2wpkh_script.empty()) {\n+                needles.insert(p2sh_p2wpkh_script);\n+                tempKeystore.AddWatchOnly(p2sh_p2wpkh_script);\n+            }\n+            // add 1of1 multisig (used by Bitpay for a while)\n+            script = GetScriptForMultisig(1, std::vector<CPubKey>(1, pubKey));\n+            if (!script.empty()) {\n+                needles.insert(script);\n+                tempKeystore.AddWatchOnly(script);\n+            }\n+            // add legacy P2PK\n+            script = GetScriptForRawPubKey(pubKey);\n+            if (!script.empty()) {\n+                needles.insert(script);\n+                tempKeystore.AddWatchOnly(script);\n+            }\n+        }\n+\n+        // Scan the unspent transaction output set for inputs\n+        UniValue unspents(UniValue::VARR);\n+        std::vector<CTxOut> input_txos;\n+        {\n+            std::map<COutPoint, Coin> coins;\n+            {\n+                g_should_abourt_scan = false;\n+                g_scan_progress = 0;\n+                int64_t count = 0;\n+                FlushStateToDisk();\n+                bool res = pcoinsdbview->FindScriptPubKey(g_scan_progress, g_should_abourt_scan, count, needles, coins);\n+                result.push_back(Pair(\"success\", res ? \"yes\" : \"no\"));\n+                result.push_back(Pair(\"searched_items\", count));\n+            }\n+\n+            for (auto& it : coins) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161723933",
      "id" : 161723933,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 224,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161723933",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161724018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161724018"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Assert not reserved?\r\n```cpp\r\nassert (!m_could_reserve);\r\nstd::lock_guard<std::mutex> lock(g_utxosetscan);\r\nif (g_scan_in_progress) return false;\r\ng_scan_in_progress = true;\r\nm_could_reserve = true;\r\nreturn true;\r\n```",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-16T11:01:18Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161724018",
      "id" : 161724018,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 33,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 89051250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161724018",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Concept ACK, nice! I've wished for UTXO scanning functionality many times, much faster than importing into a watchonly wallet if you only care about spendable UTXOs.",
      "created_at" : "2018-01-16T12:41:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-357947957",
      "id" : 357947957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12196",
      "updated_at" : "2018-01-16T12:42:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357947957",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r162549141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162549141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nah. You can also call `scantxoutset status`",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-19T07:03:12Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r162549141",
      "id" : 162549141,
      "in_reply_to_id" : 161719731,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 52,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 53,
      "pull_request_review_id" : 90025058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162549141",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r162549573"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162549573"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You mean missing a functional test for that case. Yes. I though about it, but would require a mockup-slowdown argument (`-testslowdown` or similar). Otherwise I guess it's hard to properly test this.",
      "commit_id" : "e54c0e636f34e3eb361b0e436f2295fde976aaa1",
      "created_at" : "2018-01-19T07:07:03Z",
      "diff_hunk" : "@@ -1597,6 +1599,236 @@ UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abourt_scan;\n+/** RAII object */\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (m_could_reserve) {\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"scantxoutset <action> {\\\"pubkeys\\\": [\\\"pubkey\\\",...], \\\"xpubs\\\":[{\\\"xpub\\\": \\\"<xpub>\\\"}], other options}\\n\"\n+            \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"action\\\"                      (string, required) The action to execute\\n\"\n+            \"                                          \\\"start\\\" for starting a scan\\n\"\n+            \"                                          \\\"abort\\\" for aborting the current scan\\n\"\n+            \"                                          \\\"status\\\" for progress report (in %) of the current scan\\n\"\n+            \"2. \\\"options\\\"                     (object, optional)\\n\"\n+            \"      \\\"pubkeys\\\":[\\\"pubkey\\\",...]   (array of strings, optional) An array of HEX encoded public keys\\n\"\n+            \"      \\\"xpubs\\\":                   (array of xpub objects that will be used to derive child keys with the given lookup window after m/0/k and m/1/k scheme)\\n\"\n+            \"           [\\n\"\n+            \"               {\\\"xpub\\\":\\\"<xpub>\\\", (base58check encoded extended public key (xpub)\\n\"\n+            \"                \\\"lookupwindow\\\": [<startindex>, <stopindex>] (An array with two integers that does define the range of keys that will be deriven for the given xpubs, default is 0 to 1000)\\n\"\n+            \"                }\\n\"\n+            \"           ]\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"unspents\\\": [\\n\"\n+            \"    {\\n\"\n+            \"    \\\"txid\\\" : \\\"transactionid\\\",    (string) The transaction id\\n\"\n+            \"    \\\"vout\\\": n,                   (numeric) the vout value\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"script\\\",   (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,            (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n+            \"    \\\"height\\\" : n,                (numeric) Height of the unspent transaction output\\n\"\n+            \"   }\\n\"\n+            \"   ,...], \\n\"\n+            \" \\\"total_amount\\\" : x.xxx,         (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"]\\n\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+\n+    UniValue result(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No scan in progress\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#discussion_r162549573",
      "id" : 162549573,
      "in_reply_to_id" : 161720229,
      "original_commit_id" : "4378347dea8cafc967c72e7e26816be208c8a33d",
      "original_position" : 90,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 93,
      "pull_request_review_id" : 90025540,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12196",
      "updated_at" : "2018-01-19T07:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162549573",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "* Added support for addresses (can scan unspent outputs after given addresses)\r\n* Added support for an optional raw sweep transaction including optional feerate or optional confirmation target",
      "created_at" : "2018-01-20T00:16:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-359125255",
      "id" : 359125255,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12196",
      "updated_at" : "2018-01-20T00:16:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/359125255",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "~~The raw sweep fee calculation is currently WIP (misses the dummy signer part)... will fix soon.~~",
      "created_at" : "2018-01-20T00:26:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-359126554",
      "id" : 359126554,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12196",
      "updated_at" : "2018-01-21T06:35:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/359126554",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Overhauled the fee calculation logic (see the dummy sign keystore).",
      "created_at" : "2018-01-21T06:36:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-359227556",
      "id" : 359227556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12196",
      "updated_at" : "2018-01-21T06:36:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/359227556",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
