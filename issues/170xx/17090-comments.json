[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "A number of comments:\r\n * Obviously my favorite path to rust in core right now is the \"make it easy to add new modules to download blocks/headers for anti-censorship\", which #16834 and #16762 obviously are first steps/demos of. I think its nice cause it is completely optional, both at build-time, and in the sense that we can have threads that are doing that crash (without bringing down the rest of Core due to panic catches) without it making the rest of Core broken.\r\n * I think we should air towards \"minimum version of the language we can get by with\" until we have a reason not to, and we can discuss it more then. Largely, I think #16834 is ready-to-go enough (mod review) that we can pretty much move forward with it without committing to a lot of these decisions today.\r\n * WRT cargo-vs-rustc: I don't see a lot of reason to use cargo. The major benefit it provides is downloading arbitrary code from github, building it, and linking it into your program. Obviously this isn't helpful for us, and we'll almost certainly subtree any dependencies we take, and I went and tested linking dependencies that are subtree'd without cargo and its just a few more flags to rustc.",
      "created_at" : "2019-10-09T21:39:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540212468",
      "id" : 540212468,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDIxMjQ2OA==",
      "updated_at" : "2019-10-09T21:39:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540212468",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Be reminded that there has been an IRC discussion about this topic: http://www.erisian.com.au/bitcoin-core-dev/log-2019-04-11.html#l-392\r\nThere was no strong support for rust, but I'd like to reiterate on a few worries that have been brought up:\r\n\r\nOn concern was that it might be a blocker for compiling Bitcoin Core on exotic systems, but that seems to be addressed by only using it for additional (optional) features.\r\n\r\nAnother concern was that most Bitcoin Core developers and reviewers don't have any background in rust, so rust code might be of lower quality. However, this is a chicken-and-egg problem and can be solved by adding rust in small steps.\r\n\r\nFinally, a concern was that we aren't running into many bugs that rust could prevent. Rust can prevent memory and race issues, but not logic errors. While I initially agreed with this point, I concluded that switching to rust will help us with memory issues (at least for the code written in rust). Just to dig up some examples from master, that would have been impossible in rust: #6636, #16796, #13351. Happy to dig out more, but I think they are good illustrations. On top of that, I (and other people, such as a resident in the recent Chaincode Summer residency) am running into segfaults and other memory issues on a regular basis. Those runtime errors require a lot of developer attention (running in gdb, valgrind, sanitizers). Rust makes them impossible and might thus speed up the workflow.",
      "created_at" : "2019-10-09T21:50:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540217000",
      "id" : 540217000,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDIxNzAwMA==",
      "updated_at" : "2019-10-09T21:50:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540217000",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, I'll note that previous discussions had a little less clear projects that might *use* rust in Core. The specific work in #16834 and #16762 is pretty different in nature.\r\n\r\nI agree with most of your concerns, but, indeed, as you point out, the specific proposals sidestep them (at least in the immediate future) somewhat. The advantage I like for Rust in this vein is that review is a little bit easier by offloading some classes of issues onto the compiler, hopefully allowing us to move a bit faster, which is uniquely important for censorship-resistance and -detection block/header fetching (as more is better, and critical).",
      "created_at" : "2019-10-09T23:36:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540250362",
      "id" : 540250362,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDI1MDM2Mg==",
      "updated_at" : "2019-10-09T23:36:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540250362",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "FWIW I'm all for using Rust for non-required, non-critical functionality in Bitcoin Core. I think it's way too early to **require** it for build.\r\n\r\n> Another concern was that most Bitcoin Core developers and reviewers don't have any background in rust\r\n\r\nGiven what I've heard a lot of bitcoin developers have side-projects in rust. But as for a personal anecdote, I prefer reviewing rust code over C++. I've been very much disillusioned with C++ over the last years, especially the eternal issues around what is Undefined Behavior and what is not (just grep for commits and PRs by @practicalswift to find tons of them).\r\n\r\n> Finally, a concern was that we aren't running into many bugs that rust could prevent. \r\n\r\nAlso because we very much tiptoe around things that might cause those kind of bugs. We've been extremely careful around introducing concurrency, for example, or refactoring it to be finer-grained (e.g. @TheBlueMatt's PRs are just so scary to review), because it's so hard to get correct in C++. And even then, there have been a few nasty race conditions. Rust could allow us to be bolder around those things, resulting in more performant code in the end.\r\n",
      "created_at" : "2019-10-10T09:36:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540486563",
      "id" : 540486563,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDQ4NjU2Mw==",
      "updated_at" : "2019-10-10T09:37:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540486563",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n\r\n> Finally, a concern was that we aren't running into many bugs that rust could prevent. Rust can prevent memory and race issues, but not logic errors.\r\n\r\nFWIW, a small scale bug shootout:\r\n* [Issues found in the Rust Miniscript implementation](https://github.com/apoelstra/rust-miniscript/issues?utf8=%E2%9C%93&q=is%3Aissue+author%3Apracticalswift+)\r\n* [Issues found in the C++ Miniscript implementation](https://github.com/sipa/miniscript/issues?utf8=%E2%9C%93&q=is%3Aissue+author%3Apracticalswift+)\r\n\r\nBoth implementations written by extremely skilled and security conscious developers :)\r\n\r\n@laanwj \r\n\r\n> I've been very much disillusioned with C++ over the last years, especially the eternal issues around what is Undefined Behavior and what is not (just grep for commits and PRs by @practicalswift to find tons of them).\r\n\r\nThree points:\r\n\r\n1. The UB situation in C++ is a problematic, but with some help from the sanitizers (which we are finally using!) it is not too hard to avoid relying on UB in modern C++ code. FWIW, poorly written unsafe Rust code will have UB too :)\r\n2. Usually it is pretty clear if something is UB or not. Any discussion is typically around the priority of fixing, and/or if relying on the specific UB is \"safe in practice\" (in other words: what is the likelihood of a future compiler optimisation pass exploiting this specific UB?).\r\n3. As always when discussing defects: don't shoot the messenger :)\r\n\r\nFWIW I don't think UB is a big problem in our code base as of today. I think our lack of continuous large-scale fuzzing is a bigger problem - something which I plan to address :)",
      "created_at" : "2019-10-10T11:06:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540519594",
      "id" : 540519594,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDUxOTU5NA==",
      "updated_at" : "2019-10-10T11:16:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540519594",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
