[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "A number of comments:\r\n * Obviously my favorite path to rust in core right now is the \"make it easy to add new modules to download blocks/headers for anti-censorship\", which #16834 and #16762 obviously are first steps/demos of. I think its nice cause it is completely optional, both at build-time, and in the sense that we can have threads that are doing that crash (without bringing down the rest of Core due to panic catches) without it making the rest of Core broken.\r\n * I think we should air towards \"minimum version of the language we can get by with\" until we have a reason not to, and we can discuss it more then. Largely, I think #16834 is ready-to-go enough (mod review) that we can pretty much move forward with it without committing to a lot of these decisions today.\r\n * WRT cargo-vs-rustc: I don't see a lot of reason to use cargo. The major benefit it provides is downloading arbitrary code from github, building it, and linking it into your program. Obviously this isn't helpful for us, and we'll almost certainly subtree any dependencies we take, and I went and tested linking dependencies that are subtree'd without cargo and its just a few more flags to rustc.",
      "created_at" : "2019-10-09T21:39:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540212468",
      "id" : 540212468,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDIxMjQ2OA==",
      "updated_at" : "2019-10-09T21:39:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540212468",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Be reminded that there has been an IRC discussion about this topic: http://www.erisian.com.au/bitcoin-core-dev/log-2019-04-11.html#l-392\r\nThere was no strong support for rust, but I'd like to reiterate on a few worries that have been brought up:\r\n\r\nOn concern was that it might be a blocker for compiling Bitcoin Core on exotic systems, but that seems to be addressed by only using it for additional (optional) features.\r\n\r\nAnother concern was that most Bitcoin Core developers and reviewers don't have any background in rust, so rust code might be of lower quality. However, this is a chicken-and-egg problem and can be solved by adding rust in small steps.\r\n\r\nFinally, a concern was that we aren't running into many bugs that rust could prevent. Rust can prevent memory and race issues, but not logic errors. While I initially agreed with this point, I concluded that switching to rust will help us with memory issues (at least for the code written in rust). Just to dig up some examples from master, that would have been impossible in rust: #6636, #16796, #13351. Happy to dig out more, but I think they are good illustrations. On top of that, I (and other people, such as a resident in the recent Chaincode Summer residency) am running into segfaults and other memory issues on a regular basis. Those runtime errors require a lot of developer attention (running in gdb, valgrind, sanitizers). Rust makes them impossible and might thus speed up the workflow.",
      "created_at" : "2019-10-09T21:50:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540217000",
      "id" : 540217000,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDIxNzAwMA==",
      "updated_at" : "2019-10-09T21:50:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540217000",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, I'll note that previous discussions had a little less clear projects that might *use* rust in Core. The specific work in #16834 and #16762 is pretty different in nature.\r\n\r\nI agree with most of your concerns, but, indeed, as you point out, the specific proposals sidestep them (at least in the immediate future) somewhat. The advantage I like for Rust in this vein is that review is a little bit easier by offloading some classes of issues onto the compiler, hopefully allowing us to move a bit faster, which is uniquely important for censorship-resistance and -detection block/header fetching (as more is better, and critical).",
      "created_at" : "2019-10-09T23:36:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540250362",
      "id" : 540250362,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDI1MDM2Mg==",
      "updated_at" : "2019-10-09T23:36:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540250362",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "FWIW I'm all for using Rust for non-required, non-critical functionality in Bitcoin Core. I think it's way too early to **require** it for build.\r\n\r\n> Another concern was that most Bitcoin Core developers and reviewers don't have any background in rust\r\n\r\nGiven what I've heard a lot of bitcoin developers have side-projects in rust. But as for a personal anecdote, I prefer reviewing rust code over C++. I've been very much disillusioned with C++ over the last years, especially the eternal issues around what is Undefined Behavior and what is not (just grep for commits and PRs by @practicalswift to find tons of them).\r\n\r\n> Finally, a concern was that we aren't running into many bugs that rust could prevent. \r\n\r\nAlso because we very much tiptoe around things that might cause those kind of bugs. We've been extremely careful around introducing concurrency, for example, or refactoring it to be finer-grained (e.g. @TheBlueMatt's PRs are just so scary to review), because it's so hard to get correct in C++. And even then, there have been a few nasty race conditions. Rust could allow us to be bolder around those things, resulting in more performant code in the end.\r\n",
      "created_at" : "2019-10-10T09:36:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540486563",
      "id" : 540486563,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDQ4NjU2Mw==",
      "updated_at" : "2019-10-10T09:37:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540486563",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n\r\n> Finally, a concern was that we aren't running into many bugs that rust could prevent. Rust can prevent memory and race issues, but not logic errors.\r\n\r\nFWIW, a small scale bug shootout:\r\n* [Issues found in the Rust Miniscript implementation](https://github.com/apoelstra/rust-miniscript/issues?utf8=%E2%9C%93&q=is%3Aissue+author%3Apracticalswift+)\r\n* [Issues found in the C++ Miniscript implementation](https://github.com/sipa/miniscript/issues?utf8=%E2%9C%93&q=is%3Aissue+author%3Apracticalswift+)\r\n\r\nBoth implementations written by extremely skilled and security conscious developers :)\r\n\r\n@laanwj \r\n\r\n> I've been very much disillusioned with C++ over the last years, especially the eternal issues around what is Undefined Behavior and what is not (just grep for commits and PRs by @practicalswift to find tons of them).\r\n\r\nThree points:\r\n\r\n1. The UB situation in C++ is a problematic, but with some help from the sanitizers (which we are finally using!) it is not too hard to avoid relying on UB in modern C++ code. FWIW, poorly written unsafe Rust code will have UB too :)\r\n2. Usually it is pretty clear if something is UB or not. Any discussion is typically around the priority of fixing, and/or if relying on the specific UB is \"safe in practice\" (in other words: what is the likelihood of a future compiler optimisation pass exploiting this specific UB?).\r\n3. As always when discussing defects: don't shoot the messenger :)\r\n\r\nFWIW I don't think UB is a big problem in our code base as of today. I think our lack of continuous large-scale fuzz testing is a larger problem - something which I plan to address :)",
      "created_at" : "2019-10-10T11:06:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540519594",
      "id" : 540519594,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDUxOTU5NA==",
      "updated_at" : "2019-10-10T15:43:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540519594",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree with most of what was said here with a few exceptions:\r\n\r\n1. Even though I don't know of any security critical bug bitcoin had that was memory related I think in the long term rust can help a lot with both review time and implementation time. \r\nBecause right now when someone opens a PR with a function that for example accepts a raw pointer part of the review is to look everywhere that function is used and make sure there's no way to  get to a dangling pointer or to accidentally dereference a null pointer. \r\nAll of these problems are no-ops in safe rust. so even if currently the bitcoin review process is good at eliminating most of these problems Rust can help save review time.\r\n\r\n2. Personally and I'll guess for other non C++ experts, writing C++ sometimes feel scary because you're not 100% there's no UB in your code and there's not some edge case with memory issue, this problem is mitigated with sanitizers, valgrind and good review process. but it's better to *know* your code does what you think it does. (again this is only about memory un-clearity not logic)\r\n\r\nNow about rust itself:\r\n\r\n1. I think that if we plan to make this experimental and optional for a while i'll go for the latest rust compiler available right now. because when and if it will ever be an inherit part of bitcoin `mrustc` will probably support newer versions(already at the verge of 1.29 support[1] ) and maybe even a gcc frontend will arise by then[2]\r\n\r\n2. I do understand the idea of not requiring any version newer than what is shipped with latest distros, but I think that any safety feature we'll miss because of \"supporting the oldest compiler possible\" will make us miss the entire point of using rust.\r\n\r\n3. I see no point in using Edition 2015, as Edition 2018 was stabilized in Rust 1.31. That said this is only an esthetic change, so I don't have strong feelings about it.\r\n\r\n4. Cargo vs. rustc. I think that as long as we can get away with using rustc directly it's fine, but I don't think this will work for the long term. \r\n\r\n5. Combining point 4 and 1, I think that when we will want cargo and when we will have dependencies then we will want a feature like `cargo vendor` which was added to cargo in 1.37 so that's another reason for using an up to date rust version. on top of that the mentioned security advisory(I found btw) is an example on why it's problematic to use old versions of fast evolving tools. I hope the rust and cargo team will learn from that experience for future features but I would argue that we should try and use an up to date rust version.\r\n\r\nQuick simple example of dependencies we will want to use if we continue to integrate rust is `cbindgen` and `rust-bindgen` as FFI calling is a very easy way to introduce UB that no compiler will warn about (if the rust and C declarations won't match correctly).\r\n\r\nP.S. If people want I can try and give a list of examples of features we might need that aren't available in old rustc versions. and that's without talking about changes to the borrow checker that makes writing rust code way easier.\r\n\r\n[1]  https://github.com/thepowersgang/mrustc/issues/95#issuecomment-538747289\r\n[2] https://users.rust-lang.org/t/call-for-help-implementing-an-independent-rust-frontend-for-gcc/32163",
      "created_at" : "2019-10-10T12:20:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540546035",
      "id" : 540546035,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDU0NjAzNQ==",
      "updated_at" : "2019-10-10T12:21:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540546035",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I do understand the idea of not requiring any version newer than what is shipped with latest distros, but I think that any safety feature we'll miss because of \"supporting the oldest compiler possible\" will make us miss the entire point of using rust.\r\n\r\nAnother point to consider here is whether we want to ship it with the official binaries (either gitian running on Bionic or guix). If we don't ship it and it is disabled by default when compiling from source, you could argue that no one is using it, nor testing it. So we might save us from the hassle by not adding it in the first place?",
      "created_at" : "2019-10-10T15:03:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540630161",
      "id" : 540630161,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDYzMDE2MQ==",
      "updated_at" : "2019-10-10T15:03:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540630161",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke what about other optional compilations? (i.e. upnp) are they shipped in binaries?\r\n\r\nFYI currently this is what bionic has in the repos: https://packages.ubuntu.com/bionic/rustc. 1.36 is pretty up to date. and it seems like most distros are maximum 1-3 versions behind (the speculation for why are they so up to date is because they need to compile firefox heh)",
      "created_at" : "2019-10-10T15:20:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540637714",
      "id" : 540637714,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDYzNzcxNA==",
      "updated_at" : "2019-10-10T15:23:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540637714",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, my preference would be off-by-default-and-in-release-binaries in 0.20, but hopefully (pending guix work and mrustc-in-guix) we can change both of those in 0.21. Note that just because we support older compilers doesn't mean we build by default with older compilers in guix/release binaries.",
      "created_at" : "2019-10-10T18:39:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540718123",
      "id" : 540718123,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDcxODEyMw==",
      "updated_at" : "2019-10-10T18:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540718123",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> FWIW, poorly written unsafe Rust code will have UB too\r\n\r\nYes, I don't think anyone doubts that. The point is that if you write rust code without unsafe, you can rely that it won't have certain issues (excepting bugs in rust's compiler and runtime itself). The parts that are unsafe (if needed at all) automatically draw attention.\r\n\r\n> I think our lack of continuous large-scale fuzz testing is a larger problem - something which I plan to address \r\n\r\nFuzz testing is good in any language, be it C++, C, Rust, Python â¦ using a different language doesn't change anything in the need for testing.\r\n\r\n> Another point to consider here is whether we want to ship it with the official binaries\r\n\r\nThat *should* be the goal.\r\n\r\n",
      "created_at" : "2019-10-10T18:46:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540721557",
      "id" : 540721557,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDcyMTU1Nw==",
      "updated_at" : "2019-10-10T18:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540721557",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Another point is I dont *think* we need to fully decide this now. While I'm really skeptical of requiring rustc newer than 1.34 (Debian buster/stable for the next many years), we can start with that and revisit the question as we have newer, larger features that may want more features.\r\n\r\nAs for cbindgen/rust-bindgen, I'm really dubious of the value of using them at build-time, but a really cool project may be running them on travis as a linter to check that the checked-in bindings are \"correct\".",
      "created_at" : "2019-10-10T18:46:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540721709",
      "id" : 540721709,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDcyMTcwOQ==",
      "updated_at" : "2019-10-10T18:46:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540721709",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "## An Ode To Simplicity\r\n\r\nRather infamously, in a recent talk, a developer related the story of a manager who chose to reward programmers based on LOC committed.  One engineer responded by making an extra effort to go through the company's codebase and delete code, ensuring they would rank at the very bottom of the chart, with _negative_ LOC each month.\r\n\r\nFrom the standpoint of must-be-secure high quality code, less is more.   Less code probablistically produces fewer bugs, fewer LOC to review and analyze, and is easier to prove secure.\r\n\r\nThis was the origin of the `--disable-wallet` compile time flag.  This permits eliding GUI and wallet code, focusing on the network-security-sensitive kernel as the minimized runtime attack surface for validating nodes.\r\n\r\nIntegrating two languages tends to go in the opposite direction from complexity reduction.  FFI and unsafe rust and hidden sand traps galore.  It takes another 10 years to move the C++/Rust boundary to 75+% rust.\r\n\r\nTrying to take a step back and think holistically,\r\n\r\n1. There is a numerically large userbase for \"the kernel\" - the network validating engine - and numerically small userbase for the GUI and wallet.\r\n2. The kernel should be in a repo by itself, without a kitchen sink of other code such as wallet or GUI.  Those accessories can live in git repos that use the kernel repo as a submodule.  This creates incentives for the kernel repo (and issues and workflow) become more simple, less complex over time.\r\n3. Build a separate, safe Rust validating engine.  Run in parallel with C++ to observe A/B differences in field operation.\r\n4. Migrate wallet/GUI to use REST/zmq/etc. interfaces.\r\n5. At this point, switch to Rust engine can safely be done.\r\n\r\nEnd result in medium term is a less complex core.\r\nEnd result in longer term is less complex core... in Rust.\r\n",
      "created_at" : "2019-10-10T18:53:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540725720",
      "id" : 540725720,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDcyNTcyMA==",
      "updated_at" : "2019-10-10T18:53:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540725720",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jgarzik It looks like you missed all the current context and didn't really add much with your comment. Please go read #16834 first. Specifically, *no one* is proposing, nor even really considering doing any kind of validation in Rust, nor migrating existing code towards it.",
      "created_at" : "2019-10-10T18:59:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540728683",
      "id" : 540728683,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDcyODY4Mw==",
      "updated_at" : "2019-10-10T19:00:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540728683",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Context was not missed.   Re-read assuming this context is known, looking at another 10 years of development, and the author is observing that this is a choice point in development, where the ship could be steered towards reduced or greater complexity.",
      "created_at" : "2019-10-10T19:29:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540744525",
      "id" : 540744525,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDc0NDUyNQ==",
      "updated_at" : "2019-10-10T19:29:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540744525",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This was discussed extensively at the meeting, conclusions as I understand them are as follows:\r\n * Target Rust 1.34.2 for now. If we end up needing something more, we can revisit then, but as an initial target it should do (probably implies we need to test it in Travis in #16834).\r\n * No direct conclusion on rustc-vs-cargo, but for now I don't see any strong disagreement to move forward with rustc and be willing to revisit in the future.\r\n * Be willing to ship on-in-release-binaries immediately in 0.20, using gitian/Canonical's rustc as it doesn't (massively) change our trust model within Gitian of trusting the Canonical toolchain, instead of gating on the ongoing Guix work. Note that this (obviously) will result in release builds using a newer rustc than our \"minimum supported\".\r\n * No significant objection to moving forward here!",
      "created_at" : "2019-10-10T19:51:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540756099",
      "id" : 540756099,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDc1NjA5OQ==",
      "updated_at" : "2019-10-10T19:53:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540756099",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> As for cbindgen/rust-bindgen, I'm really dubious of the value of using them at build-time, but a really cool project may be running them on travis as a linter to check that the checked-in bindings are \"correct\".\r\n\r\nThis is a good point in particular -- I agree that cbindgen outputs should be committed. Prefer linting to happen during the regular local build/testing though rather than just in Travis, and think that we should have tooling which makes it simple to emit bindings to be committed to keep development flow simple. We should also be careful to not allow bindings which *aren't* generatable from CBindgen, so even if we aren't relying on it for build we can be sure it's in line with what could be machine generated.",
      "created_at" : "2019-10-10T20:22:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540772627",
      "id" : 540772627,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDc3MjYyNw==",
      "updated_at" : "2019-10-10T20:22:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540772627",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "oh I 100% agree that if and when we'll use cbindgen/rust-bindgen the output should be committed to track changes. we could also run them as commands manually(or as part of some special make flag) every release. \r\ndon't need to have it in a build.rs(or it can be an optional feature in the build.rs)",
      "created_at" : "2019-10-10T20:27:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-540775488",
      "id" : 540775488,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDc3NTQ4OA==",
      "updated_at" : "2019-10-10T20:28:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540775488",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Saw this: https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-547641746\r\nSo something to note, is that rust requires floating points to be IEEE-754.\r\n(though it does support platforms without floats at all using llvm's `soft-float`)\r\nhttps://doc.rust-lang.org/reference/types/numeric.html#floating-point-types",
      "created_at" : "2019-11-04T14:53:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-549390195",
      "id" : 549390195,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTM5MDE5NQ==",
      "updated_at" : "2019-11-04T14:53:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549390195",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Is it possible to see the meeting notes relating to why Rust 1.34.2 was chosen?",
      "created_at" : "2019-11-26T08:38:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-558522563",
      "id" : 558522563,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1ODUyMjU2Mw==",
      "updated_at" : "2019-11-26T08:38:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558522563",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/49907582?v=4",
         "events_url" : "https://api.github.com/users/mimirmim/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mimirmim/followers",
         "following_url" : "https://api.github.com/users/mimirmim/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mimirmim/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mimirmim",
         "id" : 49907582,
         "login" : "mimirmim",
         "node_id" : "MDQ6VXNlcjQ5OTA3NTgy",
         "organizations_url" : "https://api.github.com/users/mimirmim/orgs",
         "received_events_url" : "https://api.github.com/users/mimirmim/received_events",
         "repos_url" : "https://api.github.com/users/mimirmim/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mimirmim/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mimirmim/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mimirmim"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@mimirmim It was in the meeting of 10-10-2019, so search for \"rust\" here: http://www.erisian.com.au/bitcoin-core-dev/log-2019-10-10.html",
      "created_at" : "2019-11-26T08:50:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-558527033",
      "id" : 558527033,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1ODUyNzAzMw==",
      "updated_at" : "2019-11-26T08:50:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558527033",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I made a branch where I replaced `GetRandBytes` and `GetStrongRandBytes` with Rust's [rand library](https://docs.rs/crate/rand/0.7.2), using its `thread_rng` CSPRNG. This would optionally replace Bitcoin Core's current custom RNG implementation with the goal of simplifying the overall randomness pipeline. The thread safety is handled by rand so no extra mutexes are required along with the initialisation of an RNG per thread and its seeding using OS randomness. This branch builds off [Cory's PR](https://github.com/bitcoin/bitcoin/pull/15798) because it requires Cargo to download and build the rand dependency. If there's interest in this concept of RNG in Rust I'll send up the branch as a PR. \r\n\r\nThe branch:\r\nhttps://github.com/metalicjames/bitcoin/tree/rust_csprng\r\nThe diff:\r\nhttps://github.com/bitcoin/bitcoin/compare/master...metalicjames:rust_csprng?expand=1\r\nThe rand lib from Rust:\r\nhttps://github.com/rust-random/rand",
      "created_at" : "2019-12-12T20:06:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-565164749",
      "id" : 565164749,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NTE2NDc0OQ==",
      "updated_at" : "2019-12-12T20:06:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565164749",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4153717?v=4",
         "events_url" : "https://api.github.com/users/metalicjames/events{/privacy}",
         "followers_url" : "https://api.github.com/users/metalicjames/followers",
         "following_url" : "https://api.github.com/users/metalicjames/following{/other_user}",
         "gists_url" : "https://api.github.com/users/metalicjames/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/metalicjames",
         "id" : 4153717,
         "login" : "metalicjames",
         "node_id" : "MDQ6VXNlcjQxNTM3MTc=",
         "organizations_url" : "https://api.github.com/users/metalicjames/orgs",
         "received_events_url" : "https://api.github.com/users/metalicjames/received_events",
         "repos_url" : "https://api.github.com/users/metalicjames/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/metalicjames/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/metalicjames/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/metalicjames"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think having randomness be dependency free in Bitcoin has been a long-term goal recently acheived, so replacing it with an external lib would mark a regression in that regard.",
      "created_at" : "2019-12-12T20:37:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-565176564",
      "id" : 565176564,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NTE3NjU2NA==",
      "updated_at" : "2019-12-12T20:37:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565176564",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems convincing that Rust could bring significant benefits to Core in future and it is certainly an idea worth pursuing. Introducing Rust to Core is an investment though in that young ecosystem.\r\n\r\n@TheBlueMatt is engaging with the Rust community which is great and we certainly need people like Matt to do this to ensure Rust continues to be attractive to Core. Concerns that he highlights [here](https://np.reddit.com/r/rust/comments/do6a5v/warning_floods_make_rust_impossible_to_use/f5kernl/) don't impact the Core PRs.\r\n\r\nLonger term, there could be a Rust-like language created in future that capitalizes on some of Rustâs strengths but doesnât make mistakes with regards to design and community decision pitfalls that every language is in danger of making. \r\n\r\nIn that case would we be happy having C++, Rust and this future language in Core? Would we look into replacing Rust code with this new language? As we go further down this road do we become more and more tied to Rust at this early stage in its life cycle? Should Core be a (relatively) early adopter of new languages?\r\n\r\n> it's a fair assumption to say that Rust code will eventually end up in Bitcoin Core as the result of adding a new dependency\r\n\r\nIâm not convinced this is inevitable. Using this inevitability as an argument to introduce Rust into Core seems like a flimsy argument to me. If we really wanted to we could avoid Rust dependencies.\r\n",
      "created_at" : "2020-01-27T17:38:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-578864790",
      "id" : 578864790,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODg2NDc5MA==",
      "updated_at" : "2020-01-27T17:38:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578864790",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I guess it won't happen in 0.20.0.\r\nWhere do we stand on this?",
      "created_at" : "2020-03-04T15:10:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-594586834",
      "id" : 594586834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NDU4NjgzNA==",
      "updated_at" : "2020-03-04T15:10:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594586834",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Are you a Concept NACK on Rust ad infinitum @luke-jr? Would you like to see more maturity or are you dead set against ever introducing Rust code? I know you aren't the only one with misgivings but you most recently NACKed this (now closed) Rust PR https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-575867541\r\n\r\nI'm guessing the PRs @TheBlueMatt recently closed weren't attracting review due to the Concept NACKs rather than \"lack of interest\". Many seem interested.",
      "created_at" : "2020-03-06T00:49:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-595519900",
      "id" : 595519900,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTUxOTkwMA==",
      "updated_at" : "2020-03-06T01:05:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595519900",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "At the very least, I'd like to see Rust easily bootstrappable without trusting third party binaries. Right now, you have to compile a sequence of like a dozen different versions, and it only works on x86 (step 1 is a poorly written Rust compiler in C).\r\n\r\nIdeally, it would be nice to wait for Rust to have a sane ABI situation, so libraries can be installed like normal software and dynamically linked.",
      "created_at" : "2020-03-06T01:57:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17090#issuecomment-595558484",
      "id" : 595558484,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17090",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTU1ODQ4NA==",
      "updated_at" : "2020-03-06T01:57:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595558484",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   }
]
