[
   {
      "author_association" : "MEMBER",
      "body" : "<details><summary>Resulting diff for fa97fbe4236fa0b744ba7f184443de09f04eeed7</summary>\r\n\r\n```diff\r\ndiff --git a/abandontransaction b/abandontransaction\r\nindex a430cb4..37fe303 100644\r\n--- a/abandontransaction\r\n+++ b/abandontransaction\r\n@@ -9,8 +9,6 @@ It has no effect on transactions which are already abandoned.\r\n Arguments:\r\n 1. \"txid\"    (string, required) The transaction id\r\n \r\n-Result:\r\n-\r\n Examples:\r\n > bitcoin-cli abandontransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\r\n > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"abandontransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\ndiff --git a/getblock b/getblock\r\nindex 8828efe..7bab963 100644\r\n--- a/getblock\r\n+++ b/getblock\r\n@@ -8,6 +8,8 @@ Arguments:\r\n 1. \"blockhash\"    (string, required) The block hash\r\n 2. verbosity      (numeric, optional, default=1) 0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\r\n \r\n+Result:\r\n+\r\n Result (for verbosity = 0):\r\n \"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\r\n \r\ndiff --git a/getblockheader b/getblockheader\r\nindex 28cd5d5..b1926ab 100644\r\n--- a/getblockheader\r\n+++ b/getblockheader\r\n@@ -7,7 +7,9 @@ Arguments:\r\n 1. \"blockhash\"    (string, required) The block hash\r\n 2. verbose        (boolean, optional, default=true) true for a json object, false for the hex-encoded data\r\n \r\n-Result (for verbose = true):\r\n+Result:\r\n+\r\n+Result (for verbose=true):\r\n {\r\n   \"hash\" : \"hash\",     (string) the block hash (same as provided)\r\n   \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\r\ndiff --git a/getmemoryinfo b/getmemoryinfo\r\nindex 699fc88..c946151 100644\r\n--- a/getmemoryinfo\r\n+++ b/getmemoryinfo\r\n@@ -6,6 +6,8 @@ Arguments:\r\n              - \"stats\" returns general statistics about memory usage in the daemon.\r\n              - \"mallocinfo\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\r\n \r\n+Result:\r\n+\r\n Result (mode \"stats\"):\r\n {\r\n   \"locked\": {               (json object) Information about locked memory manager\r\ndiff --git a/getmempoolancestors b/getmempoolancestors\r\nindex adeef71..51de234 100644\r\n--- a/getmempoolancestors\r\n+++ b/getmempoolancestors\r\n@@ -6,6 +6,8 @@ Arguments:\r\n 1. \"txid\"     (string, required) The transaction id (must be in mempool)\r\n 2. verbose    (boolean, optional, default=false) True for a json object, false for array of transaction ids\r\n \r\n+Result:\r\n+\r\n Result (for verbose = false):\r\n [                       (json array of strings)\r\n   \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction\r\ndiff --git a/getmempooldescendants b/getmempooldescendants\r\nindex 3f9b75a..2cc5ea5 100644\r\n--- a/getmempooldescendants\r\n+++ b/getmempooldescendants\r\n@@ -6,6 +6,8 @@ Arguments:\r\n 1. \"txid\"     (string, required) The transaction id (must be in mempool)\r\n 2. verbose    (boolean, optional, default=false) True for a json object, false for array of transaction ids\r\n \r\n+Result:\r\n+\r\n Result (for verbose = false):\r\n [                       (json array of strings)\r\n   \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction\r\ndiff --git a/getrawmempool b/getrawmempool\r\nindex e995089..0567bea 100644\r\n--- a/getrawmempool\r\n+++ b/getrawmempool\r\n@@ -7,6 +7,8 @@ Hint: use getmempoolentry to fetch a specific transaction from the mempool.\r\n Arguments:\r\n 1. verbose    (boolean, optional, default=false) True for a json object, false for array of transaction ids\r\n \r\n+Result:\r\n+\r\n Result: (for verbose = false):\r\n [                     (json array of string)\r\n   \"transactionid\"     (string) The transaction id\r\ndiff --git a/getrawtransaction b/getrawtransaction\r\nindex 65101a7..a8a6335 100644\r\n--- a/getrawtransaction\r\n+++ b/getrawtransaction\r\n@@ -17,6 +17,8 @@ Arguments:\r\n 2. verbose        (boolean, optional, default=false) If false, return a string, otherwise return a json object\r\n 3. \"blockhash\"    (string, optional, default=null) The block in which to look for the transaction\r\n \r\n+Result:\r\n+\r\n Result (if verbose is not set or set to false):\r\n \"data\"      (string) The serialized, hex-encoded data for 'txid'\r\n \r\ndiff --git a/importaddress b/importaddress\r\nindex b8d8b60..34ff382 100644\r\n--- a/importaddress\r\n+++ b/importaddress\r\n@@ -2,12 +2,6 @@ importaddress \"address\" ( \"label\" rescan p2sh )\r\n \r\n Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\r\n \r\n-Arguments:\r\n-1. \"address\"    (string, required) The Bitcoin address (or hex-encoded script)\r\n-2. \"label\"      (string, optional, default=\"\") An optional label\r\n-3. rescan       (boolean, optional, default=true) Rescan the wallet for transactions\r\n-4. p2sh         (boolean, optional, default=false) Add the P2SH version of the script as well\r\n-\r\n Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\r\n may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\r\n If you have the full public key, you should call importpubkey instead of this.\r\n@@ -15,6 +9,12 @@ If you have the full public key, you should call importpubkey instead of this.\r\n Note: If you import a non-standard raw script in hex form, outputs sending to it will be treated\r\n as change, and not show up in many RPCs.\r\n \r\n+Arguments:\r\n+1. \"address\"    (string, required) The Bitcoin address (or hex-encoded script)\r\n+2. \"label\"      (string, optional, default=\"\") An optional label\r\n+3. rescan       (boolean, optional, default=true) Rescan the wallet for transactions\r\n+4. p2sh         (boolean, optional, default=false) Add the P2SH version of the script as well\r\n+\r\n Examples:\r\n \r\n Import an address with rescan\r\ndiff --git a/importmulti b/importmulti\r\nindex af71774..2adf2b0 100644\r\n--- a/importmulti\r\n+++ b/importmulti\r\n@@ -2,6 +2,9 @@ importmulti \"requests\" ( \"options\" )\r\n \r\n Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.\r\n \r\n+Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\r\n+may report that the imported keys, addresses or scripts exists but related transactions are still missing.\r\n+\r\n Arguments:\r\n 1. requests                                                         (json array, required) Data to be imported\r\n      [\r\n@@ -34,9 +37,6 @@ Arguments:\r\n        \"rescan\": bool,                                              (boolean, optional, default=true) Stating if should rescan the blockchain after all imports\r\n      }\r\n \r\n-Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\r\n-may report that the imported keys, addresses or scripts exists but related transactions are still missing.\r\n-\r\n Examples:\r\n > bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }, { \"scriptPubKey\": { \"address\": \"<my 2nd address>\" }, \"label\": \"example 2\", \"timestamp\": 1455191480 }]'\r\n > bitcoin-cli importmulti '[{ \"scriptPubKey\": { \"address\": \"<my address>\" }, \"timestamp\":1455191478 }]' '{ \"rescan\": false}'\r\ndiff --git a/importprivkey b/importprivkey\r\nindex c4242fd..12a4fa8 100644\r\n--- a/importprivkey\r\n+++ b/importprivkey\r\n@@ -3,14 +3,14 @@ importprivkey \"privkey\" ( \"label\" rescan )\r\n Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\r\n Hint: use importmulti to import more than one private key.\r\n \r\n+Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\r\n+may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\r\n+\r\n Arguments:\r\n 1. \"privkey\"    (string, required) The private key (see dumpprivkey)\r\n 2. \"label\"      (string, optional, default=current label if address exists, otherwise \"\") An optional label\r\n 3. rescan       (boolean, optional, default=true) Rescan the wallet for transactions\r\n \r\n-Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\r\n-may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\r\n-\r\n Examples:\r\n \r\n Dump a private key\r\ndiff --git a/importpubkey b/importpubkey\r\nindex 501625d..34e4cc4 100644\r\n--- a/importpubkey\r\n+++ b/importpubkey\r\n@@ -2,14 +2,14 @@ importpubkey \"pubkey\" ( \"label\" rescan )\r\n \r\n Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\r\n \r\n+Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\r\n+may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\r\n+\r\n Arguments:\r\n 1. \"pubkey\"    (string, required) The hex-encoded public key\r\n 2. \"label\"     (string, optional, default=\"\") An optional label\r\n 3. rescan      (boolean, optional, default=true) Rescan the wallet for transactions\r\n \r\n-Note: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\r\n-may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\r\n-\r\n Examples:\r\n \r\n Import a public key with rescan\r\ndiff --git a/invalidateblock b/invalidateblock\r\nindex 49c1967..691a405 100644\r\n--- a/invalidateblock\r\n+++ b/invalidateblock\r\n@@ -5,8 +5,6 @@ Permanently marks a block as invalid, as if it violated a consensus rule.\r\n Arguments:\r\n 1. \"blockhash\"    (string, required) the hash of the block to mark as invalid\r\n \r\n-Result:\r\n-\r\n Examples:\r\n > bitcoin-cli invalidateblock \"blockhash\"\r\n > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"invalidateblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\ndiff --git a/listunspent b/listunspent\r\nindex b068fc6..3c743b2 100644\r\n--- a/listunspent\r\n+++ b/listunspent\r\n@@ -22,7 +22,7 @@ Arguments:\r\n        \"minimumSumAmount\": amount,    (numeric or string, optional, default=unlimited) Minimum sum value of all UTXOs in BTC\r\n      }\r\n \r\n-Result\r\n+Result:\r\n [                   (array of json object)\r\n   {\r\n     \"txid\" : \"txid\",          (string) the transaction id \r\ndiff --git a/listwalletdir b/listwalletdir\r\nindex 54ea06a..9a3c26e 100644\r\n--- a/listwalletdir\r\n+++ b/listwalletdir\r\n@@ -1,5 +1,7 @@\r\n listwalletdir\r\n Returns a list of wallets in the wallet directory.\r\n+\r\n+Result:\r\n {\r\n   \"wallets\" : [                (json array of objects)\r\n     {\r\ndiff --git a/preciousblock b/preciousblock\r\nindex d13e404..7fd57fd 100644\r\n--- a/preciousblock\r\n+++ b/preciousblock\r\n@@ -9,8 +9,6 @@ The effects of preciousblock are not retained across restarts.\r\n Arguments:\r\n 1. \"blockhash\"    (string, required) the hash of the block to mark as precious\r\n \r\n-Result:\r\n-\r\n Examples:\r\n > bitcoin-cli preciousblock \"blockhash\"\r\n > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"preciousblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\ndiff --git a/reconsiderblock b/reconsiderblock\r\nindex 6b4f174..5d37217 100644\r\n--- a/reconsiderblock\r\n+++ b/reconsiderblock\r\n@@ -6,8 +6,6 @@ This can be used to undo the effects of invalidateblock.\r\n Arguments:\r\n 1. \"blockhash\"    (string, required) the hash of the block to reconsider\r\n \r\n-Result:\r\n-\r\n Examples:\r\n > bitcoin-cli reconsiderblock \"blockhash\"\r\n > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"reconsiderblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\ndiff --git a/resendwallettransactions b/resendwallettransactions\r\nindex d349b7e..865257b 100644\r\n--- a/resendwallettransactions\r\n+++ b/resendwallettransactions\r\n@@ -2,5 +2,7 @@ resendwallettransactions\r\n Immediately re-broadcast unconfirmed wallet transactions to all peers.\r\n Intended only for testing; the wallet code periodically re-broadcasts\r\n automatically.\r\n+\r\n+Result:\r\n Returns an RPC error if -walletbroadcast is set to false.\r\n Returns array of transaction ids that were re-broadcast.\r\ndiff --git a/settxfee b/settxfee\r\nindex 579448a..bb72205 100644\r\n--- a/settxfee\r\n+++ b/settxfee\r\n@@ -5,7 +5,7 @@ Set the transaction fee per kB for this wallet. Overrides the global -paytxfee c\r\n Arguments:\r\n 1. amount    (numeric or string, required) The transaction fee in BTC/kB\r\n \r\n-Result\r\n+Result:\r\n true|false        (boolean) Returns true if successful\r\n \r\n Examples:\r\ndiff --git a/submitblock b/submitblock\r\nindex 5ee31ec..aaf54ef 100644\r\n--- a/submitblock\r\n+++ b/submitblock\r\n@@ -7,8 +7,6 @@ Arguments:\r\n 1. \"hexdata\"    (string, required) the hex-encoded block data to submit\r\n 2. \"dummy\"      (string, optional, default=ignored) dummy value, for compatibility with BIP22. This value is ignored.\r\n \r\n-Result:\r\n-\r\n Examples:\r\n > bitcoin-cli submitblock \"mydata\"\r\n > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\ndiff --git a/walletpassphrase b/walletpassphrase\r\nindex 0c623f2..8155ed5 100644\r\n--- a/walletpassphrase\r\n+++ b/walletpassphrase\r\n@@ -3,14 +3,14 @@ walletpassphrase \"passphrase\" timeout\r\n Stores the wallet decryption key in memory for 'timeout' seconds.\r\n This is needed prior to performing transactions related to private keys such as sending bitcoins\r\n \r\n-Arguments:\r\n-1. \"passphrase\"    (string, required) The wallet passphrase\r\n-2. timeout         (numeric, required) The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\r\n-\r\n Note:\r\n Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\r\n time that overrides the old one.\r\n \r\n+Arguments:\r\n+1. \"passphrase\"    (string, required) The wallet passphrase\r\n+2. timeout         (numeric, required) The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\r\n+\r\n Examples:\r\n \r\n Unlock the wallet for 60 seconds\r\n```\r\n</details>",
      "created_at" : "2018-12-17T21:48:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14987#issuecomment-448011112",
      "id" : 448011112,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14987",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODAxMTExMg==",
      "updated_at" : "2018-12-17T21:48:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448011112",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
