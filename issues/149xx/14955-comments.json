[
   {
      "author_association" : "MEMBER",
      "body" : "Compile failure on macOS (10.14.2):\r\n```\r\n./autogen.sh\r\n./configure\r\nmake check\r\n\r\n  CXX      libbitcoin_util_a-logging.o\r\n  CXX      libbitcoin_util_a-random.o\r\nrandom.cpp:394:41: error: expected ';' after top level declarator\r\nstatic unsigned char rng_state[32] = {0} GUARDED_BY(cs_rng_state);\r\n                                        ^\r\n                                        ;\r\nrandom.cpp:394:42: warning: declaration does not declare anything [-Wmissing-declarations]\r\nstatic unsigned char rng_state[32] = {0} GUARDED_BY(cs_rng_state);\r\n                                         ^\r\n./threadsafety.h:18:23: note: expanded from macro 'GUARDED_BY'\r\n#define GUARDED_BY(x) __attribute__((guarded_by(x)))\r\n                      ^\r\nrandom.cpp:395:32: error: expected ';' after top level declarator\r\nstatic uint64_t rng_counter = 0 GUARDED_BY(cs_rng_state);\r\n                               ^\r\n                               ;\r\nrandom.cpp:395:33: warning: declaration does not declare anything [-Wmissing-declarations]\r\nstatic uint64_t rng_counter = 0 GUARDED_BY(cs_rng_state);\r\n                                ^\r\n./threadsafety.h:18:23: note: expanded from macro 'GUARDED_BY'\r\n#define GUARDED_BY(x) __attribute__((guarded_by(x)))\r\n                      ^\r\n2 warnings and 2 errors generated.\r\nmake[2]: *** [libbitcoin_util_a-random.o] Error 1\r\nmake[1]: *** [check-recursive] Error 1\r\nmake: *** [check-recursive] Error 1\r\n```",
      "created_at" : "2018-12-14T04:33:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447210304",
      "id" : 447210304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzIxMDMwNA==",
      "updated_at" : "2018-12-14T04:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447210304",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Might be desirable to stick the openssl stuff behind a define already,  I expect we'll be able to ship 0.18 without linking bitcoind to openssl. ",
      "created_at" : "2018-12-14T06:04:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447223906",
      "id" : 447223906,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzIyMzkwNg==",
      "updated_at" : "2018-12-14T06:04:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447223906",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fanquake Hopefully fixed.\n\n@gmaxwell There are probably a few entropy sources we want to add first, I think.",
      "created_at" : "2018-12-14T07:08:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447235764",
      "id" : 447235764,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzIzNTc2NA==",
      "updated_at" : "2018-12-14T07:08:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447235764",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa I am eager to add entropy sources!  (but I meant behind a ifdef that is currently on... just since I think you're touching the only remaining callsites)",
      "created_at" : "2018-12-14T07:44:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447242460",
      "id" : 447242460,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzI0MjQ2MA==",
      "updated_at" : "2018-12-14T07:44:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447242460",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#13746](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13746.html) (-masterdatadir for datadir bootstrapping by kallewoof)\n* [#13339](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13339.html) (wallet: Replace %w by wallet name in -walletnotify script by promag)\n* [#11082](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/11082.html) (Add new bitcoin_rw.conf file that is used for settings modified by this software itself by luke-jr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-12-14T08:39:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447254979",
      "id" : 447254979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzI1NDk3OQ==",
      "updated_at" : "2018-12-14T08:39:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447254979",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745482"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745482"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Surround `RandAddSeedPerfmon(CSHA512& hasher)` with `#ifdef WIN32`?",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T12:54:51Z",
      "diff_hunk" : "@@ -129,18 +135,41 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();\n+        hasher.Write((const unsigned char*)&perf, sizeof(perf));\n+    } while (GetTimeMicros() < start + microseconds);\n+    // Write resulting strengthened hash into output hasher\n+    local_hasher.Finalize(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // Best effort clean up\n+    memory_cleanse(buffer, sizeof(buffer));\n+    local_hasher.Reset();\n }\n \n-static void RandAddSeedPerfmon()\n+static void RandAddSeedPerfmon(CSHA512& hasher)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745482",
      "id" : 241745482,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NTQ4Mg==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 84,
      "path" : "src/random.cpp",
      "position" : 94,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745482",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745648"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745648"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`#ifdef WIN32` for this call?",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T12:55:30Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745648",
      "id" : 241745648,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NTY0OA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 195,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745648",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745852"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Make sure definition and declaration parameter names match.",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T12:56:23Z",
      "diff_hunk" : "@@ -345,12 +440,26 @@ void GetStrongRandBytes(unsigned char* out, int num)\n         hasher.Finalize(buf);\n         memcpy(rng_state, buf + 32, 32);\n     }\n+    if (num > 0) {\n+        memcpy(out, buf, num);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting state (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        CSHA512().Write(buf, sizeof(buf)).Finalize(buf);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_add(buf, sizeof(buf), 64);\n+    }\n+\n+    // Best effort clean up of randomness data on the stack.\n+    memory_cleanse(buf, sizeof(buf));\n+    hasher.Reset();\n }\n \n+void GetRandBytes(unsigned char* out, int num) { ProcRand(out, num, RNGLevel::FAST); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745852",
      "id" : 241745852,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NTg1Mg==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 305,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745852",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746192"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746192"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Change to `return stop != start;`?",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T12:57:53Z",
      "diff_hunk" : "@@ -448,10 +557,6 @@ bool Random_SanityCheck()\n     uint64_t stop = GetPerformanceCounter();\n     if (stop == start) return false;\n \n-    // We called GetPerformanceCounter. Use it as entropy.\n-    RAND_add((const unsigned char*)&start, sizeof(start), 1);\n-    RAND_add((const unsigned char*)&stop, sizeof(stop), 1);\n-\n     return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746192",
      "id" : 241746192,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NjE5Mg==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 320,
      "path" : "src/random.cpp",
      "position" : 429,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746192",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746569"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~~`ProcRand(Ã¢ÂÂ¦)` doesn't throw Ã¢ÂÂ candidate for `noexcept`?~~",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T12:59:24Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746569",
      "id" : 241746569,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NjU2OQ==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 238,
      "path" : "src/random.cpp",
      "position" : 323,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:56:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746569",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746664"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be \"meaningfully\" :-)",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T12:59:45Z",
      "diff_hunk" : "@@ -13,33 +13,45 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n-\n /**\n- * Functions to gather random data via the OpenSSL PRNG\n+ * Generate random data via the internal PRNG.\n+ *\n+ * These functions are designed to be fast (sub microsecond), but do not necessarily\n+ * meaninfully add entropy to the PRNG state.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746664",
      "id" : 241746664,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NjY2NA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 12,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746664",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241752164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241752164"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Very minor nit: Likely a matter of taste, but personally I try to avoid parameter reassignment. Would it be possible to avoid parameter reassignment and make the parameter `level` const? Feel free to ignore this suggestion.",
      "commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "created_at" : "2018-12-14T13:21:35Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n {\n     assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    std::call_once(g_rng_initialized, [&](){\n+        // The first invocation of the RNG always gathers all we have.\n+        level = RNGLevel::STARTUP;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241752164",
      "id" : 241752164,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc1MjE2NA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 250,
      "path" : "src/random.cpp",
      "position" : 250,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-14T13:22:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241752164",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858285"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No need for. Perhaps we'll extend the function to do something useful on other platforms too.",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T19:05:48Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858285",
      "id" : 241858285,
      "in_reply_to_id" : 241745648,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTg1ODI4NQ==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 195,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185243981,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858285",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd rather not. Limiting the ifdefs to just one place is preferable imo.",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T19:06:25Z",
      "diff_hunk" : "@@ -129,18 +135,41 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();\n+        hasher.Write((const unsigned char*)&perf, sizeof(perf));\n+    } while (GetTimeMicros() < start + microseconds);\n+    // Write resulting strengthened hash into output hasher\n+    local_hasher.Finalize(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // Best effort clean up\n+    memory_cleanse(buffer, sizeof(buffer));\n+    local_hasher.Reset();\n }\n \n-static void RandAddSeedPerfmon()\n+static void RandAddSeedPerfmon(CSHA512& hasher)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858449",
      "id" : 241858449,
      "in_reply_to_id" : 241745482,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTg1ODQ0OQ==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 84,
      "path" : "src/random.cpp",
      "position" : 94,
      "pull_request_review_id" : 185244208,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858449",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858504"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858504"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not touching this code.",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T19:06:35Z",
      "diff_hunk" : "@@ -448,10 +557,6 @@ bool Random_SanityCheck()\n     uint64_t stop = GetPerformanceCounter();\n     if (stop == start) return false;\n \n-    // We called GetPerformanceCounter. Use it as entropy.\n-    RAND_add((const unsigned char*)&start, sizeof(start), 1);\n-    RAND_add((const unsigned char*)&stop, sizeof(stop), 1);\n-\n     return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858504",
      "id" : 241858504,
      "in_reply_to_id" : 241746192,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTg1ODUwNA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 320,
      "path" : "src/random.cpp",
      "position" : 429,
      "pull_request_review_id" : 185244261,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858504",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241901024"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241901024"
         }
      },
      "author_association" : "MEMBER",
      "body" : "SeedTimestamp() ? ",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T21:49:14Z",
      "diff_hunk" : "@@ -135,6 +135,39 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n+{\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241901024",
      "id" : 241901024,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMTAyNA==",
      "original_commit_id" : "0af8348738c447f008c60bc1374221acfdc135d9",
      "original_position" : 25,
      "path" : "src/random.cpp",
      "position" : 81,
      "pull_request_review_id" : 185297862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241901024",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902056"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902056"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe not because I think you should change the strengthening function (just the local_hasher) to 4-wide sha256d64 in order to increase the \"work\" done per unit time, and seed timestamp takes a hasher. We'll do a lot more work with sha-ni/aes and that sha256d64-4-way is probably the most optimized work function in the codebase.",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T21:54:00Z",
      "diff_hunk" : "@@ -135,6 +135,39 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n+{\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902056",
      "id" : 241902056,
      "in_reply_to_id" : 241901024,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMjA1Ng==",
      "original_commit_id" : "0af8348738c447f008c60bc1374221acfdc135d9",
      "original_position" : 25,
      "path" : "src/random.cpp",
      "position" : 81,
      "pull_request_review_id" : 185299264,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902056",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902258"
         }
      },
      "author_association" : "MEMBER",
      "body" : "SeedTimestamp()",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T21:54:53Z",
      "diff_hunk" : "@@ -272,71 +268,116 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedFast(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-void RandAddSeedSleep()\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedMedium(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Sleep for 1ms\n+    MilliSleep(1);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n-    {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n-    }\n-    memory_cleanse(buf, 64);\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902258",
      "id" : 241902258,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMjI1OA==",
      "original_commit_id" : "ff85bace119469709c8c5446abed231cb883b1ee",
      "original_position" : 159,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185299504,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902258",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241903570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241903570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd kinda feel better about this if it just directly took the cs_rng_state lock and read the state here instead of calling GetRandBytes... at least then the code won't mysteriously crash if someone upgrades GetRandBytes to use ::Slow.",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-14T22:00:40Z",
      "diff_hunk" : "@@ -326,6 +359,19 @@ static void SeedSlow(CSHA512& hasher)\n \n     // Windows performance monitor data (once every 10 minutes)\n     RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241903570",
      "id" : 241903570,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMzU3MA==",
      "original_commit_id" : "0af8348738c447f008c60bc1374221acfdc135d9",
      "original_position" : 51,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185301179,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241903570",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242359341"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242359341"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It does throw when threads get interrupted apparently (as it has a sleep inside).",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-17T23:42:50Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242359341",
      "id" : 242359341,
      "in_reply_to_id" : 241746569,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM1OTM0MQ==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 238,
      "path" : "src/random.cpp",
      "position" : 323,
      "pull_request_review_id" : 185850825,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242359341",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380140"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380140"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-18T01:33:20Z",
      "diff_hunk" : "@@ -345,12 +440,26 @@ void GetStrongRandBytes(unsigned char* out, int num)\n         hasher.Finalize(buf);\n         memcpy(rng_state, buf + 32, 32);\n     }\n+    if (num > 0) {\n+        memcpy(out, buf, num);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting state (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        CSHA512().Write(buf, sizeof(buf)).Finalize(buf);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_add(buf, sizeof(buf), 64);\n+    }\n+\n+    // Best effort clean up of randomness data on the stack.\n+    memory_cleanse(buf, sizeof(buf));\n+    hasher.Reset();\n }\n \n+void GetRandBytes(unsigned char* out, int num) { ProcRand(out, num, RNGLevel::FAST); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380140",
      "id" : 242380140,
      "in_reply_to_id" : 241745852,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDE0MA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 305,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185874949,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380140",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380430"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-18T01:34:56Z",
      "diff_hunk" : "@@ -13,33 +13,45 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n-\n /**\n- * Functions to gather random data via the OpenSSL PRNG\n+ * Generate random data via the internal PRNG.\n+ *\n+ * These functions are designed to be fast (sub microsecond), but do not necessarily\n+ * meaninfully add entropy to the PRNG state.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380430",
      "id" : 242380430,
      "in_reply_to_id" : 241746664,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDQzMA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 12,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 185875241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380430",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380554"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380554"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done (using `SeedTimestamp()`).\r\n\r\nLeaving this for now; switching to SHA256-based code requires some refactoring to make sure there are no initialization order issues.",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-18T01:35:36Z",
      "diff_hunk" : "@@ -135,6 +135,39 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n+{\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380554",
      "id" : 242380554,
      "in_reply_to_id" : 241901024,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDU1NA==",
      "original_commit_id" : "0af8348738c447f008c60bc1374221acfdc135d9",
      "original_position" : 25,
      "path" : "src/random.cpp",
      "position" : 81,
      "pull_request_review_id" : 185875374,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380554",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380709"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've abstracted the update-the-global-RNG-and-extract-entropy into a separate function, which is invoked from both this seeder and RandProc.",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-18T01:36:36Z",
      "diff_hunk" : "@@ -326,6 +359,19 @@ static void SeedSlow(CSHA512& hasher)\n \n     // Windows performance monitor data (once every 10 minutes)\n     RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380709",
      "id" : 242380709,
      "in_reply_to_id" : 241903570,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDcwOQ==",
      "original_commit_id" : "0af8348738c447f008c60bc1374221acfdc135d9",
      "original_position" : 51,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185875546,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:52:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380709",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Made a number of improvements, and split the history out into hopefully more self-contained commits.",
      "created_at" : "2018-12-18T01:37:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448064015",
      "id" : 448064015,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODA2NDAxNQ==",
      "updated_at" : "2018-12-18T01:37:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448064015",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--a722867cd34abeea1fadc8d60700f111-->\nGitian builds for commit 34241716852df6ea6a3543822f3bf6f886519d4b (master):\n * `d1d6d23548eb61c343c2327a13e220d2...` [bitcoin-0.17.99-aarch64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-aarch64-linux-gnu-debug.tar.gz)\n * `1ff47959686607769af07f3db44d4826...` [bitcoin-0.17.99-aarch64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-aarch64-linux-gnu.tar.gz)\n * `f5edbe704127456eb3c0325d4a06a167...` [bitcoin-0.17.99-arm-linux-gnueabihf-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-arm-linux-gnueabihf-debug.tar.gz)\n * `90ebeb5cf50d26216e000693545d08c5...` [bitcoin-0.17.99-arm-linux-gnueabihf.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-arm-linux-gnueabihf.tar.gz)\n * `d398c7f0022bc5a0cc77ee18353364c8...` [bitcoin-0.17.99-i686-pc-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-i686-pc-linux-gnu-debug.tar.gz)\n * `6c17259e4b089adee70817f75b93a25f...` [bitcoin-0.17.99-i686-pc-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-i686-pc-linux-gnu.tar.gz)\n * `7ead03541f6a39516f8ccfc92468a873...` [bitcoin-0.17.99-osx-unsigned.dmg](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-osx-unsigned.dmg)\n * `9f92a70d5325fcbcaf6f5b89c967a871...` [bitcoin-0.17.99-osx64.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-osx64.tar.gz)\n * `b83818f4a0eae8a52a4a6c90a50b0522...` [bitcoin-0.17.99-riscv64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-riscv64-linux-gnu-debug.tar.gz)\n * `4d9ba5a0ddbc542a0c014df7974317b7...` [bitcoin-0.17.99-riscv64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-riscv64-linux-gnu.tar.gz)\n * `f96490fc154fcfac5edbec4345215278...` [bitcoin-0.17.99-win32-debug.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win32-debug.zip)\n * `ddaeb9dcdb5b18cd031790075164ef90...` [bitcoin-0.17.99-win32-setup-unsigned.exe](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win32-setup-unsigned.exe)\n * `ccab3fd95296f0a8181527569749db45...` [bitcoin-0.17.99-win32.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win32.zip)\n * `fd31be63f83d415b887fa23a133211f4...` [bitcoin-0.17.99-win64-debug.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win64-debug.zip)\n * `6a460a1104b66f6c5a5538e31c1a4772...` [bitcoin-0.17.99-win64-setup-unsigned.exe](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win64-setup-unsigned.exe)\n * `8ac173e1ea072a1ba53dab78f250d635...` [bitcoin-0.17.99-win64.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win64.zip)\n * `7bc54935f97fef0e32a270601489c8ab...` [bitcoin-0.17.99-x86_64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-x86_64-linux-gnu-debug.tar.gz)\n * `188e9d0da723b197e750405d19d3aa56...` [bitcoin-0.17.99-x86_64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-x86_64-linux-gnu.tar.gz)\n * `30f9503807bbb65444bf41fab7068b09...` [bitcoin-0.17.99.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99.tar.gz)\n * `869626c7bc517dac45ea54c8a81f35b3...` [bitcoin-linux-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-linux-0.18-res.yml)\n * `fddea2850131ffd01c98ee7731551e86...` [bitcoin-linux-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-linux-build.log)\n * `87eb2ef96ca4754766415f5370ecb011...` [bitcoin-osx-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-osx-0.18-res.yml)\n * `ef6db9d4b908a1b0f3c964710e9c7693...` [bitcoin-osx-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-osx-build.log)\n * `2c7f99cc67f7d8710283781eb21a488c...` [bitcoin-win-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-win-0.18-res.yml)\n * `adacb1e895d4a599bf4043304b978e04...` [bitcoin-win-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-win-build.log)\n\n\nGitian builds for commit b4623b144416b203986ff7c281ee61c1779ad04f (master and this pull):\n * `6ccd7b98fe66b027b939d9359563d2e0...` [bitcoin-0.17.99-aarch64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-aarch64-linux-gnu-debug.tar.gz)\n * `a6e812ef056ab5335294459d138e1f40...` [bitcoin-0.17.99-aarch64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-aarch64-linux-gnu.tar.gz)\n * `f0b9b990f89f93517b5454423e01f162...` [bitcoin-0.17.99-arm-linux-gnueabihf-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-arm-linux-gnueabihf-debug.tar.gz)\n * `7254cb014475451abc287a85dd1a2de7...` [bitcoin-0.17.99-arm-linux-gnueabihf.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-arm-linux-gnueabihf.tar.gz)\n * `c206c505f2685a84658313c146f81a4d...` [bitcoin-0.17.99-i686-pc-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-i686-pc-linux-gnu-debug.tar.gz)\n * `0dc20d0287693d14ec08b185ab6b85ba...` [bitcoin-0.17.99-i686-pc-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-i686-pc-linux-gnu.tar.gz)\n * `7c4fde51672c75594dc1a60bb936d715...` [bitcoin-0.17.99-osx-unsigned.dmg](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-osx-unsigned.dmg)\n * `3d988fc91920c1c7e21b0f63d25d5aa9...` [bitcoin-0.17.99-osx64.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-osx64.tar.gz)\n * `c2c495125af5923d7041e23ac66f62cb...` [bitcoin-0.17.99-riscv64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-riscv64-linux-gnu-debug.tar.gz)\n * `2f47fc257f002227f37e421ee11f949d...` [bitcoin-0.17.99-riscv64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-riscv64-linux-gnu.tar.gz)\n * `773f11e751c7993dbaf4ee975eb8b488...` [bitcoin-0.17.99-win32-debug.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win32-debug.zip)\n * `76a9c63a7fe910fe987db7204e2f580d...` [bitcoin-0.17.99-win32-setup-unsigned.exe](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win32-setup-unsigned.exe)\n * `59dc0b853ded5d941133ebd81064577b...` [bitcoin-0.17.99-win32.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win32.zip)\n * `4ef203564655ac32e6ceaa1330836add...` [bitcoin-0.17.99-win64-debug.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win64-debug.zip)\n * `fb5cc02a3acd461f0d70d60f68e125d1...` [bitcoin-0.17.99-win64-setup-unsigned.exe](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win64-setup-unsigned.exe)\n * `2da8035f8edb35f74e0a835bf2ff53d7...` [bitcoin-0.17.99-win64.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win64.zip)\n * `4aa54966acd18b4e10944366eeb2d26a...` [bitcoin-0.17.99-x86_64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-x86_64-linux-gnu-debug.tar.gz)\n * `952dec188584778cacfe090690d5e100...` [bitcoin-0.17.99-x86_64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-x86_64-linux-gnu.tar.gz)\n * `e41212816682771d626c141663ab5a14...` [bitcoin-0.17.99.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99.tar.gz)\n * `03f6e57f26e7c9436ff7d766cf9135fb...` [bitcoin-linux-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-linux-0.18-res.yml)\n * `e689478f6948c5a2a392f4253196bde8...` [bitcoin-linux-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-linux-build.log)\n * `426c77e9796b572ce7656a5170f05616...` [bitcoin-osx-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-osx-0.18-res.yml)\n * `e10732c31b72bd254873771c602f86b7...` [bitcoin-osx-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-osx-build.log)\n * `756adfefdcbc4cee06c4c0e9a6556448...` [bitcoin-win-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-win-0.18-res.yml)\n * `4bf284b53b707d6100c8a4378376705c...` [bitcoin-win-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-win-build.log)\n",
      "created_at" : "2018-12-18T10:01:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448164706",
      "id" : 448164706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODE2NDcwNg==",
      "updated_at" : "2018-12-18T10:01:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448164706",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "In constructor of CTxMemPool require to call random functions, but the constructor of the mutex has not being called yet. (Maybe it is an undefined behavior or it's a bug of VC++)\r\nhttps://github.com/bitcoin/bitcoin/blob/e7b88ecbc920321290941bc68e4a71634889c3cb/src/validation.cpp#L244\r\n```\r\n \ttest_bitcoin.exe!SeedStartup(CSHA512 & hasher={...}) Ã§Â¬Â¬ 417 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!ProcRand(unsigned char * out=0x00000031da8febb8, int num=8, RNGLevel level=STARTUP) Ã§Â¬Â¬ 462 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!GetRandBytes(unsigned char * buf=0x00000031da8febb8, int num=8) Ã§Â¬Â¬ 476 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!GetRand(unsigned __int64 nMax=18446744073709551615) Ã§Â¬Â¬ 491 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!SaltedTxidHasher::SaltedTxidHasher() Ã§Â¬Â¬ 1093 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>() Ã§Â¬Â¬ 485 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::multi_index::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >() Ã§Â¬Â¬ 177 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!CTxMemPool::CTxMemPool(CBlockPolicyEstimator * estimator=0x00007ff65afbfe60) Ã§Â¬Â¬ 328 Ã¨Â¡Â\tC++\r\n>\ttest_bitcoin.exe!`dynamic initializer for 'mempool''() Ã§Â¬Â¬ 244 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!_initterm(void(*)() * first=0x00007ff65a49c000, void(*)() * last=0x00007ff65a49f848) Ã§Â¬Â¬ 22 Ã¨Â¡Â\tC++\r\n \t[Ã¥Â¤ÂÃ©ÂÂ¨Ã§Â¨ÂÃ¥Â¼ÂÃ§Â¢Â¼]\t\r\n",
      "created_at" : "2018-12-18T12:43:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448208214",
      "id" : 448208214,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODIwODIxNA==",
      "updated_at" : "2018-12-18T12:46:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448208214",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ken2812221 That was helpful, thanks! I think I've fixed it, but the same error still appears. Can you check what line number it's on now?",
      "created_at" : "2018-12-19T06:04:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448479910",
      "id" : 448479910,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODQ3OTkxMA==",
      "updated_at" : "2018-12-19T06:04:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448479910",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\n \ttest_bitcoin.exe!std::_Load_relaxed_4(volatile unsigned long * _Tgt=0x0000000000000074) Ã§Â¬Â¬ 1338 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!std::_Atomic_load_4(volatile unsigned long * _Tgt=0x0000000000000074, std::memory_order _Order=memory_order_relaxed) Ã§Â¬Â¬ 1357 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!std::atomic_load_explicit(const std::_Atomic_uint * _Atom=0x0000000000000074, std::memory_order _Order=memory_order_relaxed) Ã§Â¬Â¬ 495 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!std::_Atomic_uint::load(std::memory_order _Order=memory_order_relaxed) Ã§Â¬Â¬ 630 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!BCLog::Logger::WillLogCategory(BCLog::LogFlags category=RAND) Ã§Â¬Â¬ 83 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!LogAcceptCategory(BCLog::LogFlags category=RAND) Ã§Â¬Â¬ 117 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!LogPrint<char [15],char [19],unsigned long>(const BCLog::LogFlags & category=RAND, const char[15] & <args_0>=..., const char[19] & <args_1>=..., const unsigned long & <args_2>=707688) Ã§Â¬Â¬ 150 Ã¨Â¡Â\tC++\r\n>\ttest_bitcoin.exe!RandAddSeedPerfmon(CSHA512 & hasher={...}) Ã§Â¬Â¬ 199 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!SeedStartup(CSHA512 & hasher={...}, `anonymous-namespace'::RNGState & rng={...}) Ã§Â¬Â¬ 456 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!ProcRand(unsigned char * out=0x0000009f8cd8eb78, int num=8, RNGLevel level=FAST) Ã§Â¬Â¬ 493 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!GetRandBytes(unsigned char * buf=0x0000009f8cd8eb78, int num=8) Ã§Â¬Â¬ 508 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!GetRand(unsigned __int64 nMax=18446744073709551615) Ã§Â¬Â¬ 523 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!SaltedTxidHasher::SaltedTxidHasher() Ã§Â¬Â¬ 1093 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>() Ã§Â¬Â¬ 485 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::multi_index::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >() Ã§Â¬Â¬ 177 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!CTxMemPool::CTxMemPool(CBlockPolicyEstimator * estimator=0x00007ff689f81fb0) Ã§Â¬Â¬ 328 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!`dynamic initializer for 'mempool''() Ã§Â¬Â¬ 244 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!_initterm(void(*)() * first=0x00007ff68945e000, void(*)() * last=0x00007ff689461830) Ã§Â¬Â¬ 22 Ã¨Â¡Â\tC++\r\n \t[Ã¥Â¤ÂÃ©ÂÂ¨Ã§Â¨ÂÃ¥Â¼ÂÃ§Â¢Â¼]\t\r\n```\r\ng_logger has not been newed.\r\nhttps://github.com/bitcoin/bitcoin/blob/f080c65a09a8f3b223c9b5d8e3562320bf258fcd/src/logging.cpp#L24",
      "created_at" : "2018-12-19T09:21:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448525945",
      "id" : 448525945,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODUyNTk0NQ==",
      "updated_at" : "2018-12-19T09:21:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448525945",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ken2812221 Thanks so much; this was an actual bug.",
      "created_at" : "2018-12-19T09:51:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448535124",
      "id" : 448535124,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODUzNTEyNA==",
      "updated_at" : "2018-12-19T09:51:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448535124",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242853403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242853403"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Uh, ok. Thanks!",
      "commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "created_at" : "2018-12-19T09:56:19Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242853403",
      "id" : 242853403,
      "in_reply_to_id" : 241746569,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mjg1MzQwMw==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 238,
      "path" : "src/random.cpp",
      "position" : 323,
      "pull_request_review_id" : 186464421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-19T09:56:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242853403",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Tnx",
      "created_at" : "2018-12-19T12:40:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448582072",
      "id" : 448582072,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODU4MjA3Mg==",
      "updated_at" : "2018-12-19T12:40:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448582072",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/45523639?v=4",
         "events_url" : "https://api.github.com/users/jesskie/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jesskie/followers",
         "following_url" : "https://api.github.com/users/jesskie/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jesskie/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jesskie",
         "id" : 45523639,
         "login" : "jesskie",
         "node_id" : "MDQ6VXNlcjQ1NTIzNjM5",
         "organizations_url" : "https://api.github.com/users/jesskie/orgs",
         "received_events_url" : "https://api.github.com/users/jesskie/received_events",
         "repos_url" : "https://api.github.com/users/jesskie/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jesskie/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jesskie/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jesskie"
      }
   }
]
