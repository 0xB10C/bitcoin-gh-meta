[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26705](https://github.com/bitcoin/bitcoin/pull/26705) (clang-tidy: Check headers and fixes them by hebasto)\n* [#26312](https://github.com/bitcoin/bitcoin/pull/26312) (Remove Sock::Get() and Sock::Sock() by vasild)\n* [#25572](https://github.com/bitcoin/bitcoin/pull/25572) (refactor: Introduce EvictionManager and use it for the inbound eviction logic by dergoegge)\n* [#25325](https://github.com/bitcoin/bitcoin/pull/25325) (Add pool based memory resource by martinus)\n* [#25152](https://github.com/bitcoin/bitcoin/pull/25152) (refactor: Split util/system into exception, shell, and fs-specific files by Empact)\n* [#21878](https://github.com/bitcoin/bitcoin/pull/21878) (Make all networking code mockable by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-01-04T14:39:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1371011959",
      "id" : 1371011959,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26812",
      "node_id" : "IC_kwDOABII585Rt_t3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1371011959/reactions"
      },
      "updated_at" : "2023-01-12T02:04:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1371011959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061551756"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061551756"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is inspired by https://github.com/bitcoin/bitcoin/pull/25515",
      "commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "created_at" : "2023-01-04T14:41:02Z",
      "diff_hunk" : "@@ -0,0 +1,183 @@\n+// Copyright (c) 2022-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_processing.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <test/util/logging.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+#include <version.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chrono>\n+#include <string>\n+#include <unordered_map>\n+\n+BOOST_FIXTURE_TEST_SUITE(netmsg_tests, NetTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(initial_messages_exchange)\n+{\n+    std::unordered_map<std::string, size_t> count_sent_messages;\n+    auto pipes = m_sockets_pipes.PopFront();\n+\n+    // Wait for all messages due to the initial handshake to be Send() to the socket.\n+    // The FEEFILTER is the last one, so quit when we get that.\n+    for (;;) {\n+        auto msg = pipes->send.GetNetMsg();\n+        if (msg.has_value()) {\n+            count_sent_messages[msg->m_type]++;\n+            if (msg->m_type == NetMsgType::FEEFILTER) {\n+                break;\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::PING], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::FEEFILTER], 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addr)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<CAddress> addresses{5};\n+\n+    DebugLogHelper debug_log{strprintf(\"Received addr: %u addresses\", addresses.size())};\n+    pipes->recv.PushNetMsg(NetMsgType::ADDRV2, addresses);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getblocks)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<uint256> hashes{5};\n+    CBlockLocator block_locator{std::move(hashes)};\n+    uint256 hash_stop;\n+\n+    DebugLogHelper debug_log{\"getblocks -1 to end\"};\n+    pipes->recv.PushNetMsg(NetMsgType::GETBLOCKS, block_locator, hash_stop);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061551756",
      "id" : 1061551756,
      "line" : 74,
      "node_id" : "PRRC_kwDOABII584_Rf6M",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/test/netmsg_tests.cpp",
      "position" : 74,
      "pull_request_review_id" : 1235986976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061551756/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-04T14:46:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061551756",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061557476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061557476"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is duplicated from `src/test/fuzz/process_message.cpp`. It should be deduplicated by putting it in a common header file, but I wonder if the new tests in `fuzz/netmsg.cpp` make the tests from `fuzz/process_message.cpp` and `fuzz/process_messages.cpp` obsolete and whether the latter should be removed. @MarcoFalke, as the author of `process_message[s]`, what do you think?",
      "commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "created_at" : "2023-01-04T14:46:19Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061557476",
      "id" : 1061557476,
      "line" : 43,
      "node_id" : "PRRC_kwDOABII584_RhTk",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 43,
      "original_position" : 43,
      "original_start_line" : 28,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 43,
      "pull_request_review_id" : 1235986976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061557476/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 28,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-04T14:46:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061557476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061884646"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061884646"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Key difference in #25515 is that it is testing net processing in isolation (at least isolated from CConnman), which imo is something we definitely should be doing. We already have e2e tests i.e. the functional tests, so I don't see the benefit to your approach here (besides the c++ tests being faster than the python ones).",
      "commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "created_at" : "2023-01-04T21:08:42Z",
      "diff_hunk" : "@@ -0,0 +1,183 @@\n+// Copyright (c) 2022-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_processing.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <test/util/logging.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+#include <version.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chrono>\n+#include <string>\n+#include <unordered_map>\n+\n+BOOST_FIXTURE_TEST_SUITE(netmsg_tests, NetTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(initial_messages_exchange)\n+{\n+    std::unordered_map<std::string, size_t> count_sent_messages;\n+    auto pipes = m_sockets_pipes.PopFront();\n+\n+    // Wait for all messages due to the initial handshake to be Send() to the socket.\n+    // The FEEFILTER is the last one, so quit when we get that.\n+    for (;;) {\n+        auto msg = pipes->send.GetNetMsg();\n+        if (msg.has_value()) {\n+            count_sent_messages[msg->m_type]++;\n+            if (msg->m_type == NetMsgType::FEEFILTER) {\n+                break;\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::PING], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::FEEFILTER], 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addr)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<CAddress> addresses{5};\n+\n+    DebugLogHelper debug_log{strprintf(\"Received addr: %u addresses\", addresses.size())};\n+    pipes->recv.PushNetMsg(NetMsgType::ADDRV2, addresses);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getblocks)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<uint256> hashes{5};\n+    CBlockLocator block_locator{std::move(hashes)};\n+    uint256 hash_stop;\n+\n+    DebugLogHelper debug_log{\"getblocks -1 to end\"};\n+    pipes->recv.PushNetMsg(NetMsgType::GETBLOCKS, block_locator, hash_stop);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061884646",
      "id" : 1061884646,
      "in_reply_to_id" : 1061551756,
      "line" : 74,
      "node_id" : "PRRC_kwDOABII584_SxLm",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/test/netmsg_tests.cpp",
      "position" : 74,
      "pull_request_review_id" : 1236481487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061884646/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-04T22:09:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061884646",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061894472"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061894472"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This target is averaging 2 execs/s on my machine. A good target should average a 1000 execs/s (https://github.com/google/fuzzing/blob/master/docs/good-fuzz-target.md#speed).\r\n\r\nI don't quite see the upside of this target over the `process_message(s)` targets. It might be able to find additional bugs if run with ThreadSanitizer but the current performance is gonna stop it from doing so effectively.\r\n\r\nFuzzing is particularly effective when the targets are kept narrow. For example: fuzzing net, net processing, validation or any of their sub components (e.g. TxRequestTracker or AddrMan) in isolation makes sense but all of it together will be inefficient.",
      "commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "created_at" : "2023-01-04T21:24:39Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061894472",
      "id" : 1061894472,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII584_SzlI",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 57,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 57,
      "pull_request_review_id" : 1236481487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061894472/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-04T22:09:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061894472",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061896055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061896055"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I suspect this is the main reason for the poor performance, but the additional threading also doesn't help.",
      "commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "created_at" : "2023-01-04T21:27:00Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061896055",
      "id" : 1061896055,
      "line" : 101,
      "node_id" : "PRRC_kwDOABII584_Sz93",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 101,
      "original_position" : 101,
      "original_start_line" : null,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 101,
      "pull_request_review_id" : 1236481487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061896055/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-04T22:09:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061896055",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061896936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061896936"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this is missing a call to `SyncWithValidationInterfaceQueue` here.",
      "commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "created_at" : "2023-01-04T21:28:10Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1061896936",
      "id" : 1061896936,
      "line" : 102,
      "node_id" : "PRRC_kwDOABII584_S0Lo",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 102,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 102,
      "pull_request_review_id" : 1236481487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061896936/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-04T22:09:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1061896936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`9b7e9dad27...daee83c1c5`: optimize the fuzz test a bit",
      "created_at" : "2023-01-12T14:07:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#issuecomment-1380407070",
      "id" : 1380407070,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26812",
      "node_id" : "IC_kwDOABII585SR1ce",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1380407070/reactions"
      },
      "updated_at" : "2023-01-12T14:07:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1380407070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068176623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068176623"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, both testing in isolation and e2e is good to have. The difference between the tests included in this PR and the functional tests is that when the test code runs inside the same process:\r\n\r\n* it has greater control and observability - the test can read any global or member variable and can call arbitrary functions \r\n* it can do fuzzing\r\n\r\nI think all those tests are complementary, not mutually exclusive.",
      "commit_id" : "32ab679f54a4f36cc315d0bd36638b7942f752f6",
      "created_at" : "2023-01-12T14:16:57Z",
      "diff_hunk" : "@@ -0,0 +1,183 @@\n+// Copyright (c) 2022-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_processing.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <test/util/logging.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+#include <version.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chrono>\n+#include <string>\n+#include <unordered_map>\n+\n+BOOST_FIXTURE_TEST_SUITE(netmsg_tests, NetTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(initial_messages_exchange)\n+{\n+    std::unordered_map<std::string, size_t> count_sent_messages;\n+    auto pipes = m_sockets_pipes.PopFront();\n+\n+    // Wait for all messages due to the initial handshake to be Send() to the socket.\n+    // The FEEFILTER is the last one, so quit when we get that.\n+    for (;;) {\n+        auto msg = pipes->send.GetNetMsg();\n+        if (msg.has_value()) {\n+            count_sent_messages[msg->m_type]++;\n+            if (msg->m_type == NetMsgType::FEEFILTER) {\n+                break;\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::PING], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(count_sent_messages[NetMsgType::FEEFILTER], 1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addr)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<CAddress> addresses{5};\n+\n+    DebugLogHelper debug_log{strprintf(\"Received addr: %u addresses\", addresses.size())};\n+    pipes->recv.PushNetMsg(NetMsgType::ADDRV2, addresses);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getblocks)\n+{\n+    auto pipes = m_sockets_pipes.PopFront();\n+    std::vector<uint256> hashes{5};\n+    CBlockLocator block_locator{std::move(hashes)};\n+    uint256 hash_stop;\n+\n+    DebugLogHelper debug_log{\"getblocks -1 to end\"};\n+    pipes->recv.PushNetMsg(NetMsgType::GETBLOCKS, block_locator, hash_stop);\n+    debug_log.EndAndThrowIfNotFound(30s);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068176623",
      "id" : 1068176623,
      "in_reply_to_id" : 1061551756,
      "line" : 74,
      "node_id" : "PRRC_kwDOABII584_qxTv",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/test/netmsg_tests.cpp",
      "position" : 74,
      "pull_request_review_id" : 1245688508,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068176623/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-12T14:16:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068176623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068182302"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068182302"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Pushed an improvement that changes it to about 17 exec/s, it tends to increase if the test is left to run for some time.\r\n\r\nIMO e2e fuzzing has some value.",
      "commit_id" : "32ab679f54a4f36cc315d0bd36638b7942f752f6",
      "created_at" : "2023-01-12T14:21:50Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068182302",
      "id" : 1068182302,
      "in_reply_to_id" : 1061894472,
      "line" : 58,
      "node_id" : "PRRC_kwDOABII584_qyse",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 58,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 58,
      "pull_request_review_id" : 1245697308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068182302/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-12T14:21:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068182302",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068182986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068182986"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It wasn't but I ditched it anyway in `9b7e9dad27...daee83c1c5`.",
      "commit_id" : "32ab679f54a4f36cc315d0bd36638b7942f752f6",
      "created_at" : "2023-01-12T14:22:26Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068182986",
      "id" : 1068182986,
      "in_reply_to_id" : 1061896055,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584_qy3K",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 101,
      "original_position" : 101,
      "original_start_line" : null,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : null,
      "pull_request_review_id" : 1245698381,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068182986/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-12T14:22:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068182986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068185233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068185233"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe. I am probably missing something. Can you elaborate why it is missing a call to `SyncWithValidationInterfaceQueue()`?",
      "commit_id" : "32ab679f54a4f36cc315d0bd36638b7942f752f6",
      "created_at" : "2023-01-12T14:24:17Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068185233",
      "id" : 1068185233,
      "in_reply_to_id" : 1061896936,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584_qzaR",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 96,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 96,
      "pull_request_review_id" : 1245701729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068185233/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-12T14:24:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068185233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068191630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068191630"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If (in theory) it is possible to push an event on the queue, it should be handled before starting the next input. (Not sure if applicable here)",
      "commit_id" : "32ab679f54a4f36cc315d0bd36638b7942f752f6",
      "created_at" : "2023-01-12T14:29:52Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068191630",
      "id" : 1068191630,
      "in_reply_to_id" : 1061896936,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584_q0-O",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 96,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 96,
      "pull_request_review_id" : 1245711657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068191630/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-12T14:29:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068191630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068212938"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068212938"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added.",
      "commit_id" : "32ab679f54a4f36cc315d0bd36638b7942f752f6",
      "created_at" : "2023-01-12T14:47:14Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    g_setup->m_node.banman->TestOnlyReset();\n+\n+    // Addrman and CConnman deprioritize addresses tried in the last 10min. Avoid that since\n+    // our addrman has very few addresses.\n+    SetMockTime(GetMockTime() + std::chrono::minutes{\n+                                    fuzzed_data_provider.ConsumeIntegralInRange<uint8_t>(11, 255)});\n+\n+    auto pipes = g_setup->m_sockets_pipes.PopFront();\n+\n+    uint8_t buf[1024];\n+\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 100) {\n+\n+        const std::string message_type =\n+            limit_to_message_type.empty() ?\n+                fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE) :\n+                limit_to_message_type;\n+\n+        CDataStream payload{\n+            ConsumeRandomLengthByteVector(fuzzed_data_provider), SER_NETWORK, PROTOCOL_VERSION};\n+\n+        pipes->recv.PushNetMsg(message_type, payload);\n+\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) { // EOF, the socket has been closed.\n+            return;\n+        }\n+    }\n+\n+    TestChainState& chainstate = *static_cast<TestChainState*>(&g_setup->m_node.chainman->ActiveChainstate());\n+\n+    // Force a disconnect and wait for it.\n+    for (;;) {\n+        // Push a message that will cause a disconnect and socket closure (EOF on the Send() pipe).\n+        pipes->recv.PushNetMsg(\n+            NetMsgType::GETBLOCKTXN,\n+            BlockTransactionsRequest{.blockhash = chainstate.m_chain.Tip()->GetBlockHash(),\n+                                     .indexes = {1, UINT16_MAX}});\n+        if (pipes->send.GetBytes(buf, sizeof(buf)) == 0) {\n+            break;\n+        }\n+        std::this_thread::sleep_for(50ms);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068212938",
      "id" : 1068212938,
      "in_reply_to_id" : 1061896936,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584_q6LK",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 96,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 96,
      "pull_request_review_id" : 1245744856,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068212938/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-12T14:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068212938",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068245906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068245906"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why not de-duplicate by putting it in the existing `./src/test/fuzz/process_message.cpp` file?",
      "commit_id" : "32ab679f54a4f36cc315d0bd36638b7942f752f6",
      "created_at" : "2023-01-12T15:12:13Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068245906",
      "id" : 1068245906,
      "in_reply_to_id" : 1061557476,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII584_rCOS",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 44,
      "original_position" : 43,
      "original_start_line" : 28,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 44,
      "pull_request_review_id" : 1245795841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068245906/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 29,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-12T15:12:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068245906",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068310185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068310185"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You mean to put the entire contents of the newly introduced `fuzz/netmsg.cpp` inside `fuzz/process_message.cpp`?",
      "commit_id" : "32ab679f54a4f36cc315d0bd36638b7942f752f6",
      "created_at" : "2023-01-12T16:03:46Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068310185",
      "id" : 1068310185,
      "in_reply_to_id" : 1061557476,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII584_rR6p",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 44,
      "original_position" : 43,
      "original_start_line" : 28,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 44,
      "pull_request_review_id" : 1245900568,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068310185/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 29,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-12T16:03:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068310185",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068314583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068314583"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yes",
      "commit_id" : "32ab679f54a4f36cc315d0bd36638b7942f752f6",
      "created_at" : "2023-01-12T16:07:36Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068314583",
      "id" : 1068314583,
      "in_reply_to_id" : 1061557476,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII584_rS_X",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 44,
      "original_position" : 43,
      "original_start_line" : 28,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 44,
      "pull_request_review_id" : 1245907668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068314583/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 29,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-12T16:07:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068314583",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068407369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068407369"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> IMO e2e fuzzing has some value.\r\n\r\nYes, but I think it should focus on what you are trying to test. If you keep the target to broad the fuzzer is gonna have a hard time finding interesting test cases (especially if the target is slow). One obvious way of focusing is to only fuzz smaller units of code and in the e2e case you probably want to narrow the way you are interpreting the fuzz input so that you are actually testing what you want to test.\r\n\r\nThe approach here currently seems to be very similar to the `process_message(s)` targets (which is why you suggested to replace them iiuc), in that you are interpreting most of the fuzz input as a sequence of arbitrary messages, so the questions that I have are:\r\n* What do you want to test here? Message processing? connman internals? the interactions between connman/peerman?\r\n* What bugs is your target capable of finding that `process_message(s)` (or other targets) are not? In other words which areas/interactions is this fuzzing that are previously not covered?\r\n* Are the message contents (and their mutations) of all message types useful for what you are trying to test here? e.g. does it matter if a tx message contains a transaction with 1 input or 5? because the fuzzer will likely find that difference interesting but it doesn't seem like this would add value to what you are trying to test here, since the goal (correct me if I am wrong) isn't fuzzing validation.\r\n* Could the input interpretation be narrowed to only include the messages that lead to interactions you are trying to test?",
      "commit_id" : "32ab679f54a4f36cc315d0bd36638b7942f752f6",
      "created_at" : "2023-01-12T17:31:09Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <blockencodings.h>\n+#include <consensus/consensus.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/validation.h>\n+#include <util/check.h>\n+#include <util/time.h>\n+#include <validationinterface.h>\n+\n+#include <chrono>\n+#include <string>\n+#include <thread>\n+\n+namespace {\n+NetTestingSetup* g_setup;\n+} // namespace\n+\n+static size_t& GetNumMsgTypes()\n+{\n+    static size_t g_num_msg_types{0};\n+    return g_num_msg_types;\n+}\n+#define FUZZ_TARGET_MSG(msg_type)                          \\\n+    struct msg_type##CountBeforeMain {                     \\\n+        msg_type##CountBeforeMain()                        \\\n+        {                                                  \\\n+            ++GetNumMsgTypes();                            \\\n+        }                                                  \\\n+    } const static g_##msg_type##count_before_main;        \\\n+    FUZZ_TARGET_INIT(netmsg_##msg_type, initialize_netmsg) \\\n+    {                                                      \\\n+        fuzz_target(buffer, #msg_type);                    \\\n+    }\n+\n+void initialize_netmsg()\n+{\n+    Assert(GetNumMsgTypes() == getAllNetMessageTypes().size()); // If this fails, add or remove the message type below\n+\n+    static const auto testing_setup = MakeNoLogFileContext<NetTestingSetup>();\n+    g_setup = testing_setup.get();\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+static void fuzz_target(FuzzBufferType buffer, const std::string& limit_to_message_type)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26812#discussion_r1068407369",
      "id" : 1068407369,
      "in_reply_to_id" : 1061894472,
      "line" : 58,
      "node_id" : "PRRC_kwDOABII584_rppJ",
      "original_commit_id" : "9b7e9dad271167af913828aaf3b75a9942770a34",
      "original_line" : 58,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/test/fuzz/netmsg.cpp",
      "position" : 58,
      "pull_request_review_id" : 1246114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26812",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068407369/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-12T17:31:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1068407369",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   }
]
