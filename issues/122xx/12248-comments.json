[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems reasonable to me. Possible extensions:\r\n\r\n* Could have a whitelist for optional rpc parameters. @luke-jr created #11660 making handling of RPC options more consistent, and he has proposed doing a broader options cleanup that could help with this: https://github.com/bitcoin/bitcoin/pull/11660#discussion_r151415264.\r\n* Could whitelist based on RPC authorization. For example, Luke's #10615 restricts access to wallets based on this.",
      "created_at" : "2018-01-23T15:53:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12248#issuecomment-359834712",
      "id" : 359834712,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12248",
      "updated_at" : "2018-01-23T15:53:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/359834712",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Can you give an example use-case? As presented it sounds reasonable, though I'm a bit concerned about real-world utility.\r\n\r\nRPC should definitely not be open to the world, no matter how locked down, so I'll assume that you're referring to a localhost or encrypted tunnel.\r\n\r\nIn that case, access to the user's profile dir should already be assumed. So I can't imagine locking down for the sake of privacy, but maybe to ensure maximum availability. So maybe you disable getblocktemplate because you don't want some jerk employee mining and wasting cpu resources from your exchange's edge node.\r\n\r\nOr maybe you run a website that shows mempool data, so you want to unlock rpc access for a bitcoind on your subnet, with access mempool data only.\r\n\r\nDo those examples sound about right?\r\n\r\nI'm not convinced that it's necessary because (other than wallet), there's no privilege separation between the commands, so only real need for black/whitelists would be: \"some rpc call is an effective DoS on my server so I want to block it\". I'm not sure that we should be encouraging that, rather than just not having DoSsy rpcs :(\r\n\r\nThat said, a few things to look into:\r\n- We already have a \"safe mode\" that limits usable commands when we're uneasy about the chain we're on. That's not useful here, but it may be hepful to look at how it's implemented.\r\n- Echoing what @ryanofsky said, tying this to auth makes sense to me, so that different rpc users can have different command access.",
      "created_at" : "2018-01-26T22:37:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12248#issuecomment-360924059",
      "id" : 360924059,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12248",
      "updated_at" : "2018-01-26T22:37:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360924059",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thanks for the feedback! I wrote up my preliminary ideas on the design and justification for why this feature is needed -- let me know if you have any reservations before I start implementing a proof-of-concept. \r\n\r\n-------------------------------\r\n\r\n# Problem\r\nThere is currently no way to lock down the JSON RPC API without filtering requests through a proxy (or application). In high security situations, we want to guarantee that only necessary and expected API calls can be made by specifying this behavior at the bitcoind node level. This doesnÃ¢ÂÂt preclude the use of a proxy to filter requests, but augments it with an additional layer of safety checks.\r\n\r\n# Example Use Case\r\nWe make requests to the bitcoind through a proxy, ensuring that most clients will only be able to call a limited set of RPC methods. However, the proxy itself maintains an authenticated connection to our node with full privilege, making misbehavior potentially dangerous. We would like to guarantee that only the methods required by the application are available, precluding access to critical (i.e. leaking secrets or DoS-vectors) methods not required by the application. Even if an adversary can do _some_ dangerous things, they canÃ¢ÂÂt do _arbitrarily_ dangerous things that we can prevent up front.\r\n\r\nIn summary, this is desirable because it:\r\n- Adds redundant layers of security\r\n- Protects against programmer error (configure system once, iterate on application code without having to worry about regressing accidentally to unsafe behavior or accidentally leaking some secret as a side effect)\r\n- Explicitly defines expectations for privilege and performance.\r\n    - Opportunities for future work to enforce resource management per connection/`rpcauth` credential. (E.g., only allowing one rescan per day)\r\n- Introduces concept of privilege separation between commands, helps developers build more robust software, and encourages better practices\r\n    - BitcoinÃ¢ÂÂs RPC API was not designed with the idea that a caller could be partially trusted. As @theuni put it, thereÃ¢ÂÂs no explicit concept of privilege separation.\r\n    - Adding the ability to whitelist is a step towards recognizing the implicit privilege boundaries that do exist, such as a read v.s. a write operation, a stateful operation (like `addnode`), and a DoS vector operation (like `import` with `rescan`)\r\n\r\n# Implementation\r\nWe use a whitelist because it is better to be explicit about what is allowed rather than what is not allowed. This ensures that even if new, unsafe, RPCs are added, the functionality is not exposed by using old conf files. My design is based off of the rpcauth feature only -- if you are in a high security setting, you likely should favor rpcauth over rpcuser anyways; this serves as a soft deprecation. IÃ¢ÂÂve written out my design using [TOML](https://github.com/toml-lang/toml), but we can use whatever Bitcoin uses, if thatÃ¢ÂÂs preferable.\r\n\r\n## Runtime Configuration Design\r\n\r\nRuntime `rpc.conf` will allow you to specify granular user-level privileges. For example, the following demonstrates how IÃ¢ÂÂm proposing to create a `rpcauth` user allowed to access wallet RPCs and a second user that can also call `getblockchaininfo`.\r\n\r\n**rpc.conf**\r\n```\r\nimport = [rpc_base.conf]\r\n[rpcuser1]\r\n\tincludes = [wallet]\r\n[rpcuser2]\r\n\tincludes = [rpcuser1]\r\n\tgetblockchaininfo = 1\r\n```\r\n**rpc_base.conf**\r\n```\r\n[wallet]\r\n\t//... < list all enabled wallet methods here >\r\n```\r\n**bitcoin.conf**\r\n```\r\nrpcauth=rpcuser1:76cc9394b1e7e7a4b04694f24f8d59e8$e366de9398ed25150874915e7f4d2fcbc13a0df06f0e6a324515e5651f9dfa43\r\nrpcauth=rpcuser2:69d492fe5bb73253d5adaed75987fb9e$c0b939d2ee9723bb289734c320fee83e2724af3ec681c3276df4d2ced515b1e1\r\n```\r\n### Design Considerations\r\nThere are two obvious ways we can do this, either grouping by user or grouping by rpc.\r\n\r\n**By RPC:**\r\n```\r\n[gennewaddress]\r\nmode=Ã¢ÂÂonÃ¢ÂÂ // enabled for all users\r\n\r\n[gettransaction]\r\nmode=Ã¢ÂÂselectÃ¢ÂÂ // enabled for some users\r\nusers = [\r\n     rpcuser1,\r\n     rpcuser2\r\n]\r\n\r\n// [dumpprivkey]\r\n//     mode=Ã¢ÂÂoffÃ¢ÂÂ // disabled, not needed explicitly because whitelist\r\n\r\n```\r\nPros of RPC-based:\r\n- Succinct; most of the time most users will have most methods. \r\n\r\nCons of RPC-based:\r\n- Needs more complexity to specify argument / value-based privileges for each user down the line\r\n\r\n**By User:**\r\n```\r\n[rpcuser1]\r\n    gettransaction=1\r\n    gennewaddress=1\r\n[rpcuser2]\r\n    gennewaddress=1\r\n    gettransaction=1\r\n    dumpprivkey=1\r\n[rpcuser3]\r\n    gennewaddress=1\r\n```\r\nPros of user-based:\r\n- Easy to read / figure out which users have which privileges \r\n- Easy to specify more granular privileges at the level of arguments / values for each user down the line\r\n- Easy to implement\r\n\r\nCons of user-based:\r\n- If all users require most RPCs, tables are long and repetitive, therefore difficult to audit\r\n\r\nOverall, it seems that a user-centric configuration is preferable.\r\n\r\nTo address the cons of user based paradigm, weÃ¢ÂÂve introduced a notion of inheritance and several base classes (all, networking, wallet, info, etc) as well as a method of importing files. We can then describe the privileges of a user with access to the same commands as another user and access to any of the general info commands as follows:\r\n\r\n**rpc.conf**\r\n```\r\nimport = [rpc_base.conf]\r\n[rpcuser1]\r\n\tgettransaction=1\r\n\tgennewaddress=1\r\n[rpcuser2]\r\n\tincludes = [rpcuser1, info]\r\n\tdumpprivkey=1\r\n```\r\n**rpc_base.conf**\r\n```\r\n[info]\r\n\tgettransactions=1\r\n\tget...\r\n[network]\r\n\t...\r\n```\r\n\r\nConflicting definitions would be resolved to the childÃ¢ÂÂs definition (e.g., allowing to disable one single command in info). Circular dependencies result in undefined behavior (we could check for it, but it seems like overkill).\r\n\r\nOn startup, weÃ¢ÂÂll load in the configuration for all users as a hashtable. On each RPC request, we can check permissions to invoke method with name (and down the line, specific options/args for that method).\r\n\r\n### Long-term considerations + extensions\r\nTo address @ryanofskyÃ¢ÂÂs suggestion of filtering params at the argument or value level, we can shell out to a script with path defined in the config file. I.e., we can pipe the json of the command to a subprocess which then pipes back a new json or error message. This permits flexibility because the types of properties you might want to check are sufficiently complicated that it would be inappropriate to try to express that logic in a config file. This design is similar to whatÃ¢ÂÂs done with `walletnotify` scripts. WeÃ¢ÂÂll leave that for future work to more tightly define.\r\n\r\n## Compile Time Configuration\r\nThe simplest way to do compile time configuration would be to have an autogenerated header file which defines (or doesnÃ¢ÂÂt define) a macro for every RPC. Then, each handler can be wrapped with an ifdef. This is a little bit messy, so what might be nicer would be to make our class from the runtime whitelist checker read these compile time rules. This is slightly less good because the code is still compiled, but accomplishes the goal of the RPC not being able to be called independent of modifiable configuration. I think it makes the most sense to focus on the runtime configuration first, and then in future work address the compile time flags.\r\n\r\n# Compatibility\r\nThis feature will be mostly backward-compatible: if users do not have `rpc.conf` defined, RPC behavior will be the same as before. The default `rpc.conf` will allow all RPCs for all users.\r\n",
      "created_at" : "2018-02-01T00:22:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12248#issuecomment-362116169",
      "id" : 362116169,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12248",
      "updated_at" : "2018-02-01T08:54:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/362116169",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4398313?v=4",
         "events_url" : "https://api.github.com/users/jlin816/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jlin816/followers",
         "following_url" : "https://api.github.com/users/jlin816/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jlin816/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jlin816",
         "id" : 4398313,
         "login" : "jlin816",
         "organizations_url" : "https://api.github.com/users/jlin816/orgs",
         "received_events_url" : "https://api.github.com/users/jlin816/received_events",
         "repos_url" : "https://api.github.com/users/jlin816/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jlin816/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jlin816/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jlin816"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This seems hard for a user to use safely. e.g. it might not be immediately obvious which RPCs are 'safe' for a given application and which aren't-- e.g. dumpwallet writing to arbitrary files.\r\n\r\nFancy 'config file parser' seems not so great, why not propose something simpler like rpcwhitelist=user:allowedrpc1:allowedrpc2:...  \r\n\r\nShelling out to something to process arguments sounds like the performance and security nightmare of classical CGIs.  If someone really wants arbitrary code preprocessing their RPCs please make it a proxy. At least then it wouldn't necessarily have to fork for every request.\r\n",
      "created_at" : "2018-02-04T09:10:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12248#issuecomment-362892186",
      "id" : 362892186,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12248",
      "updated_at" : "2018-02-04T09:10:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/362892186",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thanks for the comments @gmaxwell! \r\n\r\nre: user confusion - This feature (in particular with whitelist/enable-all by default) seems strictly better than what we have currently. Typical users don't have to touch the RPC configuration, but others at least have the option to restrict access if they have more precise needs.\r\n\r\nre: config file - You make a good point; my previous design does add some complexity for the sake of flexibility. Formatting aside (not particularly attached to TOML and I can certainly use the syntax you suggest), are you objecting specifically to inheriting roles and `includes`? The advantage there seems non-trivial, to avoid typing out all hundred or so allowed RPCs for every new user.\r\n\r\nre: shelling out - My plan is to implement any checking logic I require in proxy, so I'm on board with not adding native CGI-like support.",
      "created_at" : "2018-02-06T02:39:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12248#issuecomment-363291684",
      "id" : 363291684,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12248",
      "updated_at" : "2018-02-06T02:39:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/363291684",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4398313?v=4",
         "events_url" : "https://api.github.com/users/jlin816/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jlin816/followers",
         "following_url" : "https://api.github.com/users/jlin816/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jlin816/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jlin816",
         "id" : 4398313,
         "login" : "jlin816",
         "organizations_url" : "https://api.github.com/users/jlin816/orgs",
         "received_events_url" : "https://api.github.com/users/jlin816/received_events",
         "repos_url" : "https://api.github.com/users/jlin816/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jlin816/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jlin816/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jlin816"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Anything left to do here after #12763?",
      "created_at" : "2020-04-26T18:18:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12248#issuecomment-619599382",
      "id" : 619599382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12248",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxOTU5OTM4Mg==",
      "updated_at" : "2020-04-26T18:18:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619599382",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah there's still a bit to do; but I got discouraged by it taking 2 years to merge to finish the work.\r\n\r\nUp next for this would be:\r\n\r\n1) Adding some permission-discovery RPC so you can see which perms you have\r\n2) Adding a credential fork and dropper thing, allowing you to pass short-lived capability credentials.\r\n3) Adding some sort of limits system.\r\n\r\nYou can imagine in the future, I have a process which has a \"master API key\" to my node, with a maximal set of perms required. I can take my credential, and call the fork RPC to generate a child credential. Then i call AddPerm (one by one) on the credential with my master API key. Then I send it to the appropraite sub process. The subprocess receives the credential. The subprocess calls query_my_rpcs with the new credential. If it has the query_my_rpcs permission set (which we can default to being on safely I think as an exception...), then it learns a table of what permissions it has and if it matches a manifest for that process of what it needs to complete it's task, or if it needs to prompt the user for more credentials. You can imagine that core then has a credential manager GUI pop up and asks if it should honor the request for more credentials -- both apps can show a pin or high entropy generative art so you know it's not a MITM or something... \r\n\r\nIs this overkill? Maybe. Does it need to be in Core? Maybe not... Is this *useful*. Yes, very.\r\n\r\n\r\nWhy do we need this?\r\n\r\nAs people set up more sophisticated home infrastructure, permissioning systems are critical to make easier to use and clearer. See https://twitter.com/cpc464_a500/status/1254441275773853702/photo/1 . Super cool, right? Each new service imposes additional security risk. I want people to run services safely. Right now the experience for setting up credentials is to manually add then to Bitcoin Core's conf and restart. A system that lets you hand out the cookies and short lived (perhaps even bound to a specific request, number of requests, or amount of btc) is going to help apps integrate more smoothly and decrease master-password behavior.\r\n\r\n\r\nSo I think this is actually a relatively high priority project for end user security, but think it merits some consensus on how much complexity we'd put in core and how much we should build out as e.g. a proxy server.     ",
      "created_at" : "2020-04-27T08:39:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12248#issuecomment-619825124",
      "id" : 619825124,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12248",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxOTgyNTEyNA==",
      "updated_at" : "2020-04-27T08:39:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619825124",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Adding some permission-discovery RPC so you can see which perms you have\r\n\r\nThis should be simple and can be filed as a \"good first issue\". I was thinking we could use the `getrpcinfo` RPC, but that one might not be whitelisted (chicken-egg-problem). So I'd say to introduce a new `getrpcwhitelist`.",
      "created_at" : "2020-04-27T13:07:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12248#issuecomment-619974010",
      "id" : 619974010,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12248",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxOTk3NDAxMA==",
      "updated_at" : "2020-04-27T13:07:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619974010",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
