[
   {
      "author_association" : "MEMBER",
      "body" : "Big Concept ACK, excited about this",
      "created_at" : "2018-01-24T01:57:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-359994997",
      "id" : 359994997,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-01-24T01:57:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/359994997",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Should this be labeled consensus? This is a P2P change, right?\r\n",
      "created_at" : "2018-01-24T14:36:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360154896",
      "id" : 360154896,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-01-24T14:36:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360154896",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@laanwj This is a data structure to be used in a P2P change. I first thought that it shouldn't be tagged \"Consensus\", but there's an argument to be made for it. It doesn't affect blockchain consensus, but it is kind of a softer P2P consensus change, where network clients (though not other full nodes) may disconnect/ban you if you serve incorrectly computed block filters. I'll let you make the call on the tag.",
      "created_at" : "2018-01-24T17:09:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360204783",
      "id" : 360204783,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-01-24T17:09:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360204783",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Any fork that can be resolved by a P2P adaptor that speaks both protocols is not a consensus change.",
      "created_at" : "2018-01-24T17:12:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360205706",
      "id" : 360205706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-01-24T17:12:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360205706",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> This is a data structure to be used in a P2P change.\r\n\r\nThanks for the explanation. With \"consensus\" we mean the blockchain consensus rules code. Banning\\disconnecting is a P2P level issue. So changing the label to P2P.",
      "created_at" : "2018-01-24T17:19:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360207830",
      "id" : 360207830,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-01-24T17:19:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360207830",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Great work @jimpo!\r\nBig Concept ACK,... will help to get this done.",
      "created_at" : "2018-01-25T22:33:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360623262",
      "id" : 360623262,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-01-25T22:33:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360623262",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r167173632"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167173632"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure, but I guess that comments belongs to L113?",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-02-09T09:13:33Z",
      "diff_hunk" : "@@ -0,0 +1,319 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <streams.h>\n+\n+/// SerType used to serialize parameters in GCS filter encoding.\n+static constexpr int GCS_SER_TYPE = SER_NETWORK;\n+\n+/// Protocol version used to serialize parameters in GCS filter encoding.\n+static constexpr int GCS_SER_VERSION = 0;\n+\n+template <typename OStream>\n+static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t k, uint64_t n)\n+{\n+    // Write quotient as unary-encoded: q 1's followed by one 0.\n+    uint64_t q = n >> k;\n+    while (q > 0) {\n+        int nbits = q <= 64 ? static_cast<int>(q) : 64;\n+        bitwriter.Write(~0ULL, nbits);\n+        q -= nbits;\n+    }\n+    bitwriter.Write(0, 1);\n+\n+    // Write the remainder in k bits. Since the remainder is just the bottom\n+    // k bits of n, there is no need to mask first.\n+    bitwriter.Write(n, k);\n+}\n+\n+template <typename IStream>\n+static uint64_t GolombRiceDecode(BitStreamReader<IStream>& bitreader, uint8_t k)\n+{\n+    // Read unary-encoded quotient: q 1's followed by one 0.\n+    uint64_t q = 0;\n+    while (bitreader.Read(1) == 1) {\n+        q++;\n+    }\n+\n+    uint64_t r = bitreader.Read(k);\n+\n+    return (q << k) + r;\n+}\n+\n+// Map a value x that is uniformly distributed in the range [0, 2^64) to a\n+// value uniformly distributed in [0, n) by returning the upper 64 bits of\n+// x * n.\n+//\n+// See: https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n+static uint64_t MapIntoRange(uint64_t x, uint64_t n)\n+{\n+    // To perform the calculation on 64-bit numbers without losing the\n+    // result to overflow, split the numbers into the most significant and\n+    // least significant 32 bits and perform multiplication piece-wise.\n+    //\n+    // See: https://stackoverflow.com/a/26855440\n+    uint64_t x_hi = x >> 32;\n+    uint64_t x_lo = x & 0xFFFFFFFF;\n+    uint64_t n_hi = n >> 32;\n+    uint64_t n_lo = n & 0xFFFFFFFF;\n+\n+    uint64_t ac = x_hi * n_hi;\n+    uint64_t ad = x_hi * n_lo;\n+    uint64_t bc = x_lo * n_hi;\n+    uint64_t bd = x_lo * n_lo;\n+\n+    uint64_t mid34 = (bd >> 32) + (bc & 0xFFFFFFFF) + (ad & 0xFFFFFFFF);\n+    uint64_t upper64 = ac + (bc >> 32) + (ad >> 32) + (mid34 >> 32);\n+    return upper64;\n+}\n+\n+uint64_t GCSFilter::HashToRange(const Element& element) const\n+{\n+    uint64_t hash = CSipHasher(m_siphash_k0, m_siphash_k1)\n+        .Write(element.data(), element.size())\n+        .Finalize();\n+    return MapIntoRange(hash, m_F);\n+}\n+\n+std::vector<uint64_t> GCSFilter::BuildHashedSet(const std::set<Element>& elements) const\n+{\n+    std::vector<uint64_t> hashed_elements;\n+    hashed_elements.reserve(elements.size());\n+    for (const Element& element : elements) {\n+        hashed_elements.push_back(HashToRange(element));\n+    }\n+    std::sort(hashed_elements.begin(), hashed_elements.end());\n+    return hashed_elements;\n+}\n+\n+GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P)\n+    : m_siphash_k0(siphash_k0), m_siphash_k1(siphash_k1), m_P(P), m_N(0), m_F(0)\n+{\n+    if (m_P > 32) {\n+        throw std::invalid_argument(\"P must be <=32\");\n+    }\n+}\n+\n+GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P,\n+                     std::vector<unsigned char> encoded_filter)\n+    : GCSFilter(siphash_k0, siphash_k1, P)\n+{\n+    m_encoded = std::move(encoded_filter);\n+\n+    CVectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n+\n+    m_N = ReadCompactSize(stream);\n+    m_F = m_N << m_P;\n+\n+    if (m_N >= (1ULL << 32)) {\n+        throw std::invalid_argument(\"N must be <2^32\");\n+    }\n+\n+    // Surface any errors decoding the filter on construction.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r167173632",
      "id" : 167173632,
      "original_commit_id" : "884ebec137484daac81c208b805815ff9ee3b35c",
      "original_position" : 117,
      "path" : "src/blockfilter.cpp",
      "position" : null,
      "pull_request_review_id" : 95354532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-03-12T16:01:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167173632",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Reviewed and tested a bit... nice, clean PR!\r\nI would wish we had more test vectors... ",
      "created_at" : "2018-02-09T09:46:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364385727",
      "id" : 364385727,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-02-09T09:46:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364385727",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Would it useful to add some (hidden) RPC commands so other developers can test it?",
      "created_at" : "2018-02-09T15:14:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364461376",
      "id" : 364461376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-02-09T15:14:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364461376",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonasschnelli Thanks for reviewing. The test vectors were generated from a Go program I have that cross-validates against the [btcsuite implementation](https://github.com/Roasbeef/btcutil/pull/6). I can easily add any specific testnet blocks to the list of cases. The blocks were chosen to exercise certain edge cases (eg. empty filters, duplicate pushdatas, invalid output scripts), but the vectors aren't commented with which edges cases they exercise. I'll add the comments, because it seems worthwhile.\r\n\r\n@Sjors I'd definitely like to see RPC commands to fetch specific filters and filter headers, but I think it makes more sense to do that after adding the filter index, so that the RPC handlers just have to look up a precomputed filter/header. (So basically, in a subsequent PR).",
      "created_at" : "2018-02-09T18:15:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364513902",
      "id" : 364513902,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-02-09T18:47:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364513902",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r167313633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167313633"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No, the idea is that the below lines fully decode the filter in the constructor so that any errors decoding get raised during construction rather than when it is first matched against. I'll elaborate on the comment.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-02-09T18:49:12Z",
      "diff_hunk" : "@@ -0,0 +1,319 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <streams.h>\n+\n+/// SerType used to serialize parameters in GCS filter encoding.\n+static constexpr int GCS_SER_TYPE = SER_NETWORK;\n+\n+/// Protocol version used to serialize parameters in GCS filter encoding.\n+static constexpr int GCS_SER_VERSION = 0;\n+\n+template <typename OStream>\n+static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t k, uint64_t n)\n+{\n+    // Write quotient as unary-encoded: q 1's followed by one 0.\n+    uint64_t q = n >> k;\n+    while (q > 0) {\n+        int nbits = q <= 64 ? static_cast<int>(q) : 64;\n+        bitwriter.Write(~0ULL, nbits);\n+        q -= nbits;\n+    }\n+    bitwriter.Write(0, 1);\n+\n+    // Write the remainder in k bits. Since the remainder is just the bottom\n+    // k bits of n, there is no need to mask first.\n+    bitwriter.Write(n, k);\n+}\n+\n+template <typename IStream>\n+static uint64_t GolombRiceDecode(BitStreamReader<IStream>& bitreader, uint8_t k)\n+{\n+    // Read unary-encoded quotient: q 1's followed by one 0.\n+    uint64_t q = 0;\n+    while (bitreader.Read(1) == 1) {\n+        q++;\n+    }\n+\n+    uint64_t r = bitreader.Read(k);\n+\n+    return (q << k) + r;\n+}\n+\n+// Map a value x that is uniformly distributed in the range [0, 2^64) to a\n+// value uniformly distributed in [0, n) by returning the upper 64 bits of\n+// x * n.\n+//\n+// See: https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n+static uint64_t MapIntoRange(uint64_t x, uint64_t n)\n+{\n+    // To perform the calculation on 64-bit numbers without losing the\n+    // result to overflow, split the numbers into the most significant and\n+    // least significant 32 bits and perform multiplication piece-wise.\n+    //\n+    // See: https://stackoverflow.com/a/26855440\n+    uint64_t x_hi = x >> 32;\n+    uint64_t x_lo = x & 0xFFFFFFFF;\n+    uint64_t n_hi = n >> 32;\n+    uint64_t n_lo = n & 0xFFFFFFFF;\n+\n+    uint64_t ac = x_hi * n_hi;\n+    uint64_t ad = x_hi * n_lo;\n+    uint64_t bc = x_lo * n_hi;\n+    uint64_t bd = x_lo * n_lo;\n+\n+    uint64_t mid34 = (bd >> 32) + (bc & 0xFFFFFFFF) + (ad & 0xFFFFFFFF);\n+    uint64_t upper64 = ac + (bc >> 32) + (ad >> 32) + (mid34 >> 32);\n+    return upper64;\n+}\n+\n+uint64_t GCSFilter::HashToRange(const Element& element) const\n+{\n+    uint64_t hash = CSipHasher(m_siphash_k0, m_siphash_k1)\n+        .Write(element.data(), element.size())\n+        .Finalize();\n+    return MapIntoRange(hash, m_F);\n+}\n+\n+std::vector<uint64_t> GCSFilter::BuildHashedSet(const std::set<Element>& elements) const\n+{\n+    std::vector<uint64_t> hashed_elements;\n+    hashed_elements.reserve(elements.size());\n+    for (const Element& element : elements) {\n+        hashed_elements.push_back(HashToRange(element));\n+    }\n+    std::sort(hashed_elements.begin(), hashed_elements.end());\n+    return hashed_elements;\n+}\n+\n+GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P)\n+    : m_siphash_k0(siphash_k0), m_siphash_k1(siphash_k1), m_P(P), m_N(0), m_F(0)\n+{\n+    if (m_P > 32) {\n+        throw std::invalid_argument(\"P must be <=32\");\n+    }\n+}\n+\n+GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P,\n+                     std::vector<unsigned char> encoded_filter)\n+    : GCSFilter(siphash_k0, siphash_k1, P)\n+{\n+    m_encoded = std::move(encoded_filter);\n+\n+    CVectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n+\n+    m_N = ReadCompactSize(stream);\n+    m_F = m_N << m_P;\n+\n+    if (m_N >= (1ULL << 32)) {\n+        throw std::invalid_argument(\"N must be <2^32\");\n+    }\n+\n+    // Surface any errors decoding the filter on construction.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r167313633",
      "id" : 167313633,
      "in_reply_to_id" : 167173632,
      "original_commit_id" : "884ebec137484daac81c208b805815ff9ee3b35c",
      "original_position" : 117,
      "path" : "src/blockfilter.cpp",
      "position" : null,
      "pull_request_review_id" : 95523188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-03-12T16:01:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167313633",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r174886724"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174886724"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"streams: Create CVectorReader stream interface for vectors.\" (93f702b08e413c5c025b155bfb62b721d27939f5)\r\n\r\nThis is pretty similar to the VectorReader class @TheBlueMatt is adding here: https://github.com/TheBlueMatt/bitcoin/commit/bb608a995e8fd16d156145bf41023e7a77d44971 for https://github.com/bitcoin/bitcoin/compare/master...TheBlueMatt:2018-02-miningserver\r\n\r\nYour implementation is more general with support for deserialization in the constructor and more complete comments. But his has a `pos()` method and uses non-hungarian names which are recommended by the contrib guide. Anyway you may want to incorporate some of his changes.\r\n\r\n",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-03-15T18:29:54Z",
      "diff_hunk" : "@@ -138,6 +138,80 @@ class CVectorWriter\n     size_t nPos;\n };\n \n+/* Minimal stream for reading from an existing vector by reference\n+ */\n+class CVectorReader",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r174886724",
      "id" : 174886724,
      "original_commit_id" : "93f702b08e413c5c025b155bfb62b721d27939f5",
      "original_position" : 6,
      "path" : "src/streams.h",
      "position" : 6,
      "pull_request_review_id" : 104327123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-03-15T18:40:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174886724",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r174888569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174888569"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"streams: Create CVectorReader stream interface for vectors.\" (93f702b08e413c5c025b155bfb62b721d27939f5)\r\n\r\nIt would be nice if this just had `const unsigned char*` and `size_t` members instead of a requiring a reference to an actual vector. That way the class could be used to efficiently deserialize from any memory location, and be compatible with other containers like `std::string`.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-03-15T18:34:53Z",
      "diff_hunk" : "@@ -138,6 +138,80 @@ class CVectorWriter\n     size_t nPos;\n };\n \n+/* Minimal stream for reading from an existing vector by reference\n+ */\n+class CVectorReader\n+{\n+private:\n+    const int nType;\n+    const int nVersion;\n+    const std::vector<unsigned char>& vchData;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r174888569",
      "id" : 174888569,
      "original_commit_id" : "93f702b08e413c5c025b155bfb62b721d27939f5",
      "original_position" : 11,
      "path" : "src/streams.h",
      "position" : 11,
      "pull_request_review_id" : 104327123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-03-15T18:39:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174888569",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> @Sjors I'd definitely like to see RPC commands to fetch specific filters and filter headers, but I think it makes more sense to do that after adding the filter index, so that the RPC handlers just have to look up a precomputed filter/header. (So basically, in a subsequent PR).\r\n\r\nEven a proof-of-concept PR for that would be useful for review.",
      "created_at" : "2018-03-15T19:07:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-373489502",
      "id" : 373489502,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-03-15T19:07:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/373489502",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r175538303"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175538303"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "OK, I can bring that commit over instead or modify this one to remove the hungarian notation.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-03-19T18:22:00Z",
      "diff_hunk" : "@@ -138,6 +138,80 @@ class CVectorWriter\n     size_t nPos;\n };\n \n+/* Minimal stream for reading from an existing vector by reference\n+ */\n+class CVectorReader",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r175538303",
      "id" : 175538303,
      "in_reply_to_id" : 174886724,
      "original_commit_id" : "93f702b08e413c5c025b155bfb62b721d27939f5",
      "original_position" : 6,
      "path" : "src/streams.h",
      "position" : 6,
      "pull_request_review_id" : 105083611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-03-19T18:22:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175538303",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r175539924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175539924"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd rather not deal with raw pointers because it leaves space for unsafe accesses. If generality is a concern, I'd prefer a templated approach with random access iterators.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-03-19T18:27:18Z",
      "diff_hunk" : "@@ -138,6 +138,80 @@ class CVectorWriter\n     size_t nPos;\n };\n \n+/* Minimal stream for reading from an existing vector by reference\n+ */\n+class CVectorReader\n+{\n+private:\n+    const int nType;\n+    const int nVersion;\n+    const std::vector<unsigned char>& vchData;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r175539924",
      "id" : 175539924,
      "in_reply_to_id" : 174888569,
      "original_commit_id" : "93f702b08e413c5c025b155bfb62b721d27939f5",
      "original_position" : 11,
      "path" : "src/streams.h",
      "position" : 11,
      "pull_request_review_id" : 105085540,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-03-19T18:27:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175539924",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Sjors Here is a branch that exposes an RPC for testing/playing around: https://github.com/jimpo/bitcoin/tree/bip158-rpc. Is not intended to be merged for reasons stated [above](https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364513902).",
      "created_at" : "2018-03-20T01:48:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-374444591",
      "id" : 374444591,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-03-20T17:31:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/374444591",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178601571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178601571"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"streams: Implement BitStreamReader/Writer classes.\"\r\n\r\nComment for m_offset would be helpful. Maybe `//!< Number of high order bits in m_buffer already returned by previous Read() calls.`",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-02T17:47:00Z",
      "diff_hunk" : "@@ -509,12 +509,88 @@ class CDataStream\n     }\n };\n \n+template <typename IStream>\n+class BitStreamReader\n+{\n+private:\n+    IStream& m_istream;\n+    uint8_t m_buffer;\n+    int m_offset;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178601571",
      "id" : 178601571,
      "original_commit_id" : "e6e320d600c70cf4d530b49f3e526cdb7e66be6d",
      "original_position" : 10,
      "path" : "src/streams.h",
      "position" : 91,
      "pull_request_review_id" : 108683613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-02T20:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178601571",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178604425"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178604425"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"streams: Implement BitStreamReader/Writer classes.\"\r\n\r\nWould be nice to initialize `m_buffer`, `m_offset` above, where they are declared (see \"Initialize all non-static class members where they are defined\" guideline from https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md). Similarly in BitStreamWriter below.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-02T17:57:11Z",
      "diff_hunk" : "@@ -509,12 +509,88 @@ class CDataStream\n     }\n };\n \n+template <typename IStream>\n+class BitStreamReader\n+{\n+private:\n+    IStream& m_istream;\n+    uint8_t m_buffer;\n+    int m_offset;\n \n+public:\n+    BitStreamReader(IStream& istream)\n+        : m_istream(istream), m_buffer(0), m_offset(8) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178604425",
      "id" : 178604425,
      "original_commit_id" : "e6e320d600c70cf4d530b49f3e526cdb7e66be6d",
      "original_position" : 14,
      "path" : "src/streams.h",
      "position" : 95,
      "pull_request_review_id" : 108683613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-02T20:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178604425",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178605236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178605236"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"streams: Implement BitStreamReader/Writer classes.\"\r\n\r\nWould be nice to add a simple unit test writing values to a stream with BitStreamWriter, and then making sure same values are returned from BitStreamReader.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-02T17:59:57Z",
      "diff_hunk" : "@@ -509,12 +509,88 @@ class CDataStream\n     }\n };\n \n+template <typename IStream>\n+class BitStreamReader\n+{\n+private:\n+    IStream& m_istream;\n+    uint8_t m_buffer;\n+    int m_offset;\n \n+public:\n+    BitStreamReader(IStream& istream)\n+        : m_istream(istream), m_buffer(0), m_offset(8) {}\n \n+    /** Read the specified number of bits from the stream. The data is returned\n+     * in the nbits least signficant bits of a 64-bit uint.\n+     */\n+    uint64_t Read(int nbits) {\n+        if (nbits < 0 || nbits > 64) {\n+            throw std::out_of_range(\"nbits must be between 0 and 64\");\n+        }\n+\n+        uint64_t data = 0;\n+        while (nbits > 0) {\n+            if (m_offset == 8) {\n+                m_istream >> m_buffer;\n+                m_offset = 0;\n+            }\n \n+            int bits = std::min(8 - m_offset, nbits);\n+            data <<= bits;\n+            data |= static_cast<uint8_t>(m_buffer << m_offset) >> (8 - bits);\n+            m_offset += bits;\n+            nbits -= bits;\n+        }\n+        return data;\n+    }\n+};\n \n+template <typename OStream>\n+class BitStreamWriter",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178605236",
      "id" : 178605236,
      "original_commit_id" : "e6e320d600c70cf4d530b49f3e526cdb7e66be6d",
      "original_position" : 42,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 108683613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-02T20:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178605236",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178606747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178606747"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"streams: Implement BitStreamReader/Writer classes.\"\r\n\r\nWould be good to add destructor either asserting `m_offset == 0`, or calling Flush(). Discarding bits that have been written but not flushed seems less safe than you might want as default behavior.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-02T18:05:44Z",
      "diff_hunk" : "@@ -509,12 +509,88 @@ class CDataStream\n     }\n };\n \n+template <typename IStream>\n+class BitStreamReader\n+{\n+private:\n+    IStream& m_istream;\n+    uint8_t m_buffer;\n+    int m_offset;\n \n+public:\n+    BitStreamReader(IStream& istream)\n+        : m_istream(istream), m_buffer(0), m_offset(8) {}\n \n+    /** Read the specified number of bits from the stream. The data is returned\n+     * in the nbits least signficant bits of a 64-bit uint.\n+     */\n+    uint64_t Read(int nbits) {\n+        if (nbits < 0 || nbits > 64) {\n+            throw std::out_of_range(\"nbits must be between 0 and 64\");\n+        }\n+\n+        uint64_t data = 0;\n+        while (nbits > 0) {\n+            if (m_offset == 8) {\n+                m_istream >> m_buffer;\n+                m_offset = 0;\n+            }\n \n+            int bits = std::min(8 - m_offset, nbits);\n+            data <<= bits;\n+            data |= static_cast<uint8_t>(m_buffer << m_offset) >> (8 - bits);\n+            m_offset += bits;\n+            nbits -= bits;\n+        }\n+        return data;\n+    }\n+};\n \n+template <typename OStream>\n+class BitStreamWriter\n+{\n+private:\n+    OStream& m_ostream;\n+    uint8_t m_buffer;\n+    int m_offset;\n \n+public:\n+    BitStreamWriter(OStream& ostream)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178606747",
      "id" : 178606747,
      "original_commit_id" : "e6e320d600c70cf4d530b49f3e526cdb7e66be6d",
      "original_position" : 50,
      "path" : "src/streams.h",
      "position" : null,
      "pull_request_review_id" : 108683613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-02T20:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178606747",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178608110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178608110"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"streams: Implement BitStreamReader/Writer classes.\"\r\n\r\nWould add  `= 0; //!< Number of high-order bits in m_buffer that have been written but not yet flushed to the stream.`",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-02T18:10:47Z",
      "diff_hunk" : "@@ -509,12 +509,88 @@ class CDataStream\n     }\n };\n \n+template <typename IStream>\n+class BitStreamReader\n+{\n+private:\n+    IStream& m_istream;\n+    uint8_t m_buffer;\n+    int m_offset;\n \n+public:\n+    BitStreamReader(IStream& istream)\n+        : m_istream(istream), m_buffer(0), m_offset(8) {}\n \n+    /** Read the specified number of bits from the stream. The data is returned\n+     * in the nbits least signficant bits of a 64-bit uint.\n+     */\n+    uint64_t Read(int nbits) {\n+        if (nbits < 0 || nbits > 64) {\n+            throw std::out_of_range(\"nbits must be between 0 and 64\");\n+        }\n+\n+        uint64_t data = 0;\n+        while (nbits > 0) {\n+            if (m_offset == 8) {\n+                m_istream >> m_buffer;\n+                m_offset = 0;\n+            }\n \n+            int bits = std::min(8 - m_offset, nbits);\n+            data <<= bits;\n+            data |= static_cast<uint8_t>(m_buffer << m_offset) >> (8 - bits);\n+            m_offset += bits;\n+            nbits -= bits;\n+        }\n+        return data;\n+    }\n+};\n \n+template <typename OStream>\n+class BitStreamWriter\n+{\n+private:\n+    OStream& m_ostream;\n+    uint8_t m_buffer;\n+    int m_offset;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178608110",
      "id" : 178608110,
      "original_commit_id" : "e6e320d600c70cf4d530b49f3e526cdb7e66be6d",
      "original_position" : 47,
      "path" : "src/streams.h",
      "position" : 128,
      "pull_request_review_id" : 108683613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-02T20:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178608110",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178627611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178627611"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"blockfilter: Declare GCSFilter class for BIP 158 impl.\"\r\n\r\nIt seems cumbersome for this to be implemented as a class, since none of the class members can change after construction, and some of the stored state is redundant (`m_F` is derived from `m_N` and `m_P`), `m_N` is redundant with `elements.size()` and can be derived from `m_encoded`).\r\n\r\nIf this were a simple set of functions instead, like:\r\n\r\n```c++\r\n\r\nstruct FilterParams { k0; k1; P; };\r\n\r\nvector<char> BuildFilter(FilterParams, set<Elements>);\r\n\r\nbool FilterContains(FilterParams, vector<char>, Element);\r\n\r\nbool FilterContainsAny(FilterParams, vector<char>, set<Element>);\r\n```\r\n\r\nusage would be more obvious, and you could get rid of the current runtime throws and asserts checking for inconsistencies in the state.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-02T19:31:35Z",
      "diff_hunk" : "@@ -0,0 +1,62 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BLOCKFILTER_H\n+#define BITCOIN_BLOCKFILTER_H\n+\n+#include <set>\n+#include <stdint.h>\n+#include <vector>\n+\n+#include <serialize.h>\n+#include <uint256.h>\n+\n+/**\n+ * This implements a Golomb-coded set as defined in BIP 158. It is a\n+ * compact, probabilistic data structure for testing set membership.\n+ */\n+class GCSFilter",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178627611",
      "id" : 178627611,
      "original_commit_id" : "15d529dfc2b65f2badaa520799187aff103af2b6",
      "original_position" : 19,
      "path" : "src/blockfilter.h",
      "position" : 20,
      "pull_request_review_id" : 108683613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-02T20:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178627611",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178629277"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178629277"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"blockfilter: Implement GCSFilter constructors.\"\r\n\r\nHere and other places, N seems like it should be 32 bits instead 64.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-02T19:39:04Z",
      "diff_hunk" : "@@ -0,0 +1,155 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <hash.h>\n+#include <streams.h>\n+\n+/// SerType used to serialize parameters in GCS filter encoding.\n+constexpr int GCS_SER_TYPE = SER_NETWORK;\n+\n+/// Protocol version used to serialize parameters in GCS filter encoding.\n+constexpr int GCS_SER_VERSION = 0;\n+\n+template <typename OStream>\n+static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t k, uint64_t n)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178629277",
      "id" : 178629277,
      "original_commit_id" : "1b1d231ed77869174c33fde97efc65b0a0044ae0",
      "original_position" : 16,
      "path" : "src/blockfilter.cpp",
      "position" : 18,
      "pull_request_review_id" : 108683613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-02T20:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178629277",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178630615"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178630615"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"blockfilter: Implement GCSFilter constructors.\"\r\n\r\nI wonder if the optimization below actually buys anything over a more direct:\r\n\r\n```c++\r\nfor (int i = 0; i < q; ++i) bitwriter.Write(1, 1);\r\n```",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-02T19:45:15Z",
      "diff_hunk" : "@@ -0,0 +1,155 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <hash.h>\n+#include <streams.h>\n+\n+/// SerType used to serialize parameters in GCS filter encoding.\n+constexpr int GCS_SER_TYPE = SER_NETWORK;\n+\n+/// Protocol version used to serialize parameters in GCS filter encoding.\n+constexpr int GCS_SER_VERSION = 0;\n+\n+template <typename OStream>\n+static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t k, uint64_t n)\n+{\n+    // Write quotient as unary-encoded: q 1's followed by one 0.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178630615",
      "id" : 178630615,
      "original_commit_id" : "1b1d231ed77869174c33fde97efc65b0a0044ae0",
      "original_position" : 18,
      "path" : "src/blockfilter.cpp",
      "position" : 20,
      "pull_request_review_id" : 108683613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-02T20:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178630615",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178637016"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178637016"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"blockfilter: Implement GCSFilter Match methods.\"\r\n\r\nWould suggest implementing `Match` and `MatchAny` in terms of a common\r\n\r\n```c++\r\nMatch(const uint64_t* sorted_element_hashes, size_t size)\r\n```\r\n\r\nmethod to get rid of all the code duplication between the existing methods. No outside code would need to change, they could just call \r\n\r\n```c++\r\nMatch(&query, 1);\r\nMatch(queries.data(), queries.size());\r\n```\r\n\r\nrespectively.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-02T20:12:15Z",
      "diff_hunk" : "@@ -153,3 +153,64 @@ GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P,\n \n     bitwriter.Flush();\n }\n+\n+bool GCSFilter::Match(const GCSFilter::Element& element) const\n+{\n+    uint64_t query = HashToRange(element);\n+\n+    CVectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n+\n+    // Seek forward by size of N\n+    uint64_t N = ReadCompactSize(stream);\n+    assert(N == m_N);\n+\n+    BitStreamReader<CVectorReader> bitreader(stream);\n+\n+    uint64_t value = 0;\n+    for (uint64_t i = 0; i < m_N; i++) {\n+        uint64_t delta = GolombRiceDecode(bitreader, m_P);\n+        value += delta;\n+\n+        if (query == value) {\n+            return true;\n+        } else if (query < value) {\n+            break;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+bool GCSFilter::MatchAny(const std::set<Element>& elements) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178637016",
      "id" : 178637016,
      "original_commit_id" : "fb96e966c87f27fbfdf53ad7b8fd5a3c6c679a77",
      "original_position" : 32,
      "path" : "src/blockfilter.cpp",
      "position" : 186,
      "pull_request_review_id" : 108683613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-02T20:23:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178637016",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r180940245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180940245"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Didn't know about that guideline. Will do.",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-12T01:04:44Z",
      "diff_hunk" : "@@ -509,12 +509,88 @@ class CDataStream\n     }\n };\n \n+template <typename IStream>\n+class BitStreamReader\n+{\n+private:\n+    IStream& m_istream;\n+    uint8_t m_buffer;\n+    int m_offset;\n \n+public:\n+    BitStreamReader(IStream& istream)\n+        : m_istream(istream), m_buffer(0), m_offset(8) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r180940245",
      "id" : 180940245,
      "in_reply_to_id" : 178604425,
      "original_commit_id" : "e6e320d600c70cf4d530b49f3e526cdb7e66be6d",
      "original_position" : 14,
      "path" : "src/streams.h",
      "position" : 95,
      "pull_request_review_id" : 111451491,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-12T01:04:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180940245",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nNice work!",
      "created_at" : "2018-04-15T06:19:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-381383206",
      "id" : 381383206,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-04-15T06:19:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381383206",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Has there been any work yet on using this to implement BIP 157? I've worked on indexing in the past, and could take a look at implementing it.",
      "created_at" : "2018-04-17T01:20:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-381799042",
      "id" : 381799042,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12254",
      "updated_at" : "2018-04-17T01:20:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381799042",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/544777?v=4",
         "events_url" : "https://api.github.com/users/braydonf/events{/privacy}",
         "followers_url" : "https://api.github.com/users/braydonf/followers",
         "following_url" : "https://api.github.com/users/braydonf/following{/other_user}",
         "gists_url" : "https://api.github.com/users/braydonf/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/braydonf",
         "id" : 544777,
         "login" : "braydonf",
         "organizations_url" : "https://api.github.com/users/braydonf/orgs",
         "received_events_url" : "https://api.github.com/users/braydonf/received_events",
         "repos_url" : "https://api.github.com/users/braydonf/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/braydonf/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/braydonf/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/braydonf"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r181930525"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181930525"
         }
      },
      "author_association" : "OWNER",
      "body" : "This does not seem up to date with the latest version of BIP158 (I'll review in full later).",
      "commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "created_at" : "2018-04-17T01:30:56Z",
      "diff_hunk" : "@@ -0,0 +1,323 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <hash.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <streams.h>\n+\n+/// SerType used to serialize parameters in GCS filter encoding.\n+constexpr int GCS_SER_TYPE = SER_NETWORK;\n+\n+/// Protocol version used to serialize parameters in GCS filter encoding.\n+constexpr int GCS_SER_VERSION = 0;\n+\n+template <typename OStream>\n+static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t k, uint64_t n)\n+{\n+    // Write quotient as unary-encoded: q 1's followed by one 0.\n+    uint64_t q = n >> k;\n+    while (q > 0) {\n+        int nbits = q <= 64 ? static_cast<int>(q) : 64;\n+        bitwriter.Write(~0ULL, nbits);\n+        q -= nbits;\n+    }\n+    bitwriter.Write(0, 1);\n+\n+    // Write the remainder in k bits. Since the remainder is just the bottom\n+    // k bits of n, there is no need to mask first.\n+    bitwriter.Write(n, k);\n+}\n+\n+template <typename IStream>\n+static uint64_t GolombRiceDecode(BitStreamReader<IStream>& bitreader, uint8_t k)\n+{\n+    // Read unary-encoded quotient: q 1's followed by one 0.\n+    uint64_t q = 0;\n+    while (bitreader.Read(1) == 1) {\n+        q++;\n+    }\n+\n+    uint64_t r = bitreader.Read(k);\n+\n+    return (q << k) + r;\n+}\n+\n+// Map a value x that is uniformly distributed in the range [0, 2^64) to a\n+// value uniformly distributed in [0, n) by returning the upper 64 bits of\n+// x * n.\n+//\n+// See: https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n+static uint64_t MapIntoRange(uint64_t x, uint64_t n)\n+{\n+    // To perform the calculation on 64-bit numbers without losing the\n+    // result to overflow, split the numbers into the most significant and\n+    // least significant 32 bits and perform multiplication piece-wise.\n+    //\n+    // See: https://stackoverflow.com/a/26855440\n+    uint64_t x_hi = x >> 32;\n+    uint64_t x_lo = x & 0xFFFFFFFF;\n+    uint64_t n_hi = n >> 32;\n+    uint64_t n_lo = n & 0xFFFFFFFF;\n+\n+    uint64_t ac = x_hi * n_hi;\n+    uint64_t ad = x_hi * n_lo;\n+    uint64_t bc = x_lo * n_hi;\n+    uint64_t bd = x_lo * n_lo;\n+\n+    uint64_t mid34 = (bd >> 32) + (bc & 0xFFFFFFFF) + (ad & 0xFFFFFFFF);\n+    uint64_t upper64 = ac + (bc >> 32) + (ad >> 32) + (mid34 >> 32);\n+    return upper64;\n+}\n+\n+uint64_t GCSFilter::HashToRange(const Element& element) const\n+{\n+    uint64_t hash = CSipHasher(m_siphash_k0, m_siphash_k1)\n+        .Write(element.data(), element.size())\n+        .Finalize();\n+    return MapIntoRange(hash, m_F);\n+}\n+\n+std::vector<uint64_t> GCSFilter::BuildHashedSet(const std::set<Element>& elements) const\n+{\n+    std::vector<uint64_t> hashed_elements;\n+    hashed_elements.reserve(elements.size());\n+    for (const Element& element : elements) {\n+        hashed_elements.push_back(HashToRange(element));\n+    }\n+    std::sort(hashed_elements.begin(), hashed_elements.end());\n+    return hashed_elements;\n+}\n+\n+GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P)\n+    : m_siphash_k0(siphash_k0), m_siphash_k1(siphash_k1), m_P(P), m_N(0), m_F(0)\n+{\n+    if (m_P > 32) {\n+        throw std::invalid_argument(\"P must be <=32\");\n+    }\n+}\n+\n+GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P,\n+                     std::vector<unsigned char> encoded_filter)\n+    : GCSFilter(siphash_k0, siphash_k1, P)\n+{\n+    m_encoded = std::move(encoded_filter);\n+\n+    CVectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n+\n+    m_N = ReadCompactSize(stream);\n+    m_F = m_N << m_P;\n+\n+    if (m_N >= (1ULL << 32)) {\n+        throw std::ios_base::failure(\"N must be <2^32\");\n+    }\n+\n+    // Verify that the encoded filter contains exactly N elements. If it has too much or too little\n+    // data, a std::ios_base::failure exception will be raised.\n+    BitStreamReader<CVectorReader> bitreader(stream);\n+    for (uint64_t i = 0; i < m_N; i++) {\n+        GolombRiceDecode(bitreader, m_P);\n+    }\n+    if (!stream.empty()) {\n+        throw std::ios_base::failure(\"encoded_filter contains excess data\");\n+    }\n+}\n+\n+GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P,\n+                     const std::set<GCSFilter::Element>& elements)\n+    : GCSFilter(siphash_k0, siphash_k1, P)\n+{\n+    if (elements.size() >= (1ULL << 32)) {\n+        throw std::invalid_argument(\"N must be <2^32\");\n+    }\n+\n+    m_N = elements.size();\n+    m_F = m_N << m_P;\n+\n+    CVectorWriter stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n+\n+    WriteCompactSize(stream, m_N);\n+\n+    if (elements.empty()) {\n+        return;\n+    }\n+\n+    BitStreamWriter<CVectorWriter> bitwriter(stream);\n+\n+    uint64_t last_value = 0;\n+    for (uint64_t value : BuildHashedSet(elements)) {\n+        uint64_t delta = value - last_value;\n+        GolombRiceEncode(bitwriter, m_P, delta);\n+        last_value = value;\n+    }\n+\n+    bitwriter.Flush();\n+}\n+\n+bool GCSFilter::Match(const GCSFilter::Element& element) const\n+{\n+    uint64_t query = HashToRange(element);\n+\n+    CVectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n+\n+    // Seek forward by size of N\n+    uint64_t N = ReadCompactSize(stream);\n+    assert(N == m_N);\n+\n+    BitStreamReader<CVectorReader> bitreader(stream);\n+\n+    uint64_t value = 0;\n+    for (uint64_t i = 0; i < m_N; i++) {\n+        uint64_t delta = GolombRiceDecode(bitreader, m_P);\n+        value += delta;\n+\n+        if (query == value) {\n+            return true;\n+        } else if (query < value) {\n+            break;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+bool GCSFilter::MatchAny(const std::set<Element>& elements) const\n+{\n+    const std::vector<uint64_t>&& queries = BuildHashedSet(elements);\n+\n+    CVectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n+\n+    // Seek forward by size of N\n+    uint64_t N = ReadCompactSize(stream);\n+    assert(N == m_N);\n+\n+    BitStreamReader<CVectorReader> bitreader(stream);\n+\n+    uint64_t value = 0;\n+    auto query_it = queries.begin();\n+    for (uint64_t i = 0; i < m_N; i++) {\n+        uint64_t delta = GolombRiceDecode(bitreader, m_P);\n+        value += delta;\n+\n+        while (true) {\n+            if (query_it == queries.end()) {\n+                return false;\n+            } else if (*query_it == value) {\n+                return true;\n+            } else if (*query_it > value) {\n+                break;\n+            }\n+\n+            query_it++;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+static std::set<GCSFilter::Element> BasicFilterElements(const CBlock& block)\n+{\n+    std::set<GCSFilter::Element> elements;\n+    for (const CTransactionRef& tx : block.vtx) {\n+        // Include txid of each transaction.\n+        const uint256& txid = tx->GetHash();\n+        elements.emplace(txid.begin(), txid.end());\n+\n+        // Include previous outpoint of each input, except for coinbase.\n+        if (!tx->IsCoinBase()) {\n+            for (const CTxIn& txin : tx->vin) {\n+                std::vector<unsigned char> ser_outpoint;\n+                CVectorWriter(GCS_SER_TYPE, GCS_SER_VERSION, ser_outpoint, 0, txin.prevout);\n+                elements.insert(std::move(ser_outpoint));\n+            }\n+        }\n+\n+        // Include all data pushes in output scripts.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12254#discussion_r181930525",
      "id" : 181930525,
      "original_commit_id" : "68777c59c91fdcdc2967a39b70d41f215c6846ca",
      "original_position" : 237,
      "path" : "src/blockfilter.cpp",
      "position" : 237,
      "pull_request_review_id" : 112641204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12254",
      "updated_at" : "2018-04-17T01:30:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181930525",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
