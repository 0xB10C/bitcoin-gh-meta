[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12274#discussion_r164062623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12274"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164062623"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should this block be wrapped in a LIBEVENT_VERSION_NUMBER macro guard so it only occurs in the affected version range?\r\n\r\nSeems like it would be easier for future cleanups to see where the version macro is checked, say in the instance that a minimum version of libevent is defined and code like this could be safely removed.",
      "commit_id" : "cdcc0ed01195bf88532a9afc905593833a7af43c",
      "created_at" : "2018-01-26T09:14:38Z",
      "diff_hunk" : "@@ -288,14 +376,19 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     if (i != iend) {\n         std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(std::move(hreq), path, i->handler));\n         assert(workQueue);\n-        if (workQueue->Enqueue(item.get()))\n+        if (workQueue->Enqueue(item.get())) {\n+            // Disable reading to work around a libevent bug, fixed in 2.2.0.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12274#discussion_r164062623",
      "id" : 164062623,
      "original_commit_id" : "cdcc0ed01195bf88532a9afc905593833a7af43c",
      "original_position" : 155,
      "path" : "src/httpserver.cpp",
      "position" : 155,
      "pull_request_review_id" : 91778837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12274",
      "updated_at" : "2018-01-26T09:21:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164062623",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7519582?v=4",
         "events_url" : "https://api.github.com/users/tjps/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tjps/followers",
         "following_url" : "https://api.github.com/users/tjps/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tjps/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tjps",
         "id" : 7519582,
         "login" : "tjps",
         "organizations_url" : "https://api.github.com/users/tjps/orgs",
         "received_events_url" : "https://api.github.com/users/tjps/received_events",
         "repos_url" : "https://api.github.com/users/tjps/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tjps/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tjps/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tjps"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12274#discussion_r164063956"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12274"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164063956"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not that it probably matters in most configurations where the fd limit is ~1K, but making this an unordered_set would be slightly beneficial in the high fd limit cases.",
      "commit_id" : "cdcc0ed01195bf88532a9afc905593833a7af43c",
      "created_at" : "2018-01-26T09:21:01Z",
      "diff_hunk" : "@@ -40,6 +41,55 @@\n /** Maximum size of http request (request line + headers) */\n static const size_t MAX_HEADERS_SIZE = 8192;\n \n+class ConnectionLimiter\n+{\n+public:\n+    ConnectionLimiter(std::vector<evconnlistener*> listeners, unsigned int limit) : m_limit(limit), m_listeners(std::move(listeners))\n+    {\n+        assert(m_limit > 0);\n+    }\n+    void AddConnection(evutil_socket_t fd)\n+    {\n+        // Disable socket accepting if adding this connection puts us equal to the limit\n+        if (!Interrupted() && m_sockets.insert(fd).second && m_sockets.size() == m_limit) {\n+            LogPrint(BCLog::HTTP, \"Suspending new connections\");\n+            for (const auto& listener : m_listeners) {\n+                evconnlistener_disable(listener);\n+            }\n+        }\n+    }\n+    void RemoveConnection(evutil_socket_t fd)\n+    {\n+        // Re-enable socket accepting if removing this connection brings us\n+        // back down under the limit\n+        if (m_sockets.erase(fd) && m_sockets.size() + 1 == m_limit && !Interrupted()) {\n+            LogPrint(BCLog::HTTP, \"Resuming new connections\\n\");\n+            for (const auto& listener : m_listeners) {\n+                evconnlistener_enable(listener);\n+            }\n+        }\n+    }\n+    bool IsReady() const\n+    {\n+        return m_sockets.size() < m_limit && !Interrupted();\n+    }\n+    void Interrupt()\n+    {\n+        m_interrupted.store(true, std::memory_order_release);\n+    }\n+private:\n+\n+    inline bool Interrupted() const\n+    {\n+        return m_interrupted.load(std::memory_order_acquire);\n+    }\n+\n+    const unsigned int m_limit;\n+    std::vector<evconnlistener*> m_listeners;\n+    std::set<evutil_socket_t> m_sockets;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12274#discussion_r164063956",
      "id" : 164063956,
      "original_commit_id" : "cdcc0ed01195bf88532a9afc905593833a7af43c",
      "original_position" : 57,
      "path" : "src/httpserver.cpp",
      "position" : 57,
      "pull_request_review_id" : 91778837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12274",
      "updated_at" : "2018-01-26T09:21:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164063956",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7519582?v=4",
         "events_url" : "https://api.github.com/users/tjps/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tjps/followers",
         "following_url" : "https://api.github.com/users/tjps/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tjps/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tjps",
         "id" : 7519582,
         "login" : "tjps",
         "organizations_url" : "https://api.github.com/users/tjps/orgs",
         "received_events_url" : "https://api.github.com/users/tjps/received_events",
         "repos_url" : "https://api.github.com/users/tjps/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tjps/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tjps/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tjps"
      }
   }
]
