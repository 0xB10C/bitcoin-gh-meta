[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14303 (rpc: Early call once CWallet::MarkDirty in import calls by promag)\n* #14075 (Import watch only pubkeys to the keypool if private keys are disabled by achow101)\n* #14021 (Import key origin data through importmulti by achow101)\n* #14019 (Import pubkeys when importing p2sh with importmulti by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-10-10T04:59:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-428438305",
      "id" : 428438305,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyODQzODMwNQ==",
      "updated_at" : "2018-10-10T04:59:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/428438305",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224960596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224960596"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No longer needed?",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-13T13:48:28Z",
      "diff_hunk" : "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());\n+                CScriptID witness_id(witnessScript);\n+                CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (witnessDestination != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n                 }\n \n-                std::vector<unsigned char> vData(ParseHex(strPubKey));\n-                CPubKey pubKey(vData.begin(), vData.end());\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-                if (!pubKey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n                 }\n+            }\n \n-                CTxDestination pubkey_dest = pubKey.GetID();\n+        // P2WSH\n+        } else if (!strWitnessScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(strWitnessScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+            }\n \n-                // Consistency check.\n-                if (!(pubkey_dest == dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n-                }\n+            // Generate the scripts\n+            std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+            CScript witnessScript = CScript(vData.begin(), vData.end());\n+            CScriptID witness_id(witnessScript);\n+            CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                CScript pubKeyScript = GetScriptForDestination(pubkey_dest);\n+            // Check that the witnessScript and scriptPubKey match\n+            if (witnessDestination != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey\");\n+            }\n \n-                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n \n-                pwallet->MarkDirty();\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        // P2PK/P2PKH/P2WPKH\n+        } else if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            if (keys.size() > 1 || pubKeys.size() > 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+            }\n+            CPubKey pubkey;\n+            if (keys.size()) {\n+                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n+            }\n+            if (pubKeys.size()) {\n+                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n+                CPubKey pubkey_temp(vData.begin(), vData.end());\n+                if (pubkey.size() && pubkey_temp != pubkey) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n                 }\n+                pubkey = pubkey_temp;\n+            }\n+            if (pubkey.size()) {\n+              std::vector<CTxDestination> destinations = GetAllDestinationsForKey(pubkey);\n+              if (std::find(destinations.begin(), destinations.end(), dest) == destinations.end()) {\n+                  throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Key does not match address destination\");\n+              }\n+            }\n+        }\n \n-                // add to address book or update label\n-                if (IsValidDestination(pubkey_dest)) {\n-                    pwallet->SetAddressBook(pubkey_dest, label, \"receive\");\n-                }\n+        // Import the address\n+        if (::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        }\n \n-                // TODO Is this necessary?\n-                CScript scriptRawPubKey = GetScriptForRawPubKey(pubKey);\n+        pwallet->MarkDirty();\n \n-                if (::IsMine(*pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+        if (!pwallet->AddWatchOnly(script, timestamp)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        }\n \n-                pwallet->MarkDirty();\n+        // add to address book or update label\n+        if (IsValidDestination(dest)) {\n+            pwallet->SetAddressBook(dest, label, \"receive\");\n+        }\n \n-                if (!pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-                }\n+        // Import public keys.\n+        for (size_t i = 0; i < pubKeys.size(); i++) {\n+            const std::string& strPubKey = pubKeys[i].get_str();\n \n-                success = true;\n+            if (!IsHex(strPubKey)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n             }\n \n-            // Import private keys.\n-            if (keys.size()) {\n-                const std::string& strPrivkey = keys[0].get_str();\n-\n-                // Checks.\n-                CKey key = DecodeSecret(strPrivkey);\n-\n-                if (!key.IsValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                }\n+            std::vector<unsigned char> vData(ParseHex(strPubKey));\n+            CPubKey pubKey(vData.begin(), vData.end());\n \n-                CPubKey pubKey = key.GetPubKey();\n-                assert(key.VerifyPubKey(pubKey));\n+            if (!pubKey.IsFullyValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+            }\n \n-                CTxDestination pubkey_dest = pubKey.GetID();\n+            CTxDestination pubkey_dest = pubKey.GetID();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224960596",
      "id" : 224960596,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk2MDU5Ng==",
      "original_commit_id" : "59f8e547130fc1cb756da7d990f65445ca196f5f",
      "original_position" : 300,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 164463758,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224960596",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224960649"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224960649"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use another variable name to avoid shadowing existing local variable `vData` :-)",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-13T13:50:03Z",
      "diff_hunk" : "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224960649",
      "id" : 224960649,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk2MDY0OQ==",
      "original_commit_id" : "59f8e547130fc1cb756da7d990f65445ca196f5f",
      "original_position" : 153,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 164463821,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224960649",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for reviewing @practicalswift, both comments addressed :)",
      "created_at" : "2018-10-14T00:04:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-429585340",
      "id" : 429585340,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyOTU4NTM0MA==",
      "updated_at" : "2018-10-14T00:04:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429585340",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Instead of checking that `strRedeemScript` is not empty, this should check that `strWitnessScript` is empty. Or it could check both: `!strRedeemScript.empty() && strWitnessScript.empty()`.",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-14T02:36:32Z",
      "diff_hunk" : "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977141",
      "id" : 224977141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzE0MQ==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 56,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 51,
      "pull_request_review_id" : 164482277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977141",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977175"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: snake_case",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-14T02:38:35Z",
      "diff_hunk" : "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Provide witnessscript not redeemscript for P2WSH address\");\n         }\n \n-        // Process. //\n-\n         // P2SH\n-        if (isP2SH) {\n+        if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n+            // Check the redeemScript is valid\n+            if (!IsHex(strRedeemScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+            }\n+\n             // Import redeem script.\n             std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n             CScript redeemScript = CScript(vData.begin(), vData.end());\n+            CScriptID redeem_id(redeemScript);\n+            CScript redeemDestination = GetScriptForDestination(redeem_id);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977175",
      "id" : 224977175,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzE3NQ==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 74,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 164482277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977175",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977177"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: snake_case",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-14T02:38:42Z",
      "diff_hunk" : "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n-        bool success = false;\n-\n-        // Required fields.\n+        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-\n-        // Should have script or JSON with \"address\".\n-        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");\n         }\n+        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n \n         // Optional fields.\n         const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+        const std::string& strWitnessScript = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977177",
      "id" : 224977177,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzE3Nw==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 20,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 164482277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977177",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977198"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: snake_case",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-14T02:40:00Z",
      "diff_hunk" : "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977198",
      "id" : 224977198,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzE5OA==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 154,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 164482277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977198",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977201"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: snake_case",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-14T02:40:06Z",
      "diff_hunk" : "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());\n+                CScriptID witness_id(witnessScript);\n+                CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977201",
      "id" : 224977201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzIwMQ==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 156,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 164482277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977201",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977230"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This error wouldn't make sense if only pubkeys were given.",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-14T02:42:21Z",
      "diff_hunk" : "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());\n+                CScriptID witness_id(witnessScript);\n+                CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (witnessDestination != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n                 }\n \n-                std::vector<unsigned char> vData(ParseHex(strPubKey));\n-                CPubKey pubKey(vData.begin(), vData.end());\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-                if (!pubKey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n                 }\n+            }\n \n-                CTxDestination pubkey_dest = pubKey.GetID();\n+        // P2WSH\n+        } else if (!strWitnessScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(strWitnessScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+            }\n \n-                // Consistency check.\n-                if (!(pubkey_dest == dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n-                }\n+            // Generate the scripts\n+            std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+            CScript witnessScript = CScript(vData.begin(), vData.end());\n+            CScriptID witness_id(witnessScript);\n+            CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                CScript pubKeyScript = GetScriptForDestination(pubkey_dest);\n+            // Check that the witnessScript and scriptPubKey match\n+            if (witnessDestination != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey\");\n+            }\n \n-                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n \n-                pwallet->MarkDirty();\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        // P2PK/P2PKH/P2WPKH\n+        } else if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            if (keys.size() > 1 || pubKeys.size() > 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977230",
      "id" : 224977230,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzIzMA==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 220,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 164482277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977230",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977262"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977262"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Instead of checking pubkey size, check validity? (e.g. use `IsValid()` or `IsFullyValid()`)",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-14T02:44:10Z",
      "diff_hunk" : "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());\n+                CScriptID witness_id(witnessScript);\n+                CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (witnessDestination != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n                 }\n \n-                std::vector<unsigned char> vData(ParseHex(strPubKey));\n-                CPubKey pubKey(vData.begin(), vData.end());\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-                if (!pubKey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n                 }\n+            }\n \n-                CTxDestination pubkey_dest = pubKey.GetID();\n+        // P2WSH\n+        } else if (!strWitnessScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(strWitnessScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+            }\n \n-                // Consistency check.\n-                if (!(pubkey_dest == dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n-                }\n+            // Generate the scripts\n+            std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+            CScript witnessScript = CScript(vData.begin(), vData.end());\n+            CScriptID witness_id(witnessScript);\n+            CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                CScript pubKeyScript = GetScriptForDestination(pubkey_dest);\n+            // Check that the witnessScript and scriptPubKey match\n+            if (witnessDestination != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey\");\n+            }\n \n-                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n \n-                pwallet->MarkDirty();\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        // P2PK/P2PKH/P2WPKH\n+        } else if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            if (keys.size() > 1 || pubKeys.size() > 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+            }\n+            CPubKey pubkey;\n+            if (keys.size()) {\n+                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n+            }\n+            if (pubKeys.size()) {\n+                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n+                CPubKey pubkey_temp(vData.begin(), vData.end());\n+                if (pubkey.size() && pubkey_temp != pubkey) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n                 }\n+                pubkey = pubkey_temp;\n+            }\n+            if (pubkey.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977262",
      "id" : 224977262,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzI2Mg==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 234,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 164482277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977262",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224982951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224982951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It should be possible to provide a P2WSH scriptPubKey without providing the witness script for it, e.g. watch only, so I don't think that's right",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-14T07:39:21Z",
      "diff_hunk" : "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224982951",
      "id" : 224982951,
      "in_reply_to_id" : 224977141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk4Mjk1MQ==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 56,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 51,
      "pull_request_review_id" : 164488350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224982951",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224983305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224983305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IsValid() just performs the same size check anyway, but yep I'll do that for the sake of clarity, I don't think we need an IsFullyValid() check here",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-14T07:53:23Z",
      "diff_hunk" : "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());\n+                CScriptID witness_id(witnessScript);\n+                CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (witnessDestination != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n                 }\n \n-                std::vector<unsigned char> vData(ParseHex(strPubKey));\n-                CPubKey pubKey(vData.begin(), vData.end());\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-                if (!pubKey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n                 }\n+            }\n \n-                CTxDestination pubkey_dest = pubKey.GetID();\n+        // P2WSH\n+        } else if (!strWitnessScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(strWitnessScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+            }\n \n-                // Consistency check.\n-                if (!(pubkey_dest == dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n-                }\n+            // Generate the scripts\n+            std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+            CScript witnessScript = CScript(vData.begin(), vData.end());\n+            CScriptID witness_id(witnessScript);\n+            CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                CScript pubKeyScript = GetScriptForDestination(pubkey_dest);\n+            // Check that the witnessScript and scriptPubKey match\n+            if (witnessDestination != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey\");\n+            }\n \n-                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n \n-                pwallet->MarkDirty();\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        // P2PK/P2PKH/P2WPKH\n+        } else if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            if (keys.size() > 1 || pubKeys.size() > 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+            }\n+            CPubKey pubkey;\n+            if (keys.size()) {\n+                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n+            }\n+            if (pubKeys.size()) {\n+                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n+                CPubKey pubkey_temp(vData.begin(), vData.end());\n+                if (pubkey.size() && pubkey_temp != pubkey) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n                 }\n+                pubkey = pubkey_temp;\n+            }\n+            if (pubkey.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224983305",
      "id" : 224983305,
      "in_reply_to_id" : 224977262,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk4MzMwNQ==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 234,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 164488747,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224983305",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @achow101, addressed all your points",
      "created_at" : "2018-10-14T09:22:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-429609470",
      "id" : 429609470,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyOTYwOTQ3MA==",
      "updated_at" : "2018-10-14T09:22:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429609470",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225017450"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225017450"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think checking both covers that case.",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-15T00:46:41Z",
      "diff_hunk" : "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225017450",
      "id" : 225017450,
      "in_reply_to_id" : 224977141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAxNzQ1MA==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 56,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 51,
      "pull_request_review_id" : 164524211,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225017450",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225017866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225017866"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Checking both would mean that if witnessScript and redeemScript were both present, it would allow it, which makes no sense if its not a P2WSH address",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-15T00:55:26Z",
      "diff_hunk" : "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225017866",
      "id" : 225017866,
      "in_reply_to_id" : 224977141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAxNzg2Ng==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 56,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 51,
      "pull_request_review_id" : 164524785,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T02:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225017866",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MeshCollider I don't think it's necessary to import the pubkeys involved separately anymore since #14424, and in fact that sounds very dangerous (you could be tricked into importing a 2-of-3 multisig where you have 2 of the keys, but then receiving a payment to a P2PKH of the third key, and seeing it treated towards your watch-only balance). NACK until that is fixed (or at least restricted to not have that issue, but I believe that rebasing on 14424 will be sufficient).",
      "created_at" : "2018-10-15T21:16:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430016033",
      "id" : 430016033,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDAxNjAzMw==",
      "updated_at" : "2018-10-15T21:16:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430016033",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa good point, fixed, and rebased on master to include the public key fix",
      "created_at" : "2018-10-16T00:15:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430057292",
      "id" : 430057292,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDA1NzI5Mg==",
      "updated_at" : "2018-10-16T01:38:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430057292",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think there are a few things that need fixing:\r\n* There doesn't seem to be code for P2SH-P2WPKH (which matters at least when passing in a pubkey in that case, which won't be imported).\r\n* The added tests only cover whether `importmulti` returns true, not whether it actually imported anything. \r\n* The added tests are restricted to watchonly and spendable cases, but no solvable-but-not-spendable ones.\r\n\r\n",
      "created_at" : "2018-10-17T00:32:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430448097",
      "id" : 430448097,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDQ0ODA5Nw==",
      "updated_at" : "2018-10-17T00:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430448097",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I believe I've addressed the points, thanks for the feedback so far",
      "created_at" : "2018-10-17T02:50:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430470951",
      "id" : 430470951,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDQ3MDk1MQ==",
      "updated_at" : "2018-10-17T02:50:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430470951",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225789734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225789734"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\r\n```",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-17T06:07:44Z",
      "diff_hunk" : "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n-        bool success = false;\n-\n-        // Required fields.\n+        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-\n-        // Should have script or JSON with \"address\".\n-        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225789734",
      "id" : 225789734,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc4OTczNA==",
      "original_commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "original_position" : 14,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 14,
      "pull_request_review_id" : 165466694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T08:26:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225789734",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225790155"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225790155"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure how the code suggestion feature works. I suspect it creates a new commit, in which case it's better to just copy-paste the text and amend an existing commit.",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-17T06:10:48Z",
      "diff_hunk" : "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n-        bool success = false;\n-\n-        // Required fields.\n+        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-\n-        // Should have script or JSON with \"address\".\n-        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225790155",
      "id" : 225790155,
      "in_reply_to_id" : 225789734,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5MDE1NQ==",
      "original_commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "original_position" : 14,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 14,
      "pull_request_review_id" : 165466694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T08:26:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225790155",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225791517"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225791517"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggest using the same error message as the above comment: `Internal addresses should not have a label`",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-17T06:20:00Z",
      "diff_hunk" : "@@ -858,32 +853,31 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225791517",
      "id" : 225791517,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5MTUxNw==",
      "original_commit_id" : "cd19a2e21ee296e821e3ab4d5b33309143458315",
      "original_position" : 44,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 44,
      "pull_request_review_id" : 165466694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T08:26:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225791517",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225794109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225794109"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> P2WSH scriptPubKey without providing the witness script for it, e.g. watch only\r\n\r\nDo we already support that? And test it? If not, maybe it's easier to just treat it as P2SH until we know the `witnessScript`.",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-17T06:33:45Z",
      "diff_hunk" : "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225794109",
      "id" : 225794109,
      "in_reply_to_id" : 224977141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5NDEwOQ==",
      "original_commit_id" : "3276b7e22a65606ad8866d898dd14082570aa814",
      "original_position" : 56,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 51,
      "pull_request_review_id" : 165466694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T08:26:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225794109",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225794821"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225794821"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it may make sense to repeat the trick from the P2SH block of 'descending' into scriptPubKey/address of the redeemscript, to the P2WSH block, and then do P2PK/P2PKH/P2WPKH as a totally new case rather than an else branch. This would make the code work correctly for P2PK/P2PKH nested inside P2WSH (maybe track that you don't permit P2WPKH inside P2WSH though).",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-17T06:37:26Z",
      "diff_hunk" : "@@ -892,103 +889,74 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n+            script = redeemScript;\n+            ExtractDestination(script, dest);\n+        }\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        // P2WSH\n+        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(witness_script_hex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n             }\n \n-            pwallet->MarkDirty();\n+            // Generate the scripts\n+            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+            CScriptID witness_id(witness_script);\n \n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n+            // Check that the witnessScript and scriptPubKey match\n+            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n+            }\n+\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witness_script, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n             }\n \n-            // Import private keys.\n+        // P2PK/P2PKH/P2WPKH",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225794821",
      "id" : 225794821,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5NDgyMQ==",
      "original_commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "original_position" : 134,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 134,
      "pull_request_review_id" : 165472974,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T06:48:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225794821",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225795550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225795550"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe move this function to a different file? Unless `dump` means dumping ground :-)\r\n\r\nI understand if you prefer to keep this PR simple though.",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-17T06:40:42Z",
      "diff_hunk" : "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225795550",
      "id" : 225795550,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5NTU1MA==",
      "original_commit_id" : "cd19a2e21ee296e821e3ab4d5b33309143458315",
      "original_position" : 1,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 1,
      "pull_request_review_id" : 165466694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T08:26:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225795550",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225796932"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225796932"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There are a number more scenarios that make sense to test, I think:\r\n* Address based import (without key/script) of P2WSH-multisig\r\n* For all of P2WPKH, P2WSH-multisig, P2SH-P2WPKH, P2SH-P2WSH-multisig, versions with script/pubkey but no private key, and test that the result is solvable.\r\n* P2WPKH with private key, result must be spendable (not just watchonly)\r\n* P2WSH-multisig and P2SH-multisig with more than 1 key, where some of the keys are specified as private keys, and some as public keys.\r\n",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-17T06:47:26Z",
      "diff_hunk" : "@@ -458,6 +468,74 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225796932",
      "id" : 225796932,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5NjkzMg==",
      "original_commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "original_position" : 60,
      "path" : "test/functional/wallet_importmulti.py",
      "position" : 60,
      "pull_request_review_id" : 165472974,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T06:48:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225796932",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225801208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225801208"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Re \"Address based import\", should this result in the following?\r\n```\r\n  \"ismine\": false,\r\n  \"iswatchonly\": true,\r\n  \"issolvable\": false,\r\n  \"isscript\": true,\r\n  \"iswitness\": true,\r\n  \"witness_version\": 0\r\n```\r\n\r\nRe \"must be spendable\", this means ` \"ismine\": true` and `\"iswatchonly\": false`?",
      "commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "created_at" : "2018-10-17T07:07:09Z",
      "diff_hunk" : "@@ -458,6 +468,74 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225801208",
      "id" : 225801208,
      "in_reply_to_id" : 225796932,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTgwMTIwOA==",
      "original_commit_id" : "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
      "original_position" : 60,
      "path" : "test/functional/wallet_importmulti.py",
      "position" : 60,
      "pull_request_review_id" : 165466694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
      "updated_at" : "2018-10-17T08:26:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225801208",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
