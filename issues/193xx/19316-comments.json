[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19364 (net processing: Move orphan reprocessing to a global by jnewbery)\n* #19315 ([tests] Allow outbound & block-relay-only connections in functional tests. by amitiuttarwar)\n* #19219 (Replace automatic bans with discouragement filter by sipa)\n* #19064 (refactor: Cleanup thread ctor calls by hebasto)\n* #18925 (Add extra thread for scheduler, move TorControl and OpenAddedConnections to scheduler by naumenkogs)\n* #17785 (p2p: Unify Send and Receive protocol versions by hebasto)\n* #17428 (p2p: Try to preserve outbound block-relay-only connections during restart by hebasto)\n* #14033 (p2p: Drop CADDR_TIME_VERSION checks now that MIN_PEER_PROTO_VERSION is greater by Empact)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-06-17T23:07:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645671781",
      "id" : 645671781,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTY3MTc4MQ==",
      "updated_at" : "2020-06-25T05:13:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645671781",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\nIs `enum ConnectionType` the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\r\nIt's true that it's non-ambiguous right now, but maybe we want to make them a bitmask in advance for the sake of explicitness, since we are already refactoring it? ",
      "created_at" : "2020-06-18T07:18:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645829587",
      "id" : 645829587,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTgyOTU4Nw==",
      "updated_at" : "2020-06-18T07:18:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645829587",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\n> Is enum ConnectionType the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\r\n\r\nI think enum is the right approach. OUTBOUND here means a connection that is created automatically by the OpenConnections thread. Yes, there are other kinds of connection that the node originates, but for clarity, I don't think those should be referred to as 'OUTBOUND'.\r\n\r\nI think we definitely don't want a bitmask of different connection capabilities. That leads to an combinatorial explosion of connection types that you need to either test or explicitly disallow. ",
      "created_at" : "2020-06-18T19:56:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646274698",
      "id" : 646274698,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjI3NDY5OA==",
      "updated_at" : "2020-06-18T19:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646274698",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@naumenkogs its a good question to ask, but I think enforcing mutual exclusivity makes more sense and what allows for a lot of the simplicity. @jnewbery explained the main reasons, I want to add some additional points\r\n- everything but `INBOUND` originates from the node, but `OUTBOUND` refers to a specific type, which is the most common, full-relay, outbound connection. so I do think its exclusive to the other connection types. on the enum I added `OUTBOUND, // full relay connections (blocks, addrs, txns)`, but lmk if you have suggestions on how it could be clarified better.   \r\n- if we support combinations, we have to add many behavioral checks to ensure logical adherence. lots of the cleanup in this PR shed light on how brittle/annoying it is to have those checks scattered everywhere. so, I think if we are adding connection types in the future, designing the conn_type to fit into the flat structure better supports code-simplicity-over-time as well. \r\n\r\n---\r\n\r\nOn a different note, I have a question with the fuzz tests & would appreciate any guidance. \r\n\r\nSince I change the signature of the `CNode` constructor, I'm causing a [test failure](https://travis-ci.org/github/bitcoin/bitcoin/jobs/699509978). I found [this function](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/FuzzedDataProvider.h#L184) to support fuzz testing with enums, but am unclear on how to implement. It seems I need to add `kMaxValue` to the enum. \r\n\r\nI'm wondering if the pattern is: \r\na) mimic the enum in the tests & add `kMaxValue` there, or \r\nb) import something into `net.cpp` and define directly on the code implementation of the enum.\r\nOption B seems strange to add that dependency to `net`, but option A seems like it would be easy to forget to add an enum type to the fuzz test if we add a type to the cpp code in the future. \r\n\r\n@practicalswift, @MarcoFalke, any chance either of you are able to advise? ðð½",
      "created_at" : "2020-06-18T21:03:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479",
      "id" : 646304479,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjMwNDQ3OQ==",
      "updated_at" : "2020-06-18T21:03:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646304479",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@amitiuttarwar Thanks for the ping! I'd suggest using `PickValueInArray` like in these examples:\r\n\r\n```\r\n$ git grep -E 'PickValueInArray.*\\(\\{.+' \"src/test/fuzz/**.cpp\"\r\nsrc/test/fuzz/bloom_filter.cpp:        static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\r\nsrc/test/fuzz/fees.cpp:    const FeeReason fee_reason = fuzzed_data_provider.PickValueInArray({FeeReason::NONE, FeeReason::HALF_ESTIMATE, FeeReason::FULL_ESTIMATE, FeeReason::DOUBLE_ESTIMATE, FeeReason::CONSERVATIVE, FeeReason::MEMPOOL_MIN, FeeReason::PAYTXFEE, FeeReason::FALLBACK, FeeReason::REQUIRED});\r\nsrc/test/fuzz/kitchen_sink.cpp:    const TransactionError transaction_error = fuzzed_data_provider.PickValueInArray<TransactionError>({TransactionError::OK, TransactionError::MISSING_INPUTS, TransactionError::ALREADY_IN_CHAIN, TransactionError::P2P_DISABLED, TransactionError::MEMPOOL_REJECTED, TransactionError::MEMPOOL_ERROR, TransactionError::INVALID_PSBT, TransactionError::PSBT_MISMATCH, TransactionError::SIGHASH_MISMATCH, TransactionError::MAX_FEE_EXCEEDED});\r\nsrc/test/fuzz/message.cpp:        (void)SigningResultString(fuzzed_data_provider.PickValueInArray({SigningResult::OK, SigningResult::PRIVATE_KEY_NOT_AVAILABLE, SigningResult::SIGNING_FAILED}));\r\nsrc/test/fuzz/netaddress.cpp:    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\r\nsrc/test/fuzz/policy_estimator.cpp:        (void)block_policy_estimator.estimateRawFee(fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeFloatingPoint<double>(), fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}), fuzzed_data_provider.ConsumeBool() ? &result : nullptr);\r\nsrc/test/fuzz/policy_estimator.cpp:        (void)block_policy_estimator.HighestTargetTracked(fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}));\r\nsrc/test/fuzz/script_interpreter.cpp:                (void)SignatureHash(script_code, tx_to, in, fuzzed_data_provider.ConsumeIntegral<int>(), ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}), nullptr);\r\nsrc/test/fuzz/script_interpreter.cpp:                    (void)SignatureHash(script_code, tx_to, in, fuzzed_data_provider.ConsumeIntegral<int>(), ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}), &precomputed_transaction_data);\r\nsrc/test/fuzz/script_sign.cpp:                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\r\nsrc/test/fuzz/signature_checker.cpp:    const SigVersion sig_version = fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0});\r\nsrc/test/fuzz/system.cpp:            const OptionsCategory options_category = fuzzed_data_provider.PickValueInArray<OptionsCategory>({OptionsCategory::OPTIONS, OptionsCategory::CONNECTION, OptionsCategory::WALLET, OptionsCategory::WALLET_DEBUG_TEST, OptionsCategory::ZMQ, OptionsCategory::DEBUG_TEST, OptionsCategory::CHAINPARAMS, OptionsCategory::NODE_RELAY, OptionsCategory::BLOCK_CREATION, OptionsCategory::RPC, OptionsCategory::GUI, OptionsCategory::COMMANDS, OptionsCategory::REGISTER_COMMANDS, OptionsCategory::HIDDEN});\r\n```",
      "created_at" : "2020-06-22T09:25:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-647397659",
      "id" : 647397659,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NzM5NzY1OQ==",
      "updated_at" : "2020-06-22T09:25:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647397659",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443588532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443588532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/addnode/manual",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-22T14:13:58Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443588532",
      "id" : 443588532,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4ODUzMg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1834,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443588532",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443592064"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443592064"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/addnode/manual",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-22T14:18:54Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here\n+                        // is to not use multiple of our limited outbound slots on a single netgroup\n+                        // but inbound and addnode peers do not use our outbound slots.  Inbound peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443592064",
      "id" : 443592064,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5MjA2NA==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1836,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443592064",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443596172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443596172"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Consider using doxygen-style comments for these enum entries",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-22T14:23:54Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443596172",
      "id" : 443596172,
      "line" : 116,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NjE3Mg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 116,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 4,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443596172",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443597967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443597967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add that these connections are made automatically to addresses selected from AddrMan.",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-22T14:26:19Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443597967",
      "id" : 443597967,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5Nzk2Nw==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 118,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443597967",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443598564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443598564"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add that these are automatic outbound peers made to addresses selected from AddrMan.",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-22T14:27:01Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument\n+    FEELER, // short lived connections used to test address validity\n+    BLOCK_RELAY, // only relay blocks to these connections",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443598564",
      "id" : 443598564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5ODU2NA==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 121,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443598564",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139106"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-24T20:02:09Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139106",
      "id" : 445139106,
      "in_reply_to_id" : 443588532,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTEwNg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1834,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 436964888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T20:02:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139106",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139147"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed ",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-24T20:02:14Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here\n+                        // is to not use multiple of our limited outbound slots on a single netgroup\n+                        // but inbound and addnode peers do not use our outbound slots.  Inbound peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139147",
      "id" : 445139147,
      "in_reply_to_id" : 443592064,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTE0Nw==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1836,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 436964944,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T20:02:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139147",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139410"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done ",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-24T20:02:45Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139410",
      "id" : 445139410,
      "in_reply_to_id" : 443596172,
      "line" : 116,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTQxMA==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 116,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 4,
      "pull_request_review_id" : 436965286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T20:02:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139410",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139916"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139916"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added ",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-24T20:03:41Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139916",
      "id" : 445139916,
      "in_reply_to_id" : 443597967,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTkxNg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 118,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 436965919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T20:03:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139916",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added ",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-24T20:03:51Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument\n+    FEELER, // short lived connections used to test address validity\n+    BLOCK_RELAY, // only relay blocks to these connections",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139995",
      "id" : 445139995,
      "in_reply_to_id" : 443598564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTk5NQ==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 121,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 436966044,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T20:03:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139995",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "fixed fuzz tests, rebased & incorporated review comments\r\n\r\n@jnewbery thank you for review ðð½   I took all your suggestions. \r\n\r\n@practicalswift thanks for the tip. Tests are now passing. Is there a time the `ConsumeEnum()` template would make more sense? \r\n\r\n@ariard continuing convo from your [comment](https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443392439) here. \r\n> IMO I would adopt a more fine-grained typology. Right now it sounds to confuse type of traffic (block, addr, tx) and type of connection selection (outbound/inbound, normal/anchor, ...)\r\n\r\nCan you explain what you are suggesting? I agree that this proposal flattens different aspects of connection behaviors, but I believe this is advantageous for simpler code, as explained above [[1]](https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646274698) [[2]](https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479). \r\n> As a follow-up, I think we may scope [wtxid relay] under a connection type\r\n\r\nConsidering this possibility. I haven't reviewed #18044 in depth, but I'm not sure it conceptually makes sense. wtxid relay seems more in line with content sent over the connection (like preferences expressed in the version message) than type of connection. I think you could have wtxid relay for connections that are inbound, outbound, and manual connections? ",
      "created_at" : "2020-06-24T20:30:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649054328",
      "id" : 649054328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTA1NDMyOA==",
      "updated_at" : "2020-06-24T20:31:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649054328",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK the final state of this, but the intermediate commits break the fuzz build because the fuzz changes only appear in the final commit. Ideally those changes would be in the same commits as the changes to the `CNode` ctors so all intermediate commits build.",
      "created_at" : "2020-06-25T15:07:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649608895",
      "id" : 649608895,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTYwODg5NQ==",
      "updated_at" : "2020-06-25T15:07:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649608895",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "```cpp\r\nenum class ConnectionType {\r\n    INBOUND, /**< peer initiated connections */\r\n    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\r\n    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\r\n    FEELER, /**< short lived connections used to test address validity */\r\n    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\r\n    ADDR_FETCH, /**< short lived connections used to solicit addrs */\r\n};\r\n```\r\n\r\nThis is somewhat confusing because it mixes unrelated things in one enum - connection initiator (us/outbound, them/inbound) with connection capabilities. Something like having `enum Status { valid, invalid, blue }`.\r\n\r\nI think the following questions have unclear answer, looking at the above enum:\r\n* Are `INBOUND` connections full relay connections (blocks, addrs, txns)?\r\n* Are `MANUAL` connections full relay connections (blocks, addrs, txns)?\r\n* Are `FEELER` connections inbound or outbound, that is - who initiated the connection?\r\n* Are `ADDR_FETCH` connections inbound or outbound, that is - who initiated the connection?",
      "created_at" : "2020-06-25T19:17:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649768547",
      "id" : 649768547,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTc2ODU0Nw==",
      "updated_at" : "2020-06-25T19:17:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649768547",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> This is somewhat confusing because it mixes unrelated things in one enum - connection initiator (us/outbound, them/inbound) with connection capabilities. Something like having enum Status { valid, invalid, blue }.\r\n\r\nPlease see the above discussion about this, particularly https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479. Another way to explain this is that these different connection types are already logically separate in the code, but that separation is done using multiple bools. However, combining those different bools is invalid - there's no such thing as an inbound feeler connection, or a manual block_relay connection for example. That leads to logic bugs like the one fixed in this PR here: https://github.com/bitcoin/bitcoin/pull/19316/commits/f2e183e5791be0322137cb9d90fb410ebcacbfd4. Flattening the internal model of these different connection types should make those bugs less likely.\r\n\r\n> I think the following questions have unclear answer, looking at the above enum...\r\n\r\nThat's fair. Perhaps these comments could be expanded to explicitly say who initiates the connection for each type (hint: it's our side for all connection types except inbound).",
      "created_at" : "2020-06-25T19:33:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649776062",
      "id" : 649776062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTc3NjA2Mg==",
      "updated_at" : "2020-06-25T19:33:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649776062",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446168334"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446168334"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: if these member variables are going to be renamed, why not rename them in a way that abides the [naming convention](https://github.com/bitcoin/bitcoin/blame/808ef36b89ea9ce72116bbd7ee479b984367dc60/doc/developer-notes.md#L82)?",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-26T12:59:34Z",
      "diff_hunk" : "@@ -406,8 +414,8 @@ class CConnman\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    RecursiveMutex cs_vOneShots;\n+    std::deque<std::string> vAddrFetchs GUARDED_BY(cs_vAddrFetchs);\n+    RecursiveMutex cs_vAddrFetchs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446168334",
      "id" : 446168334,
      "line" : 418,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2ODMzNA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 418,
      "original_position" : 51,
      "original_start_line" : 409,
      "path" : "src/net.h",
      "position" : 51,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : 409,
      "start_side" : "LEFT",
      "updated_at" : "2020-06-26T20:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446168334",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446169181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446169181"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can `fAddrFetch` be removed and `m_conn_type == ConnectionType::ADDR_FETCH` used instead?\r\n\r\nnit: [naming convention](https://github.com/bitcoin/bitcoin/blame/808ef36b89ea9ce72116bbd7ee479b984367dc60/doc/developer-notes.md#L82) on `fAddrFetch`",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-26T13:01:08Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446169181",
      "id" : 446169181,
      "line" : 776,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2OTE4MQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 776,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 63,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446169181",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446217691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446217691"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can `fInbound` be removed and `m_conn_type == ConnectionType::INBOUND` used instead?",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-26T14:27:06Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message\n     const bool fInbound;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446217691",
      "id" : 446217691,
      "line" : 779,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxNzY5MQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 779,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 66,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446217691",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446245139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446245139"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If done with a `switch`:\r\n\r\n```suggestion\r\n    switch (node.m_conn_type) {\r\n    case ConnectionType::INBOUND: \r\n    case ConnectionType::MANUAL:\r\n    case ConnectionType::FEELER:\r\n    case ConnectionType::ADDR_FETCH:\r\n        return false;\r\n    case ConnectionType::OUTBOUND:\r\n    case ConnectionType::BLOCK_RELAY:\r\n        return true;\r\n    }   \r\n```\r\nand a new entry is added to the enum, it will enforce the developer to assess what should be returned for the new entry instead of silently returning `false`, like the current code.",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-26T15:13:16Z",
      "diff_hunk" : "@@ -797,11 +797,9 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n     if (state) state->m_last_block_announcement = time_in_seconds;\n }\n \n-// Returns true for outbound peers, excluding manual connections, feelers, and\n-// one-shots.\n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.fInbound || node.m_manual_connection || node.fFeeler || node.fOneShot);\n+    return (node.m_conn_type == ConnectionType::OUTBOUND || node.m_conn_type == ConnectionType::BLOCK_RELAY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446245139",
      "id" : 446245139,
      "line" : 802,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NTEzOQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 802,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 18,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446245139",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446363611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446363611"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If this is really unreachable then, would it be more suitable to put an assert here? Or, if in doubt - print something to the log and don't open a connection. It looks strange to silently open a connection when we are here because `nOutboundFullRelay >= m_max_outbound_full_relay`.",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-26T19:12:21Z",
      "diff_hunk" : "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446363611",
      "id" : 446363611,
      "line" : 1957,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MzYxMQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1957,
      "original_position" : 238,
      "original_start_line" : 1956,
      "path" : "src/net.cpp",
      "position" : 238,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : 1956,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-26T20:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446363611",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446372977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446372977"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A `switch` without `default:` would produce a compiler warning when new enum element is added and this code is forgotten:\r\n```suggestion\r\n                            switch (pnode->m_conn_type) {\r\n                            case ConnectionType::INBOUND:\r\n                            case ConnectionType::MANUAL:\r\n                            case ConnectionType::FEELER:\r\n                            case ConnectionType::ADDR_FETCH:\r\n                                break;\r\n                            case ConnectionType::OUTBOUND:\r\n                            case ConnectionType::BLOCK_RELAY:\r\n                                if (pnode->fSuccessfullyConnected) {\r\n                                    ++nRelevant;\r\n                                }   \r\n                                break;\r\n                            }\r\n```",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-26T19:34:05Z",
      "diff_hunk" : "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446372977",
      "id" : 446372977,
      "line" : 1645,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3Mjk3Nw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1645,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 67,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446372977",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446374677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446374677"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "As above, a `switch` without `default:` will enforce this to be reviewed when new enum element is added. If the pattern `type == OUTBOUND || type == BLOCK_RELAY` repeats too often then the `switch` be put in a new method `bool CNode::IsFooBar()` and that method used here.",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-26T19:38:23Z",
      "diff_hunk" : "@@ -1761,7 +1752,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n+            if (pnode->fSuccessfullyConnected && !pnode->fDisconnect && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446374677",
      "id" : 446374677,
      "line" : 1755,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NDY3Nw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1755,
      "original_position" : 141,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 141,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446374677",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446376641"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446376641"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`CNode::m_conn_type` is initialized here in its declaration and also in the only constructor of `CNode` from an argument:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/43cec7b2a1a932f7784b037601a4fa3895e082b7/src/net.h#L866\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/43cec7b2a1a932f7784b037601a4fa3895e082b7/src/net.cpp#L2754\r\n\r\nSo, maybe remove the initialization from here?\r\n\r\n```suggestion\r\n    ConnectionType m_conn_type;\r\n```",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-26T19:43:20Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446376641",
      "id" : 446376641,
      "line" : 775,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NjY0MQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 775,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 62,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446376641",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446381822"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446381822"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "All the callers of this constructor specify all arguments, so the default values of the last 2 arguments can be removed:\r\n```suggestion\r\n    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn, ConnectionType conn_type_in);\r\n```",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-26T19:56:12Z",
      "diff_hunk" : "@@ -856,7 +863,7 @@ class CNode\n \n     std::set<uint256> orphan_work_set;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false, bool block_relay_only = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", ConnectionType conn_type_in = ConnectionType::OUTBOUND);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446381822",
      "id" : 446381822,
      "line" : 866,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4MTgyMg==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 866,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 81,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446381822",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446384137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446384137"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Consider using a `switch` without `default:` to assign to a boolean variable the expression `type == FOO || type == BAR || type == BAZ` to enforce the code to be reassessed when new enum element is added.",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-26T20:01:46Z",
      "diff_hunk" : "@@ -2252,7 +2250,7 @@ void ProcessMessage(\n         {\n             connman->SetServices(pfrom.addr, nServices);\n         }\n-        if (!pfrom.fInbound && !pfrom.fFeeler && !pfrom.m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n+        if ((pfrom.m_conn_type == ConnectionType::OUTBOUND || pfrom.m_conn_type == ConnectionType::BLOCK_RELAY || pfrom.m_conn_type == ConnectionType::ADDR_FETCH) && !HasAllDesirableServiceFlags(nServices))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446384137",
      "id" : 446384137,
      "line" : 2253,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4NDEzNw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 2253,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 36,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446384137",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448013426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448013426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "totally agree the current state is weird. I dug more into this case & turns out.. I think the comment is wrong & the code is right. So I will update the comment. \r\n\r\nhere's my understanding-\r\n\r\n[this previous conditional](https://github.com/bitcoin/bitcoin/blob/master/src/net.cpp#L1868) earlier in the function means if full-relay & block-relay are both at capacity, one of the following happens: \r\n(A)`fFeeler` will be set to true \r\n(B) we continue to next iteration of the while loop or \r\n(C)`GetTryNewOutboundPeer` is true, `fFeeler` stays false, and we continue to the rest of the function. \r\n\r\n`GetTryNewOutboundPeer` is simply a wrapper for `m_try_another_outbound_peer`, which is set to true when a stale tip is detected ([link](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L3817)).\r\n\r\nso, when we get to this current conditional, if `fFeeler` if false & our full-relay and block-relay connection counts are at the allocated max -> `GetTryNewOutboundPeer` must be true. I believe the intent in this scenario is to open a new outbound connection.\r\n\r\n--\r\n\r\nThis is a tangent but I'm leaving here incase its interesting for reviewers / to share learnings: \r\n\r\nThis got me taking a closer look at `GetTryNewOutboundPeer`\r\n\r\nIt doesn't look like eviction / outbound counting logic checks for this bool. So if `m_try_another_outbound_peer` is true, the node would add an outbound connection, then `GetExtraOutboundCount` would count it as extra & `EvictExtraOutboundPeers` would evict a connection. \r\n\r\nMaybe this is a mechanism for peer rotation? Not sure how that would work though because evicting extra outbounds is [triggered](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L1187) every 45 seconds, and decides what connection to evict based on the oldest recent-block-announcement. A newly added connection defaults to a value of 0 so would probably be selected for eviction? \r\n\r\nupdate: the part I was missing is that we would proactively query the new connection for blocks, so if they don't return any, it makes sense to not keep them.\r\n",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-30T22:25:23Z",
      "diff_hunk" : "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448013426",
      "id" : 448013426,
      "in_reply_to_id" : 446363611,
      "line" : 1957,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMzQyNg==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1957,
      "original_position" : 238,
      "original_start_line" : 1956,
      "path" : "src/net.cpp",
      "position" : 238,
      "pull_request_review_id" : 440428063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : 1956,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-01T21:55:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448013426",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448062841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448062841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I wonder if all of these except `INBOUND` should be prefixed with `OUTBOUND_` to indicate that they are different types of outbound connections, and `OUTBOUND` become `OUTBOUND_FULL_RELAY`.",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-07-01T01:14:36Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448062841",
      "id" : 448062841,
      "line" : 122,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2Mjg0MQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 122,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 10,
      "pull_request_review_id" : 440485040,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-01T01:14:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448062841",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448068899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448068899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I wonder if all of these except `INBOUND` should be prefixed with `OUTBOUND_` to indicate that they are different types of outbound connections, and `OUTBOUND` become `OUTBOUND_FULL_RELAY`.\r\n\r\nSee also https://github.com/bitcoin/bitcoin/pull/19405#issuecomment-651273931",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-07-01T01:39:42Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448068899",
      "id" : 448068899,
      "in_reply_to_id" : 448062841,
      "line" : 122,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2ODg5OQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 122,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 10,
      "pull_request_review_id" : 440492275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-01T01:39:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448068899",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448969456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448969456"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Indeed! And I would take this one step further: to make the naming consistent and obvious we can distinguish 3 properties of a connection:\r\n1. inbound or outbound\r\n2. automatic or manual\r\n3. by capabilities: full relay, feeler, block relay, solicit addresses\r\n\r\nand then name the constants like prop1_prop2_prop3. Something like:\r\n\r\n```\r\nINBOUND_AUTO_FULL\r\nOUTBOUND_AUTO_FULL\r\nOUTBOUND_MANUAL_FULL\r\nOUTBOUND_AUTO_FEELER\r\nOUTBOUND_AUTO_BLOCK\r\nOUTBOUND_AUTO_ADDR\r\n```",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-07-02T12:37:11Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448969456",
      "id" : 448969456,
      "in_reply_to_id" : 448062841,
      "line" : 122,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2OTQ1Ng==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 122,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 10,
      "pull_request_review_id" : 441635915,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-02T12:37:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448969456",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449087317"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449087317"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, I confirm what you write above and I verified that the new code behaves in an identical way with the old one, so this PR is good (except the `//this case should be unreachable` comment).\r\n\r\nBut the code (old and new) is confusing - I imagine somebody may attempt to \"fix\" this code which opens a connection even when both \"full\" and \"block relay\" capacities are exhausted.\r\n\r\nWhat about checking here that `GetTryNewOutboundPeer()` is `true` instead of relying that if `fFeeler` is `false` then `GetTryNewOutboundPeer()` must have been true 85 lines above in the code?\r\n\r\nIt is kind of easier to understand that `GetTryNewOutboundPeer()` being `true` acts as an \"override the limits and open a connection anyway\".",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-07-02T15:30:13Z",
      "diff_hunk" : "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449087317",
      "id" : 449087317,
      "in_reply_to_id" : 446363611,
      "line" : 1957,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4NzMxNw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1957,
      "original_position" : 238,
      "original_start_line" : 1956,
      "path" : "src/net.cpp",
      "position" : 238,
      "pull_request_review_id" : 441802774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : 1956,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-02T15:30:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449087317",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449348963"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449348963"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`OneShot` was a terrible name for sure but at least the temporary or boostrap-side of this type of connection was implied by old name. How about `AddrSeeding` to underscore this connection is only made at the starting phase ?",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-07-03T02:41:57Z",
      "diff_hunk" : "@@ -104,10 +104,10 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n-void CConnman::AddOneShot(const std::string& strDest)\n+void CConnman::AddAddrFetch(const std::string& strDest)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449348963",
      "id" : 449348963,
      "line" : 107,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0ODk2Mw==",
      "original_commit_id" : "c1aed85090874b4327088b686da68a26942789ec",
      "original_line" : 107,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 5,
      "pull_request_review_id" : 442115002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-03T03:43:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449348963",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449349935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449349935"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Have you tried to introduce a ADDR_RELAY_ONLY or change the equality of `IsAddrRelayPeer()` to `conn_type_in != ConnectionType::BLOCK_RELAY` ?",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-07-03T02:47:01Z",
      "diff_hunk" : "@@ -2745,7 +2745,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{conn_type_in == ConnectionType::BLOCK_RELAY ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n+    m_addr_known{nullptr},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449349935",
      "id" : 449349935,
      "line" : 2761,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0OTkzNQ==",
      "original_commit_id" : "c035da9ba9f71ff6b4fd4e2e7c69f2683e1f0d5c",
      "original_line" : 2748,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 335,
      "pull_request_review_id" : 442115002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-03T03:43:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449349935",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449352154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449352154"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Side-note, I think it would have be better to fix bug before introducing connection type for review clarity. Reviewers now have to review a fix relying on new code, less understood IMHO",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-07-03T02:57:47Z",
      "diff_hunk" : "@@ -1835,7 +1835,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n                     if (pnode->m_tx_relay == nullptr) {\n                         nOutboundBlockRelay++;\n-                    } else if (pnode->m_conn_type != ConnectionType::FEELER) {\n+                    } else if (pnode->m_conn_type == ConnectionType::OUTBOUND) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449352154",
      "id" : 449352154,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1MjE1NA==",
      "original_commit_id" : "f2e183e5791be0322137cb9d90fb410ebcacbfd4",
      "original_line" : 1838,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 442115002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-03T03:43:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449352154",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449353068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449353068"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's great to see documentation around types. I think you should go further and describe exactly the set of assumptions we are doing for each type (like outbound more trusted than inbound, outbound favored for relay, block_relay_only to avoid leaking the full of our `block`-topology ...) and design goals of more obscure ones (feeler to sanitize addr db, addr fetch to boostrap our view of the network). With `ConnectionType` you can even grep code locations and points directly to where we are taking decisions based on type. That would be awesome for newcomers :)\r\n\r\nAs a follow-up ofc.",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-07-03T03:02:15Z",
      "diff_hunk" : "@@ -114,12 +114,12 @@ struct CSerializedNetMsg\n };\n \n enum class ConnectionType {\n-    INBOUND,\n-    OUTBOUND,\n-    MANUAL,\n-    FEELER,\n-    BLOCK_RELAY,\n-    ADDR_FETCH,\n+    INBOUND, /**< peer initiated connections */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449353068",
      "id" : 449353068,
      "line" : 117,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1MzA2OA==",
      "original_commit_id" : "4f0449ae4a3a8130602fa951d21cab1a9c53d112",
      "original_line" : 117,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 5,
      "pull_request_review_id" : 442115002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-03T03:43:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449353068",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
