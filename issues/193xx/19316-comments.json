[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19364 (net processing: Move orphan reprocessing to a global by jnewbery)\n* #19315 ([tests] Allow outbound & block-relay-only connections in functional tests. by amitiuttarwar)\n* #19219 (Replace automatic bans with discouragement filter by sipa)\n* #19064 (refactor: Cleanup thread ctor calls by hebasto)\n* #18925 (Add extra thread for scheduler, move TorControl and OpenAddedConnections to scheduler by naumenkogs)\n* #17785 (p2p: Unify Send and Receive protocol versions by hebasto)\n* #17428 (p2p: Try to preserve outbound block-relay-only connections during restart by hebasto)\n* #14033 (p2p: Drop CADDR_TIME_VERSION checks now that MIN_PEER_PROTO_VERSION is greater by Empact)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-06-17T23:07:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645671781",
      "id" : 645671781,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTY3MTc4MQ==",
      "updated_at" : "2020-06-25T05:13:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645671781",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\nIs `enum ConnectionType` the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\r\nIt's true that it's non-ambiguous right now, but maybe we want to make them a bitmask in advance for the sake of explicitness, since we are already refactoring it? ",
      "created_at" : "2020-06-18T07:18:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645829587",
      "id" : 645829587,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTgyOTU4Nw==",
      "updated_at" : "2020-06-18T07:18:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645829587",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\n> Is enum ConnectionType the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\r\n\r\nI think enum is the right approach. OUTBOUND here means a connection that is created automatically by the OpenConnections thread. Yes, there are other kinds of connection that the node originates, but for clarity, I don't think those should be referred to as 'OUTBOUND'.\r\n\r\nI think we definitely don't want a bitmask of different connection capabilities. That leads to an combinatorial explosion of connection types that you need to either test or explicitly disallow. ",
      "created_at" : "2020-06-18T19:56:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646274698",
      "id" : 646274698,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjI3NDY5OA==",
      "updated_at" : "2020-06-18T19:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646274698",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@naumenkogs its a good question to ask, but I think enforcing mutual exclusivity makes more sense and what allows for a lot of the simplicity. @jnewbery explained the main reasons, I want to add some additional points\r\n- everything but `INBOUND` originates from the node, but `OUTBOUND` refers to a specific type, which is the most common, full-relay, outbound connection. so I do think its exclusive to the other connection types. on the enum I added `OUTBOUND, // full relay connections (blocks, addrs, txns)`, but lmk if you have suggestions on how it could be clarified better.   \r\n- if we support combinations, we have to add many behavioral checks to ensure logical adherence. lots of the cleanup in this PR shed light on how brittle/annoying it is to have those checks scattered everywhere. so, I think if we are adding connection types in the future, designing the conn_type to fit into the flat structure better supports code-simplicity-over-time as well. \r\n\r\n---\r\n\r\nOn a different note, I have a question with the fuzz tests & would appreciate any guidance. \r\n\r\nSince I change the signature of the `CNode` constructor, I'm causing a [test failure](https://travis-ci.org/github/bitcoin/bitcoin/jobs/699509978). I found [this function](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/FuzzedDataProvider.h#L184) to support fuzz testing with enums, but am unclear on how to implement. It seems I need to add `kMaxValue` to the enum. \r\n\r\nI'm wondering if the pattern is: \r\na) mimic the enum in the tests & add `kMaxValue` there, or \r\nb) import something into `net.cpp` and define directly on the code implementation of the enum.\r\nOption B seems strange to add that dependency to `net`, but option A seems like it would be easy to forget to add an enum type to the fuzz test if we add a type to the cpp code in the future. \r\n\r\n@practicalswift, @MarcoFalke, any chance either of you are able to advise? ðð½",
      "created_at" : "2020-06-18T21:03:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479",
      "id" : 646304479,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjMwNDQ3OQ==",
      "updated_at" : "2020-06-18T21:03:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646304479",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@amitiuttarwar Thanks for the ping! I'd suggest using `PickValueInArray` like in these examples:\r\n\r\n```\r\n$ git grep -E 'PickValueInArray.*\\(\\{.+' \"src/test/fuzz/**.cpp\"\r\nsrc/test/fuzz/bloom_filter.cpp:        static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\r\nsrc/test/fuzz/fees.cpp:    const FeeReason fee_reason = fuzzed_data_provider.PickValueInArray({FeeReason::NONE, FeeReason::HALF_ESTIMATE, FeeReason::FULL_ESTIMATE, FeeReason::DOUBLE_ESTIMATE, FeeReason::CONSERVATIVE, FeeReason::MEMPOOL_MIN, FeeReason::PAYTXFEE, FeeReason::FALLBACK, FeeReason::REQUIRED});\r\nsrc/test/fuzz/kitchen_sink.cpp:    const TransactionError transaction_error = fuzzed_data_provider.PickValueInArray<TransactionError>({TransactionError::OK, TransactionError::MISSING_INPUTS, TransactionError::ALREADY_IN_CHAIN, TransactionError::P2P_DISABLED, TransactionError::MEMPOOL_REJECTED, TransactionError::MEMPOOL_ERROR, TransactionError::INVALID_PSBT, TransactionError::PSBT_MISMATCH, TransactionError::SIGHASH_MISMATCH, TransactionError::MAX_FEE_EXCEEDED});\r\nsrc/test/fuzz/message.cpp:        (void)SigningResultString(fuzzed_data_provider.PickValueInArray({SigningResult::OK, SigningResult::PRIVATE_KEY_NOT_AVAILABLE, SigningResult::SIGNING_FAILED}));\r\nsrc/test/fuzz/netaddress.cpp:    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\r\nsrc/test/fuzz/policy_estimator.cpp:        (void)block_policy_estimator.estimateRawFee(fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeFloatingPoint<double>(), fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}), fuzzed_data_provider.ConsumeBool() ? &result : nullptr);\r\nsrc/test/fuzz/policy_estimator.cpp:        (void)block_policy_estimator.HighestTargetTracked(fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}));\r\nsrc/test/fuzz/script_interpreter.cpp:                (void)SignatureHash(script_code, tx_to, in, fuzzed_data_provider.ConsumeIntegral<int>(), ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}), nullptr);\r\nsrc/test/fuzz/script_interpreter.cpp:                    (void)SignatureHash(script_code, tx_to, in, fuzzed_data_provider.ConsumeIntegral<int>(), ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}), &precomputed_transaction_data);\r\nsrc/test/fuzz/script_sign.cpp:                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\r\nsrc/test/fuzz/signature_checker.cpp:    const SigVersion sig_version = fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0});\r\nsrc/test/fuzz/system.cpp:            const OptionsCategory options_category = fuzzed_data_provider.PickValueInArray<OptionsCategory>({OptionsCategory::OPTIONS, OptionsCategory::CONNECTION, OptionsCategory::WALLET, OptionsCategory::WALLET_DEBUG_TEST, OptionsCategory::ZMQ, OptionsCategory::DEBUG_TEST, OptionsCategory::CHAINPARAMS, OptionsCategory::NODE_RELAY, OptionsCategory::BLOCK_CREATION, OptionsCategory::RPC, OptionsCategory::GUI, OptionsCategory::COMMANDS, OptionsCategory::REGISTER_COMMANDS, OptionsCategory::HIDDEN});\r\n```",
      "created_at" : "2020-06-22T09:25:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-647397659",
      "id" : 647397659,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NzM5NzY1OQ==",
      "updated_at" : "2020-06-22T09:25:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647397659",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443588532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443588532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/addnode/manual",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-22T14:13:58Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443588532",
      "id" : 443588532,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4ODUzMg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1834,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443588532",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443592064"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443592064"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/addnode/manual",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-22T14:18:54Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here\n+                        // is to not use multiple of our limited outbound slots on a single netgroup\n+                        // but inbound and addnode peers do not use our outbound slots.  Inbound peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443592064",
      "id" : 443592064,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5MjA2NA==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1836,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443592064",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443596172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443596172"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Consider using doxygen-style comments for these enum entries",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-22T14:23:54Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443596172",
      "id" : 443596172,
      "line" : 116,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NjE3Mg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 116,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 4,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443596172",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443597967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443597967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add that these connections are made automatically to addresses selected from AddrMan.",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-22T14:26:19Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443597967",
      "id" : 443597967,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5Nzk2Nw==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 118,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443597967",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443598564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443598564"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add that these are automatic outbound peers made to addresses selected from AddrMan.",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-22T14:27:01Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument\n+    FEELER, // short lived connections used to test address validity\n+    BLOCK_RELAY, // only relay blocks to these connections",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443598564",
      "id" : 443598564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5ODU2NA==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 121,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T18:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443598564",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139106"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-24T20:02:09Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139106",
      "id" : 445139106,
      "in_reply_to_id" : 443588532,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTEwNg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1834,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 436964888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T20:02:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139106",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139147"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed ",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-24T20:02:14Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here\n+                        // is to not use multiple of our limited outbound slots on a single netgroup\n+                        // but inbound and addnode peers do not use our outbound slots.  Inbound peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139147",
      "id" : 445139147,
      "in_reply_to_id" : 443592064,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTE0Nw==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1836,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 436964944,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T20:02:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139147",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139410"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done ",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-24T20:02:45Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139410",
      "id" : 445139410,
      "in_reply_to_id" : 443596172,
      "line" : 116,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTQxMA==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 116,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 4,
      "pull_request_review_id" : 436965286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T20:02:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139410",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139916"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139916"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added ",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-24T20:03:41Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139916",
      "id" : 445139916,
      "in_reply_to_id" : 443597967,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTkxNg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 118,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 436965919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T20:03:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139916",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added ",
      "commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "created_at" : "2020-06-24T20:03:51Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument\n+    FEELER, // short lived connections used to test address validity\n+    BLOCK_RELAY, // only relay blocks to these connections",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139995",
      "id" : 445139995,
      "in_reply_to_id" : 443598564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTk5NQ==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 121,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 436966044,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T20:03:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139995",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "fixed fuzz tests, rebased & incorporated review comments\r\n\r\n@jnewbery thank you for review ðð½   I took all your suggestions. \r\n\r\n@practicalswift thanks for the tip. Tests are now passing. Is there a time the `ConsumeEnum()` template would make more sense? \r\n\r\n@ariard continuing convo from your [comment](https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443392439) here. \r\n> IMO I would adopt a more fine-grained typology. Right now it sounds to confuse type of traffic (block, addr, tx) and type of connection selection (outbound/inbound, normal/anchor, ...)\r\n\r\nCan you explain what you are suggesting? I agree that this proposal flattens different aspects of connection behaviors, but I believe this is advantageous for simpler code, as explained above [[1]](https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646274698) [[2]](https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479). \r\n> As a follow-up, I think we may scope [wtxid relay] under a connection type\r\n\r\nConsidering this possibility. I haven't reviewed #18044 in depth, but I'm not sure it conceptually makes sense. wtxid relay seems more in line with content sent over the connection (like preferences expressed in the version message) than type of connection. I think you could have wtxid relay for connections that are inbound, outbound, and manual connections? ",
      "created_at" : "2020-06-24T20:30:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649054328",
      "id" : 649054328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTA1NDMyOA==",
      "updated_at" : "2020-06-24T20:31:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649054328",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK the final state of this, but the intermediate commits break the fuzz build because the fuzz changes only appear in the final commit. Ideally those changes would be in the same commits as the changes to the `CNode` ctors so all intermediate commits build.",
      "created_at" : "2020-06-25T15:07:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649608895",
      "id" : 649608895,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTYwODg5NQ==",
      "updated_at" : "2020-06-25T15:07:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649608895",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "```cpp\r\nenum class ConnectionType {\r\n    INBOUND, /**< peer initiated connections */\r\n    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\r\n    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\r\n    FEELER, /**< short lived connections used to test address validity */\r\n    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\r\n    ADDR_FETCH, /**< short lived connections used to solicit addrs */\r\n};\r\n```\r\n\r\nThis is somewhat confusing because it mixes unrelated things in one enum - connection initiator (us/outbound, them/inbound) with connection capabilities. Something like having `enum Status { valid, invalid, blue }`.\r\n\r\nI think the following questions have unclear answer, looking at the above enum:\r\n* Are `INBOUND` connections full relay connections (blocks, addrs, txns)?\r\n* Are `MANUAL` connections full relay connections (blocks, addrs, txns)?\r\n* Are `FEELER` connections inbound or outbound, that is - who initiated the connection?\r\n* Are `ADDR_FETCH` connections inbound or outbound, that is - who initiated the connection?",
      "created_at" : "2020-06-25T19:17:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649768547",
      "id" : 649768547,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTc2ODU0Nw==",
      "updated_at" : "2020-06-25T19:17:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649768547",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> This is somewhat confusing because it mixes unrelated things in one enum - connection initiator (us/outbound, them/inbound) with connection capabilities. Something like having enum Status { valid, invalid, blue }.\r\n\r\nPlease see the above discussion about this, particularly https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479. Another way to explain this is that these different connection types are already logically separate in the code, but that separation is done using multiple bools. However, combining those different bools is invalid - there's no such thing as an inbound feeler connection, or a manual block_relay connection for example. That leads to logic bugs like the one fixed in this PR here: https://github.com/bitcoin/bitcoin/pull/19316/commits/f2e183e5791be0322137cb9d90fb410ebcacbfd4. Flattening the internal model of these different connection types should make those bugs less likely.\r\n\r\n> I think the following questions have unclear answer, looking at the above enum...\r\n\r\nThat's fair. Perhaps these comments could be expanded to explicitly say who initiates the connection for each type (hint: it's our side for all connection types except inbound).",
      "created_at" : "2020-06-25T19:33:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649776062",
      "id" : 649776062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTc3NjA2Mg==",
      "updated_at" : "2020-06-25T19:33:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649776062",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
