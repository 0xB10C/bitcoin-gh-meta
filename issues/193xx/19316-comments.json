[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19472 ([net processing] Reduce cs_main scope in MaybeDiscourageAndDisconnect() by jnewbery)\n* #19064 (refactor: Cleanup thread ctor calls by hebasto)\n* #17428 (p2p: Try to preserve outbound block-relay-only connections during restart by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-06-17T23:07:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645671781",
      "id" : 645671781,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTY3MTc4MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-23T07:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645671781",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\nIs `enum ConnectionType` the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\r\nIt's true that it's non-ambiguous right now, but maybe we want to make them a bitmask in advance for the sake of explicitness, since we are already refactoring it? ",
      "created_at" : "2020-06-18T07:18:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645829587",
      "id" : 645829587,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTgyOTU4Nw==",
      "updated_at" : "2020-06-18T07:18:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645829587",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\n> Is enum ConnectionType the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\r\n\r\nI think enum is the right approach. OUTBOUND here means a connection that is created automatically by the OpenConnections thread. Yes, there are other kinds of connection that the node originates, but for clarity, I don't think those should be referred to as 'OUTBOUND'.\r\n\r\nI think we definitely don't want a bitmask of different connection capabilities. That leads to an combinatorial explosion of connection types that you need to either test or explicitly disallow. ",
      "created_at" : "2020-06-18T19:56:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646274698",
      "id" : 646274698,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjI3NDY5OA==",
      "updated_at" : "2020-06-18T19:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646274698",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@naumenkogs its a good question to ask, but I think enforcing mutual exclusivity makes more sense and what allows for a lot of the simplicity. @jnewbery explained the main reasons, I want to add some additional points\r\n- everything but `INBOUND` originates from the node, but `OUTBOUND` refers to a specific type, which is the most common, full-relay, outbound connection. so I do think its exclusive to the other connection types. on the enum I added `OUTBOUND, // full relay connections (blocks, addrs, txns)`, but lmk if you have suggestions on how it could be clarified better.   \r\n- if we support combinations, we have to add many behavioral checks to ensure logical adherence. lots of the cleanup in this PR shed light on how brittle/annoying it is to have those checks scattered everywhere. so, I think if we are adding connection types in the future, designing the conn_type to fit into the flat structure better supports code-simplicity-over-time as well. \r\n\r\n---\r\n\r\nOn a different note, I have a question with the fuzz tests & would appreciate any guidance. \r\n\r\nSince I change the signature of the `CNode` constructor, I'm causing a [test failure](https://travis-ci.org/github/bitcoin/bitcoin/jobs/699509978). I found [this function](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/FuzzedDataProvider.h#L184) to support fuzz testing with enums, but am unclear on how to implement. It seems I need to add `kMaxValue` to the enum. \r\n\r\nI'm wondering if the pattern is: \r\na) mimic the enum in the tests & add `kMaxValue` there, or \r\nb) import something into `net.cpp` and define directly on the code implementation of the enum.\r\nOption B seems strange to add that dependency to `net`, but option A seems like it would be easy to forget to add an enum type to the fuzz test if we add a type to the cpp code in the future. \r\n\r\n@practicalswift, @MarcoFalke, any chance either of you are able to advise? ðð½",
      "created_at" : "2020-06-18T21:03:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479",
      "id" : 646304479,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjMwNDQ3OQ==",
      "updated_at" : "2020-06-18T21:03:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646304479",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@amitiuttarwar Thanks for the ping! I'd suggest using `PickValueInArray` like in these examples:\r\n\r\n```\r\n$ git grep -E 'PickValueInArray.*\\(\\{.+' \"src/test/fuzz/**.cpp\"\r\nsrc/test/fuzz/bloom_filter.cpp:        static_cast<unsigned char>(fuzzed_data_provider.PickValueInArray({BLOOM_UPDATE_NONE, BLOOM_UPDATE_ALL, BLOOM_UPDATE_P2PUBKEY_ONLY, BLOOM_UPDATE_MASK}))};\r\nsrc/test/fuzz/fees.cpp:    const FeeReason fee_reason = fuzzed_data_provider.PickValueInArray({FeeReason::NONE, FeeReason::HALF_ESTIMATE, FeeReason::FULL_ESTIMATE, FeeReason::DOUBLE_ESTIMATE, FeeReason::CONSERVATIVE, FeeReason::MEMPOOL_MIN, FeeReason::PAYTXFEE, FeeReason::FALLBACK, FeeReason::REQUIRED});\r\nsrc/test/fuzz/kitchen_sink.cpp:    const TransactionError transaction_error = fuzzed_data_provider.PickValueInArray<TransactionError>({TransactionError::OK, TransactionError::MISSING_INPUTS, TransactionError::ALREADY_IN_CHAIN, TransactionError::P2P_DISABLED, TransactionError::MEMPOOL_REJECTED, TransactionError::MEMPOOL_ERROR, TransactionError::INVALID_PSBT, TransactionError::PSBT_MISMATCH, TransactionError::SIGHASH_MISMATCH, TransactionError::MAX_FEE_EXCEEDED});\r\nsrc/test/fuzz/message.cpp:        (void)SigningResultString(fuzzed_data_provider.PickValueInArray({SigningResult::OK, SigningResult::PRIVATE_KEY_NOT_AVAILABLE, SigningResult::SIGNING_FAILED}));\r\nsrc/test/fuzz/netaddress.cpp:    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\r\nsrc/test/fuzz/policy_estimator.cpp:        (void)block_policy_estimator.estimateRawFee(fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeFloatingPoint<double>(), fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}), fuzzed_data_provider.ConsumeBool() ? &result : nullptr);\r\nsrc/test/fuzz/policy_estimator.cpp:        (void)block_policy_estimator.HighestTargetTracked(fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}));\r\nsrc/test/fuzz/script_interpreter.cpp:                (void)SignatureHash(script_code, tx_to, in, fuzzed_data_provider.ConsumeIntegral<int>(), ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}), nullptr);\r\nsrc/test/fuzz/script_interpreter.cpp:                    (void)SignatureHash(script_code, tx_to, in, fuzzed_data_provider.ConsumeIntegral<int>(), ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}), &precomputed_transaction_data);\r\nsrc/test/fuzz/script_sign.cpp:                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\r\nsrc/test/fuzz/signature_checker.cpp:    const SigVersion sig_version = fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0});\r\nsrc/test/fuzz/system.cpp:            const OptionsCategory options_category = fuzzed_data_provider.PickValueInArray<OptionsCategory>({OptionsCategory::OPTIONS, OptionsCategory::CONNECTION, OptionsCategory::WALLET, OptionsCategory::WALLET_DEBUG_TEST, OptionsCategory::ZMQ, OptionsCategory::DEBUG_TEST, OptionsCategory::CHAINPARAMS, OptionsCategory::NODE_RELAY, OptionsCategory::BLOCK_CREATION, OptionsCategory::RPC, OptionsCategory::GUI, OptionsCategory::COMMANDS, OptionsCategory::REGISTER_COMMANDS, OptionsCategory::HIDDEN});\r\n```",
      "created_at" : "2020-06-22T09:25:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-647397659",
      "id" : 647397659,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NzM5NzY1OQ==",
      "updated_at" : "2020-06-22T09:25:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647397659",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443588532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443588532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/addnode/manual",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-22T14:13:58Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443588532",
      "id" : 443588532,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4ODUzMg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1834,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443588532",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443592064"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443592064"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/addnode/manual",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-22T14:18:54Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here\n+                        // is to not use multiple of our limited outbound slots on a single netgroup\n+                        // but inbound and addnode peers do not use our outbound slots.  Inbound peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443592064",
      "id" : 443592064,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5MjA2NA==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1836,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443592064",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443596172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443596172"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Consider using doxygen-style comments for these enum entries",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-22T14:23:54Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443596172",
      "id" : 443596172,
      "line" : 119,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5NjE3Mg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 119,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 7,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443596172",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443597967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443597967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add that these connections are made automatically to addresses selected from AddrMan.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-22T14:26:19Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443597967",
      "id" : 443597967,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5Nzk2Nw==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 118,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443597967",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443598564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443598564"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add that these are automatic outbound peers made to addresses selected from AddrMan.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-22T14:27:01Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument\n+    FEELER, // short lived connections used to test address validity\n+    BLOCK_RELAY, // only relay blocks to these connections",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r443598564",
      "id" : 443598564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5ODU2NA==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 121,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 434964249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443598564",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139106"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-24T20:02:09Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139106",
      "id" : 445139106,
      "in_reply_to_id" : 443588532,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTEwNg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1834,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 436964888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139106",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139147"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-24T20:02:14Z",
      "diff_hunk" : "@@ -1831,24 +1822,35 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutboundFullRelay = 0;\n         int nOutboundBlockRelay = 0;\n+        int nTotalOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n+\n         {\n             LOCK(cs_vNodes);\n             for (const CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->m_manual_connection) {\n-                    // Netgroups for inbound and addnode peers are not excluded because our goal here\n-                    // is to not use multiple of our limited outbound slots on a single netgroup\n-                    // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n-                    // also have the added issue that they're attacker controlled and could be used\n-                    // to prevent us from connecting to particular hosts if we used them here.\n-                    setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                    if (pnode->m_tx_relay == nullptr) {\n+                switch (pnode->m_conn_type){\n+                    case ConnectionType::INBOUND:\n+                    case ConnectionType::MANUAL:\n+                        // Netgroups for inbound and addnode peers are not excluded because our goal here\n+                        // is to not use multiple of our limited outbound slots on a single netgroup\n+                        // but inbound and addnode peers do not use our outbound slots.  Inbound peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139147",
      "id" : 445139147,
      "in_reply_to_id" : 443592064,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTE0Nw==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 1836,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 436964944,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139147",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139410"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-24T20:02:45Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139410",
      "id" : 445139410,
      "in_reply_to_id" : 443596172,
      "line" : 119,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTQxMA==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 119,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 7,
      "pull_request_review_id" : 436965286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139410",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139916"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139916"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-24T20:03:41Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139916",
      "id" : 445139916,
      "in_reply_to_id" : 443597967,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTkxNg==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 118,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 436965919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139916",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-24T20:03:51Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n+enum class ConnectionType {\n+    INBOUND, // peer initiated connections\n+    OUTBOUND, // full relay connections (blocks, addrs, txns)\n+    MANUAL, // connections to addresses added via addnode or the connect command line argument\n+    FEELER, // short lived connections used to test address validity\n+    BLOCK_RELAY, // only relay blocks to these connections",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r445139995",
      "id" : 445139995,
      "in_reply_to_id" : 443598564,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzOTk5NQ==",
      "original_commit_id" : "f5f0e07e0a43b6decd147671f82c06b6abc64689",
      "original_line" : 121,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 436966044,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445139995",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "fixed fuzz tests, rebased & incorporated review comments\r\n\r\n@jnewbery thank you for review ðð½   I took all your suggestions. \r\n\r\n@practicalswift thanks for the tip. Tests are now passing. Is there a time the `ConsumeEnum()` template would make more sense? \r\n\r\n@ariard continuing convo from your [comment](https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443392439) here. \r\n> IMO I would adopt a more fine-grained typology. Right now it sounds to confuse type of traffic (block, addr, tx) and type of connection selection (outbound/inbound, normal/anchor, ...)\r\n\r\nCan you explain what you are suggesting? I agree that this proposal flattens different aspects of connection behaviors, but I believe this is advantageous for simpler code, as explained above [[1]](https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646274698) [[2]](https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479). \r\n> As a follow-up, I think we may scope [wtxid relay] under a connection type\r\n\r\nConsidering this possibility. I haven't reviewed #18044 in depth, but I'm not sure it conceptually makes sense. wtxid relay seems more in line with content sent over the connection (like preferences expressed in the version message) than type of connection. I think you could have wtxid relay for connections that are inbound, outbound, and manual connections? ",
      "created_at" : "2020-06-24T20:30:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649054328",
      "id" : 649054328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTA1NDMyOA==",
      "updated_at" : "2020-06-24T20:31:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649054328",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK the final state of this, but the intermediate commits break the fuzz build because the fuzz changes only appear in the final commit. Ideally those changes would be in the same commits as the changes to the `CNode` ctors so all intermediate commits build.",
      "created_at" : "2020-06-25T15:07:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649608895",
      "id" : 649608895,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTYwODg5NQ==",
      "updated_at" : "2020-06-25T15:07:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649608895",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "```cpp\r\nenum class ConnectionType {\r\n    INBOUND, /**< peer initiated connections */\r\n    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\r\n    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\r\n    FEELER, /**< short lived connections used to test address validity */\r\n    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\r\n    ADDR_FETCH, /**< short lived connections used to solicit addrs */\r\n};\r\n```\r\n\r\nThis is somewhat confusing because it mixes unrelated things in one enum - connection initiator (us/outbound, them/inbound) with connection capabilities. Something like having `enum Status { valid, invalid, blue }`.\r\n\r\nI think the following questions have unclear answer, looking at the above enum:\r\n* Are `INBOUND` connections full relay connections (blocks, addrs, txns)?\r\n* Are `MANUAL` connections full relay connections (blocks, addrs, txns)?\r\n* Are `FEELER` connections inbound or outbound, that is - who initiated the connection?\r\n* Are `ADDR_FETCH` connections inbound or outbound, that is - who initiated the connection?",
      "created_at" : "2020-06-25T19:17:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649768547",
      "id" : 649768547,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTc2ODU0Nw==",
      "updated_at" : "2020-06-25T19:17:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649768547",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> This is somewhat confusing because it mixes unrelated things in one enum - connection initiator (us/outbound, them/inbound) with connection capabilities. Something like having enum Status { valid, invalid, blue }.\r\n\r\nPlease see the above discussion about this, particularly https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479. Another way to explain this is that these different connection types are already logically separate in the code, but that separation is done using multiple bools. However, combining those different bools is invalid - there's no such thing as an inbound feeler connection, or a manual block_relay connection for example. That leads to logic bugs like the one fixed in this PR here: https://github.com/bitcoin/bitcoin/pull/19316/commits/f2e183e5791be0322137cb9d90fb410ebcacbfd4. Flattening the internal model of these different connection types should make those bugs less likely.\r\n\r\n> I think the following questions have unclear answer, looking at the above enum...\r\n\r\nThat's fair. Perhaps these comments could be expanded to explicitly say who initiates the connection for each type (hint: it's our side for all connection types except inbound).",
      "created_at" : "2020-06-25T19:33:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-649776062",
      "id" : 649776062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTc3NjA2Mg==",
      "updated_at" : "2020-06-25T19:33:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649776062",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446168334"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446168334"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: if these member variables are going to be renamed, why not rename them in a way that abides the [naming convention](https://github.com/bitcoin/bitcoin/blame/808ef36b89ea9ce72116bbd7ee479b984367dc60/doc/developer-notes.md#L82)?",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-26T12:59:34Z",
      "diff_hunk" : "@@ -406,8 +414,8 @@ class CConnman\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    RecursiveMutex cs_vOneShots;\n+    std::deque<std::string> vAddrFetchs GUARDED_BY(cs_vAddrFetchs);\n+    RecursiveMutex cs_vAddrFetchs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446168334",
      "id" : 446168334,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2ODMzNA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 418,
      "original_position" : 51,
      "original_start_line" : 409,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446168334",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446169181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446169181"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can `fAddrFetch` be removed and `m_conn_type == ConnectionType::ADDR_FETCH` used instead?\r\n\r\nnit: [naming convention](https://github.com/bitcoin/bitcoin/blame/808ef36b89ea9ce72116bbd7ee479b984367dc60/doc/developer-notes.md#L82) on `fAddrFetch`",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-26T13:01:08Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446169181",
      "id" : 446169181,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2OTE4MQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 776,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446169181",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446217691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446217691"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can `fInbound` be removed and `m_conn_type == ConnectionType::INBOUND` used instead?",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-26T14:27:06Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message\n     const bool fInbound;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446217691",
      "id" : 446217691,
      "line" : 781,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxNzY5MQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 781,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 68,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446217691",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446245139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446245139"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If done with a `switch`:\r\n\r\n```suggestion\r\n    switch (node.m_conn_type) {\r\n    case ConnectionType::INBOUND: \r\n    case ConnectionType::MANUAL:\r\n    case ConnectionType::FEELER:\r\n    case ConnectionType::ADDR_FETCH:\r\n        return false;\r\n    case ConnectionType::OUTBOUND:\r\n    case ConnectionType::BLOCK_RELAY:\r\n        return true;\r\n    }   \r\n```\r\nand a new entry is added to the enum, it will enforce the developer to assess what should be returned for the new entry instead of silently returning `false`, like the current code.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-26T15:13:16Z",
      "diff_hunk" : "@@ -797,11 +797,9 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n     if (state) state->m_last_block_announcement = time_in_seconds;\n }\n \n-// Returns true for outbound peers, excluding manual connections, feelers, and\n-// one-shots.\n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.fInbound || node.m_manual_connection || node.fFeeler || node.fOneShot);\n+    return (node.m_conn_type == ConnectionType::OUTBOUND || node.m_conn_type == ConnectionType::BLOCK_RELAY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446245139",
      "id" : 446245139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NTEzOQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 802,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446245139",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446363611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446363611"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If this is really unreachable then, would it be more suitable to put an assert here? Or, if in doubt - print something to the log and don't open a connection. It looks strange to silently open a connection when we are here because `nOutboundFullRelay >= m_max_outbound_full_relay`.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-26T19:12:21Z",
      "diff_hunk" : "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446363611",
      "id" : 446363611,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2MzYxMQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1943,
      "original_position" : 238,
      "original_start_line" : 1956,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446363611",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446372977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446372977"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A `switch` without `default:` would produce a compiler warning when new enum element is added and this code is forgotten:\r\n```suggestion\r\n                            switch (pnode->m_conn_type) {\r\n                            case ConnectionType::INBOUND:\r\n                            case ConnectionType::MANUAL:\r\n                            case ConnectionType::FEELER:\r\n                            case ConnectionType::ADDR_FETCH:\r\n                                break;\r\n                            case ConnectionType::OUTBOUND:\r\n                            case ConnectionType::BLOCK_RELAY:\r\n                                if (pnode->fSuccessfullyConnected) {\r\n                                    ++nRelevant;\r\n                                }   \r\n                                break;\r\n                            }\r\n```",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-26T19:34:05Z",
      "diff_hunk" : "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446372977",
      "id" : 446372977,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3Mjk3Nw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1645,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446372977",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446374677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446374677"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "As above, a `switch` without `default:` will enforce this to be reviewed when new enum element is added. If the pattern `type == OUTBOUND || type == BLOCK_RELAY` repeats too often then the `switch` be put in a new method `bool CNode::IsFooBar()` and that method used here.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-26T19:38:23Z",
      "diff_hunk" : "@@ -1761,7 +1752,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n+            if (pnode->fSuccessfullyConnected && !pnode->fDisconnect && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446374677",
      "id" : 446374677,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NDY3Nw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1755,
      "original_position" : 141,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446374677",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446376641"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446376641"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`CNode::m_conn_type` is initialized here in its declaration and also in the only constructor of `CNode` from an argument:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/43cec7b2a1a932f7784b037601a4fa3895e082b7/src/net.h#L866\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/43cec7b2a1a932f7784b037601a4fa3895e082b7/src/net.cpp#L2754\r\n\r\nSo, maybe remove the initialization from here?\r\n\r\n```suggestion\r\n    ConnectionType m_conn_type;\r\n```",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-26T19:43:20Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446376641",
      "id" : 446376641,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NjY0MQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 775,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446376641",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446381822"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446381822"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "All the callers of this constructor specify all arguments, so the default values of the last 2 arguments can be removed:\r\n```suggestion\r\n    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn, ConnectionType conn_type_in);\r\n```",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-26T19:56:12Z",
      "diff_hunk" : "@@ -856,7 +863,7 @@ class CNode\n \n     std::set<uint256> orphan_work_set;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false, bool block_relay_only = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", ConnectionType conn_type_in = ConnectionType::OUTBOUND);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446381822",
      "id" : 446381822,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4MTgyMg==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 866,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446381822",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446384137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446384137"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Consider using a `switch` without `default:` to assign to a boolean variable the expression `type == FOO || type == BAR || type == BAZ` to enforce the code to be reassessed when new enum element is added.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-26T20:01:46Z",
      "diff_hunk" : "@@ -2252,7 +2250,7 @@ void ProcessMessage(\n         {\n             connman->SetServices(pfrom.addr, nServices);\n         }\n-        if (!pfrom.fInbound && !pfrom.fFeeler && !pfrom.m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n+        if ((pfrom.m_conn_type == ConnectionType::OUTBOUND || pfrom.m_conn_type == ConnectionType::BLOCK_RELAY || pfrom.m_conn_type == ConnectionType::ADDR_FETCH) && !HasAllDesirableServiceFlags(nServices))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446384137",
      "id" : 446384137,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4NDEzNw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 2253,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 438273662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446384137",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448013426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448013426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "totally agree the current state is weird. I dug more into this case & turns out.. I think the comment is wrong & the code is right. So I will update the comment. \r\n\r\nhere's my understanding-\r\n\r\n[this previous conditional](https://github.com/bitcoin/bitcoin/blob/master/src/net.cpp#L1868) earlier in the function means if full-relay & block-relay are both at capacity, one of the following happens: \r\n(A)`fFeeler` will be set to true \r\n(B) we continue to next iteration of the while loop or \r\n(C)`GetTryNewOutboundPeer` is true, `fFeeler` stays false, and we continue to the rest of the function. \r\n\r\n`GetTryNewOutboundPeer` is simply a wrapper for `m_try_another_outbound_peer`, which is set to true when a stale tip is detected ([link](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L3817)).\r\n\r\nso, when we get to this current conditional, if `fFeeler` if false & our full-relay and block-relay connection counts are at the allocated max -> `GetTryNewOutboundPeer` must be true. I believe the intent in this scenario is to open a new outbound connection.\r\n\r\n--\r\n\r\nThis is a tangent but I'm leaving here incase its interesting for reviewers / to share learnings: \r\n\r\nThis got me taking a closer look at `GetTryNewOutboundPeer`\r\n\r\nIt doesn't look like eviction / outbound counting logic checks for this bool. So if `m_try_another_outbound_peer` is true, the node would add an outbound connection, then `GetExtraOutboundCount` would count it as extra & `EvictExtraOutboundPeers` would evict a connection. \r\n\r\nMaybe this is a mechanism for peer rotation? Not sure how that would work though because evicting extra outbounds is [triggered](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L1187) every 45 seconds, and decides what connection to evict based on the oldest recent-block-announcement. A newly added connection defaults to a value of 0 so would probably be selected for eviction? \r\n\r\nupdate: the part I was missing is that we would proactively query the new connection for blocks, so if they don't return any, it makes sense to not keep them.\r\n",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-06-30T22:25:23Z",
      "diff_hunk" : "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448013426",
      "id" : 448013426,
      "in_reply_to_id" : 446363611,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMzQyNg==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1943,
      "original_position" : 238,
      "original_start_line" : 1956,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 440428063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448013426",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448062841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448062841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I wonder if all of these except `INBOUND` should be prefixed with `OUTBOUND_` to indicate that they are different types of outbound connections, and `OUTBOUND` become `OUTBOUND_FULL_RELAY`.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-01T01:14:36Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448062841",
      "id" : 448062841,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2Mjg0MQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 125,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 440485040,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448062841",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448068899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448068899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I wonder if all of these except `INBOUND` should be prefixed with `OUTBOUND_` to indicate that they are different types of outbound connections, and `OUTBOUND` become `OUTBOUND_FULL_RELAY`.\r\n\r\nSee also https://github.com/bitcoin/bitcoin/pull/19405#issuecomment-651273931",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-01T01:39:42Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448068899",
      "id" : 448068899,
      "in_reply_to_id" : 448062841,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2ODg5OQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 125,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 440492275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448068899",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448969456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448969456"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Indeed! And I would take this one step further: to make the naming consistent and obvious we can distinguish 3 properties of a connection:\r\n1. inbound or outbound\r\n2. automatic or manual\r\n3. by capabilities: full relay, feeler, block relay, solicit addresses\r\n\r\nand then name the constants like prop1_prop2_prop3. Something like:\r\n\r\n```\r\nINBOUND_AUTO_FULL\r\nOUTBOUND_AUTO_FULL\r\nOUTBOUND_MANUAL_FULL\r\nOUTBOUND_AUTO_FEELER\r\nOUTBOUND_AUTO_BLOCK\r\nOUTBOUND_AUTO_ADDR\r\n```",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-02T12:37:11Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r448969456",
      "id" : 448969456,
      "in_reply_to_id" : 448062841,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2OTQ1Ng==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 125,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 441635915,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448969456",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449087317"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449087317"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, I confirm what you write above and I verified that the new code behaves in an identical way with the old one, so this PR is good (except the `//this case should be unreachable` comment).\r\n\r\nBut the code (old and new) is confusing - I imagine somebody may attempt to \"fix\" this code which opens a connection even when both \"full\" and \"block relay\" capacities are exhausted.\r\n\r\nWhat about checking here that `GetTryNewOutboundPeer()` is `true` instead of relying that if `fFeeler` is `false` then `GetTryNewOutboundPeer()` must have been true 85 lines above in the code?\r\n\r\nIt is kind of easier to understand that `GetTryNewOutboundPeer()` being `true` acts as an \"override the limits and open a connection anyway\".",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-02T15:30:13Z",
      "diff_hunk" : "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449087317",
      "id" : 449087317,
      "in_reply_to_id" : 446363611,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4NzMxNw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1943,
      "original_position" : 238,
      "original_start_line" : 1956,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 441802774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449087317",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449348963"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449348963"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`OneShot` was a terrible name for sure but at least the temporary or boostrap-side of this type of connection was implied by old name. How about `AddrSeeding` to underscore this connection is only made at the starting phase ?",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-03T02:41:57Z",
      "diff_hunk" : "@@ -104,10 +104,10 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n-void CConnman::AddOneShot(const std::string& strDest)\n+void CConnman::AddAddrFetch(const std::string& strDest)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449348963",
      "id" : 449348963,
      "line" : 108,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0ODk2Mw==",
      "original_commit_id" : "c1aed85090874b4327088b686da68a26942789ec",
      "original_line" : 108,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 5,
      "pull_request_review_id" : 442115002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449348963",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449349935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449349935"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Have you tried to introduce a ADDR_RELAY_ONLY or change the equality of `IsAddrRelayPeer()` to `conn_type_in != ConnectionType::BLOCK_RELAY` ?",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-03T02:47:01Z",
      "diff_hunk" : "@@ -2745,7 +2745,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{conn_type_in == ConnectionType::BLOCK_RELAY ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n+    m_addr_known{nullptr},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449349935",
      "id" : 449349935,
      "line" : 2743,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM0OTkzNQ==",
      "original_commit_id" : "c035da9ba9f71ff6b4fd4e2e7c69f2683e1f0d5c",
      "original_line" : 2743,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 316,
      "pull_request_review_id" : 442115002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449349935",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449352154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449352154"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Side-note, I think it would have be better to fix bug before introducing connection type for review clarity. Reviewers now have to review a fix relying on new code, less understood IMHO",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-03T02:57:47Z",
      "diff_hunk" : "@@ -1835,7 +1835,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n                     if (pnode->m_tx_relay == nullptr) {\n                         nOutboundBlockRelay++;\n-                    } else if (pnode->m_conn_type != ConnectionType::FEELER) {\n+                    } else if (pnode->m_conn_type == ConnectionType::OUTBOUND) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449352154",
      "id" : 449352154,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1MjE1NA==",
      "original_commit_id" : "f2e183e5791be0322137cb9d90fb410ebcacbfd4",
      "original_line" : 1838,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 442115002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449352154",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449353068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449353068"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's great to see documentation around types. I think you should go further and describe exactly the set of assumptions we are doing for each type (like outbound more trusted than inbound, outbound favored for relay, block_relay_only to avoid leaking the full of our `block`-topology ...) and design goals of more obscure ones (feeler to sanitize addr db, addr fetch to boostrap our view of the network). With `ConnectionType` you can even grep code locations and points directly to where we are taking decisions based on type. That would be awesome for newcomers :)\r\n\r\nAs a follow-up ofc.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-03T03:02:15Z",
      "diff_hunk" : "@@ -114,12 +114,12 @@ struct CSerializedNetMsg\n };\n \n enum class ConnectionType {\n-    INBOUND,\n-    OUTBOUND,\n-    MANUAL,\n-    FEELER,\n-    BLOCK_RELAY,\n-    ADDR_FETCH,\n+    INBOUND, /**< peer initiated connections */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r449353068",
      "id" : 449353068,
      "line" : 120,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM1MzA2OA==",
      "original_commit_id" : "4f0449ae4a3a8130602fa951d21cab1a9c53d112",
      "original_line" : 120,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 8,
      "pull_request_review_id" : 442115002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449353068",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-07-07T18:28:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-655044241",
      "id" : 655044241,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NTA0NDI0MQ==",
      "updated_at" : "2020-07-07T18:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/655044241",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Big concept ACK.\r\n\r\nI'm a bit uncomfortable with the `== ConnectionType::X` tests, and to a lesser extent with switch/case statements spread out over the code. Things are relatively simple because all \"special\" types are outbound, but it's not too hard to imagine that another class of inbound connections is added at some point, which would need reconsideration of all `== ConnectionType::INBOUND` tests.\r\n\r\nWhat do you think about having a few simple functions `IsOutbound()`, `IsManual()`, `IsBlocksOnly()`, ... that take a `ConnectionType`, and which are the only places where any comparisons or switch/case statements on `ConnectionTypes` are peformed?",
      "created_at" : "2020-07-07T18:56:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-655057621",
      "id" : 655057621,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NTA1NzYyMQ==",
      "updated_at" : "2020-07-07T18:56:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/655057621",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r451079932"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451079932"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I see how that would add some clarity, but it's also a bigger pain to maintain (if any other dimension of classification is added, all existing constants may need to be renamed).\r\n\r\nPerhaps having property test functions (`IsFull()`, `IsOutbound()`, `IsFeeler()`, ...) on `ConnectionType` gets you some of the advantages of more elaborate type names, without the maintenance burden?",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-07T19:02:40Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r451079932",
      "id" : 451079932,
      "in_reply_to_id" : 448062841,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3OTkzMg==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 125,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 444169739,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/451079932",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> What do you think about having a few simple functions IsOutbound(), IsManual(), IsBlocksOnly(), ... that take a ConnectionType\r\n\r\n+1 :bulb: \r\n\r\nOr even have it all together in a class like:\r\n\r\n```cpp\r\nclass ConnectionType\r\n{\r\npublic:\r\n    ConnectionType(bool flag1, bool flag2, ...); // assert or throw if the flags contradict\r\n\r\n    bool IsInbound();\r\n    bool IsManual();\r\n    bool IsGreen();\r\n    ...\r\n \r\nprivate:\r\n    bool flag1;\r\n    bool flag2;\r\n    ...\r\n};\r\n```",
      "created_at" : "2020-07-09T14:07:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-656149267",
      "id" : 656149267,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NjE0OTI2Nw==",
      "updated_at" : "2020-07-09T14:08:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656149267",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r455959704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455959704"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Without restructuring `ThreadOpenConnections` completely, perhaps we can just do a simple `assert(false)` here just so that if the previous conditional changes, we'll notice in test failures?",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-16T17:41:05Z",
      "diff_hunk" : "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r455959704",
      "id" : 455959704,
      "in_reply_to_id" : 446363611,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1OTcwNA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1943,
      "original_position" : 238,
      "original_start_line" : 1956,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 450072425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455959704",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK 43cec7b2a1a932f7784b037601a4fa3895e082b7\r\n\r\nVery nice simplification, reasonably easy to see its correctness too!\r\n\r\n-----\r\n\r\nFrom sipa:\r\n> What do you think about having a few simple functions `IsOutbound()`, `IsManual()`, `IsBlocksOnly()`, ... that take a `ConnectionType`, and which are the only places where any comparisons or switch/case statements on `ConnectionTypes` are peformed?\r\n\r\nI would very much like to see something like this implemented with simple functions, some \"property tests\" may be layer specific, so the logic would fit better in a the right file rather than in the `ConnectionType` class.\r\n\r\nI was worried about the case where new cases are added to the enum in the future, but realized that since we'll still have the `switch` statements in the functions the compiler will still force us to handle these new cases.",
      "created_at" : "2020-07-16T17:49:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-659570131",
      "id" : 659570131,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1OTU3MDEzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-16T17:49:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/659570131",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456095241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456095241"
         }
      },
      "author_association" : "MEMBER",
      "body" : "good point. I was focused on writing the scripted diff & forgot about new conventions. \r\n\r\ndo these renames seem correct? \r\nCNode: `fAddrFetch` -> `m_addr_fetch`\r\nCConnman: `vAddrFetchs` -> `m_addr_fetchs`\r\nCConnman: `cs_vAddrFetchs` -> `cs_addr_fetch`\r\n\r\naccording to the guidelines, `cs_vAddrFetchs` should be renamed to `m_cs_addr_fetch`, but `cs_addr_fetch` seems more consistent with our code, so I'm currently opting for that. if agreed, I can PR a small update to the guidelines. ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-16T21:43:42Z",
      "diff_hunk" : "@@ -406,8 +414,8 @@ class CConnman\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    RecursiveMutex cs_vOneShots;\n+    std::deque<std::string> vAddrFetchs GUARDED_BY(cs_vAddrFetchs);\n+    RecursiveMutex cs_vAddrFetchs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456095241",
      "id" : 456095241,
      "in_reply_to_id" : 446168334,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5NTI0MQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 418,
      "original_position" : 51,
      "original_start_line" : 409,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 450237541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456095241",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097539"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456097539"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I explored the option but there were enough call sites that I thought it would be unnecessarily verbose for no additional value. Since `fAddrFetch` is set via this comparison [here](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R2755), its mostly a simpler way to reference & doesn't introduce room for divergence I believe. Although one thing I'll do to strengthen this guarantee is remove the initialization to `false` here & make it a `const`. ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-16T21:49:08Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097539",
      "id" : 456097539,
      "in_reply_to_id" : 446169181,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5NzUzOQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 776,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 450240328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456097539",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456097970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "same answer as https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097539, but `fInbound` is already a const. ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-16T21:49:51Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};\n     bool fClient{false}; // set by version message\n     bool m_limited_node{false}; //after BIP159, set by version message\n     const bool fInbound;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456097970",
      "id" : 456097970,
      "in_reply_to_id" : 446217691,
      "line" : 781,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5Nzk3MA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 781,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 68,
      "pull_request_review_id" : 450240676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456097970",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456417946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456417946"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`m_addr_fetch` and `m_addr_fetches` seem fine. For the mutex, I'd suggest `m_addr_fetches_mutex`. The only reason we have the cs name for mutexes is that in v0.1, Satoshi used Windows CRITICAL_SECTIONs for locking.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-17T12:43:51Z",
      "diff_hunk" : "@@ -406,8 +414,8 @@ class CConnman\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    RecursiveMutex cs_vOneShots;\n+    std::deque<std::string> vAddrFetchs GUARDED_BY(cs_vAddrFetchs);\n+    RecursiveMutex cs_vAddrFetchs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456417946",
      "id" : 456417946,
      "in_reply_to_id" : 446168334,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQxNzk0Ng==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 418,
      "original_position" : 51,
      "original_start_line" : 409,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 450624298,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456417946",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456431423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456431423"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I see, maybe also consider a method like\r\n```cpp\r\nbool IsAddrFetch() { return m_conn_type == ConnectionType::ADDR_FETCH; }\r\n```",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-17T13:10:06Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r456431423",
      "id" : 456431423,
      "in_reply_to_id" : 446169181,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMTQyMw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 776,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 450643064,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456431423",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "hi everyone, thanks so much for these thoughtful reviews! ðð½  \r\n\r\n### Current state of PR: \r\n\r\nI've been considering the different options & tinkering. here's what I've got: I've incorporated miscellaneous review comments and updated the design to make `m_conn_type` private & expose an interface of accessor functions. I'm currently proposing the final state of this PR. Once the changes look good, I'll need to fix up the commit breakdown a bit. That said, I hope the current breakdown is conceptually helpful for review. I'd just need to incorporate the `m_conn_type` changes to be earlier before it makes sense for master.\r\n\r\n> What do you think about having a few simple functions IsOutbound(), IsManual(), IsBlocksOnly(), ... that take a ConnectionType, and which are the only places where any comparisons or switch/case statements on ConnectionTypes are performed?\r\n\r\n@sipa I've taken a stab at it. could you review the final state of this branch? does this match your expectations? (changes are essentially in 05e85161c390ba5aa6149bcdf4a4c560a45032f3)\r\n\r\n@dongcarl I didn't fully understand what you meant here: \r\n> I would very much like to see something like this implemented with simple functions, some \"property tests\" may be layer specific, so the logic would fit better in a the right file rather than in the ConnectionType class.\r\n\r\ndo my changes fit into what you're looking for? otherwise can you help me understand what you mean? \r\n\r\n@ariard, @vasild you two expressed interest in something very similar. what do you think of the current changeset? \r\n\r\n### Conceptual design conversation: \r\n\r\na few different ideas have been proposed through the review on this PR so far. at a high level- I stand by the core concept of this PR as extracting the connection types into an enum. I think we could potentially incorporate a class level abstraction in the future. but that the enum suffices for our needs right now, simplifies the current state of the code, and supports increased test coverage of connections as proposed in #19315. \r\n\r\nI'd like to emphasize the purpose of the enum: it represents the information we have available at the time of opening or accepting the connection. which is why, for example, we only have 1 inbound type. thus, the information the enum is communicating is only a subset of what is relevant to a connection. \r\n\r\nit doesn't have information like noban logic, tx relay info negotiated through the p2p, etc. I don't think its of interest to try to capture all possible permutations of that information here. For example, we support blocks-relay-only connections, but also have blocks-only mode. So full-relay connections for a node started in blocks-only mode are pretty much blocks-relay-only connections, but still have some small differences in practice. and then layer on nuances of noban permissions and omg its wild. \r\n\r\nbasically, my point is, there is a ton of nuance to the interactions of different types of behaviors of connections. by capturing one concrete piece of information (what is our intent when we open the connection?) and flattening it into an XOR via using an enum, I believe this greatly simplifies the complexity of considering all possibilities. here, the compiler takes care of enforcing valid states rather than our minds.\r\n\r\n@ariard do these ideas make sense to you? Let's get into some specifics. \r\n\r\nI reviewed your proposed changes. the main thing thats missing from 0b7c86158e9a344e0f379d3cef98cab1b96ecc29 is the lack of behavioral enforcement. Eg, according to this structure, it would be valid to have an inbound, manual, feeler, block_relay_only connection. The 4 different attributes give us 36 possible types of connections. This makes it very difficult for me to reason about c8ec734715a5d5efdf96736495c0e3c06b67d061. To strengthen your proposal, I would add a series of assertions on the class constructor that enforce things like \"if its inbound, it must be auto, full_relay, and regular\" But then we would be left with just 6 valid combinations from the 36 possibilities- the ones that are currently captured in the ConnectionTypes enum.\r\n\r\nRE adding manual block-relay-only connections: if the enum approach is accepted and I wanted to implement this as a new connection type, I would simply s/BLOCK_RELAY/BLOCK_RELAY_AUTO and introduce a new BLOCK_RELAY_MANUAL, then visit the call-sites to decide the desired behavior in various circumstances.  \r\n\r\nas I mentioned above, I think this extraction into a separate class might make sense as a direction to be moving towards in the long run, but I think it's premature right now. what do you think about the latest proposal of having the interface to `m_conn_type` as a private member? to me, it seems like a step in that direction. \r\n\r\n### Other misc review comments: \r\n- I believe I've fixed up the fuzz builds on all the intermediary commits, but could use a double check \r\n\r\n@vasild - think you might have answers to these from the review process, but just incase\r\n- I updated the enum to have more descriptive explanations. hows it look? \r\n- the bug fix is for a bug currently on master \r\n\r\n\r\n... and if you've made this far, THANKS FOR READING ð",
      "created_at" : "2020-07-23T00:07:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-662758053",
      "id" : 662758053,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2Mjc1ODA1Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-23T00:07:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662758053",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459151234"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459151234"
         }
      },
      "author_association" : "MEMBER",
      "body" : "thanks! updated ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T00:08:27Z",
      "diff_hunk" : "@@ -406,8 +414,8 @@ class CConnman\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    RecursiveMutex cs_vOneShots;\n+    std::deque<std::string> vAddrFetchs GUARDED_BY(cs_vAddrFetchs);\n+    RecursiveMutex cs_vAddrFetchs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459151234",
      "id" : 459151234,
      "in_reply_to_id" : 446168334,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MTIzNA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 418,
      "original_position" : 51,
      "original_start_line" : 409,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 453765071,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459151234",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459152220"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459152220"
         }
      },
      "author_association" : "MEMBER",
      "body" : "is there a reason you prefer the function over member var? I haven't incorporated yet but am open to it. just trying to understand the reasoning better ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T00:12:08Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459152220",
      "id" : 459152220,
      "in_reply_to_id" : 446169181,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MjIyMA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 776,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 453766109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459152220",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459156946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459156946"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I looked into starting with the conditional of `GetTryNewOutboundPeer()`, but I think that subtly changes the logic of the function. on current master, block-relay-only takes precedence over GetTryNewOutboundPeer, so starting with that check would change the behavior slightly. I don't feel comfortable enough with all scenarios to evaluate if that change is fine, so I made it explicit and added an `assert(false)` as a tiny improvement: [link](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R1942). does this seem any better? ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T00:30:18Z",
      "diff_hunk" : "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459156946",
      "id" : 459156946,
      "in_reply_to_id" : 446363611,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1Njk0Ng==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1943,
      "original_position" : 238,
      "original_start_line" : 1956,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 453771350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459156946",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459161841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459161841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ah yeah. totally agree with the nice compiler guarantee of switch statements. I've extracted `IsOutboundOrBlockRelayConn` into its own function, but looks like I missed incorporating the switch statement. I've updated locally and will push with next round of updates. \r\n\r\none question- in the other property-test-with-switch-statement functions [example](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-1a8b9d1ad0a6fda5e751286c73102fc2R814), I've had to add a default case because otherwise the build with `-Werror` enabled fails. is this a good way to handle? is there a cleaner way?",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T00:50:05Z",
      "diff_hunk" : "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459161841",
      "id" : 459161841,
      "in_reply_to_id" : 446372977,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MTg0MQ==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1645,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 453776624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459161841",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162446"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162446"
         }
      },
      "author_association" : "MEMBER",
      "body" : "resolving this comment in favor of https://github.com/bitcoin/bitcoin/pull/19316#discussion_r446372977 which has also been extracted to `IsOutboundOrBlockRelayConn`",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T00:52:34Z",
      "diff_hunk" : "@@ -1761,7 +1752,7 @@ int CConnman::GetExtraOutboundCount()\n     {\n         LOCK(cs_vNodes);\n         for (const CNode* pnode : vNodes) {\n-            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n+            if (pnode->fSuccessfullyConnected && !pnode->fDisconnect && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162446",
      "id" : 459162446,
      "in_reply_to_id" : 446374677,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MjQ0Ng==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1755,
      "original_position" : 141,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 453777236,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162446",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162536"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162536"
         }
      },
      "author_association" : "MEMBER",
      "body" : "resolving this comment in favor of #19316 (comment) which has also been extracted to `IsOutboundOrBlockRelayConn`",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T00:52:58Z",
      "diff_hunk" : "@@ -797,11 +797,9 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n     if (state) state->m_last_block_announcement = time_in_seconds;\n }\n \n-// Returns true for outbound peers, excluding manual connections, feelers, and\n-// one-shots.\n static bool IsOutboundDisconnectionCandidate(const CNode& node)\n {\n-    return !(node.fInbound || node.m_manual_connection || node.fFeeler || node.fOneShot);\n+    return (node.m_conn_type == ConnectionType::OUTBOUND || node.m_conn_type == ConnectionType::BLOCK_RELAY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162536",
      "id" : 459162536,
      "in_reply_to_id" : 446245139,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MjUzNg==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 802,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 453777330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162536",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162920"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ðð½  initialization removed (and some other stuff like making it private, const) ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T00:54:41Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459162920",
      "id" : 459162920,
      "in_reply_to_id" : 446376641,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MjkyMA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 775,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 453777738,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459162920",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459163048"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459163048"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T00:55:03Z",
      "diff_hunk" : "@@ -856,7 +863,7 @@ class CNode\n \n     std::set<uint256> orphan_work_set;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false, bool block_relay_only = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", ConnectionType conn_type_in = ConnectionType::OUTBOUND);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459163048",
      "id" : 459163048,
      "in_reply_to_id" : 446381822,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MzA0OA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 866,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 453777836,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459163048",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459163406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459163406"
         }
      },
      "author_association" : "MEMBER",
      "body" : "extracted into `ExpectServicesFromConn` & handled as switch statement ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T00:56:32Z",
      "diff_hunk" : "@@ -2252,7 +2250,7 @@ void ProcessMessage(\n         {\n             connman->SetServices(pfrom.addr, nServices);\n         }\n-        if (!pfrom.fInbound && !pfrom.fFeeler && !pfrom.m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n+        if ((pfrom.m_conn_type == ConnectionType::OUTBOUND || pfrom.m_conn_type == ConnectionType::BLOCK_RELAY || pfrom.m_conn_type == ConnectionType::ADDR_FETCH) && !HasAllDesirableServiceFlags(nServices))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459163406",
      "id" : 459163406,
      "in_reply_to_id" : 446384137,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MzQwNg==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 2253,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 453778183,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459163406",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459165938"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459165938"
         }
      },
      "author_association" : "MEMBER",
      "body" : "introduced property test functions\r\n& these behaviors should be captured in the code comments of each type ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T01:07:08Z",
      "diff_hunk" : "@@ -113,6 +113,14 @@ struct CSerializedNetMsg\n     std::string m_type;\n };\n \n+enum class ConnectionType {\n+    INBOUND, /**< peer initiated connections */\n+    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n+    FEELER, /**< short lived connections used to test address validity */\n+    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n+    ADDR_FETCH, /**< short lived connections used to solicit addrs */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459165938",
      "id" : 459165938,
      "in_reply_to_id" : 448062841,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NTkzOA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 125,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 453781691,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459165938",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459167580"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459167580"
         }
      },
      "author_association" : "MEMBER",
      "body" : "hmm, I feel like this aspect could change over time- eg. we decide to use these conns to seed more addresses at other times. although I will improve the comment on the enum to express the current usage.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T01:13:24Z",
      "diff_hunk" : "@@ -104,10 +104,10 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n-void CConnman::AddOneShot(const std::string& strDest)\n+void CConnman::AddAddrFetch(const std::string& strDest)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459167580",
      "id" : 459167580,
      "in_reply_to_id" : 449348963,
      "line" : 108,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NzU4MA==",
      "original_commit_id" : "c1aed85090874b4327088b686da68a26942789ec",
      "original_line" : 108,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 5,
      "pull_request_review_id" : 453784300,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459167580",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459168253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459168253"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ð  noted ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T01:16:13Z",
      "diff_hunk" : "@@ -1835,7 +1835,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n                     if (pnode->m_tx_relay == nullptr) {\n                         nOutboundBlockRelay++;\n-                    } else if (pnode->m_conn_type != ConnectionType::FEELER) {\n+                    } else if (pnode->m_conn_type == ConnectionType::OUTBOUND) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459168253",
      "id" : 459168253,
      "in_reply_to_id" : 449352154,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2ODI1Mw==",
      "original_commit_id" : "f2e183e5791be0322137cb9d90fb410ebcacbfd4",
      "original_line" : 1838,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 453784968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459168253",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459169620"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459169620"
         }
      },
      "author_association" : "MEMBER",
      "body" : "what's the advantage? \r\n\r\nits true that currently `m_addr_known` is set for everything block-relay-only connections, but if we hard code `IsAddrRelayPeer()` to be a block-relay-only connection, we'd have two entry points that could potentially get out of sync unless we remember to check & update, right?  ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T01:22:10Z",
      "diff_hunk" : "@@ -2745,7 +2745,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{conn_type_in == ConnectionType::BLOCK_RELAY ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n+    m_addr_known{nullptr},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459169620",
      "id" : 459169620,
      "in_reply_to_id" : 449349935,
      "line" : 2743,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2OTYyMA==",
      "original_commit_id" : "c035da9ba9f71ff6b4fd4e2e7c69f2683e1f0d5c",
      "original_line" : 2743,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 316,
      "pull_request_review_id" : 453786268,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459169620",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459169923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459169923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "updated ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T01:23:29Z",
      "diff_hunk" : "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459169923",
      "id" : 459169923,
      "in_reply_to_id" : 446372977,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2OTkyMw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1645,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 453786586,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459169923",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459386632"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459386632"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "* A bunch of methods would define the interface better. Otherwise the interface is \"I expose `m_conn_type` to you and you do whatever you want with it (including changing it). OTOH if methods are used `m_conn_type` can and should be made private.\r\n* It is shorter at the caller site (and I believe more readable).\r\n* Can have methods like `IsOutbound()` which do not translate to a single enum value and would need more complex expressions at the caller site.\r\n* Then it would be possible to change the enum `m_conn_type` to a set of boolean flags, bitmask or whatever other ideas there might be without changing the external interface.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T11:38:58Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459386632",
      "id" : 459386632,
      "in_reply_to_id" : 446169181,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NjYzMg==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 776,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 454048546,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459386632",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459388957"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459388957"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, it looks better to me (until the day when this assertion kicks in :-D)",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T11:43:55Z",
      "diff_hunk" : "@@ -1939,14 +1941,23 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            // Open this connection as block-relay-only if we're already at our\n-            // full-relay capacity, but not yet at our block-relay peer limit.\n-            // (It should not be possible for fFeeler to be set if we're not\n-            // also at our block-relay peer limit, but check against that as\n-            // well for sanity.)\n-            bool block_relay_only = nOutboundBlockRelay < m_max_outbound_block_relay && !fFeeler && nOutboundFullRelay >= m_max_outbound_full_relay;\n+            ConnectionType conn_type;\n+            // Determine what type of connection to open. Open OUTBOUND\n+            // connections until we meet our full-relay capacity. Afterwards,\n+            // open BLOCK_RELAY connections until we hit our block-relay peer\n+            // limit.\n+            if (fFeeler) {\n+                conn_type = ConnectionType::FEELER;\n+            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+                conn_type = ConnectionType::OUTBOUND;\n+            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+                conn_type = ConnectionType::BLOCK_RELAY;\n+            } else {\n+                //this case should be unreachable\n+                conn_type = ConnectionType::OUTBOUND;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459388957",
      "id" : 459388957,
      "in_reply_to_id" : 446363611,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4ODk1Nw==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1943,
      "original_position" : 238,
      "original_start_line" : 1956,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 454051446,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459388957",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459397380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459397380"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think remove the `default:` (so that we get a warning when a new enum is added and this code not updated to handle it) and put the `assert(false)` after the `switch` (so that the compiler stops complaining about reaching end of non-void function).\r\n\r\nIf some compiler is not smart enough to see that `assert(false)` is not going to return, then use [abort()](https://en.cppreference.com/w/cpp/utility/program/abort) which is marked as `[[noreturn]]`.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T12:01:48Z",
      "diff_hunk" : "@@ -782,6 +791,72 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+            default:\n+                assert(false);\n+        }\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {\n+        return m_conn_type == ConnectionType::FEELER;\n+    }\n+\n+    bool IsUniqueNetBlockConn() const {\n+        // Netgroups for inbound and manual peers are not excluded because our goal here\n+        // is to not use multiple of our limited outbound slots on a single netgroup\n+        // but inbound and manual peers do not use our outbound slots.  Inbound peers\n+        // also have the added issue that they could be attacker controlled and used\n+        // to prevent us from connecting to particular hosts if we used them here.\n+        switch(m_conn_type) {\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+                return false;\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return true;\n+            default:\n+                assert(false);\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459397380",
      "id" : 459397380,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5NzM4MA==",
      "original_commit_id" : "2e3514a35d4d5bf29cf2030aceb02dd3d38e44d0",
      "original_line" : 843,
      "original_position" : 122,
      "original_start_line" : 825,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 454062123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459397380",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459397956"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459397956"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I was going to suggest that this can be replaced with something like `if (pnode->IsOutboundOrBlockRelay())` - in which case the caller looks short and clean and the `switch` or chain of `if`s and the `enum` are hidden into the body of that method.\r\n\r\nSee https://github.com/bitcoin/bitcoin/pull/19316/files#r459397380",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T12:02:50Z",
      "diff_hunk" : "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459397956",
      "id" : 459397956,
      "in_reply_to_id" : 446372977,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5Nzk1Ng==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1645,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 454062774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459397956",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459701830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459701830"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ah, I think my question was unclear. let me try again- \r\n\r\nin the latest push, `m_conn_type` is indeed a [private member var](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R2746) & I've introduced [several accessor functions](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-1a8b9d1ad0a6fda5e751286c73102fc2R794) for callers.\r\n\r\nMy question here is asking about leaving `m_addr_fetch` as a member var on `CNode` VS another accessor function `IsAddrFetchConn()`. I'm wondering what the advantages are of adding the function vs leaving it in the current / past state of being accessed through this member var, `m_addr_fetch`. \r\n\r\n(same for inbound connection type) ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T20:14:39Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459701830",
      "id" : 459701830,
      "in_reply_to_id" : 446169181,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTgzMA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 776,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 454462383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459701830",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459707834"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459707834"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> this can be replaced with something like if (pnode->IsOutboundOrBlockRelay())\r\n\r\nyup, already done [link](https://github.com/bitcoin/bitcoin/pull/19316/files#diff-9a82240fe7dfe86564178691cc57f2f1R1651) :) ",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T20:26:08Z",
      "diff_hunk" : "@@ -1640,7 +1642,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     {\n                         LOCK(cs_vNodes);\n                         for (const CNode* pnode : vNodes) {\n-                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                            nRelevant += pnode->fSuccessfullyConnected && (pnode->m_conn_type == ConnectionType::OUTBOUND || pnode->m_conn_type == ConnectionType::BLOCK_RELAY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459707834",
      "id" : 459707834,
      "in_reply_to_id" : 446372977,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwNzgzNA==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 1645,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 454469845,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459707834",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459731470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459731470"
         }
      },
      "author_association" : "MEMBER",
      "body" : "updated. I think this will also appease the compiler, but will wait for travis build to confirm..",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T21:13:36Z",
      "diff_hunk" : "@@ -782,6 +791,72 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+            default:\n+                assert(false);\n+        }\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {\n+        return m_conn_type == ConnectionType::FEELER;\n+    }\n+\n+    bool IsUniqueNetBlockConn() const {\n+        // Netgroups for inbound and manual peers are not excluded because our goal here\n+        // is to not use multiple of our limited outbound slots on a single netgroup\n+        // but inbound and manual peers do not use our outbound slots.  Inbound peers\n+        // also have the added issue that they could be attacker controlled and used\n+        // to prevent us from connecting to particular hosts if we used them here.\n+        switch(m_conn_type) {\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+                return false;\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return true;\n+            default:\n+                assert(false);\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459731470",
      "id" : 459731470,
      "in_reply_to_id" : 459397380,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMTQ3MA==",
      "original_commit_id" : "2e3514a35d4d5bf29cf2030aceb02dd3d38e44d0",
      "original_line" : 843,
      "original_position" : 122,
      "original_start_line" : 825,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 454499559,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-07-23T21:13:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459731470",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459731858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459731858"
         }
      },
      "author_association" : "MEMBER",
      "body" : "updated the comment to `short lived connections used to solicit addrs when starting the node without a populated AddrMan`, let me know if this feels clear \r\n",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-23T21:14:37Z",
      "diff_hunk" : "@@ -104,10 +104,10 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n-void CConnman::AddOneShot(const std::string& strDest)\n+void CConnman::AddAddrFetch(const std::string& strDest)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459731858",
      "id" : 459731858,
      "in_reply_to_id" : 449348963,
      "line" : 108,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMTg1OA==",
      "original_commit_id" : "c1aed85090874b4327088b686da68a26942789ec",
      "original_line" : 108,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 5,
      "pull_request_review_id" : 454500127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-23T21:14:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459731858",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "updated comment & switch statement handling for non-enum values\r\n\r\nall review comments should be addressed",
      "created_at" : "2020-07-23T21:17:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-663237340",
      "id" : 663237340,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MzIzNzM0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-23T21:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663237340",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459931246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459931246"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I suggested to use a method `IsAddrFetch()` because you said `m_conn_type == ConnectionType::ADDR_FETCH` would be unnecessarily verbose at the callers' sites (it is, I agree).\r\n\r\nNow that accessor methods have been added I think there is no need to keep `fAddrFetch` and it can be replaced by `IsAddrFetch()`?",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-24T08:55:26Z",
      "diff_hunk" : "@@ -764,9 +772,8 @@ class CNode\n     }\n     // This boolean is unusued in actual processing, only present for backward compatibility at RPC/QT level\n     bool m_legacyWhitelisted{false};\n-    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n-    bool fOneShot{false};\n-    bool m_manual_connection{false};\n+    ConnectionType m_conn_type{ConnectionType::OUTBOUND};\n+    bool fAddrFetch{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r459931246",
      "id" : 459931246,
      "in_reply_to_id" : 446169181,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMTI0Ng==",
      "original_commit_id" : "43cec7b2a1a932f7784b037601a4fa3895e082b7",
      "original_line" : 776,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 454730445,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-24T08:55:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459931246",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r460535833"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460535833"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it simplifies code understanding. To know how `IsAddrRelayPeer` is going to behave, I have first to read function declaration and then `CNode` constructor on how we initialize `m_addr_known` in function of connection type. Note, it's already how the current code behaves, so it was just a suggestion of improvement. \r\n\r\nI guess this discussion belong to the more general one of a connection-attribute model where we annotate them on a node at connection initialization.",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-26T14:41:23Z",
      "diff_hunk" : "@@ -2745,7 +2745,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{conn_type_in == ConnectionType::BLOCK_RELAY ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n+    m_addr_known{nullptr},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r460535833",
      "id" : 460535833,
      "in_reply_to_id" : 449349935,
      "line" : 2743,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNTgzMw==",
      "original_commit_id" : "c035da9ba9f71ff6b4fd4e2e7c69f2683e1f0d5c",
      "original_line" : 2743,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 316,
      "pull_request_review_id" : 455370301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-26T14:41:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460535833",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Why we do we have different types of connections ? AFAICT we enforce different p2p policies in\r\nfunction of them, i.e don't evict outbound ones (`AttemptToEvictConnection`) when slots are full\r\nor enforce automatic, outbound connections offer desirable services (at version reception). These\r\ntypes are either automatically selected at connection opening, negotiated through p2p messages\r\n(i.e blocks-only), set by node operators, ... Mapping attributes (or property, same thing)  directly\r\nto a p2p policy make it far easier to analyze. You have a one-to-one relation, attribute -> policy,\r\nrather with your model you have to go through the process: type (set of _implicit_ attributes) ->\r\nattribute -> policy.\r\n\r\n>To strengthen your proposal, I would add a series of assertions on the class constructor that enforce things like \"if its inbound, it must be auto, full_relay, and regular\" But then we would be left with just 6 valid combinations from the 36 possibilities- the ones that are currently captured in the ConnectionTypes enum.\r\n\r\nThat was a PoC :p Of course you could add assertions. But again if you capture the same combination\r\nin current `ConnectionTypes` enum, for each property/attribute test you have to list each of them\r\nwhich support it. A class level abstraction asks would encapsulate complexity all for once.\r\n\r\n> RE adding manual block-relay-only connections: if the enum approach is accepted and I wanted to implement this as a new connection type, I would simply s/BLOCK_RELAY/BLOCK_RELAY_AUTO and introduce a new BLOCK_RELAY_MANUAL, then visit the call-sites to decide the desired behavior in various circumstances.\r\n\r\nIf you just call `SetBlockRelayOnly`, `SetManual` at `CNode` creation there is no more need to sweep\r\nthrough every callsites to be sure every p2p policy is consistent with each new combination of\r\nproperties/attributes.\r\n\r\nThat said, I think we agree mostly on the direction, it's more about the steps. 6a1259c is moving in the right\r\ndiscussion, and gathering all \"known-at-connection-initiation\" types in same place is required before\r\nto do something more structured like a class.\r\n",
      "created_at" : "2020-07-26T15:27:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-664002085",
      "id" : 664002085,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NDAwMjA4NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-26T15:27:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664002085",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r460541326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460541326"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree this is clearly an improvement. When we fine-grain them more in the future, for each of them I think we could have comments like\r\n\r\n```\r\nThis connection implements the feeler-behavior, aiming to periodically sanitize our addr db.\r\nIt's automatically-initiated every FEELER_INTERVAL. It can't be user-triggered.\r\nOnce we verify an online peer is associated to the addr by receiving a VERSION msg, disconnect\r\n```",
      "commit_id" : "b116896c07a957f328bd5ff656b69b951e1cc993",
      "created_at" : "2020-07-26T15:34:06Z",
      "diff_hunk" : "@@ -792,6 +791,72 @@ class CNode\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n \n+    bool IsOutboundOrBlockRelayConn() const {\n+        switch(m_conn_type) {\n+            case ConnectionType::OUTBOUND:\n+            case ConnectionType::BLOCK_RELAY:\n+                return true;\n+            case ConnectionType::INBOUND:\n+            case ConnectionType::MANUAL:\n+            case ConnectionType::ADDR_FETCH:\n+            case ConnectionType::FEELER:\n+                return false;\n+        }\n+\n+        assert(false);\n+    }\n+\n+    bool IsFullOutboundConn() const {\n+        return m_conn_type == ConnectionType::OUTBOUND;\n+    }\n+\n+    bool IsManualConn() const {\n+        return m_conn_type == ConnectionType::MANUAL;\n+    }\n+\n+    bool IsBlockOnlyConn() const {\n+        return m_conn_type == ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    bool IsFeelerConn() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#discussion_r460541326",
      "id" : 460541326,
      "line" : 821,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0MTMyNg==",
      "original_commit_id" : "6a1259c574c96c7059e3b6a61b79d56d59c48508",
      "original_line" : 821,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 100,
      "pull_request_review_id" : 455374233,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19316",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-26T15:34:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460541326",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-07-26T18:48:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-664025951",
      "id" : 664025951,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NDAyNTk1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-26T18:48:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664025951",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
