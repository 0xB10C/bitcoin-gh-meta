[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19174 (refactor: replace CConnman/BanMan pointers by references in net_processing.cpp by theStack)\n* #18925 (Add extra thread for scheduler, move TorControl and OpenAddedConnections to scheduler by naumenkogs)\n* #17785 (p2p: Unify Send and Receive protocol versions by hebasto)\n* #17428 (p2p: Try to preserve outbound block-relay-only connections during restart by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-06-17T23:07:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645671781",
      "id" : 645671781,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTY3MTc4MQ==",
      "updated_at" : "2020-06-17T23:07:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645671781",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\nIs `enum ConnectionType` the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\r\nIt's true that it's non-ambiguous right now, but maybe we want to make them a bitmask in advance for the sake of explicitness, since we are already refactoring it? ",
      "created_at" : "2020-06-18T07:18:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-645829587",
      "id" : 645829587,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTgyOTU4Nw==",
      "updated_at" : "2020-06-18T07:18:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645829587",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\n> Is enum ConnectionType the right approach? It worries me that these things are not mutually-exclusive. Like, ADDRFETCH is also OUTBOUND.\r\n\r\nI think enum is the right approach. OUTBOUND here means a connection that is created automatically by the OpenConnections thread. Yes, there are other kinds of connection that the node originates, but for clarity, I don't think those should be referred to as 'OUTBOUND'.\r\n\r\nI think we definitely don't want a bitmask of different connection capabilities. That leads to an combinatorial explosion of connection types that you need to either test or explicitly disallow. ",
      "created_at" : "2020-06-18T19:56:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646274698",
      "id" : 646274698,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjI3NDY5OA==",
      "updated_at" : "2020-06-18T19:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646274698",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@naumenkogs its a good question to ask, but I think enforcing mutual exclusivity makes more sense and what allows for a lot of the simplicity. @jnewbery explained the main reasons, I want to add some additional points\r\n- everything but `INBOUND` originates from the node, but `OUTBOUND` refers to a specific type, which is the most common, full-relay, outbound connection. so I do think its exclusive to the other connection types. on the enum I added `OUTBOUND, // full relay connections (blocks, addrs, txns)`, but lmk if you have suggestions on how it could be clarified better.   \r\n- if we support combinations, we have to add many behavioral checks to ensure logical adherence. lots of the cleanup in this PR shed light on how brittle/annoying it is to have those checks scattered everywhere. so, I think if we are adding connection types in the future, designing the conn_type to fit into the flat structure better supports code-simplicity-over-time as well. \r\n\r\n---\r\n\r\nOn a different note, I have a question with the fuzz tests & would appreciate any guidance. \r\n\r\nSince I change the signature of the `CNode` constructor, I'm causing a [test failure](https://travis-ci.org/github/bitcoin/bitcoin/jobs/699509978). I found [this function](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/FuzzedDataProvider.h#L184) to support fuzz testing with enums, but am unclear on how to implement. It seems I need to add `kMaxValue` to the enum. \r\n\r\nI'm wondering if the pattern is: \r\na) mimic the enum in the tests & add `kMaxValue` there, or \r\nb) import something into `net.cpp` and define directly on the code implementation of the enum.\r\nOption B seems strange to add that dependency to `net`, but option A seems like it would be easy to forget to add an enum type to the fuzz test if we add a type to the cpp code in the future. \r\n\r\n@practicalswift, @MarcoFalke, any chance either of you are able to advise? ðð½",
      "created_at" : "2020-06-18T21:03:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19316#issuecomment-646304479",
      "id" : 646304479,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19316",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjMwNDQ3OQ==",
      "updated_at" : "2020-06-18T21:03:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646304479",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   }
]
