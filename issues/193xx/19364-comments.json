[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19316 ([net] Cleanup logic around connection types by amitiuttarwar)\n* #19315 ([tests] Allow outbound & block-relay-only connections in functional tests. by amitiuttarwar)\n* #18044 (Use wtxid for transaction relay by sdaftuar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-06-23T19:34:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-648374732",
      "id" : 648374732,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19364",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODM3NDczMg==",
      "updated_at" : "2020-06-24T13:19:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648374732",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19364#discussion_r444741653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19364"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444741653"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Wondering if we should clarify that these tasks are expected to be limited to 1 second or something (perhaps \"lightweight tasks\")?\r\nJust so that future devs don't tempt to put any heavy logic in here.",
      "commit_id" : "b957b0d098f5dce2961d2b1a8c7bcfeb6b8e935b",
      "created_at" : "2020-06-24T08:47:55Z",
      "diff_hunk" : "@@ -73,6 +73,14 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     */\n     bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n \n+    /**\n+    * Process global tasks that aren't attached to a specific peer",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19364#discussion_r444741653",
      "id" : 444741653,
      "line" : 77,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0MTY1Mw==",
      "original_commit_id" : "0e7e11ee0ee94b4245a637284b925473a8046eeb",
      "original_line" : 77,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.h",
      "position" : 5,
      "pull_request_review_id" : 436447468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19364",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-24T08:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444741653",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\nThe idea makes perfect sense from the high-level. The implementation seems safe.",
      "created_at" : "2020-06-24T08:55:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-648690864",
      "id" : 648690864,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19364",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODY5MDg2NA==",
      "updated_at" : "2020-06-24T08:55:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648690864",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Does this new global data structure need to be limited in size in some way? At least when it was per peer, it would go away when the peer was disconnected. I'm vaguely worried that this might open up a new DoS vector.",
      "created_at" : "2020-06-24T13:10:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-648809825",
      "id" : 648809825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19364",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODgwOTgyNQ==",
      "updated_at" : "2020-06-24T13:10:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648809825",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Does this new global data structure need to be limited in size in some way? At least when it was per peer, it would go away when the peer was disconnected. I'm vaguely worried that this might open up a new DoS vector.\r\n\r\nThat's the right question to be asking, but I think we're safe:\r\n\r\n- items are inserted into `g_orphan_work_set` at the point they would have been inserted into the per-peer `orphan_work_set`.\r\n- one item is popped from that set on every message handler thread loop. In effect this means that the set is emptied very quickly. Even if the peer that provided the parent (which previously would have held the object in its `orphan_work_set`), the object will very quickly be processed from `g_orphan_work_set`.\r\n\r\nThese entries can't persist for long in the set. I could refactor `ProcessOrphanTx()` to make it more obvious that we'll always empty this set quickly, but I wanted to keep the diff small for this PR. Perhaps I could do that in a follow-up.\r\n\r\nLonger term, it might make sense to consolidate all orphan logic into a module, similar to how #19184 overhauls request logic.",
      "created_at" : "2020-06-24T14:22:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19364#issuecomment-648852380",
      "id" : 648852380,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19364",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODg1MjM4MA==",
      "updated_at" : "2020-06-24T14:22:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648852380",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
