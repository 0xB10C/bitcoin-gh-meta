[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22253#discussion_r651936906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22253"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651936906"
         }
      },
      "author_association" : "MEMBER",
      "body" : "TODOs in comments are generally discouraged. If someone wants to implement witness replacement, they don't need a TODO to tell them to do that.",
      "commit_id" : "012341f779f4b82a757f30ef36810d8f8a1975dc",
      "created_at" : "2021-06-15T16:02:56Z",
      "diff_hunk" : "@@ -611,9 +611,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (!CheckFinalTx(m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n-    // is it already in the memory pool?\n-    if (m_pool.exists(hash)) {\n+    if (m_pool.exists(GenTxid(true, tx.GetWitnessHash()))) {\n+        // Exact transaction already exists in the mempool.\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n+    } else if (m_pool.exists(GenTxid(false, tx.GetHash()))) {\n+        // Transaction with the same nonwitness data but different witnes (same txid, different\n+        // wtxid) already exists in the mempool. TODO: allow replacements",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22253#discussion_r651936906",
      "id" : 651936906,
      "line" : 619,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTkzNjkwNg==",
      "original_commit_id" : "012341f779f4b82a757f30ef36810d8f8a1975dc",
      "original_line" : 619,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 11,
      "pull_request_review_id" : 684204023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22253",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-15T16:33:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651936906",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22253#discussion_r651940492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22253"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651940492"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No need for these to be member variables:\r\n\r\n```suggestion\r\n        privkeys = [node.get_deterministic_priv_key().key]\r\n        address = node.get_deterministic_priv_key().address\r\n        coins = []\r\n```",
      "commit_id" : "012341f779f4b82a757f30ef36810d8f8a1975dc",
      "created_at" : "2021-06-15T16:07:32Z",
      "diff_hunk" : "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test mempool acceptance in case of an already known transaction\n+with identical non-witness data different witness.\n+\"\"\"\n+\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_TRUE,\n+    OP_IF,\n+    OP_HASH160,\n+    OP_EQUAL,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    hash160,\n+)\n+from test_framework.messages import (\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    COutPoint,\n+    sha256,\n+    COIN,\n+    ToHex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+class MempoolWtxidTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-incrementalrelayfee=0\"]]\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info('Start with empty mempool, and 200 blocks')\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22253#discussion_r651940492",
      "id" : 651940492,
      "line" : 48,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTk0MDQ5Mg==",
      "original_commit_id" : "012341f779f4b82a757f30ef36810d8f8a1975dc",
      "original_line" : 48,
      "original_position" : 48,
      "original_start_line" : 46,
      "path" : "test/functional/mempool_wtxid.py",
      "position" : 48,
      "pull_request_review_id" : 684204023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22253",
      "side" : "RIGHT",
      "start_line" : 46,
      "start_side" : "RIGHT",
      "updated_at" : "2021-06-15T16:33:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651940492",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22253#discussion_r651941053"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22253"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651941053"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you can just call `node.generate()` and it'll generate to the node's deterministic address.",
      "commit_id" : "012341f779f4b82a757f30ef36810d8f8a1975dc",
      "created_at" : "2021-06-15T16:08:12Z",
      "diff_hunk" : "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test mempool acceptance in case of an already known transaction\n+with identical non-witness data different witness.\n+\"\"\"\n+\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_TRUE,\n+    OP_IF,\n+    OP_HASH160,\n+    OP_EQUAL,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    hash160,\n+)\n+from test_framework.messages import (\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    COutPoint,\n+    sha256,\n+    COIN,\n+    ToHex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+class MempoolWtxidTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-incrementalrelayfee=0\"]]\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info('Start with empty mempool, and 200 blocks')\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(110, self.address)[:-100]:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22253#discussion_r651941053",
      "id" : 651941053,
      "line" : 50,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTk0MTA1Mw==",
      "original_commit_id" : "012341f779f4b82a757f30ef36810d8f8a1975dc",
      "original_line" : 50,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "test/functional/mempool_wtxid.py",
      "position" : 50,
      "pull_request_review_id" : 684204023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22253",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-15T16:33:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651941053",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22253#discussion_r651956121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22253"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651956121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can you break this into multiple lines like the `assert_equal()` below?",
      "commit_id" : "012341f779f4b82a757f30ef36810d8f8a1975dc",
      "created_at" : "2021-06-15T16:25:59Z",
      "diff_hunk" : "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test mempool acceptance in case of an already known transaction\n+with identical non-witness data different witness.\n+\"\"\"\n+\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_TRUE,\n+    OP_IF,\n+    OP_HASH160,\n+    OP_EQUAL,\n+    OP_ELSE,\n+    OP_ENDIF,\n+    hash160,\n+)\n+from test_framework.messages import (\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    COutPoint,\n+    sha256,\n+    COIN,\n+    ToHex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+class MempoolWtxidTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        self.extra_args = [[\"-incrementalrelayfee=0\"]]\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info('Start with empty mempool, and 200 blocks')\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(110, self.address)[:-100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+        assert_equal(node.getmempoolinfo()['size'], 0)\n+\n+        txid = self.coins.pop()[\"txid\"]\n+\n+        self.log.info(\"Submit parent with multiple script branches to mempool\")\n+        hashlock = hash160(b'Preimage')\n+        witness_script = CScript([OP_IF, OP_HASH160, hashlock, OP_EQUAL, OP_ELSE, OP_TRUE, OP_ENDIF])\n+        witness_program = sha256(witness_script)\n+        script_pubkey = CScript([OP_0, witness_program])\n+\n+        parent = CTransaction()\n+        parent.vin.append(CTxIn(COutPoint(int(txid, 16), 0), b\"\"))\n+        parent.vout.append(CTxOut(int(9.99998 * COIN), script_pubkey))\n+        parent.rehash()\n+\n+        raw_parent = node.signrawtransactionwithkey(hexstring=parent.serialize().hex(), privkeys=self.privkeys)['hex']\n+        parent_txid = node.sendrawtransaction(hexstring=raw_parent, maxfeerate=0)\n+        node.generate(1)\n+\n+        # Create a new segwit transaction with witness solving first branch\n+        child_witness_script = CScript([OP_TRUE])\n+        child_witness_program = sha256(child_witness_script)\n+        child_script_pubkey = CScript([OP_0, child_witness_program])\n+\n+        child_one = CTransaction()\n+        child_one.vin.append(CTxIn(COutPoint(int(parent_txid, 16), 0), b\"\"))\n+        child_one.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\n+        child_one.wit.vtxinwit.append(CTxInWitness())\n+        child_one.wit.vtxinwit[0].scriptWitness.stack = [b'Preimage', b'\\x01', witness_script]\n+        child_one_wtxid = child_one.getwtxid()\n+        child_one_txid = child_one.rehash()\n+\n+        # Create another identical segwit transaction with witness solving second branch\n+        child_two = CTransaction()\n+        child_two.vin.append(CTxIn(COutPoint(int(parent_txid, 16), 0), b\"\"))\n+        child_two.vout.append(CTxOut(int(9.99996 * COIN), child_script_pubkey))\n+        child_two.wit.vtxinwit.append(CTxInWitness())\n+        child_two.wit.vtxinwit[0].scriptWitness.stack = [b'', witness_script]\n+        child_two_wtxid = child_two.getwtxid()\n+        child_two_txid = child_two.rehash()\n+\n+        assert_equal(child_one_txid, child_two_txid)\n+        assert child_one_wtxid != child_two_wtxid\n+\n+        self.log.info(\"Submit one child to the mempool\")\n+        txid_submitted = node.sendrawtransaction(ToHex(child_one))\n+        assert_equal(node.getrawmempool(True)[txid_submitted]['wtxid'], child_one_wtxid)\n+\n+        # testmempoolaccept reports the \"already in mempool\" error\n+        assert_equal(node.testmempoolaccept([ToHex(child_one)]),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22253#discussion_r651956121",
      "id" : 651956121,
      "line" : 106,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTk1NjEyMQ==",
      "original_commit_id" : "012341f779f4b82a757f30ef36810d8f8a1975dc",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "test/functional/mempool_wtxid.py",
      "position" : 106,
      "pull_request_review_id" : 684204023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22253",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-15T16:33:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651956121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "CC @ariard - The same-txid-different-wtxid issue was initially pointed out in #19645 and the test commit is converted from https://github.com/bitcoin/bitcoin/pull/19645/commits/d86e7a17081af04ceabe93b15a87cf295a9e9d84",
      "created_at" : "2021-06-15T16:52:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22253#issuecomment-861665545",
      "id" : 861665545,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22253",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MTY2NTU0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-15T16:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/861665545",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
