[
   {
      "author_association" : "MEMBER",
      "body" : "ci fails. Maybe this needs rebase on bitcoin/bitcoin#22216 ?",
      "created_at" : "2021-06-11T07:23:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22219#issuecomment-859345790",
      "id" : 859345790,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22219",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1OTM0NTc5MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-11T07:23:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859345790",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 12ca4486bc6237e92e2dcf1bad8dc6fc61cd3e8d -> 40dad10a19802149be588b23968d73cc28c58ad3 ([`pr/ipc-make.1`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-make.1) -> [`pr/ipc-make.2`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-make.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-make.1-rebase..pr/ipc-make.2)) after #22216 to fix implicit dependency on #22216 causing CI failures https://github.com/bitcoin/bitcoin/pull/22219/checks?check_run_id=2798033917",
      "created_at" : "2021-06-11T09:13:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22219#issuecomment-859417811",
      "id" : 859417811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22219",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1OTQxNzgxMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-11T09:13:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859417811",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> ci fails. Maybe this needs rebase on #22216 ?\r\n\r\nThanks! Rebased now. Nice catch of this dependency",
      "created_at" : "2021-06-11T09:15:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22219#issuecomment-859420655",
      "id" : 859420655,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22219",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1OTQyMDY1NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-11T09:15:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859420655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "windows build is red :grimacing: ",
      "created_at" : "2021-06-11T10:12:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22219#issuecomment-859471689",
      "id" : 859471689,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22219",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1OTQ3MTY4OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-11T10:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859471689",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> windows build is red :grimacing: \r\n\r\nHopefully fixed!\r\n\r\n---\r\n\r\nUpdated 40dad10a19802149be588b23968d73cc28c58ad3 -> 7a879afa11d1bc1cf8c2327b377d7b3d1485a9fe ([`pr/ipc-make.2`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-make.2) -> [`pr/ipc-make.3`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-make.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-make.2..pr/ipc-make.3)) to fix appveyor build error https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/39561119#L32\r\n\r\n",
      "created_at" : "2021-06-11T17:10:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22219#issuecomment-859723310",
      "id" : 859723310,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22219",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1OTcyMzMxMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-11T17:10:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859723310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22219#discussion_r666378196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22219"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666378196"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What's the rational of having an interfaces maker such as `makeEcho` supported on `BitcoindInit`, `bitcoind` program should never be executed as a spawned process/`IpcServer` ?\r\n\r\nOne option is to tread this as a throw returned to the client, as `MakeWalletClient` is providing, though it means anytime we add a new derived Init interface, we need to add throw stub in all other programs non-supporting the interface functionality ?\r\n\r\nCurrently, if the interface maker isn't implemented-side, what I can observe on one of my local branch is silent failure of the IPC server, followed by a socket disconnection/`EventLoop` exit.\r\n\r\n```\r\n2021-07-08T17:07:01Z {bitcoin-altnet-26997/bitcoin-altnet-26997} IPC server recv request  #1 Init.construct$Params (threadMap = <external capability>)                                                                                                                                   \r\n2021-07-08T17:07:01Z\r\n2021-07-08T17:07:01Z {bitcoin-altnet-26997/bitcoin-altnet-26997} IPC server send response #1 Init.construct$Results (threadMap = <external capability>)                                                                                                                                  \r\n2021-07-08T17:07:01Z\r\n2021-07-08T17:07:01Z {bitcoin-altnet-26997/bitcoin-altnet-26997} IPC server recv request  #2 Init.makeEcho$Params (context = (thread = <external capability>, callbackThread = <external capability>))                                                                                   \r\n2021-07-08T17:07:01Z\r\n2021-07-08T17:07:01Z {bitcoin-altnet-26997/bitcoin-altnet-26997} IPC server post request  #2 {bitcoin-altnet-26997/bitcoin-altnet-26999 (from bitcoin-node-26897/b-httpworker.0-26916)}                                                                                                  \r\n2021-07-08T17:07:01Z\r\n2021-07-08T17:07:01Z {bitcoin-altnet-26997/bitcoin-altnet-26997} IPC server send response #2 Init.makeEcho$Results ()\r\n2021-07-08T17:07:01Z\r\n2021-07-08T17:07:01Z {bitcoin-altnet-26997/bitcoin-altnet-26997} IPC server: socket disconnected.\r\n2021-07-08T17:07:01Z\r\n2021-07-08T17:07:01Z {bitcoin-altnet-26997/bitcoin-altnet-26997} IPC server destroyN2mp11ProxyServerIN3ipc5capnp8messages4InitEEE\r\n2021-07-08T17:07:01Z\r\n2021-07-08T17:07:01Z {bitcoin-altnet-26997/bitcoin-altnet-26997} EventLoop::loop done, cancelling event listeners.\r\n2021-07-08T17:07:01Z\r\n2021-07-08T17:07:01Z {bitcoin-altnet-26997/bitcoin-altnet-26997} EventLoop::loop bye.\r\n```",
      "commit_id" : "c50facd030ec5bd2c7fc2b55486a3cb77b59b1d8",
      "created_at" : "2021-07-08T17:13:00Z",
      "diff_hunk" : "@@ -18,6 +22,13 @@ class BitcoindInit : public interfaces::Init\n         m_node.args = &gArgs;\n         m_node.init = this;\n     }\n+    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n+    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, *Assert(m_node.args));\n+    }\n+    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22219#discussion_r666378196",
      "id" : 666378196,
      "line" : 31,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjM3ODE5Ng==",
      "original_commit_id" : "c50facd030ec5bd2c7fc2b55486a3cb77b59b1d8",
      "original_line" : 31,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/init/bitcoind.cpp",
      "position" : 22,
      "pull_request_review_id" : 702314476,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22219",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T17:28:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666378196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22219#discussion_r666522301"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22219"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666522301"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/22219#discussion_r666378196\r\n\r\nThanks for experimenting with this!\r\n\r\n> What's the rational of having an interfaces maker such as `makeEcho` supported on `BitcoindInit`, `bitcoind` program should never be executed as a spawned process/`IpcServer` ?\r\n\r\nJust like all interfaces in the `src/interfaces/` directory, the `interfaces::Init` interface can be used remotely or it can be used locally. `bitcoind` provides the `interfaces::Chain` interface and it uses the `interface::WalletClient` interface even though it does not support IPC at all. `bitcoin-qt` uses the `interfaces::Node` and `interfaces::Wallet` interfaces even though it does not support IPC at all.\r\n\r\nThe `interfaces::Init` interface is just the starting interface. When a bitcoin process is created, whether or not uses IPC it can create an instance of the `interfaces::Init` interface and use it to get access to other interfaces supported by the process. If the current process like `bitcoind` and `bitcoin-qt` and `bitcoin-node` has node code linked in, then `makeNode()` and `makeChain()` methods will return non-null. If the current process like `bitcoind` and `bitcoin-qt` and `bitcoin-wallet` has wallet code linked in, then `makeWalletClient` will return non-null. If the current process like `bitcoin-gui` has none of these things linked in then all of these methods will return null.\r\n\r\nThe point of the Init interface is to allow the same bitcoin init code to be linked into different binaries and work without having to use preprocessor conditions or other build tricks. `make*` methods just return non-null if the relevant interface implementation is linked in and null if trying to instantiate the interface would cause link errors.\r\n\r\nEverything described above is happens with or without IPC. IPC just adds the option of calling other `interface::Init` instances that aren't in the current process. You can spawn a new process and call its Init methods. Or you can connect to an existing process through a socket can call its Init methods. Or you can create a socket and let other processes call your process's Init methods.\r\n\r\n> One option is to tread this as a throw returned to the client, as `MakeWalletClient` is providing, though it means anytime we add a new derived Init interface, we need to add throw stub in all other programs non-supporting the interface functionality ?\r\n\r\nI'm not clear what this would be trying to do. Is it is related to the bug described below? Returning does null seems more ergonomic than throwing an exception. libmultiprocess does support throwing & catching exceptions remotely, but it requires an extra annotation in capnp interface definitions.\r\n\r\n> Currently, if the interface maker isn't implemented-side, what I can observe on one of my local branch is silent failure of the IPC server, followed by a socket disconnection/`EventLoop` exit.\r\n\r\nThis isn't expected and sounds like a bug. Can you post a branch or commit hash with the code? I think there should never be much reason to call a `make` method in a remote process if you know it will return null. But if it does return null you should just see a null return value forwarded. It shouldn't cause the remote process to exit.\r\n\r\nThe log is a little strange, and I'm not sure how to interpret it without looking at the code (it might also help to see the client side log). It looks like the server is successfully returning null from a remote `makeEcho` request. But then the socket is disconnected and it exits. Maybe the socket is closing because the client is segfaulting?\r\n\r\nWould be great to post details in new issue (https://github.com/chaincodelabs/libmultiprocess/issues/new) since that issue tracker is a convenient place to collect feedback and provide support for these things.",
      "commit_id" : "c50facd030ec5bd2c7fc2b55486a3cb77b59b1d8",
      "created_at" : "2021-07-08T21:13:22Z",
      "diff_hunk" : "@@ -18,6 +22,13 @@ class BitcoindInit : public interfaces::Init\n         m_node.args = &gArgs;\n         m_node.init = this;\n     }\n+    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n+    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, *Assert(m_node.args));\n+    }\n+    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22219#discussion_r666522301",
      "id" : 666522301,
      "in_reply_to_id" : 666378196,
      "line" : 31,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjUyMjMwMQ==",
      "original_commit_id" : "c50facd030ec5bd2c7fc2b55486a3cb77b59b1d8",
      "original_line" : 31,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/init/bitcoind.cpp",
      "position" : 22,
      "pull_request_review_id" : 702505437,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22219",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T21:13:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666522301",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22219#discussion_r668024917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22219"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668024917"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks to recall the design of `interfaces::Init`, this is matching the rough mental model I've in mind!\r\n\r\n> If the current process like bitcoin-gui has none of these things linked in then all of these methods will return null.\r\n\r\nThis is where I think the interfaces error handling could be improved. Instead of returning null if the current process doesn't have linked code, what do you think about throwing back an exception from a stub ?\r\n\r\nAFAIU, this error handling is what the newly introduced `MakeWalletClient` in `src/dummywallet.cpp` (https://github.com/bitcoin/bitcoin/pull/22219/files#diff-ccc5d781a55644499897b7329c1544939c0751975d687abbda086d332db21fe7R68) is achieving. I was proposing to extend it to `makeEcho` on `bitcoind` build. Like https://github.com/ariard/bitcoin/commit/1dee88ad1bf4434bc495b77566c7e617245095a5.\r\n\r\nBut AFAICT, you think it's more ergonomic to return null rather than throwing an exception where I would prefer more explicit, verbose failure handling ? That said, I'm good with returning null, just a small ergonomic preference here.\r\n\r\n-------\r\n\r\n> Maybe the socket is closing because the client is segfaulting?\r\n\r\nYes I'm deliberately calling a method on the returned, null pointer to demonstrate the failure mode, sorry I should have precise that. Hopefully, it's illustrating that throwing on null `make` method might be better to recover from logical bugs introduced by programmers mistakenly calling a `make`.\r\n\r\n> Would be great to post details in new issue (https://github.com/chaincodelabs/libmultiprocess/issues/new) since that issue tracker is a convenient place to collect feedback and provide support for these things.\r\n\r\nStill cleaning the code on this branch, will post it for sure for feedback but so far I'm able to chain processes (`bitcoind` --> `altnet_1` --> `altnet_2`) as intended :)",
      "commit_id" : "c50facd030ec5bd2c7fc2b55486a3cb77b59b1d8",
      "created_at" : "2021-07-12T15:18:27Z",
      "diff_hunk" : "@@ -18,6 +22,13 @@ class BitcoindInit : public interfaces::Init\n         m_node.args = &gArgs;\n         m_node.init = this;\n     }\n+    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n+    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, *Assert(m_node.args));\n+    }\n+    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22219#discussion_r668024917",
      "id" : 668024917,
      "in_reply_to_id" : 666378196,
      "line" : 31,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODAyNDkxNw==",
      "original_commit_id" : "c50facd030ec5bd2c7fc2b55486a3cb77b59b1d8",
      "original_line" : 31,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/init/bitcoind.cpp",
      "position" : 22,
      "pull_request_review_id" : 704240920,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22219",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T15:18:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668024917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22219#discussion_r668081664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22219"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668081664"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/22219#discussion_r668024917\r\n\r\n> But AFAICT, you think it's more ergonomic to return null rather than throwing an exception where I would prefer more explicit, verbose failure handling ? That said, I'm good with returning null, just a small ergonomic preference here.\r\n\r\nI think it's just a misunderstanding. I like exceptions and think it's often good to throw when a condition happens that is definitely an error. But if an object can't be created locally so it has to be created remotely, that may be an error, or it may be fine. The `interfaces::Init` make methods usually have no way of knowing what their callers are expecting. So I think all they should do is return the objects if they can make them or return null if they can't make them.\r\n\r\nIf you look at the `makeNode` call in the GUI code:\r\n\r\nhttps://github.com/ryanofsky/bitcoin/blob/pr/ipc.157/src/qt/bitcoin.cpp#L284-L285\r\n\r\nOr the `makeWalletClient` code in the node code:\r\n\r\nhttps://github.com/ryanofsky/bitcoin/blob/pr/ipc.157/src/wallet/init.cpp#L134-L135\r\n\r\nYou can see that it's not an error, but an expected condition for either of these methods to return null. If the node or wallet client object can't be created locally (the respective make methods return null in `bitcoin-gui` and `bitcoin-node` binaries and non-null in `bitcoin-qt` and `bitcoind` binaries), the null-handling code simply calls `spawnProcess` and creates the object remotely.\r\n\r\nIf you look at `makeEcho` code in the `echoipc` test:\r\n\r\nhttps://github.com/ryanofsky/bitcoin/blob/pr/ipc.157/src/rpc/misc.cpp#L685\r\n\r\nThen it is doing the opposite. For testing purposes it preferring to create the object remotely, but will fall back and create it locally if IPC is not available. This is a test design decision that I think should be local to the `echoipc` function, and not something which five different `Init` classes should be assuming. I think the make methods should all just make the object if they can or return null if they can't and leave callers to handle the result.\r\n\r\n> Still cleaning the code on this branch, will post it for sure for feedback but so far I'm able to chain processes (`bitcoind` --> `altnet_1` --> `altnet_2`) as intended :)\r\n\r\nGlad to hear it!",
      "commit_id" : "c50facd030ec5bd2c7fc2b55486a3cb77b59b1d8",
      "created_at" : "2021-07-12T16:29:29Z",
      "diff_hunk" : "@@ -18,6 +22,13 @@ class BitcoindInit : public interfaces::Init\n         m_node.args = &gArgs;\n         m_node.init = this;\n     }\n+    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n+    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, *Assert(m_node.args));\n+    }\n+    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22219#discussion_r668081664",
      "id" : 668081664,
      "in_reply_to_id" : 666378196,
      "line" : 31,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODA4MTY2NA==",
      "original_commit_id" : "c50facd030ec5bd2c7fc2b55486a3cb77b59b1d8",
      "original_line" : 31,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/init/bitcoind.cpp",
      "position" : 22,
      "pull_request_review_id" : 704315402,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22219",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T16:29:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668081664",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
