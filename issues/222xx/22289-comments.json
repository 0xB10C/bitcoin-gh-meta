[
   {
      "author_association" : "NONE",
      "body" : "The more I look at that constructor the less sense it makes. When are you passing pointer at compile time? \r\nWhy does the check for end being at least at begin or after happen after we've 'set' m_size to a very large value? \r\nShouldn't this constructor throw in that case? Or at least, I don't know, somehow indicate that it has an invalid state? \r\nBecause using a span constructed with invalid pointers would result in invoking UB eg: if end() - 1 is dereferenced. \r\nWhere is that pointer? Not in a range that starts at begin(), that's all we know. I'm pretty sure that breaks the whole STL library without much of a warning. \r\n\r\nEDIT: I've talked to other devs. So I understand a bit better. It's a narrow contract in std::span. \r\nMakes sense so far. And this is a \"drop-in\" implementation, so the goal is for it to work the same with Span and std::span. \r\nWhich is great. The thing is: if it's UB now we can detect it and make sure we don't execute invalid code. \r\nIf it's UB with std::span we can't do anything. \r\nIf it's UB now, we do nothing about it, then it's UB in std::span it doesn't have to behave the same way anyway, or in any way for that matter.\r\n\r\nTL;DR: can we please keep those assertion in the non \"DEBUG\" build? Because chances are until a user plays with it it's not gonna break, and I'd argue we want stuff to break in a manner that is evident to everyone involved. \r\nIt's a luxury we lose as soon as we use standard library feature. ",
      "created_at" : "2021-06-20T15:01:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22289#issuecomment-864567632",
      "id" : 864567632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22289",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2NDU2NzYzMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-20T15:30:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864567632",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7462994?v=4",
         "events_url" : "https://api.github.com/users/ViralTaco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ViralTaco/followers",
         "following_url" : "https://api.github.com/users/ViralTaco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ViralTaco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ViralTaco",
         "id" : 7462994,
         "login" : "ViralTaco",
         "node_id" : "MDQ6VXNlcjc0NjI5OTQ=",
         "organizations_url" : "https://api.github.com/users/ViralTaco/orgs",
         "received_events_url" : "https://api.github.com/users/ViralTaco/received_events",
         "repos_url" : "https://api.github.com/users/ViralTaco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ViralTaco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ViralTaco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ViralTaco"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  It's a luxury we lose as soon as we use standard library feature.\r\n\r\nNo, even with the standard library you can check for UB by using sanitizers (UBSan, ASan, MSan, valgrind, ...)",
      "created_at" : "2021-06-20T15:46:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22289#issuecomment-864573539",
      "id" : 864573539,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22289",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2NDU3MzUzOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-20T15:46:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864573539",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
