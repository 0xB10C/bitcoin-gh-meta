[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601192396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601192396"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you think about removing this call? The comment above is incorrect (we only process one tx at most, not recursively), and we'll process the orphans in subsequent calls to `ProcessMessages()`. It seems strange that in this one case we can process up to two transactions in `ProcessMessage()` (the one that we just received, and up to one orphan child of it).",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T08:28:45Z",
      "diff_hunk" : "@@ -3059,7 +3060,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             }\n \n             // Recursively process any orphan transactions that depended on this one\n-            ProcessOrphanTx(peer->m_orphan_work_set);\n+            ProcessOrphanTx(*peer);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601192396",
      "id" : 601192396,
      "line" : 3063,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTE5MjM5Ng==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 3063,
      "original_position" : 151,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 151,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601192396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601207659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601207659"
         }
      },
      "author_association" : "MEMBER",
      "body" : "How about moving this check up to immediately after the call to `ProcessOrphanTx()`? It's not possible to have both `more_orphans` be true _and_ have `m_getdata_requests` be non-empty:\r\n\r\n- `ProcessOrphanTx(*peer)` can only return true if there are elements in peer's orphan work set, which can only be true if the last network message processed was a `tx` (`m_peer_work_set` only gets added to when processing a `tx` or when processing an element of `m_peer_work_set`, and we won't process another network message until it's empty)\r\n- `m_getdata_requests` can only be non-empty if the last network message processed was a `getdata` (`m_getdata_requests` only gets added to when processing a `getdata`, and we won't process another message until it's empty)\r\n\r\nThat'd eliminate the need for a `more_orphans` variable, and make it immediately obvious that we're not going to process an orphan _and_ a getdata request on the same pass through `ProcessMessage()`.",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T08:44:03Z",
      "diff_hunk" : "@@ -3871,8 +3871,7 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n \n     {\n-        LOCK(g_cs_orphans);\n-        if (!peer->m_orphan_work_set.empty()) return true;\n+        if (more_orphans) return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601207659",
      "id" : 601207659,
      "line" : 3874,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTIwNzY1OQ==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 3874,
      "original_position" : 185,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 185,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601207659",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601210830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601210830"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can be more concisely written as:\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex 02e2785c24..c90d73cb95 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -3854,11 +3854,7 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\r\n         }\r\n     }\r\n \r\n-    bool more_orphans = false;\r\n-    {\r\n-        LOCK(cs_main);\r\n-        more_orphans = ProcessOrphanTx(*peer);\r\n-    }\r\n+    const bool more_orphans{WITH_LOCK(cs_main, return ProcessOrphanTx(*peer);)};\r\n \r\n     if (pfrom->fDisconnect)\r\n         return false;\r\n",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T08:47:11Z",
      "diff_hunk" : "@@ -3853,11 +3854,10 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n         }\n     }\n \n+    bool more_orphans = false;\n     {\n-        LOCK2(cs_main, g_cs_orphans);\n-        if (!peer->m_orphan_work_set.empty()) {\n-            ProcessOrphanTx(peer->m_orphan_work_set);\n-        }\n+        LOCK(cs_main);\n+        more_orphans = ProcessOrphanTx(*peer);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601210830",
      "id" : 601210830,
      "line" : 3860,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTIxMDgzMA==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 3860,
      "original_position" : 175,
      "original_start_line" : 3859,
      "path" : "src/net_processing.cpp",
      "position" : 175,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : 3859,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601210830",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21515 (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n* #21160 (Net/Net processing: Move tx inventory into net_processing by jnewbery)\n* #20966 (banman: save the banlist in a JSON format on disk by vasild)\n* #20487 (Add syscall sandboxing using seccomp-bpf (Linux secure computing mode) by practicalswift)\n* #20228 (addrman: Make addrman a top-level component by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-03-25T08:57:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#issuecomment-806478833",
      "id" : 806478833,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21527",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwNjQ3ODgzMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-25T08:57:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/806478833",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601221165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601221165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It'd be good to remove the `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` and only take the cs_main lock inside the while look (once we know that we have orphans to reprocess). In vast majority of cases we're taking and releasing cs_main for no reason because we have no orphans to process.",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T08:57:13Z",
      "diff_hunk" : "@@ -2010,33 +2016,25 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n     return;\n }\n \n-/**\n- * Reconsider orphan transactions after a parent has been accepted to the mempool.\n- *\n- * @param[in/out]  orphan_work_set  The set of orphan transactions to reconsider. Generally only one\n- *                                  orphan will be reconsidered on each call of this function. This set\n- *                                  may be added to if accepting an orphan causes its children to be\n- *                                  reconsidered.\n- */\n-void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n+bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n {\n     AssertLockHeld(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601221165",
      "id" : 601221165,
      "line" : 2021,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTIyMTE2NQ==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 2021,
      "original_position" : 90,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 90,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601221165",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601223122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601223122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well remembered to do this. Perhaps add a `TxOrphange::Empty()` function that returns whether there are any elements in any of the containers in the orphanage, and then assert `m_orphange.Empty()` in the `FinalizeNode()` logic when the last peer is deleted.",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T08:58:51Z",
      "diff_hunk" : "@@ -87,24 +86,27 @@ int TxOrphanage::EraseTx(const uint256& txid)\n \n void TxOrphanage::EraseForPeer(NodeId peer)\n {\n-    AssertLockHeld(g_cs_orphans);\n+    LOCK(m_mutex);\n+\n+    const int work_erased = m_peer_work_set.erase(peer);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601223122",
      "id" : 601223122,
      "line" : 91,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTIyMzEyMg==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 91,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 33,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601223122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601225798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601225798"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure that it's very interesting to log `work_erased`. It'll only ever be 0 (nothing in the work set) or 1 (items in the work set).",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T09:01:24Z",
      "diff_hunk" : "@@ -87,24 +86,27 @@ int TxOrphanage::EraseTx(const uint256& txid)\n \n void TxOrphanage::EraseForPeer(NodeId peer)\n {\n-    AssertLockHeld(g_cs_orphans);\n+    LOCK(m_mutex);\n+\n+    const int work_erased = m_peer_work_set.erase(peer);\n \n     int nErased = 0;\n+\n     std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n     while (iter != m_orphans.end())\n     {\n         std::map<uint256, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            nErased += EraseTx(maybeErase->second.tx->GetHash());\n+            nErased += _EraseTx(maybeErase->second.tx->GetHash());\n         }\n     }\n-    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n+    if (nErased > 0 || work_erased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx and %d from orphan work set for peer=%d\\n\", nErased, work_erased, peer);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601225798",
      "id" : 601225798,
      "line" : 104,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTIyNTc5OA==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 104,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 48,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601225798",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601236470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601236470"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think this is a good idea. Anything that you guard with this mutex will never be accessible on other threads, which would prevent us from eg exposing it to RPC methods, or using it in validation interface callbacks. This seems like a way of reinventing thread local storage, which I don't think we want.\r\n\r\nIn addition, this mutex is exposed and used in both the net and net_processing layer, which adds to the coupling between those components. That's the opposite direction that I think we want to go in.",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T09:11:32Z",
      "diff_hunk" : "@@ -232,6 +232,7 @@ struct LocalServiceInfo {\n     uint16_t nPort;\n };\n \n+extern Mutex g_mutex_message_handler;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601236470",
      "id" : 601236470,
      "line" : 235,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTIzNjQ3MA==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 235,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 4,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601236470",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601253387"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601253387"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this possible? I think the logic in `GetTxToReconsider()` ensures that if true is returned, then porphanTx will not be null.",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T09:26:41Z",
      "diff_hunk" : "@@ -2010,33 +2016,25 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n     return;\n }\n \n-/**\n- * Reconsider orphan transactions after a parent has been accepted to the mempool.\n- *\n- * @param[in/out]  orphan_work_set  The set of orphan transactions to reconsider. Generally only one\n- *                                  orphan will be reconsidered on each call of this function. This set\n- *                                  may be added to if accepting an orphan causes its children to be\n- *                                  reconsidered.\n- */\n-void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n+bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(g_cs_orphans);\n \n-    while (!orphan_work_set.empty()) {\n-        const uint256 orphanHash = *orphan_work_set.begin();\n-        orphan_work_set.erase(orphan_work_set.begin());\n+    CTransactionRef porphanTx = nullptr;\n+    NodeId from_peer = -1;\n+    bool more = false;\n \n-        const auto [porphanTx, from_peer] = m_orphanage.GetTx(orphanHash);\n-        if (porphanTx == nullptr) continue;\n+    while (m_orphanage.GetTxToReconsider(peer.m_id, porphanTx, from_peer, more)) {\n+        if (porphanTx == nullptr) break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601253387",
      "id" : 601253387,
      "line" : 2028,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTI1MzM4Nw==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 2028,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 103,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601253387",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601279266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601279266"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a very strange interface. How about returning a `std::optional<std::pair<CTransactionRef, NodeId>>`, and then adding another public method `HasTxToReconsider()`. It's a bit less efficient, but we'll only ever call it after processing a transaction, so it seems negligible.",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T09:49:02Z",
      "diff_hunk" : "@@ -21,65 +23,75 @@ extern RecursiveMutex g_cs_orphans;\n class TxOrphanage {\n public:\n     /** Add a new orphan transaction */\n-    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    bool AddTx(const CTransactionRef& tx, NodeId peer);\n \n     /** Check if we already have an orphan transaction (by txid or wtxid) */\n-    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+    bool HaveTx(const GenTxid& gtxid) const;\n \n-    /** Get an orphan transaction and its orginating peer\n-     * (Transaction ref will be nullptr if not found)\n+    /** Get an orphan transaction for a peer to work on\n+     *  Returns false and sets more to false if there are no transactions\n+     *  to work on. Otherwise returns true, and populates its arguments with tx,\n+     *  the originating peer, and whether there are more orphans for this\n+     *  peer to work on after this tx.\n      */\n-    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    bool GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& originator, bool& more);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601279266",
      "id" : 601279266,
      "line" : 37,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTI3OTI2Ng==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 37,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : 33,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601279266",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601280373"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601280373"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I guess this means you already tried using an optional in the return value of `GetTxToReconsider()`? ",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T09:49:56Z",
      "diff_hunk" : "@@ -10,8 +10,10 @@\n #include <primitives/transaction.h>\n #include <sync.h>\n \n-/** Guards orphan transactions and extra txs for compact blocks */\n-extern RecursiveMutex g_cs_orphans;\n+#include <map>\n+#include <optional>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601280373",
      "id" : 601280373,
      "line" : 14,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTI4MDM3Mw==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 14,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : 7,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601280373",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601283910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601283910"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think you need this lock. It was previously here to enforce that cs_main was taken before g_cs_orphans.\r\n\r\nIt can also be removed from the process_message and process_messages fuzz tests.",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T09:53:10Z",
      "diff_hunk" : "@@ -203,15 +203,14 @@ void Shutdown(NodeContext& node)\n     // Follow the lock order requirements:\n     // * CheckForStaleTipAndEvictPeers locks cs_main before indirectly calling GetExtraFullOutboundCount\n     //   which locks cs_vNodes.\n-    // * ProcessMessage locks cs_main and g_cs_orphans before indirectly calling ForEachNode which\n-    //   locks cs_vNodes.\n-    // * CConnman::Stop calls DeleteNode, which calls FinalizeNode, which locks cs_main and calls\n-    //   EraseOrphansFor, which locks g_cs_orphans.\n+    // * ProcessMessage locks cs_main before indirectly calling ForEachNode which locks cs_vNodes.\n+    // * CConnman::StopNodes grabs cs_vNodes lock which calls DeleteNode, which calls FinalizeNode,\n+    //   which locks cs_main and calls EraseOrphansFor.\n     //\n-    // Thus the implicit locking order requirement is: (1) cs_main, (2) g_cs_orphans, (3) cs_vNodes.\n+    // Thus the implicit locking order requirement is: (1) cs_main, (2) cs_vNodes.\n     if (node.connman) {\n         node.connman->StopThreads();\n-        LOCK2(::cs_main, ::g_cs_orphans);\n+        LOCK(::cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601283910",
      "id" : 601283910,
      "line" : 213,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTI4MzkxMA==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 213,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 17,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601283910",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601298826"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601298826"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment is now incorrect. The multimap stores the node that provided the orphan tx.\r\n\r\nAlso, this data is redundant data with the `fromPeer` in the `OrphanTx` struct (this could easily be a set of txids to reconsider, and the originating peer is then looked up in the `OrphanTx` struct). We store it in the multimap for efficiency - the comment could be updated to indicate that.",
      "commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "created_at" : "2021-03-25T10:05:44Z",
      "diff_hunk" : "@@ -21,65 +23,75 @@ extern RecursiveMutex g_cs_orphans;\n class TxOrphanage {\n public:\n     /** Add a new orphan transaction */\n-    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    bool AddTx(const CTransactionRef& tx, NodeId peer);\n \n     /** Check if we already have an orphan transaction (by txid or wtxid) */\n-    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+    bool HaveTx(const GenTxid& gtxid) const;\n \n-    /** Get an orphan transaction and its orginating peer\n-     * (Transaction ref will be nullptr if not found)\n+    /** Get an orphan transaction for a peer to work on\n+     *  Returns false and sets more to false if there are no transactions\n+     *  to work on. Otherwise returns true, and populates its arguments with tx,\n+     *  the originating peer, and whether there are more orphans for this\n+     *  peer to work on after this tx.\n      */\n-    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    bool GetTxToReconsider(NodeId peer, CTransactionRef& ref, NodeId& originator, bool& more);\n \n     /** Erase an orphan by txid */\n-    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    int EraseTx(const uint256& txid) { LOCK(m_mutex); return _EraseTx(txid); }\n \n     /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n-    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    void EraseForPeer(NodeId peer);\n \n     /** Erase all orphans included in or invalidated by a new block */\n-    void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+    void EraseForBlock(const CBlock& block);\n \n     /** Limit the orphanage to the given maximum */\n-    unsigned int LimitOrphans(unsigned int max_orphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    unsigned int LimitOrphans(unsigned int max_orphans);\n \n-    /** Add any orphans that list a particular tx as a parent into a peer's work set\n-     * (ie orphans that may have found their final missing parent, and so should be reconsidered for the mempool) */\n-    void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    /** Add any orphans that list a particular tx as a parent into the from peer's work set */\n+    void AddChildrenToWorkSet(const CTransaction& tx);\n \n protected:\n+    /** Guards data */\n+    mutable Mutex m_mutex;\n+\n+    /** Erase an orphan by txid (internal, lock must already be held) */\n+    int _EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n+\n     struct OrphanTx {\n         CTransactionRef tx;\n         NodeId fromPeer;\n         int64_t nTimeExpire;\n         size_t list_pos;\n     };\n \n-    /** Map from txid to orphan transaction record. Limited by\n-     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n-    std::map<uint256, OrphanTx> m_orphans GUARDED_BY(g_cs_orphans);\n-\n-    using OrphanMap = decltype(m_orphans);\n+    using OrphanMap = std::map<uint256, OrphanTx>;\n \n     struct IteratorComparator\n     {\n-        template<typename I>\n-        bool operator()(const I& a, const I& b) const\n+        bool operator()(const OrphanMap::iterator& a, const OrphanMap::iterator& b) const\n         {\n             return &(*a) < &(*b);\n         }\n     };\n \n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    OrphanMap m_orphans GUARDED_BY(m_mutex);\n+\n+    /** Which peer provided a parent tx of orphans that need to be reconsidered */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21527#discussion_r601298826",
      "id" : 601298826,
      "line" : 82,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTI5ODgyNg==",
      "original_commit_id" : "59cfe0c74bcb06cda19b9ce25e74c57332487e47",
      "original_line" : 82,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : 92,
      "pull_request_review_id" : 620835937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21527",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-25T10:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601298826",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
