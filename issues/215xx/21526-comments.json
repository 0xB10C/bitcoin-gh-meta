[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21706 (log: Mitigate disk filling attacks by globally rate limiting LogPrintf(â¦) by dergoegge)\n* #21603 (log: Mitigate disk filling attacks by rate limiting LogPrintf by dergoegge)\n* #21391 ([Bundle 5/n] Prune g_chainman usage in RPC modules by dongcarl)\n* #21061 ([p2p] Introduce node rebroadcast module by amitiuttarwar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-03-24T21:36:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-806201724",
      "id" : 806201724,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21526",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwNjIwMTcyNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-17T00:33:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/806201724",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/21526#issue-600020266\r\n\r\n> * Don't run `UpdateTip` for background validation chainstates.\r\n\r\nDoes this prevent bugs in the future when there can be a background validation chainstate? It would help to say what would happen without this change. It could also be helpful to say more about the motivation for this set of changes, and maybe summarize the current state of things for forgetful people like me who somewhat lost the thread on assumeutxo :tropical_fish: \r\n\r\n> * Modify `LoadBlockIndex()` to populate the \"faked\" nChainTx value when using a yet-unvalidated snapshot chainstate. This allows assumeutxo sync-to-tip to offer normal progress estimates on the basis of having nChainTx without the associated block data.\r\n\r\nIIUC, the faking isn't new, and the value was faked before this change, but startup code is now fixed  so things work if the node is restarted before the assumeutxo snapshot is validated? Again could help to say what bad things would happen without this.\r\n\r\n> * In `LoadBlockIndex()`, ensure that assumed-valid CBlockIndex entries aren't added to the background validation chainstate's setBlockIndexCandidates (since we want that chainstate to actually validate those entries at some point).\r\n\r\nWondering also what bad things happen without this change, and why it's in the same commit as the last change. Is it just that both changes affect the `LoadBlockIndex()` function?\r\n\r\n> * Prevent `RewindBlockIndex()` from rewinding past the assumeutxo base on the snapshot chainstate.\r\n\r\nI'm a little confused by this code (also the existing pruning code here). It says the purpose of the break is to prevent the DisconnectTip call immediately below from failing. But don't we want to fail in these cases? It seems like now if rewind isn't possible, this just flushes some things and returns true. I'm also wondering if there's a reason this change is in the same commit as the other changes, which seem tangentially related.\r\n\r\nAlso, there's no test coverage here. Maybe is the best we can do when adding dead code to older functions that weren't really designed to be unit-tested. But are there at least future tests in #15606 that would fail without these different fixes?\r\n\r\nThanks for any clarifications, and great to see assumeutxo work moving along again!",
      "created_at" : "2021-03-29T01:41:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-809009595",
      "id" : 809009595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21526",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwOTAwOTU5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-29T01:43:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809009595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky thanks for the thorough look! I agree that I should take a look at writing unittests for these changes and do so if practical. Also appreciate your questions on the logic - I'll get together some responses for those and either adjust the code (especially since `RewindBlockIndex()` is probably going away in #21009) or add some motivating documentation. ",
      "created_at" : "2021-03-30T15:22:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-810351331",
      "id" : 810351331,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21526",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMDM1MTMzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-30T15:23:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/810351331",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Okay, after taking @ryanofsky's advice, I sat down to write some unittests for the chainstate-dependent UpdateTip() behavior. It turns out that in the process, trying to get those tests to work uncovered a number of changes that needed to be made to other test-related stuff, including slightly modifying `CheckBlockIndex()` to account for the specific nature of the background validation chainstate. Additionally I've added some unittesting utils that help with testing multiple chainstates.\r\n\r\nBecause that's dragged in so much new code, I've narrowed the scope of this PR to the above and I'll deal with the other BlockIndex-related changes in a follow-up PR.\r\n\r\nSo all the logic changes in this are now tested (and this actually adds unit-level coverage of the `UpdateTip()` behvaior that we didn't have previously). So hopefully that entices people to review, because testing future assumeutxo-related changes will probably depend on some of the unittest utils added here.\r\n\r\nAlso worth mentioning is that I had to remove some of the active chainstate assertions that @dongcarl added for the sake of his work in #20158. This should all be okay because those assertions are actually made obsolete by assumeutxo functionality. ",
      "created_at" : "2021-04-08T14:58:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-815893602",
      "id" : 815893602,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21526",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNTg5MzYwMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-08T14:58:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/815893602",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21526#discussion_r615054872"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21526"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615054872"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: fix CheckBlockIndex for multiple chainstates\" (d3cec2a5b3febd091b8002e39f8b7431b7e99c4a)\r\n\r\nThis is ok, but it seems to avoid other checks below besides the `setBlockIndexCandidates` checks. And if more checks are added below in the future they could be bypassed unnecessarily. I wonder if it might be more straightforward and futureproof just to add `&& is_active_chain` or `|| !is_active_chain` to the specific assertions below which are failing instead of pruning branches off this tree.",
      "commit_id" : "3f1346a0178afef20db3599cc545dbc54200d635",
      "created_at" : "2021-04-16T18:43:24Z",
      "diff_hunk" : "@@ -4821,11 +4823,27 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n \n     // Build forward-pointing map of the entire block tree.\n     std::multimap<CBlockIndex*,CBlockIndex*> forward;\n-    for (const std::pair<const uint256, CBlockIndex*>& entry : m_blockman.m_block_index) {\n-        forward.insert(std::make_pair(entry.second->pprev, entry.second));\n-    }\n \n-    assert(forward.size() == m_blockman.m_block_index.size());\n+    if (is_active_chain) {\n+        for (const std::pair<const uint256, CBlockIndex*>& entry : m_blockman.m_block_index) {\n+            forward.insert(std::make_pair(entry.second->pprev, entry.second));\n+        }\n+\n+        assert(forward.size() == m_blockman.m_block_index.size());\n+    } else {\n+        // For the background validation chainstate, don't consider the full block tree -\n+        // only consider headers on the IBD chain. Otherwise, we will fail assertions\n+        // related to `setBlockIndexCandidates` below, which corresponds to this subset of\n+        // the block tree for this chainstate.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21526#discussion_r615054872",
      "id" : 615054872,
      "line" : 4833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTA1NDg3Mg==",
      "original_commit_id" : "d3cec2a5b3febd091b8002e39f8b7431b7e99c4a",
      "original_line" : 4837,
      "original_position" : 28,
      "original_start_line" : 4834,
      "path" : "src/validation.cpp",
      "position" : 132,
      "pull_request_review_id" : 637995324,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21526",
      "side" : "RIGHT",
      "start_line" : 4830,
      "start_side" : "RIGHT",
      "updated_at" : "2021-04-16T19:27:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615054872",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21526#discussion_r615063212"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21526"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615063212"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"test: refactor: separate CreateBlock in TestChain100Setup\" (6e5871c0c7b7d7b27b56df4f2c0705921025a6d5)\r\n\r\nIMO, it is reasonable for `CreateAndProcessBlock` to have a default-active chainstate pointer for backwards compatibility, but it might be better for this new `CreateBlock` method to take an explicit `CChainState&` reference for more clarity in test code and to prevent mistakes forgetting to specify it.",
      "commit_id" : "3f1346a0178afef20db3599cc545dbc54200d635",
      "created_at" : "2021-04-16T18:59:01Z",
      "diff_hunk" : "@@ -117,9 +117,20 @@ struct TestChain100Setup : public RegTestingSetup {\n     /**\n      * Create a new block with just given transactions, coinbase paying to\n      * scriptPubKey, and try to add it to the current chain.\n+     * If no chainstate is specified, default to the active.\n      */\n     CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n-                                 const CScript& scriptPubKey);\n+                                 const CScript& scriptPubKey,\n+                                 CChainState* chainstate = nullptr);\n+\n+    /**\n+     * Create a new block with just given transactions, coinbase paying to\n+     * scriptPubKey. If no chainstate is specified, default to the active.\n+     */\n+    CBlock CreateBlock(\n+        const std::vector<CMutableTransaction>& txns,\n+        const CScript& scriptPubKey,\n+        CChainState* chainstate = nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21526#discussion_r615063212",
      "id" : 615063212,
      "line" : 133,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTA2MzIxMg==",
      "original_commit_id" : "6e5871c0c7b7d7b27b56df4f2c0705921025a6d5",
      "original_line" : 133,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.h",
      "position" : 18,
      "pull_request_review_id" : 637995324,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21526",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-16T19:27:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615063212",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21526#discussion_r615074725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21526"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615074725"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"test: validation: add unittest for UpdateTip behavior\" (3f1346a0178afef20db3599cc545dbc54200d635)\r\n\r\nSince this test is designed to check `UpdateTip` background behavior, but the test doesn't call `UpdateTip` directly, it may be good to add a comment saying this line is what calls `UpdateTip`.\r\n\r\nAlso could maybe a simple check could be added here to verify the new background tip hash?\r\n\r\nAlso curious if there's an existing test (or a planned one) to cover the background chain catching up to the activated snapshot.",
      "commit_id" : "3f1346a0178afef20db3599cc545dbc54200d635",
      "created_at" : "2021-04-16T19:21:47Z",
      "diff_hunk" : "@@ -72,4 +75,66 @@ BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n     WITH_LOCK(::cs_main, manager.Unload());\n }\n \n+//! Test UpdateTip behavior for both active and background chainstates.\n+//!\n+//! When run on the background chainstate, UpdateTip should do a subset\n+//! of what it does for the active chainstate.\n+BOOST_FIXTURE_TEST_CASE(chainstate_update_tip, TestChain100Setup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+    uint256 curr_tip = ::g_best_block;\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);\n+\n+    // After adding some blocks to the tip, best block should have changed.\n+    BOOST_CHECK(::g_best_block != curr_tip);\n+\n+    BOOST_REQUIRE(CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+\n+    // Ensure our active chain is the snapshot chainstate.\n+    BOOST_CHECK(chainman.IsSnapshotActive());\n+\n+    curr_tip = ::g_best_block;\n+\n+    // Mine a new block on top of the activated snapshot chainstate.\n+    mineBlocks(1);  // Defined in TestChain100Setup.\n+\n+    // After adding some blocks to the snapshot tip, best block should have changed.\n+    BOOST_CHECK(::g_best_block != curr_tip);\n+\n+    curr_tip = ::g_best_block;\n+\n+    CChainState& background_cs = m_node.chainman->ValidatedChainstate();\n+    BOOST_CHECK(m_node.chainman->IsBackgroundIBD(&background_cs));\n+\n+    // Create a block to append to the validation chain.\n+    std::vector<CMutableTransaction> noTxns;\n+    CScript scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    CBlock validation_block = this->CreateBlock(noTxns, scriptPubKey, &background_cs);\n+    auto pblock = std::make_shared<const CBlock>(validation_block);\n+    BlockValidationState state;\n+    CBlockIndex* pindex = nullptr;\n+    const CChainParams& chainparams = Params();\n+    bool newblock = false;\n+\n+    // TODO: much of this is inlined from ProcessNewBlock(); just reuse PNB()\n+    // once it is changed to support multiple chainstates.\n+    {\n+        LOCK(::cs_main);\n+        bool checked = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        BOOST_CHECK(checked);\n+        bool accepted = background_cs.AcceptBlock(\n+            pblock, state, chainparams, &pindex, true, nullptr, &newblock);\n+        BOOST_CHECK(accepted);\n+    }\n+    bool block_added = background_cs.ActivateBestChain(state, chainparams, pblock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21526#discussion_r615074725",
      "id" : 615074725,
      "line" : 132,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTA3NDcyNQ==",
      "original_commit_id" : "3f1346a0178afef20db3599cc545dbc54200d635",
      "original_line" : 132,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstate_tests.cpp",
      "position" : 73,
      "pull_request_review_id" : 637995324,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21526",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-16T19:27:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615074725",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-04-17T16:26:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-821849296",
      "id" : 821849296,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21526",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMTg0OTI5Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-17T16:26:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821849296",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
