[
   {
      "author_association" : "MEMBER",
      "body" : "How does this differ/compare to #20250 ?",
      "created_at" : "2020-11-05T07:18:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-722192301",
      "id" : 722192301,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMjE5MjMwMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-05T07:18:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722192301",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I guess this one is adding a new separate option, #20250 is adding named aliases and keeping the existing options.",
      "created_at" : "2020-11-05T07:25:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-722195542",
      "id" : 722195542,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMjE5NTU0Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-05T07:25:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722195542",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Yes, this one removes the conf_target/estimate_mode overloading and introduces a standard fee rate param.\r\n\r\n#20250 keeps the current overloading and makes it more consistent between the six RPCs. Some of what it does (feeRate -> fee_rate) is compatible or orthogonal.\r\n\r\nISTM the question is, do we want to release with the overloading or with a standard feerate param. (It would be simpler if we decide before the branch-off. After, this PR would need to be changed as we would have to support both.)",
      "created_at" : "2020-11-05T07:42:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-722202884",
      "id" : 722202884,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMjIwMjg4NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-05T15:00:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722202884",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20362 (test: Implicitly sync after generate* to preempt races and intermittent test failures by MarcoFalke)\n* #18418 (wallet: Increase OUTPUT_GROUP_MAX_ENTRIES to 100 by fjahr)\n* #17526 (Use Single Random Draw In addition to knapsack as coin selection fallback by achow101)\n* #17331 (Use effective values throughout coin selection by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-11-05T10:09:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-722278499",
      "id" : 722278499,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMjI3ODQ5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-10T16:09:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722278499",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Changes in latest push:\r\n- In the first commit, \"wallet: fix bug in RPC send options\", uncommented the previously failing tests and added further tests\r\n- In the second commit, \"wallet: remove unneeded `WALLET_BTC_KB_TO_SAT_B` constant\", fixed the patch to ensure all tests continue to pass by making this change:\r\n```diff\r\n-        cc.m_feerate = CFeeRate(fee_rate, cc.m_fee_mode == FeeEstimateMode::SAT_B ? COIN : 0);\r\n+        cc.m_feerate = cc.m_fee_mode == FeeEstimateMode::SAT_B ? CFeeRate(feerate, COIN) : CFeeRate(feerate);\r\n```\r\n- In the remaining commits, made further improvements and fixups seen while re-reviewing per `git diff 078b8fb 2b8d681`",
      "created_at" : "2020-11-06T18:54:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723244141",
      "id" : 723244141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMzI0NDE0MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-06T19:02:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723244141",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "AFAICT, the only \"fee_rate\" in 0.20 was bumpfee. Specifying BTC/vkB (current value) in place of the new sat/vB would always be a *much* lower feerate. So it'd most likely be too low and error, or worst case lower than you intended and you can just bump it again to fix.\r\n\r\nWith that in mind, I think the option here should just be renamed to \"fee_rate\" and break the compatibility for bumpfee.",
      "created_at" : "2020-11-06T19:26:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723257780",
      "id" : 723257780,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMzI1Nzc4MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-06T19:26:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723257780",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@luke-jr SGTM and that would further simplify the implementation too.",
      "created_at" : "2020-11-06T19:42:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723264822",
      "id" : 723264822,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMzI2NDgyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-06T19:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723264822",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Agree with renaming to `fee_rate`. However having two fee rate options for some RPCs is kinda weird. I suppose it's too late to fix that for this release, but it'd be nice to not do that in the future.\r\n\r\nConcept ACK.",
      "created_at" : "2020-11-06T22:14:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723323684",
      "id" : 723323684,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMzMyMzY4NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-06T22:14:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723323684",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK for `fee_rate` ",
      "created_at" : "2020-11-07T06:13:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723398442",
      "id" : 723398442,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMzM5ODQ0Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-07T06:13:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723398442",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Why `fee_rate_sat_vb` and not just `fee_rate`?\r\n\r\nI initially began with `fee_rate` in #20231. Then, based on https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513789526 I changed to `fee_rate_sat_vb` here. Today, based on the feedback at last Friday's wallet meeting and here, I will push an update to use `fee_rate`.\r\n\r\n> Also, should not change `verbose` parameter index?\r\n\r\nFor sendtoaddress and sendmany, I hesitated on this because I thought that users are used to seeing the `verbose` argument placed last, e.g. like gettransaction. If positional `true` or `false` are passed for the `fee_rate`, a type error will be raised and the transaction won't proceed. Is it better to put `fee_rate` after `verbose` instead?",
      "created_at" : "2020-11-09T10:42:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723929804",
      "id" : 723929804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMzkyOTgwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-09T15:01:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723929804",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Has `verbose` been in a release already?",
      "created_at" : "2020-11-09T10:51:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723935004",
      "id" : 723935004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMzkzNTAwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-09T10:51:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723935004",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Per d5863c0b3e it looks like `verbose` was added to sendtoaddress and sendmany after the 0.20 release. Not a bugfix, so probably not backported. Checking. Edit: nope, they aren't in 0.20.0 or 0.20.1. We're good.",
      "created_at" : "2020-11-09T11:19:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723949562",
      "id" : 723949562,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMzk0OTU2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-09T11:21:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723949562",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519946531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519946531"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I get the impression looking around in the codebase that this writes an empty Object, but it's not clear to me how the value gets populated. I assume that this happens in another place, and it was previously failing because of this object being `null` instead of empty?",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T16:31:35Z",
      "diff_hunk" : "@@ -4087,7 +4087,7 @@ static RPCHelpMan send()\n             if (!wallet) return NullUniValue;\n             CWallet* const pwallet = wallet.get();\n \n-            UniValue options = request.params[3];\n+            UniValue options{request.params[3].isNull() ? UniValue::VOBJ : request.params[3]};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519946531",
      "id" : 519946531,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0NjUzMQ==",
      "original_commit_id" : "389236d63e34b6779d01913d22f94bb02021fe29",
      "original_line" : 4090,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519946531",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519975619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519975619"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Actual, I was just thinkingâ¦ wouldn't an empty string be an interesting test case for \"mode\" as well?",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T17:07:24Z",
      "diff_hunk" : "@@ -282,17 +285,15 @@ def run_test(self):\n         for mode in [\"foo\", Decimal(\"3.141592\")]:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519975619",
      "id" : 519975619,
      "line" : 292,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3NTYxOQ==",
      "original_commit_id" : "389236d63e34b6779d01913d22f94bb02021fe29",
      "original_line" : 285,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "test/functional/wallet_send.py",
      "position" : 123,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519975619",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519986635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519986635"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's not immediately obvious to me why `CFeeRate(feerate, COIN)` is equivalent to `fee_rate /= WALLET_BTC_KB_TO_SAT_B; CFeeRate(fee_rate)`. As far as I see, `COIN` equals 1e8, but `WALLET_BTC_KB_TO_SAT_B` equals 1e5.\r\n\r\nUpon inspection of `./src/policy/feerate.cpp` and `./src/policy/feerate.h`, `CFeeRate(â¦)` with two arguments appears to construct a fee rate in `sat/kvB` from fees paid in sats divided by transaction weight in vB:\r\n\r\n``` feerate.h\r\n    /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\r\n    CFeeRate(const CAmount& nFeePaid, size_t nBytes);\r\n```\r\n\r\n``` feerate.cpp\r\nCFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\r\n{\r\n    assert(nBytes_ <= uint64_t(std::numeric_limits<int64_t>::max()));\r\n    int64_t nSize = int64_t(nBytes_);\r\n\r\n    if (nSize > 0)\r\n        nSatoshisPerK = nFeePaid * 1000 / nSize;\r\n    else\r\n        nSatoshisPerK = 0;\r\n}\r\n```\r\n\r\nand either results in the feerate having been divided by 100,000 (1e5). :heavy_check_mark: ",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T17:23:40Z",
      "diff_hunk" : "@@ -217,12 +215,8 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Selected estimate_mode %s requires a fee rate to be specified in conf_target\", estimate_mode.get_str()));\n         }\n \n-        CAmount fee_rate = AmountFromValue(estimate_param);\n-        if (cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-            fee_rate /= WALLET_BTC_KB_TO_SAT_B;\n-        }\n-\n-        cc.m_feerate = CFeeRate(fee_rate);\n+        CAmount feerate{AmountFromValue(estimate_param)};\n+        cc.m_feerate = cc.m_fee_mode == FeeEstimateMode::SAT_B ? CFeeRate(feerate, COIN) : CFeeRate(feerate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519986635",
      "id" : 519986635,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4NjYzNQ==",
      "original_commit_id" : "0f7df6b2e87ab5177409dd108fff7c519283b205",
      "original_line" : 219,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519986635",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519996056"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519996056"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it would be nice to add the permitted value range here.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T17:37:49Z",
      "diff_hunk" : "@@ -198,30 +198,29 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in]     pwallet        Wallet pointer\n  * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n- * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n- * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ * @param[in]     conf_target    UniValue integer, confirmation target in blocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519996056",
      "id" : 519996056,
      "line" : 201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NjA1Ng==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 201,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 16,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519996056",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519998042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519998042"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Since setting `fee_rate` is incompatible with a `conf_target` or `estimation_mode`, it might be nice to mention this here in the description.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T17:40:53Z",
      "diff_hunk" : "@@ -198,30 +198,29 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in]     pwallet        Wallet pointer\n  * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n- * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n- * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ * @param[in]     conf_target    UniValue integer, confirmation target in blocks\n+ * @param[in]     estimate_mode  UniValue string, fee estimation mode (\"unset\", \"economical\" or \"conservative\")\n+ * @param[in]     fee_rate       UniValue real, fee rate in sat/vB",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519998042",
      "id" : 519998042,
      "line" : 203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5ODA0Mg==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 203,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 18,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519998042",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520001951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520001951"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Since setting `fee_rate` is incompatible with a `conf_target` or `estimation_mode`, but they are provided as positional arguments via the RPC, it might be nice to mention the correct positional arguments for the latter two in this error message.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T17:47:01Z",
      "diff_hunk" : "@@ -198,30 +198,29 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in]     pwallet        Wallet pointer\n  * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n- * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n- * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ * @param[in]     conf_target    UniValue integer, confirmation target in blocks\n+ * @param[in]     estimate_mode  UniValue string, fee estimation mode (\"unset\", \"economical\" or \"conservative\")\n+ * @param[in]     fee_rate       UniValue real, fee rate in sat/vB\n  */\n-static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& estimate_mode, const UniValue& estimate_param)\n+static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate)\n {\n-    if (!estimate_mode.isNull()) {\n-        if (!FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+    if (!fee_rate.isNull()) {\n+        if (!conf_target.isNull() && conf_target.get_int() > 0) { // conf_target value of 0 allowed as positional placeholder\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520001951",
      "id" : 520001951,
      "line" : 209,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMTk1MQ==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 209,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 34,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520001951",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520003420"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520003420"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If I were a user, I would like to get instructions about what the valid parameters are, if that's not too much work.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T17:49:28Z",
      "diff_hunk" : "@@ -198,30 +198,29 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in]     pwallet        Wallet pointer\n  * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n- * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n- * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ * @param[in]     conf_target    UniValue integer, confirmation target in blocks\n+ * @param[in]     estimate_mode  UniValue string, fee estimation mode (\"unset\", \"economical\" or \"conservative\")\n+ * @param[in]     fee_rate       UniValue real, fee rate in sat/vB\n  */\n-static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& estimate_mode, const UniValue& estimate_param)\n+static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate)\n {\n-    if (!estimate_mode.isNull()) {\n-        if (!FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+    if (!fee_rate.isNull()) {\n+        if (!conf_target.isNull() && conf_target.get_int() > 0) { // conf_target value of 0 allowed as positional placeholder\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n         }\n-    }\n-\n-    if (cc.m_fee_mode == FeeEstimateMode::BTC_KB || cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-        if (estimate_param.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Selected estimate_mode %s requires a fee rate to be specified in conf_target\", estimate_mode.get_str()));\n+        if (!estimate_mode.isNull() && !estimate_mode.get_str().empty()) { // estimate_mode value of \"\" allowed as positional placeholder\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\n         }\n-\n-        CAmount feerate{AmountFromValue(estimate_param)};\n-        cc.m_feerate = cc.m_fee_mode == FeeEstimateMode::SAT_B ? CFeeRate(feerate, COIN) : CFeeRate(feerate);\n-\n-        // default RBF to true for explicit fee rate modes\n+        cc.m_feerate = CFeeRate(AmountFromValue(fee_rate), COIN);\n+        // Default RBF to true for explicit fee_rate, if unset.\n         if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n-    } else if (!estimate_param.isNull()) {\n-        cc.m_confirm_target = ParseConfirmTarget(estimate_param, pwallet->chain().estimateMaxBlocks());\n+        return;\n+    }\n+    if (!estimate_mode.isNull() && !FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520003420",
      "id" : 520003420,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMzQyMA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 220,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 55,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520003420",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520005235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520005235"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "haha, the horrors. :scream:\r\n\r\nThis has a confusion potential like me being confused about the order of arguments between `find` and `grep` every single time.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T17:52:19Z",
      "diff_hunk" : "@@ -3120,15 +3122,21 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             lockUnspents = (options.exists(\"lock_unspents\") ? options[\"lock_unspents\"] : options[\"lockUnspents\"]).get_bool();\n         }\n \n-        if (options.exists(\"feeRate\"))\n-        {\n+        if (options.exists(\"feeRate\")) {\n+            if (options.exists(\"fee_rate\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both fee_rate (\" + CURRENCY_ATOM + \"/vB) and feeRate (\" + CURRENCY_UNIT + \"/kvB)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520005235",
      "id" : 520005235,
      "line" : 3130,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwNTIzNQ==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 3127,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 182,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520005235",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520005999"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520005999"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "But just because being able to ask a miner to pay for including a transaction would be such a terrible DOS vector. :stuck_out_tongue_winking_eye: ",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T17:53:39Z",
      "diff_hunk" : "@@ -3120,15 +3122,21 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             lockUnspents = (options.exists(\"lock_unspents\") ? options[\"lock_unspents\"] : options[\"lockUnspents\"]).get_bool();\n         }\n \n-        if (options.exists(\"feeRate\"))\n-        {\n+        if (options.exists(\"feeRate\")) {\n+            if (options.exists(\"fee_rate\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both fee_rate (\" + CURRENCY_ATOM + \"/vB) and feeRate (\" + CURRENCY_UNIT + \"/kvB)\");\n+            }\n             if (options.exists(\"conf_target\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate\");\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n             }\n             if (options.exists(\"estimate_mode\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and feeRate\");\n             }\n-            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n+            CFeeRate fee_rate(AmountFromValue(options[\"feeRate\"]));\n+            if (fee_rate <= CFeeRate(0)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520005999",
      "id" : 520005999,
      "line" : 3139,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwNTk5OQ==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 3136,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 193,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520005999",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520009078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520009078"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think strictly speaking this is tied to `MIN_RELAY_TX_FEE`, so it might be nice to tie it to that instead of hardcoding to satoshi.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T17:58:33Z",
      "diff_hunk" : "@@ -3386,16 +3396,16 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n                 {\n                     {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n                              \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n-                    {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \"/kB.\\n\"\n-                             \"Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n-                             \"Must be at least 0.0001 \" + CURRENCY_UNIT + \"/kB higher than the current transaction fee rate.\\n\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\",\n+                             \"\\nSpecify a fee rate in \" + CURRENCY_ATOM + \"/vB instead of relying on the built-in fee estimator.\\n\"\n+                             \"Must be at least 1 \" + CURRENCY_ATOM + \"/vB higher than the current transaction fee rate.\\n\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520009078",
      "id" : 520009078,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwOTA3OA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 3401,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520009078",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520014120"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520014120"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe I'm missing something, but I had trouble figuring out from the local code what the parameter set of this particular call is here. If I understand correctly, their types are being defined in 4086-4089. Maybe the parameter names could be added as comments there or here to remind the reader what is being tested to be null here in 4099.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:06:46Z",
      "diff_hunk" : "@@ -4073,26 +4085,31 @@ static RPCHelpMan send()\n                 UniValueType(), // ARR or OBJ, checked later\n                 UniValue::VNUM,\n                 UniValue::VSTR,\n-                UniValue::VOBJ\n+                UniValue::VNUM,\n+                UniValue::VOBJ,\n                 }, true\n             );\n \n             std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n             if (!wallet) return NullUniValue;\n             CWallet* const pwallet = wallet.get();\n \n-            UniValue options{request.params[3].isNull() ? UniValue::VOBJ : request.params[3]};\n-            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\") || options.exists(\"fee_rate\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull() || !request.params[3].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520014120",
      "id" : 520014120,
      "line" : 4094,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDEyMA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 4099,
      "original_position" : 243,
      "original_start_line" : 4098,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 369,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : 4093,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520014120",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520015110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520015110"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I was trying to figure out what exactly is checked here that prevents e.g. both `conf_target` and `fee_rate` to be set here, if `params[1]â¦[3]` all need to be null here.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:08:33Z",
      "diff_hunk" : "@@ -4073,26 +4085,31 @@ static RPCHelpMan send()\n                 UniValueType(), // ARR or OBJ, checked later\n                 UniValue::VNUM,\n                 UniValue::VSTR,\n-                UniValue::VOBJ\n+                UniValue::VNUM,\n+                UniValue::VOBJ,\n                 }, true\n             );\n \n             std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n             if (!wallet) return NullUniValue;\n             CWallet* const pwallet = wallet.get();\n \n-            UniValue options{request.params[3].isNull() ? UniValue::VOBJ : request.params[3]};\n-            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\") || options.exists(\"fee_rate\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull() || !request.params[3].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520015110",
      "id" : 520015110,
      "in_reply_to_id" : 520014120,
      "line" : 4094,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNTExMA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 4099,
      "original_position" : 243,
      "original_start_line" : 4098,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 369,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : 4093,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-09T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520015110",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520015619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520015619"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Optional: mention that `fee_rate` is specified in `[sat/vB]` other than `feeRate`.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:09:26Z",
      "diff_hunk" : "@@ -4073,26 +4085,31 @@ static RPCHelpMan send()\n                 UniValueType(), // ARR or OBJ, checked later\n                 UniValue::VNUM,\n                 UniValue::VSTR,\n-                UniValue::VOBJ\n+                UniValue::VNUM,\n+                UniValue::VOBJ,\n                 }, true\n             );\n \n             std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n             if (!wallet) return NullUniValue;\n             CWallet* const pwallet = wallet.get();\n \n-            UniValue options{request.params[3].isNull() ? UniValue::VOBJ : request.params[3]};\n-            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\") || options.exists(\"fee_rate\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull() || !request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode for fee estimation, or fee_rate to specify an explicit fee rate.\");\n                 }\n             } else {\n                 options.pushKV(\"conf_target\", request.params[1]);\n                 options.pushKV(\"estimate_mode\", request.params[2]);\n+                options.pushKV(\"fee_rate\", request.params[3]);\n             }\n             if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n             }\n+            if (options.exists(\"feeRate\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate instead of feeRate\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520015619",
      "id" : 520015619,
      "line" : 4106,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNTYxOQ==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 4111,
      "original_position" : 255,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 381,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520015619",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520020689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520020689"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I got hung up on this line because I first thought that `minRelayTxFee` would be 1,000 sats/kvB, but thinking about it, I assume that `self.min_relay_tx_fee` is specified in `BTC/kvB`. I did notice that this does not seem to ever be explicitly stated in this file.\r\n\r\nSo, the number just sort of comes from nowhere.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:18:12Z",
      "diff_hunk" : "@@ -708,74 +707,108 @@ def test_all_watched_funds(self):\n         wwatch.unloadwallet()\n \n     def test_option_feerate(self):\n-        self.log.info(\"Test fundrawtxn feeRate option\")\n-\n+        self.log.info(\"Test fundrawtxn with explicit fee rates (fee_rate sat/vB and feeRate BTC/kvB)\")\n+        node = self.nodes[3]\n         # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n-\n         inputs = []\n-        outputs = {self.nodes[3].getnewaddress() : 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n+        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 200000 * self.min_relay_tx_fee})",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520020689",
      "id" : 520020689,
      "line" : 719,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMDY4OQ==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 719,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "test/functional/rpc_fundrawtransaction.py",
      "position" : 30,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520020689",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520023407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520023407"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this may be a `fee` so the unit should just be `satoshi`, not `sats/B`. Otherwise, I'd not expect the result below to be 10,000Ã, but rather at a factor of 10,000/141. :thinking: ",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:22:44Z",
      "diff_hunk" : "@@ -708,74 +707,108 @@ def test_all_watched_funds(self):\n         wwatch.unloadwallet()\n \n     def test_option_feerate(self):\n-        self.log.info(\"Test fundrawtxn feeRate option\")\n-\n+        self.log.info(\"Test fundrawtxn with explicit fee rates (fee_rate sat/vB and feeRate BTC/kvB)\")\n+        node = self.nodes[3]\n         # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n-\n         inputs = []\n-        outputs = {self.nodes[3].getnewaddress() : 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n+        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 200000 * self.min_relay_tx_fee})\n+        result2 = node.fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n+        result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 1000000 * self.min_relay_tx_fee})\n+        result4 = node.fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n         result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n+        assert_fee_amount(result1['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n+        assert_fee_amount(result4['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n-    def test_feerate_with_conf_target_and_estimate_mode(self):\n-        self.log.info(\"Test fundrawtxn passing an explicit fee rate using conf_target and estimate_mode\")\n-        node = self.nodes[3]\n-        # Make sure there is exactly one input so coin selection can't skew the result.\n-        assert_equal(len(node.listunspent(1)), 1)\n-        inputs = []\n-        outputs = {node.getnewaddress() : 1}\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-\n-        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n-            self.log.info(\"Test fundrawtxn with conf_target {} estimate_mode {} produces expected fee\".format(fee_rate, unit))\n-            # With no arguments passed, expect fee of 141 sats/b.\n-            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n-            # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n-            result = node.fundrawtransaction(rawtx, {\"conf_target\": fee_rate, \"estimate_mode\": unit})\n-            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+        msg = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"fee_rate\": 100000})\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"feeRate\": 1})\n \n-        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n-            self.log.info(\"Test fundrawtxn raises RPC error if both feeRate and {} are passed\".format(field))\n-            assert_raises_rpc_error(\n-                -8, \"Cannot specify both {} and feeRate\".format(field),\n-                lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, field: fee_rate}))\n+        # With no arguments passed, expect fee of 141 sats/b.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520023407",
      "id" : 520023407,
      "line" : 733,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMzQwNw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 733,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "test/functional/rpc_fundrawtransaction.py",
      "position" : 65,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520023407",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520027877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520027877"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This would in turn mean that this sentence should be:\r\n\r\n > Expect fee to be 10,000x higher when explicit **feerate** 10,000x greater is specified.\r\n\r\nAlso, nit: Wouldn't \"10,000Ã higher\" be \"10,001 as high\"? :nerd_face: ",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:30:27Z",
      "diff_hunk" : "@@ -708,74 +707,108 @@ def test_all_watched_funds(self):\n         wwatch.unloadwallet()\n \n     def test_option_feerate(self):\n-        self.log.info(\"Test fundrawtxn feeRate option\")\n-\n+        self.log.info(\"Test fundrawtxn with explicit fee rates (fee_rate sat/vB and feeRate BTC/kvB)\")\n+        node = self.nodes[3]\n         # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n-\n         inputs = []\n-        outputs = {self.nodes[3].getnewaddress() : 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n+        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 200000 * self.min_relay_tx_fee})\n+        result2 = node.fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n+        result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 1000000 * self.min_relay_tx_fee})\n+        result4 = node.fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n         result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n+        assert_fee_amount(result1['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n+        assert_fee_amount(result4['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n-    def test_feerate_with_conf_target_and_estimate_mode(self):\n-        self.log.info(\"Test fundrawtxn passing an explicit fee rate using conf_target and estimate_mode\")\n-        node = self.nodes[3]\n-        # Make sure there is exactly one input so coin selection can't skew the result.\n-        assert_equal(len(node.listunspent(1)), 1)\n-        inputs = []\n-        outputs = {node.getnewaddress() : 1}\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-\n-        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n-            self.log.info(\"Test fundrawtxn with conf_target {} estimate_mode {} produces expected fee\".format(fee_rate, unit))\n-            # With no arguments passed, expect fee of 141 sats/b.\n-            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n-            # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n-            result = node.fundrawtransaction(rawtx, {\"conf_target\": fee_rate, \"estimate_mode\": unit})\n-            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+        msg = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"fee_rate\": 100000})\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"feeRate\": 1})\n \n-        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n-            self.log.info(\"Test fundrawtxn raises RPC error if both feeRate and {} are passed\".format(field))\n-            assert_raises_rpc_error(\n-                -8, \"Cannot specify both {} and feeRate\".format(field),\n-                lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, field: fee_rate}))\n+        # With no arguments passed, expect fee of 141 sats/b.\n+        assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n+        # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520027877",
      "id" : 520027877,
      "line" : 735,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyNzg3Nw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 735,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "test/functional/rpc_fundrawtransaction.py",
      "position" : 67,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520027877",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520032533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520032533"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not sure if we did that already, but it would be good to assure that the valid value range for `fee_rate` will cause an error for `feeRate` and vice versa. I would expect a lot of people to plug values for either into the other, and I'm not sure off the top of my head that the ranges have no overlap. (They should be shifted by a factor of 1e5 though, right?)",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:38:51Z",
      "diff_hunk" : "@@ -708,74 +707,108 @@ def test_all_watched_funds(self):\n         wwatch.unloadwallet()\n \n     def test_option_feerate(self):\n-        self.log.info(\"Test fundrawtxn feeRate option\")\n-\n+        self.log.info(\"Test fundrawtxn with explicit fee rates (fee_rate sat/vB and feeRate BTC/kvB)\")\n+        node = self.nodes[3]\n         # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n-\n         inputs = []\n-        outputs = {self.nodes[3].getnewaddress() : 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n+        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 200000 * self.min_relay_tx_fee})\n+        result2 = node.fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n+        result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 1000000 * self.min_relay_tx_fee})\n+        result4 = node.fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n         result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n+        assert_fee_amount(result1['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n+        assert_fee_amount(result4['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n-    def test_feerate_with_conf_target_and_estimate_mode(self):\n-        self.log.info(\"Test fundrawtxn passing an explicit fee rate using conf_target and estimate_mode\")\n-        node = self.nodes[3]\n-        # Make sure there is exactly one input so coin selection can't skew the result.\n-        assert_equal(len(node.listunspent(1)), 1)\n-        inputs = []\n-        outputs = {node.getnewaddress() : 1}\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-\n-        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n-            self.log.info(\"Test fundrawtxn with conf_target {} estimate_mode {} produces expected fee\".format(fee_rate, unit))\n-            # With no arguments passed, expect fee of 141 sats/b.\n-            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n-            # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n-            result = node.fundrawtransaction(rawtx, {\"conf_target\": fee_rate, \"estimate_mode\": unit})\n-            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+        msg = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"fee_rate\": 100000})\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"feeRate\": 1})\n \n-        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n-            self.log.info(\"Test fundrawtxn raises RPC error if both feeRate and {} are passed\".format(field))\n-            assert_raises_rpc_error(\n-                -8, \"Cannot specify both {} and feeRate\".format(field),\n-                lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, field: fee_rate}))\n+        # With no arguments passed, expect fee of 141 sats/b.\n+        assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n+        # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n+        result = node.fundrawtransaction(rawtx, {\"fee_rate\": 10000})\n+        assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n \n         self.log.info(\"Test fundrawtxn with invalid estimate_mode settings\")\n         for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n             assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n-                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": v, \"conf_target\": 0.1}))\n+                node.fundrawtransaction, rawtx, {\"estimate_mode\": v, \"conf_target\": 0.1})\n         for mode in [\"foo\", Decimal(\"3.141592\")]:\n             assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n-                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0.1}))\n+                node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": 0.1})\n \n         self.log.info(\"Test fundrawtxn with invalid conf_target settings\")\n-        for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+        for mode in [\"unset\", \"economical\", \"conservative\"]:\n             self.log.debug(\"{}\".format(mode))\n             for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n                 assert_raises_rpc_error(-3, \"Expected type number for conf_target, got {}\".format(k),\n-                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": v}))\n-            if mode in [\"btc/kb\", \"sat/b\"]:\n-                assert_raises_rpc_error(-3, \"Amount out of range\",\n-                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": -1}))\n-                assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n-                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0}))\n-            else:\n-                for n in [-1, 0, 1009]:\n-                    assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",\n-                        lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": n}))\n-\n-        for unit, fee_rate in {\"sat/B\": 0.99999999, \"BTC/kB\": 0.00000999}.items():\n-            self.log.info(\"- raises RPC error 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n-            assert_raises_rpc_error(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n-                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": unit, \"conf_target\": fee_rate, \"add_inputs\": True}))\n+                    node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": v})\n+            for n in [-1, 0, 1009]:\n+                assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",\n+                    node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": n})\n+\n+        self.log.info(\"Test invalid fee rate settings\")\n+        assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            node.fundrawtransaction, rawtx, {\"fee_rate\": 0, \"add_inputs\": True})\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+            node.fundrawtransaction, rawtx, {\"feeRate\": 0, \"add_inputs\": True})\n+        for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1.1)}:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520032533",
      "id" : 520032533,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzMjUzMw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 762,
      "original_position" : 112,
      "original_start_line" : 759,
      "path" : "test/functional/rpc_fundrawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-09T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520032533",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520034207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520034207"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Probably out of scope, but it would be kinda nice if an error like this told the user what said limit is.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:41:39Z",
      "diff_hunk" : "@@ -187,60 +187,74 @@ def run_test(self):\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n-        self.log.info(\"Test walletcreatefundedpsbt feeRate of 0.1 BTC/kB produces a total fee at or slightly below -maxtxfee (~0.05290000)\")\n-        res = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n-        assert_approx(res[\"fee\"], 0.055, 0.005)\n-\n-        self.log.info(\"Test walletcreatefundedpsbt explicit fee rate with conf_target and estimate_mode\")\n-        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n-            fee = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"conf_target\": fee_rate, \"estimate_mode\": unit, \"add_inputs\": True})[\"fee\"]\n-            self.log.info(\"- conf_target {}, estimate_mode {} produces fee {} at or slightly below -maxtxfee (~0.05290000)\".format(fee_rate, unit, fee))\n-            assert_approx(fee, vexp=0.055, vspan=0.005)\n-\n-        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n-            self.log.info(\"- raises RPC error if both feeRate and {} are passed\".format(field))\n-            assert_raises_rpc_error(-8, \"Cannot specify both {} and feeRate\".format(field),\n-                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, field: fee_rate, \"add_inputs\": True}))\n+        self.log.info(\"Test walletcreatefundedpsbt fee rate of 10000 sat/vB and 0.1 BTC/kvB produces a total fee at or slightly below -maxtxfee (~0.05290000)\")\n+        res1 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"fee_rate\": 10000, \"add_inputs\": True})\n+        assert_approx(res1[\"fee\"], 0.055, 0.005)\n+        res2 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n+        assert_approx(res2[\"fee\"], 0.055, 0.005)\n+\n+        self.log.info(\"Test invalid fee rate settings\")\n+        assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": 0, \"add_inputs\": True})\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"feeRate\": 0, \"add_inputs\": True})\n+        for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1.1)}:\n+            assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520034207",
      "id" : 520034207,
      "line" : 202,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzNDIwNw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 202,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "test/functional/rpc_psbt.py",
      "position" : 30,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520034207",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520037187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520037187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I mean, I see where that 1e-5 is coming from, but if one is not as immersed, it may be a bit more readable, if the two conversions were mentioned more explicitly:\r\n\r\n```\r\nfee_rate_btc_kvb = fee_rate_sat_vb * 1e3 / 1e8\r\n```\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:46:46Z",
      "diff_hunk" : "@@ -227,65 +230,40 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as BTC/kB)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode bTc/kB requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='bTc/kB')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='bTc/kB')\n-        fee_per_kb = 0.0002500\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_per_kb,\n-            estimate_mode='bTc/kB',\n-        )\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n-        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal += Decimal('10')\n-        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n-\n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as sat/B)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode sat/b requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='sat/b')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='sat/b')\n-        fee_sat_per_b = 2\n-        fee_per_kb = fee_sat_per_b / 100000.0\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_sat_per_b,\n-            estimate_mode='sAT/b',\n-        )\n+        self.log.info(\"Test sendmany with fee_rate param (explicit fee rate in sat/vB)\")\n+        fee_rate_sat_vb = 2\n+        fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520037187",
      "id" : 520037187,
      "line" : 235,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzNzE4Nw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 235,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "test/functional/wallet_basic.py",
      "position" : 87,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520037187",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520039621"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520039621"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This seems to be the first time we use `BTC/vB`. Given that it's a bit uncommon, that should perhaps be part of the variable name: I suggest to use `explicit_fee_rate_BTC_vb`.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:50:42Z",
      "diff_hunk" : "@@ -227,65 +230,40 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as BTC/kB)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode bTc/kB requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='bTc/kB')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='bTc/kB')\n-        fee_per_kb = 0.0002500\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_per_kb,\n-            estimate_mode='bTc/kB',\n-        )\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n-        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal += Decimal('10')\n-        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n-\n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as sat/B)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode sat/b requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='sat/b')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='sat/b')\n-        fee_sat_per_b = 2\n-        fee_per_kb = fee_sat_per_b / 100000.0\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_sat_per_b,\n-            estimate_mode='sAT/b',\n-        )\n+        self.log.info(\"Test sendmany with fee_rate param (explicit fee rate in sat/vB)\")\n+        fee_rate_sat_vb = 2\n+        fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0\n+        explicit_fee_rate_vb = Decimal(fee_rate_btc_kvb) / 1000",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520039621",
      "id" : 520039621,
      "line" : 236,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzOTYyMQ==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 236,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "test/functional/wallet_basic.py",
      "position" : 88,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520039621",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520042704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520042704"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Isn't that `Decimal(fee_rate_sat_vb / 100000.0)` just a repetition of `fee_rate_btc_kvb`?",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:55:43Z",
      "diff_hunk" : "@@ -420,78 +398,41 @@ def run_test(self):\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n \n-            self.log.info(\"Test case-insensitive explicit fee rate (sendtoaddress as BTC/kB)\")\n-            self.nodes[0].generate(1)\n-            self.sync_all(self.nodes[0:3])\n+            self.log.info(\"Test sendtoaddress with fee_rate param (explicit fee rate in sat/vB)\")\n             prebalance = self.nodes[2].getbalance()\n             assert prebalance > 2\n             address = self.nodes[1].getnewaddress()\n-            # Throw if no conf_target provided\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode BTc/Kb requires a fee rate to be specified in conf_target\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                estimate_mode='BTc/Kb')\n-            # Throw if negative feerate\n-            assert_raises_rpc_error(-3, \"Amount out of range\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                conf_target=-1,\n-                estimate_mode='btc/kb')\n-            txid = self.nodes[2].sendtoaddress(\n-                address=address,\n-                amount=1.0,\n-                conf_target=0.00002500,\n-                estimate_mode='btc/kb',\n-            )\n+            amount = 3\n+            fee_rate_sat_vb = 2\n+            # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\n+            txid = self.nodes[2].sendtoaddress(address=address, amount=amount, conf_target=0, estimate_mode=\"\", fee_rate=fee_rate_sat_vb)\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n-            self.sync_all(self.nodes[0:3])\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n             postbalance = self.nodes[2].getbalance()\n-            fee = prebalance - postbalance - Decimal('1')\n-            assert_fee_amount(fee, tx_size, Decimal('0.00002500'))\n-\n-            self.sync_all(self.nodes[0:3])\n+            fee = prebalance - postbalance - Decimal(amount)\n+            assert_fee_amount(fee, tx_size, Decimal(fee_rate_sat_vb / 100000.0))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520042704",
      "id" : 520042704,
      "line" : 414,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MjcwNA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 414,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "test/functional/wallet_basic.py",
      "position" : 187,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520042704",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520043964"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520043964"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay, this is as far as I got in 53b35be8f87fd894614a5e3609b1d8895a96c93c. I require nourishment. As discussed will continue after lunch.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T18:57:43Z",
      "diff_hunk" : "@@ -227,65 +230,40 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as BTC/kB)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode bTc/kB requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='bTc/kB')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='bTc/kB')\n-        fee_per_kb = 0.0002500\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_per_kb,\n-            estimate_mode='bTc/kB',\n-        )\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n-        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal += Decimal('10')\n-        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n-\n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as sat/B)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode sat/b requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='sat/b')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='sat/b')\n-        fee_sat_per_b = 2\n-        fee_per_kb = fee_sat_per_b / 100000.0\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_sat_per_b,\n-            estimate_mode='sAT/b',\n-        )\n+        self.log.info(\"Test sendmany with fee_rate param (explicit fee rate in sat/vB)\")\n+        fee_rate_sat_vb = 2\n+        fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0\n+        explicit_fee_rate_vb = Decimal(fee_rate_btc_kvb) / 1000\n+        # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520043964",
      "id" : 520043964,
      "line" : 237,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0Mzk2NA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 237,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "test/functional/wallet_basic.py",
      "position" : 89,
      "pull_request_review_id" : 526433625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520043964",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520048053"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520048053"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, reckon we should deprecate `feeRate` as soon as feasible after this.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T19:03:10Z",
      "diff_hunk" : "@@ -3120,15 +3122,21 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             lockUnspents = (options.exists(\"lock_unspents\") ? options[\"lock_unspents\"] : options[\"lockUnspents\"]).get_bool();\n         }\n \n-        if (options.exists(\"feeRate\"))\n-        {\n+        if (options.exists(\"feeRate\")) {\n+            if (options.exists(\"fee_rate\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both fee_rate (\" + CURRENCY_ATOM + \"/vB) and feeRate (\" + CURRENCY_UNIT + \"/kvB)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520048053",
      "id" : 520048053,
      "in_reply_to_id" : 520005235,
      "line" : 3130,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0ODA1Mw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 3127,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 182,
      "pull_request_review_id" : 526566665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T19:03:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520048053",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520054583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520054583"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes :+1: and I was more confident about making this change after all the test coverage we added in #20220.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T19:10:00Z",
      "diff_hunk" : "@@ -217,12 +215,8 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Selected estimate_mode %s requires a fee rate to be specified in conf_target\", estimate_mode.get_str()));\n         }\n \n-        CAmount fee_rate = AmountFromValue(estimate_param);\n-        if (cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-            fee_rate /= WALLET_BTC_KB_TO_SAT_B;\n-        }\n-\n-        cc.m_feerate = CFeeRate(fee_rate);\n+        CAmount feerate{AmountFromValue(estimate_param)};\n+        cc.m_feerate = cc.m_fee_mode == FeeEstimateMode::SAT_B ? CFeeRate(feerate, COIN) : CFeeRate(feerate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520054583",
      "id" : 520054583,
      "in_reply_to_id" : 519986635,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NDU4Mw==",
      "original_commit_id" : "0f7df6b2e87ab5177409dd108fff7c519283b205",
      "original_line" : 219,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 526571604,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T19:10:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520054583",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520058540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520058540"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, that was my read on this too. And if `options` is empty, it is populated from the arg params a few lines after:\r\n```cpp\r\n            } else {\r\n                options.pushKV(\"conf_target\", request.params[1]);\r\n                options.pushKV(\"estimate_mode\", request.params[2]);\r\n                options.pushKV(\"fee_rate\", request.params[3]);\r\n            }\r\n```\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T19:15:18Z",
      "diff_hunk" : "@@ -4087,7 +4087,7 @@ static RPCHelpMan send()\n             if (!wallet) return NullUniValue;\n             CWallet* const pwallet = wallet.get();\n \n-            UniValue options = request.params[3];\n+            UniValue options{request.params[3].isNull() ? UniValue::VOBJ : request.params[3]};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520058540",
      "id" : 520058540,
      "in_reply_to_id" : 519946531,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1ODU0MA==",
      "original_commit_id" : "389236d63e34b6779d01913d22f94bb02021fe29",
      "original_line" : 4090,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 526575417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T19:15:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520058540",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520122702"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520122702"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yup, good eye. One tests sendmany and the other tests sendtoaddress. Made this change:\r\n```diff\r\n             fee_rate_sat_vb = 2\r\n+            fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0\r\n.../...\r\n             fee = prebalance - postbalance - Decimal(amount)\r\n-            assert_fee_amount(fee, tx_size, Decimal(fee_rate_sat_vb / 100000.0))\r\n+            assert_fee_amount(fee, tx_size, Decimal(fee_rate_btc_kvb))\r\n```",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T21:11:48Z",
      "diff_hunk" : "@@ -420,78 +398,41 @@ def run_test(self):\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n \n-            self.log.info(\"Test case-insensitive explicit fee rate (sendtoaddress as BTC/kB)\")\n-            self.nodes[0].generate(1)\n-            self.sync_all(self.nodes[0:3])\n+            self.log.info(\"Test sendtoaddress with fee_rate param (explicit fee rate in sat/vB)\")\n             prebalance = self.nodes[2].getbalance()\n             assert prebalance > 2\n             address = self.nodes[1].getnewaddress()\n-            # Throw if no conf_target provided\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode BTc/Kb requires a fee rate to be specified in conf_target\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                estimate_mode='BTc/Kb')\n-            # Throw if negative feerate\n-            assert_raises_rpc_error(-3, \"Amount out of range\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                conf_target=-1,\n-                estimate_mode='btc/kb')\n-            txid = self.nodes[2].sendtoaddress(\n-                address=address,\n-                amount=1.0,\n-                conf_target=0.00002500,\n-                estimate_mode='btc/kb',\n-            )\n+            amount = 3\n+            fee_rate_sat_vb = 2\n+            # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\n+            txid = self.nodes[2].sendtoaddress(address=address, amount=amount, conf_target=0, estimate_mode=\"\", fee_rate=fee_rate_sat_vb)\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n-            self.sync_all(self.nodes[0:3])\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n             postbalance = self.nodes[2].getbalance()\n-            fee = prebalance - postbalance - Decimal('1')\n-            assert_fee_amount(fee, tx_size, Decimal('0.00002500'))\n-\n-            self.sync_all(self.nodes[0:3])\n+            fee = prebalance - postbalance - Decimal(amount)\n+            assert_fee_amount(fee, tx_size, Decimal(fee_rate_sat_vb / 100000.0))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520122702",
      "id" : 520122702,
      "in_reply_to_id" : 520042704,
      "line" : 414,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyMjcwMg==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 414,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "test/functional/wallet_basic.py",
      "position" : 187,
      "pull_request_review_id" : 526657678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T21:12:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520122702",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520124216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520124216"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea. Renamed to `explicit_fee_rate_btc_kvb` (since the variable names are lowercase).",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T21:14:49Z",
      "diff_hunk" : "@@ -227,65 +230,40 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as BTC/kB)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode bTc/kB requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='bTc/kB')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='bTc/kB')\n-        fee_per_kb = 0.0002500\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_per_kb,\n-            estimate_mode='bTc/kB',\n-        )\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n-        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal += Decimal('10')\n-        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n-\n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as sat/B)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode sat/b requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='sat/b')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='sat/b')\n-        fee_sat_per_b = 2\n-        fee_per_kb = fee_sat_per_b / 100000.0\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_sat_per_b,\n-            estimate_mode='sAT/b',\n-        )\n+        self.log.info(\"Test sendmany with fee_rate param (explicit fee rate in sat/vB)\")\n+        fee_rate_sat_vb = 2\n+        fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0\n+        explicit_fee_rate_vb = Decimal(fee_rate_btc_kvb) / 1000",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520124216",
      "id" : 520124216,
      "in_reply_to_id" : 520039621,
      "line" : 236,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyNDIxNg==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 236,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "test/functional/wallet_basic.py",
      "position" : 88,
      "pull_request_review_id" : 526659586,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T21:14:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520124216",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520131249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520131249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The positional order depends on the RPC, so the user would naturally need to refer to the specific RPC help. I tried to generally keep to the following positional order, where possible: conf_target, estimate_mode, fee_rate.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T21:28:07Z",
      "diff_hunk" : "@@ -198,30 +198,29 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in]     pwallet        Wallet pointer\n  * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n- * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n- * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ * @param[in]     conf_target    UniValue integer, confirmation target in blocks\n+ * @param[in]     estimate_mode  UniValue string, fee estimation mode (\"unset\", \"economical\" or \"conservative\")\n+ * @param[in]     fee_rate       UniValue real, fee rate in sat/vB\n  */\n-static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& estimate_mode, const UniValue& estimate_param)\n+static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate)\n {\n-    if (!estimate_mode.isNull()) {\n-        if (!FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+    if (!fee_rate.isNull()) {\n+        if (!conf_target.isNull() && conf_target.get_int() > 0) { // conf_target value of 0 allowed as positional placeholder\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520131249",
      "id" : 520131249,
      "in_reply_to_id" : 520001951,
      "line" : 209,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzMTI0OQ==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 209,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 34,
      "pull_request_review_id" : 526668259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T11:36:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520131249",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520133867"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520133867"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for the good ideas and feedback, @Xekyo. I'll try to implement them (and any other feedback you may have while continuing) tomorrow in the morning to move this forward. Heading to bed :)",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-09T21:32:52Z",
      "diff_hunk" : "@@ -227,65 +230,40 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as BTC/kB)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode bTc/kB requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='bTc/kB')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='bTc/kB')\n-        fee_per_kb = 0.0002500\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_per_kb,\n-            estimate_mode='bTc/kB',\n-        )\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n-        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal += Decimal('10')\n-        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n-\n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as sat/B)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode sat/b requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='sat/b')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='sat/b')\n-        fee_sat_per_b = 2\n-        fee_per_kb = fee_sat_per_b / 100000.0\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_sat_per_b,\n-            estimate_mode='sAT/b',\n-        )\n+        self.log.info(\"Test sendmany with fee_rate param (explicit fee rate in sat/vB)\")\n+        fee_rate_sat_vb = 2\n+        fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0\n+        explicit_fee_rate_vb = Decimal(fee_rate_btc_kvb) / 1000\n+        # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520133867",
      "id" : 520133867,
      "in_reply_to_id" : 520043964,
      "line" : 237,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzMzg2Nw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 237,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "test/functional/wallet_basic.py",
      "position" : 89,
      "pull_request_review_id" : 526671520,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-09T21:32:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520133867",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520227883"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520227883"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Getting hung up on all the wrong things, but if minRelayTxFee Ã txsize is 141 sats, I'm surprised that the incrementalFee is `705`. I thought that minimum increments are equal to `minRelayTxFee`.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T01:28:47Z",
      "diff_hunk" : "@@ -105,50 +103,43 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n         self.sync_mempools((rbf_node, peer_node))\n         assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-        assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-        assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n+        for key in [\"totalFee\", \"feeRate\"]:\n+            assert_raises_rpc_error(-3, \"Unexpected key {}\".format(key), rbf_node.bumpfee, rbfid, {key: NORMAL})\n \n-        # For each fee mode, bumping to just above minrelay should fail to increase the total fee enough.\n-        for options in [{\"fee_rate\": INSUFFICIENT}, {\"conf_target\": INSUFFICIENT, \"estimate_mode\": BTC_MODE}, {\"conf_target\": 1, \"estimate_mode\": SAT_MODE}]:\n-            assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, options)\n+        # Bumping to just above minrelay should fail to increase the total fee enough.\n+        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00000141, must be at least 0.00001704 (oldFee 0.00000999 + incrementalFee 0.00000705)\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520227883",
      "id" : 520227883,
      "line" : 110,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyNzg4Mw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 110,
      "original_position" : 53,
      "original_start_line" : 113,
      "path" : "test/functional/wallet_bumpfee.py",
      "position" : 53,
      "pull_request_review_id" : 526785231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : 113,
      "start_side" : "LEFT",
      "updated_at" : "2020-11-10T02:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520227883",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520228906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520228906"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "woah, damn. I think we may want to have a look at the `maxtxfee` that's a lot of money.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T01:31:46Z",
      "diff_hunk" : "@@ -105,50 +103,43 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n         self.sync_mempools((rbf_node, peer_node))\n         assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-        assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-        assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n+        for key in [\"totalFee\", \"feeRate\"]:\n+            assert_raises_rpc_error(-3, \"Unexpected key {}\".format(key), rbf_node.bumpfee, rbfid, {key: NORMAL})\n \n-        # For each fee mode, bumping to just above minrelay should fail to increase the total fee enough.\n-        for options in [{\"fee_rate\": INSUFFICIENT}, {\"conf_target\": INSUFFICIENT, \"estimate_mode\": BTC_MODE}, {\"conf_target\": 1, \"estimate_mode\": SAT_MODE}]:\n-            assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, options)\n+        # Bumping to just above minrelay should fail to increase the total fee enough.\n+        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00000141, must be at least 0.00001704 (oldFee 0.00000999 + incrementalFee 0.00000705)\",\n+            rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n \n-        self.log.info(\"Test explicit fee rate raises RPC error if estimate_mode is passed without a conf_target\")\n-        for unit, fee_rate in {\"SAT/B\": 100, \"BTC/KB\": NORMAL}.items():\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode {} requires a fee rate to be specified in conf_target\".format(unit),\n-                                    rbf_node.bumpfee, rbfid, {\"fee_rate\": fee_rate, \"estimate_mode\": unit})\n+        self.log.info(\"Test invalid fee rate settings\")\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+            rbf_node.bumpfee, rbfid, {\"fee_rate\": 0})\n+        assert_raises_rpc_error(-4, \"Specified or calculated fee 0.141 is too high (cannot be higher than -maxtxfee 0.10\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520228906",
      "id" : 520228906,
      "line" : 116,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyODkwNg==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 116,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "test/functional/wallet_bumpfee.py",
      "position" : 63,
      "pull_request_review_id" : 526785231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T02:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520228906",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520231413"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520231413"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Luckily, this is very benign. In the worst case, someone is going to get upped to the `minRelayTxFee` silently and sends at 1 sat/vB. Since RBF is on by default, they should be able bump when they notice. :+1: ",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T01:40:07Z",
      "diff_hunk" : "@@ -3387,9 +3387,10 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n         \"By default, the new fee will be calculated automatically using the estimatesmartfee RPC.\\n\"\n         \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n-        \"Alternatively, the user can specify a fee_rate (in \" + CURRENCY_ATOM + \"/vB) for the new transaction.\\n\"\n+        \"Alternatively, the user can specify a fee rate in \" + CURRENCY_ATOM + \"/vB for the new transaction.\\n\"\n         \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n-        \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n+        \"returned by getnetworkinfo) to enter the node's mempool.\\n\"\n+        \"* WARNING: before version 0.21, fee_rate was in \" + CURRENCY_UNIT + \"/kvB. As of 0.21, fee_rate is in \" + CURRENCY_ATOM + \"/vB. *\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520231413",
      "id" : 520231413,
      "line" : 3395,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzMTQxMw==",
      "original_commit_id" : "fd2ebb6526199c439c5b26ebdaa41ebe122c6355",
      "original_line" : 3393,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 245,
      "pull_request_review_id" : 526785231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T02:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520231413",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520231795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520231795"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Overloading, begone! :fireworks: ",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T01:41:15Z",
      "diff_hunk" : "@@ -4369,8 +4363,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                                                          \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520231795",
      "id" : 520231795,
      "line" : 4377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzMTc5NQ==",
      "original_commit_id" : "822ad0272793f50c696c8995f0675f6443ff9df8",
      "original_line" : 4366,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 402,
      "pull_request_review_id" : 526785231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T02:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520231795",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520232666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520232666"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Given that we're introducing `sat/vB` everywhere, how come this `BTC_KVB` was kept?",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T01:44:09Z",
      "diff_hunk" : "@@ -19,8 +19,8 @@ enum class FeeEstimateMode {\n     UNSET,        //!< Use default settings based on other criteria\n     ECONOMICAL,   //!< Force estimateSmartFee to use non-conservative estimates\n     CONSERVATIVE, //!< Force estimateSmartFee to use conservative estimates\n-    BTC_KB,       //!< Use explicit BTC/kB fee given in coin control\n-    SAT_B,        //!< Use explicit sat/B fee given in coin control\n+    BTC_KVB,      //!< Use BTC/kvB fee rate unit\n+    SAT_VB,       //!< Use sat/vB fee rate unit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520232666",
      "id" : 520232666,
      "line" : 23,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzMjY2Ng==",
      "original_commit_id" : "ced7d54e6da522c964510ea0c379ef84c7ac689c",
      "original_line" : 23,
      "original_position" : 7,
      "original_start_line" : 22,
      "path" : "src/policy/feerate.h",
      "position" : 7,
      "pull_request_review_id" : 526785231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : 22,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-10T02:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520232666",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520234818"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520234818"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I assume that you considered and deliberately passed on also replacing these. I would surmise that it's it just too much of a can of worms? Otherwise it would be kinda odd that we are using `sat/vB` for the fee rate in all the send variants, but then use `BTC/kvB` for `settxfee`.\r\n\r\nNit: `settxfee` sets not a fee, but a feerate. ;)",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T01:51:17Z",
      "diff_hunk" : "@@ -2303,7 +2303,7 @@ static RPCHelpMan settxfee()\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n                 \"Can be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\\n\",\n                 {\n-                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kvB\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520234818",
      "id" : 520234818,
      "line" : 2311,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzNDgxOA==",
      "original_commit_id" : "cfc14701c6fef7dd3340bfeb5675a821ae615284",
      "original_line" : 2306,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 151,
      "pull_request_review_id" : 526785231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T02:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520234818",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520236742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520236742"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "To explain why that was \"donation\": \"Sean's Outpost\" was a homeless outreach program based in Florida that was run by a bitcoiner and was somewhat known in the Bitcoin ecosystem in ~2013-2014.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T01:58:27Z",
      "diff_hunk" : "@@ -454,12 +454,17 @@ static RPCHelpMan sendtoaddress()\n                     },\n                 },\n                 RPCExamples{\n-                    HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\")\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" true\")\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" false true 0.00002 \" + (CURRENCY_UNIT + \"/kB\"))\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" false true 2 \" + (CURRENCY_ATOM + \"/B\"))\n-            + HelpExampleRpc(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n+                    \"\\nSend 0.1 BTC\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\") +\n+                    \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode using positional arguments\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"lunch\\\" \\\"seans outpost\\\" false true 6 economical\") +",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520236742",
      "id" : 520236742,
      "line" : 460,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzNjc0Mg==",
      "original_commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "original_line" : 460,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 90,
      "pull_request_review_id" : 526785231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T02:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520236742",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520237993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520237993"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for updating all these! I think they hadn't been filled-in since 2013ish given the above mention of Sean's Outpost :)",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T02:02:32Z",
      "diff_hunk" : "@@ -4058,9 +4063,15 @@ static RPCHelpMan send()\n                 }\n         },\n         RPCExamples{\"\"\n-        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n-        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\") +\n-            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\"\n+        \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 6 economical\\n\") +\n+        \"Send 0.2 BTC with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' 0 \\\"\\\" 1\\n\") +\n+        \"Send 0.2 BTC with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' '{\\\"fee_rate\\\": 1}'\\n\") +\n+        \"Send 0.3 BTC with a fee rate of 25 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named send\", \"outputs='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.3}' fee_rate=25\\n\") +\n+        \"Create a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520237993",
      "id" : 520237993,
      "line" : 4074,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzNzk5Mw==",
      "original_commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "original_line" : 4074,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 345,
      "pull_request_review_id" : 526785231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T02:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520237993",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520378840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520378840"
         }
      },
      "author_association" : "MEMBER",
      "body" : "TIL, thanks! Fixing",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T08:35:12Z",
      "diff_hunk" : "@@ -454,12 +454,17 @@ static RPCHelpMan sendtoaddress()\n                     },\n                 },\n                 RPCExamples{\n-                    HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\")\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" true\")\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" false true 0.00002 \" + (CURRENCY_UNIT + \"/kB\"))\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" false true 2 \" + (CURRENCY_ATOM + \"/B\"))\n-            + HelpExampleRpc(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n+                    \"\\nSend 0.1 BTC\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\") +\n+                    \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode using positional arguments\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"lunch\\\" \\\"seans outpost\\\" false true 6 economical\") +",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520378840",
      "id" : 520378840,
      "in_reply_to_id" : 520236742,
      "line" : 460,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3ODg0MA==",
      "original_commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "original_line" : 460,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 90,
      "pull_request_review_id" : 526964205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T08:35:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520378840",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520388431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520388431"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea, updated each of the test files.\r\n```diff\r\n-        for mode in [\"foo\", Decimal(\"3.141592\")]:\r\n+        for mode in [\"\", \"foo\", Decimal(\"3.141592\")]:\r\n```",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T08:50:35Z",
      "diff_hunk" : "@@ -282,17 +285,15 @@ def run_test(self):\n         for mode in [\"foo\", Decimal(\"3.141592\")]:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520388431",
      "id" : 520388431,
      "in_reply_to_id" : 519975619,
      "line" : 292,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4ODQzMQ==",
      "original_commit_id" : "389236d63e34b6779d01913d22f94bb02021fe29",
      "original_line" : 285,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "test/functional/wallet_send.py",
      "position" : 123,
      "pull_request_review_id" : 526977005,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T11:38:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520388431",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520414437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520414437"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea, addressed this and https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519998042 with\r\n```diff\r\n@@ -198,17 +198,20 @@ static std::string LabelFromValue(const UniValue& value)\r\n  *\r\n  * @param[in]     pwallet        Wallet pointer\r\n  * @param[in,out] cc             Coin control which is to be updated\r\n- * @param[in]     conf_target    UniValue integer, confirmation target in blocks\r\n- * @param[in]     estimate_mode  UniValue string, fee estimation mode (\"unset\", \"economical\" or \"conservative\")\r\n- * @param[in]     fee_rate       UniValue real, fee rate in sat/vB\r\n+ * @param[in]     conf_target    UniValue integer, confirmation target in blocks, values between 1 and 1008 are valid per policy/fees.h;\r\n+ *                                   0 is allowed as a no-op positional placeholder if a fee_rate is passed\r\n+ * @param[in]     estimate_mode  UniValue string, fee estimation mode, valid values are \"unset\", \"economical\" or \"conservative\";\r\n+ *                                   \"\" is allowed as a no-op positional placeholder if a fee_rate is passed\r\n+ * @param[in]     fee_rate       UniValue real, fee rate in sat/vB; if a fee_rate is present then both\r\n+ *                                   conf_target and estimate_mode must either be null or no-op values\r\n  */\r\n static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate)\r\n {\r\n     if (!fee_rate.isNull()) {\r\n-        if (!conf_target.isNull() && conf_target.get_int() > 0) { // conf_target value of 0 allowed as positional placeholder\r\n+        if (!conf_target.isNull() && conf_target.get_int() > 0) {\r\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\r\n         }\r\n-        if (!estimate_mode.isNull() && !estimate_mode.get_str().empty()) { // estimate_mode value of \"\" allowed as positional placeholder\r\n+        if (!estimate_mode.isNull() && !estimate_mode.get_str().empty()) {\r\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\r\n         }\r\n         cc.m_feerate = CFeeRate(AmountFromValue(fee_rate), COIN);\r\n```\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T09:30:05Z",
      "diff_hunk" : "@@ -198,30 +198,29 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in]     pwallet        Wallet pointer\n  * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n- * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n- * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ * @param[in]     conf_target    UniValue integer, confirmation target in blocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520414437",
      "id" : 520414437,
      "in_reply_to_id" : 519996056,
      "line" : 201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxNDQzNw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 201,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 16,
      "pull_request_review_id" : 527010840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T09:30:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520414437",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520415563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520415563"
         }
      },
      "author_association" : "MEMBER",
      "body" : ":+1: done as described in https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520414437",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T09:31:45Z",
      "diff_hunk" : "@@ -198,30 +198,29 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in]     pwallet        Wallet pointer\n  * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n- * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n- * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ * @param[in]     conf_target    UniValue integer, confirmation target in blocks\n+ * @param[in]     estimate_mode  UniValue string, fee estimation mode (\"unset\", \"economical\" or \"conservative\")\n+ * @param[in]     fee_rate       UniValue real, fee rate in sat/vB",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520415563",
      "id" : 520415563,
      "in_reply_to_id" : 519998042,
      "line" : 203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxNTU2Mw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 203,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 18,
      "pull_request_review_id" : 527012274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T09:31:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520415563",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520504264"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520504264"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea, doing.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T11:51:42Z",
      "diff_hunk" : "@@ -198,30 +198,29 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in]     pwallet        Wallet pointer\n  * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n- * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n- * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ * @param[in]     conf_target    UniValue integer, confirmation target in blocks\n+ * @param[in]     estimate_mode  UniValue string, fee estimation mode (\"unset\", \"economical\" or \"conservative\")\n+ * @param[in]     fee_rate       UniValue real, fee rate in sat/vB\n  */\n-static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& estimate_mode, const UniValue& estimate_param)\n+static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate)\n {\n-    if (!estimate_mode.isNull()) {\n-        if (!FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+    if (!fee_rate.isNull()) {\n+        if (!conf_target.isNull() && conf_target.get_int() > 0) { // conf_target value of 0 allowed as positional placeholder\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n         }\n-    }\n-\n-    if (cc.m_fee_mode == FeeEstimateMode::BTC_KB || cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-        if (estimate_param.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Selected estimate_mode %s requires a fee rate to be specified in conf_target\", estimate_mode.get_str()));\n+        if (!estimate_mode.isNull() && !estimate_mode.get_str().empty()) { // estimate_mode value of \"\" allowed as positional placeholder\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\n         }\n-\n-        CAmount feerate{AmountFromValue(estimate_param)};\n-        cc.m_feerate = cc.m_fee_mode == FeeEstimateMode::SAT_B ? CFeeRate(feerate, COIN) : CFeeRate(feerate);\n-\n-        // default RBF to true for explicit fee rate modes\n+        cc.m_feerate = CFeeRate(AmountFromValue(fee_rate), COIN);\n+        // Default RBF to true for explicit fee_rate, if unset.\n         if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n-    } else if (!estimate_param.isNull()) {\n-        cc.m_confirm_target = ParseConfirmTarget(estimate_param, pwallet->chain().estimateMaxBlocks());\n+        return;\n+    }\n+    if (!estimate_mode.isNull() && !FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520504264",
      "id" : 520504264,
      "in_reply_to_id" : 520003420,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNDI2NA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 220,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 55,
      "pull_request_review_id" : 527125432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T11:51:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520504264",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520588429"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520588429"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added these comments:\r\n```diff\r\n             RPCTypeCheck(request.params, {\r\n-                UniValueType(), // ARR or OBJ, checked later\r\n-                UniValue::VNUM,\r\n-                UniValue::VSTR,\r\n-                UniValue::VNUM,\r\n-                UniValue::VOBJ,\r\n+                UniValueType(), // outputs (ARR or OBJ, checked later)\r\n+                UniValue::VNUM, // conf_target\r\n+                UniValue::VSTR, // estimate_mode\r\n+                UniValue::VNUM, // fee_rate\r\n+                UniValue::VOBJ, // options\r\n                 }, true\r\n             );\r\n```\r\n> I was trying to figure out what exactly is checked here that prevents e.g. both `conf_target` and `fee_rate` to be set here, if `params[1]â¦[3]` all need to be null here.\r\n\r\nYou're right. Updated.\r\n```diff\r\n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\r\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\") || options.exists(\"fee_rate\")) {\r\n-                if (!request.params[1].isNull() || !request.params[2].isNull() || !request.params[3].isNull()) {\r\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode for fee estimation, or fee_rate to specify an explicit fee rate.\");\r\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\r\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\r\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\r\n                 }\r\n             } else {\r\n                 options.pushKV(\"conf_target\", request.params[1]);\r\n                 options.pushKV(\"estimate_mode\", request.params[2]);\r\n+            }\r\n+            if (options.exists(\"fee_rate\")) {\r\n+                if (!request.params[3].isNull()) {\r\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass fee_rate either as an argument or in the options object, but not both\");\r\n+                }\r\n+            } else {\r\n                 options.pushKV(\"fee_rate\", request.params[3]);\r\n             }\r\n```\r\nThis hopefully maintains the original goal of the code that either the argument or the option should be passed, but not both. The check if conf_target or estimate_mode are passed at the same time as fee_rate happens in `SetFeeEstimateMode()`.\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T14:08:21Z",
      "diff_hunk" : "@@ -4073,26 +4085,31 @@ static RPCHelpMan send()\n                 UniValueType(), // ARR or OBJ, checked later\n                 UniValue::VNUM,\n                 UniValue::VSTR,\n-                UniValue::VOBJ\n+                UniValue::VNUM,\n+                UniValue::VOBJ,\n                 }, true\n             );\n \n             std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n             if (!wallet) return NullUniValue;\n             CWallet* const pwallet = wallet.get();\n \n-            UniValue options{request.params[3].isNull() ? UniValue::VOBJ : request.params[3]};\n-            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\") || options.exists(\"fee_rate\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull() || !request.params[3].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520588429",
      "id" : 520588429,
      "in_reply_to_id" : 520014120,
      "line" : 4094,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4ODQyOQ==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 4099,
      "original_position" : 243,
      "original_start_line" : 4098,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 369,
      "pull_request_review_id" : 527236615,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : 4093,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-10T14:08:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520588429",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520594634"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520594634"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated `wallet_send` tests.\r\n```diff\r\n+++ b/test/functional/wallet_send.py\r\n@@ -234,7 +234,7 @@ class WalletSendTest(BitcoinTestFramework):\r\n         for mode in [\"unset\", \"economical\", \"conservative\"]:\r\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\",\r\n                 conf_target=1, estimate_mode=mode, add_to_wallet=False,\r\n-                expect_error=(-8, \"Use either conf_target and estimate_mode for fee estimation, or fee_rate to specify an explicit fee rate.\"))\r\n+                expect_error=(-8, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\"))\r\n \r\n         self.log.info(\"Create PSBT from watch-only wallet w3, sign with w2...\")\r\n         res = self.test_send(from_wallet=w3, to_wallet=w1, amount=1)\r\n@@ -278,6 +278,10 @@ class WalletSendTest(BitcoinTestFramework):\r\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\r\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00003\"))\r\n \r\n+        # Test that passing fee_rate as both an argument and an option raises.\r\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=1, fee_rate=1, add_to_wallet=False,\r\n+                       expect_error=(-8, \"Pass fee_rate either as an argument or in the options object, but not both\"))\r\n```\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T14:16:38Z",
      "diff_hunk" : "@@ -4073,26 +4085,31 @@ static RPCHelpMan send()\n                 UniValueType(), // ARR or OBJ, checked later\n                 UniValue::VNUM,\n                 UniValue::VSTR,\n-                UniValue::VOBJ\n+                UniValue::VNUM,\n+                UniValue::VOBJ,\n                 }, true\n             );\n \n             std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n             if (!wallet) return NullUniValue;\n             CWallet* const pwallet = wallet.get();\n \n-            UniValue options{request.params[3].isNull() ? UniValue::VOBJ : request.params[3]};\n-            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\") || options.exists(\"fee_rate\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull() || !request.params[3].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520594634",
      "id" : 520594634,
      "in_reply_to_id" : 520014120,
      "line" : 4094,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5NDYzNA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 4099,
      "original_position" : 243,
      "original_start_line" : 4098,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 369,
      "pull_request_review_id" : 527244883,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : 4093,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-10T14:16:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520594634",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520631298"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520631298"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. Yes, 1e5 apart. The ranges don't overlap if I'm not confused, except in the minimum fee direction. We already check the min/max for fee_rate (0.1-100,000 sat/vB) and the max for feeRate (1 BTC/kvB) in the functional tests. At the moment, min fee checks with feeRate are disabled due to `coinControl.fOverrideFeeRate = true` in wallet/rpcwallet.cpp `FundTransaction()`.\r\n\r\nTo test the minimum for feeRate (0.00000999 BTC/kvB), we'd have to remove that `fOverrideFeeRate` setting. I've added this for now:\r\n\r\n```diff\r\ntest/functional/rpc_fundrawtransaction.py\r\n@@ 772 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n+        # This test will only pass if `coinControl.fOverrideFeeRate = true` in wallet/rpcwallet.cpp::FundTransaction is removed\r\n+        assert_raises_rpc_error(-4, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\r\n+            node.fundrawtransaction, rawtx, {\"feeRate\": 0.00000999, \"add_inputs\": True})\r\n```\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:03:11Z",
      "diff_hunk" : "@@ -708,74 +707,108 @@ def test_all_watched_funds(self):\n         wwatch.unloadwallet()\n \n     def test_option_feerate(self):\n-        self.log.info(\"Test fundrawtxn feeRate option\")\n-\n+        self.log.info(\"Test fundrawtxn with explicit fee rates (fee_rate sat/vB and feeRate BTC/kvB)\")\n+        node = self.nodes[3]\n         # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n-\n         inputs = []\n-        outputs = {self.nodes[3].getnewaddress() : 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n+        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 200000 * self.min_relay_tx_fee})\n+        result2 = node.fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n+        result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 1000000 * self.min_relay_tx_fee})\n+        result4 = node.fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n         result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n+        assert_fee_amount(result1['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n+        assert_fee_amount(result4['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n-    def test_feerate_with_conf_target_and_estimate_mode(self):\n-        self.log.info(\"Test fundrawtxn passing an explicit fee rate using conf_target and estimate_mode\")\n-        node = self.nodes[3]\n-        # Make sure there is exactly one input so coin selection can't skew the result.\n-        assert_equal(len(node.listunspent(1)), 1)\n-        inputs = []\n-        outputs = {node.getnewaddress() : 1}\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-\n-        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n-            self.log.info(\"Test fundrawtxn with conf_target {} estimate_mode {} produces expected fee\".format(fee_rate, unit))\n-            # With no arguments passed, expect fee of 141 sats/b.\n-            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n-            # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n-            result = node.fundrawtransaction(rawtx, {\"conf_target\": fee_rate, \"estimate_mode\": unit})\n-            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+        msg = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"fee_rate\": 100000})\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"feeRate\": 1})\n \n-        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n-            self.log.info(\"Test fundrawtxn raises RPC error if both feeRate and {} are passed\".format(field))\n-            assert_raises_rpc_error(\n-                -8, \"Cannot specify both {} and feeRate\".format(field),\n-                lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, field: fee_rate}))\n+        # With no arguments passed, expect fee of 141 sats/b.\n+        assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n+        # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n+        result = node.fundrawtransaction(rawtx, {\"fee_rate\": 10000})\n+        assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n \n         self.log.info(\"Test fundrawtxn with invalid estimate_mode settings\")\n         for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n             assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n-                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": v, \"conf_target\": 0.1}))\n+                node.fundrawtransaction, rawtx, {\"estimate_mode\": v, \"conf_target\": 0.1})\n         for mode in [\"foo\", Decimal(\"3.141592\")]:\n             assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n-                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0.1}))\n+                node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": 0.1})\n \n         self.log.info(\"Test fundrawtxn with invalid conf_target settings\")\n-        for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+        for mode in [\"unset\", \"economical\", \"conservative\"]:\n             self.log.debug(\"{}\".format(mode))\n             for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n                 assert_raises_rpc_error(-3, \"Expected type number for conf_target, got {}\".format(k),\n-                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": v}))\n-            if mode in [\"btc/kb\", \"sat/b\"]:\n-                assert_raises_rpc_error(-3, \"Amount out of range\",\n-                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": -1}))\n-                assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n-                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0}))\n-            else:\n-                for n in [-1, 0, 1009]:\n-                    assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",\n-                        lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": n}))\n-\n-        for unit, fee_rate in {\"sat/B\": 0.99999999, \"BTC/kB\": 0.00000999}.items():\n-            self.log.info(\"- raises RPC error 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n-            assert_raises_rpc_error(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n-                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": unit, \"conf_target\": fee_rate, \"add_inputs\": True}))\n+                    node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": v})\n+            for n in [-1, 0, 1009]:\n+                assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",\n+                    node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": n})\n+\n+        self.log.info(\"Test invalid fee rate settings\")\n+        assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            node.fundrawtransaction, rawtx, {\"fee_rate\": 0, \"add_inputs\": True})\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+            node.fundrawtransaction, rawtx, {\"feeRate\": 0, \"add_inputs\": True})\n+        for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1.1)}:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520631298",
      "id" : 520631298,
      "in_reply_to_id" : 520032533,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzMTI5OA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 762,
      "original_position" : 112,
      "original_start_line" : 759,
      "path" : "test/functional/rpc_fundrawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 527293892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-10T15:26:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520631298",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520633587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520633587"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, will add the commit hash after pushing.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:06:10Z",
      "diff_hunk" : "@@ -3386,16 +3396,16 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n                 {\n                     {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n                              \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n-                    {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \"/kB.\\n\"\n-                             \"Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n-                             \"Must be at least 0.0001 \" + CURRENCY_UNIT + \"/kB higher than the current transaction fee rate.\\n\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\",\n+                             \"\\nSpecify a fee rate in \" + CURRENCY_ATOM + \"/vB instead of relying on the built-in fee estimator.\\n\"\n+                             \"Must be at least 1 \" + CURRENCY_ATOM + \"/vB higher than the current transaction fee rate.\\n\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520633587",
      "id" : 520633587,
      "in_reply_to_id" : 520009078,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzMzU4Nw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 3401,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 527296960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T15:06:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520633587",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520639282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520639282"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:13:17Z",
      "diff_hunk" : "@@ -4073,26 +4085,31 @@ static RPCHelpMan send()\n                 UniValueType(), // ARR or OBJ, checked later\n                 UniValue::VNUM,\n                 UniValue::VSTR,\n-                UniValue::VOBJ\n+                UniValue::VNUM,\n+                UniValue::VOBJ,\n                 }, true\n             );\n \n             std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n             if (!wallet) return NullUniValue;\n             CWallet* const pwallet = wallet.get();\n \n-            UniValue options{request.params[3].isNull() ? UniValue::VOBJ : request.params[3]};\n-            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\") || options.exists(\"fee_rate\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull() || !request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode for fee estimation, or fee_rate to specify an explicit fee rate.\");\n                 }\n             } else {\n                 options.pushKV(\"conf_target\", request.params[1]);\n                 options.pushKV(\"estimate_mode\", request.params[2]);\n+                options.pushKV(\"fee_rate\", request.params[3]);\n             }\n             if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n             }\n+            if (options.exists(\"feeRate\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate instead of feeRate\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520639282",
      "id" : 520639282,
      "in_reply_to_id" : 520015619,
      "line" : 4106,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzOTI4Mg==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 4111,
      "original_position" : 255,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 381,
      "pull_request_review_id" : 527304496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T15:13:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520639282",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520645909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520645909"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated\r\n```diff\r\n         result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\r\n-        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 200000 * self.min_relay_tx_fee})\r\n+        btc_kvb_to_sat_vb = 100000  # (1e5)\r\n+        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 2 * btc_kvb_to_sat_vb * self.min_relay_tx_fee})\r\n         result2 = node.fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\r\n-        result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 1000000 * self.min_relay_tx_fee})\r\n+        result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 10 * btc_kvb_to_sat_vb * self.min_relay_tx_fee})\r\n         result4 = node.fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\r\n```\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:21:39Z",
      "diff_hunk" : "@@ -708,74 +707,108 @@ def test_all_watched_funds(self):\n         wwatch.unloadwallet()\n \n     def test_option_feerate(self):\n-        self.log.info(\"Test fundrawtxn feeRate option\")\n-\n+        self.log.info(\"Test fundrawtxn with explicit fee rates (fee_rate sat/vB and feeRate BTC/kvB)\")\n+        node = self.nodes[3]\n         # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n-\n         inputs = []\n-        outputs = {self.nodes[3].getnewaddress() : 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n+        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 200000 * self.min_relay_tx_fee})",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520645909",
      "id" : 520645909,
      "in_reply_to_id" : 520020689,
      "line" : 719,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0NTkwOQ==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 719,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "test/functional/rpc_fundrawtransaction.py",
      "position" : 30,
      "pull_request_review_id" : 527313380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T15:21:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520645909",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520648044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520648044"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well-spotted :)\r\n```diff\r\n-        # With no arguments passed, expect fee of 141 sats/b.\r\n+        # With no arguments passed, expect fee of 141 satoshis.\r\n         assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\r\n-        # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\r\n+        # Expect fee to be 10,000x higher when explicit fee rate 10,000x greater is specified.\r\n```\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:24:28Z",
      "diff_hunk" : "@@ -708,74 +707,108 @@ def test_all_watched_funds(self):\n         wwatch.unloadwallet()\n \n     def test_option_feerate(self):\n-        self.log.info(\"Test fundrawtxn feeRate option\")\n-\n+        self.log.info(\"Test fundrawtxn with explicit fee rates (fee_rate sat/vB and feeRate BTC/kvB)\")\n+        node = self.nodes[3]\n         # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n-\n         inputs = []\n-        outputs = {self.nodes[3].getnewaddress() : 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n+        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 200000 * self.min_relay_tx_fee})\n+        result2 = node.fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n+        result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 1000000 * self.min_relay_tx_fee})\n+        result4 = node.fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n         result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n+        assert_fee_amount(result1['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n+        assert_fee_amount(result4['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n-    def test_feerate_with_conf_target_and_estimate_mode(self):\n-        self.log.info(\"Test fundrawtxn passing an explicit fee rate using conf_target and estimate_mode\")\n-        node = self.nodes[3]\n-        # Make sure there is exactly one input so coin selection can't skew the result.\n-        assert_equal(len(node.listunspent(1)), 1)\n-        inputs = []\n-        outputs = {node.getnewaddress() : 1}\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-\n-        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n-            self.log.info(\"Test fundrawtxn with conf_target {} estimate_mode {} produces expected fee\".format(fee_rate, unit))\n-            # With no arguments passed, expect fee of 141 sats/b.\n-            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n-            # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n-            result = node.fundrawtransaction(rawtx, {\"conf_target\": fee_rate, \"estimate_mode\": unit})\n-            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+        msg = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"fee_rate\": 100000})\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"feeRate\": 1})\n \n-        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n-            self.log.info(\"Test fundrawtxn raises RPC error if both feeRate and {} are passed\".format(field))\n-            assert_raises_rpc_error(\n-                -8, \"Cannot specify both {} and feeRate\".format(field),\n-                lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, field: fee_rate}))\n+        # With no arguments passed, expect fee of 141 sats/b.\n+        assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n+        # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520648044",
      "id" : 520648044,
      "in_reply_to_id" : 520027877,
      "line" : 735,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0ODA0NA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 735,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "test/functional/rpc_fundrawtransaction.py",
      "position" : 67,
      "pull_request_review_id" : 527316288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T15:24:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520648044",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520648757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520648757"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right! Done.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:25:19Z",
      "diff_hunk" : "@@ -708,74 +707,108 @@ def test_all_watched_funds(self):\n         wwatch.unloadwallet()\n \n     def test_option_feerate(self):\n-        self.log.info(\"Test fundrawtxn feeRate option\")\n-\n+        self.log.info(\"Test fundrawtxn with explicit fee rates (fee_rate sat/vB and feeRate BTC/kvB)\")\n+        node = self.nodes[3]\n         # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n-\n         inputs = []\n-        outputs = {self.nodes[3].getnewaddress() : 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n+        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 200000 * self.min_relay_tx_fee})\n+        result2 = node.fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n+        result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 1000000 * self.min_relay_tx_fee})\n+        result4 = node.fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n         result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n+        assert_fee_amount(result1['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n+        assert_fee_amount(result4['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n-    def test_feerate_with_conf_target_and_estimate_mode(self):\n-        self.log.info(\"Test fundrawtxn passing an explicit fee rate using conf_target and estimate_mode\")\n-        node = self.nodes[3]\n-        # Make sure there is exactly one input so coin selection can't skew the result.\n-        assert_equal(len(node.listunspent(1)), 1)\n-        inputs = []\n-        outputs = {node.getnewaddress() : 1}\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-\n-        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n-            self.log.info(\"Test fundrawtxn with conf_target {} estimate_mode {} produces expected fee\".format(fee_rate, unit))\n-            # With no arguments passed, expect fee of 141 sats/b.\n-            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n-            # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n-            result = node.fundrawtransaction(rawtx, {\"conf_target\": fee_rate, \"estimate_mode\": unit})\n-            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+        msg = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"fee_rate\": 100000})\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"feeRate\": 1})\n \n-        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n-            self.log.info(\"Test fundrawtxn raises RPC error if both feeRate and {} are passed\".format(field))\n-            assert_raises_rpc_error(\n-                -8, \"Cannot specify both {} and feeRate\".format(field),\n-                lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, field: fee_rate}))\n+        # With no arguments passed, expect fee of 141 sats/b.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520648757",
      "id" : 520648757,
      "in_reply_to_id" : 520023407,
      "line" : 733,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0ODc1Nw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 733,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "test/functional/rpc_fundrawtransaction.py",
      "position" : 65,
      "pull_request_review_id" : 527317189,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T15:25:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520648757",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520651114"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520651114"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree--punting on this for the next push but would be good.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:28:14Z",
      "diff_hunk" : "@@ -187,60 +187,74 @@ def run_test(self):\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n-        self.log.info(\"Test walletcreatefundedpsbt feeRate of 0.1 BTC/kB produces a total fee at or slightly below -maxtxfee (~0.05290000)\")\n-        res = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n-        assert_approx(res[\"fee\"], 0.055, 0.005)\n-\n-        self.log.info(\"Test walletcreatefundedpsbt explicit fee rate with conf_target and estimate_mode\")\n-        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n-            fee = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"conf_target\": fee_rate, \"estimate_mode\": unit, \"add_inputs\": True})[\"fee\"]\n-            self.log.info(\"- conf_target {}, estimate_mode {} produces fee {} at or slightly below -maxtxfee (~0.05290000)\".format(fee_rate, unit, fee))\n-            assert_approx(fee, vexp=0.055, vspan=0.005)\n-\n-        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n-            self.log.info(\"- raises RPC error if both feeRate and {} are passed\".format(field))\n-            assert_raises_rpc_error(-8, \"Cannot specify both {} and feeRate\".format(field),\n-                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, field: fee_rate, \"add_inputs\": True}))\n+        self.log.info(\"Test walletcreatefundedpsbt fee rate of 10000 sat/vB and 0.1 BTC/kvB produces a total fee at or slightly below -maxtxfee (~0.05290000)\")\n+        res1 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"fee_rate\": 10000, \"add_inputs\": True})\n+        assert_approx(res1[\"fee\"], 0.055, 0.005)\n+        res2 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n+        assert_approx(res2[\"fee\"], 0.055, 0.005)\n+\n+        self.log.info(\"Test invalid fee rate settings\")\n+        assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": 0, \"add_inputs\": True})\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"feeRate\": 0, \"add_inputs\": True})\n+        for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1.1)}:\n+            assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520651114",
      "id" : 520651114,
      "in_reply_to_id" : 520034207,
      "line" : 202,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1MTExNA==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 202,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "test/functional/rpc_psbt.py",
      "position" : 30,
      "pull_request_review_id" : 527320330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T15:28:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520651114",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520653277"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520653277"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done\r\n```diff\r\n+++ b/test/functional/wallet_basic.py\r\n@@ -232,7 +232,7 @@ class WalletTest(BitcoinTestFramework):\r\n \r\n         self.log.info(\"Test sendmany with fee_rate param (explicit fee rate in sat/vB)\")\r\n         fee_rate_sat_vb = 2\r\n-        fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0\r\n+        fee_rate_btc_kvb = fee_rate_sat_vb * 1e3 / 1e8\r\n         explicit_fee_rate_btc_kvb = Decimal(fee_rate_btc_kvb) / 1000\r\n \r\n         # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\r\n@@ -405,7 +405,7 @@ class WalletTest(BitcoinTestFramework):\r\n             address = self.nodes[1].getnewaddress()\r\n             amount = 3\r\n             fee_rate_sat_vb = 2\r\n-            fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0\r\n+            fee_rate_btc_kvb = fee_rate_sat_vb * 1e3 / 1e8\r\n```\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:30:50Z",
      "diff_hunk" : "@@ -227,65 +230,40 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as BTC/kB)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode bTc/kB requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='bTc/kB')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='bTc/kB')\n-        fee_per_kb = 0.0002500\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_per_kb,\n-            estimate_mode='bTc/kB',\n-        )\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n-        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal += Decimal('10')\n-        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n-\n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as sat/B)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode sat/b requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='sat/b')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='sat/b')\n-        fee_sat_per_b = 2\n-        fee_per_kb = fee_sat_per_b / 100000.0\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_sat_per_b,\n-            estimate_mode='sAT/b',\n-        )\n+        self.log.info(\"Test sendmany with fee_rate param (explicit fee rate in sat/vB)\")\n+        fee_rate_sat_vb = 2\n+        fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520653277",
      "id" : 520653277,
      "in_reply_to_id" : 520037187,
      "line" : 235,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1MzI3Nw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 235,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "test/functional/wallet_basic.py",
      "position" : 87,
      "pull_request_review_id" : 527323176,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T15:30:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520653277",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520656622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520656622"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think that's from `wallet/wallet.h`, though the different fee constants and config options are a bit confusing to me.\r\n```cpp\r\n//! minimum recommended increment for BIP 125 replacement txs\r\nstatic const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\r\n```\r\nand `wallet/feebumper.cpp`\r\n```cpp\r\n    if (new_total_fee < minTotalFee) {\r\n        errors.push_back(strprintf(Untranslated(\"Insufficient total fee %s, must be at least %s (oldFee %s + incrementalFee %s)\"),\r\n            FormatMoney(new_total_fee), FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxTxSize)), FormatMoney(incrementalRelayFee.GetFee(maxTxSize))));\r\n```\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:35:00Z",
      "diff_hunk" : "@@ -105,50 +103,43 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n         self.sync_mempools((rbf_node, peer_node))\n         assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-        assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-        assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n+        for key in [\"totalFee\", \"feeRate\"]:\n+            assert_raises_rpc_error(-3, \"Unexpected key {}\".format(key), rbf_node.bumpfee, rbfid, {key: NORMAL})\n \n-        # For each fee mode, bumping to just above minrelay should fail to increase the total fee enough.\n-        for options in [{\"fee_rate\": INSUFFICIENT}, {\"conf_target\": INSUFFICIENT, \"estimate_mode\": BTC_MODE}, {\"conf_target\": 1, \"estimate_mode\": SAT_MODE}]:\n-            assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, options)\n+        # Bumping to just above minrelay should fail to increase the total fee enough.\n+        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00000141, must be at least 0.00001704 (oldFee 0.00000999 + incrementalFee 0.00000705)\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520656622",
      "id" : 520656622,
      "in_reply_to_id" : 520227883,
      "line" : 110,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NjYyMg==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 110,
      "original_position" : 53,
      "original_start_line" : 113,
      "path" : "test/functional/wallet_bumpfee.py",
      "position" : 53,
      "pull_request_review_id" : 527327519,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : 113,
      "start_side" : "LEFT",
      "updated_at" : "2020-11-10T15:37:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520656622",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520659527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520659527"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be a good follow-up.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:38:47Z",
      "diff_hunk" : "@@ -105,50 +103,43 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n         self.sync_mempools((rbf_node, peer_node))\n         assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-        assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-        assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n+        for key in [\"totalFee\", \"feeRate\"]:\n+            assert_raises_rpc_error(-3, \"Unexpected key {}\".format(key), rbf_node.bumpfee, rbfid, {key: NORMAL})\n \n-        # For each fee mode, bumping to just above minrelay should fail to increase the total fee enough.\n-        for options in [{\"fee_rate\": INSUFFICIENT}, {\"conf_target\": INSUFFICIENT, \"estimate_mode\": BTC_MODE}, {\"conf_target\": 1, \"estimate_mode\": SAT_MODE}]:\n-            assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, options)\n+        # Bumping to just above minrelay should fail to increase the total fee enough.\n+        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00000141, must be at least 0.00001704 (oldFee 0.00000999 + incrementalFee 0.00000705)\",\n+            rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n \n-        self.log.info(\"Test explicit fee rate raises RPC error if estimate_mode is passed without a conf_target\")\n-        for unit, fee_rate in {\"SAT/B\": 100, \"BTC/KB\": NORMAL}.items():\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode {} requires a fee rate to be specified in conf_target\".format(unit),\n-                                    rbf_node.bumpfee, rbfid, {\"fee_rate\": fee_rate, \"estimate_mode\": unit})\n+        self.log.info(\"Test invalid fee rate settings\")\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+            rbf_node.bumpfee, rbfid, {\"fee_rate\": 0})\n+        assert_raises_rpc_error(-4, \"Specified or calculated fee 0.141 is too high (cannot be higher than -maxtxfee 0.10\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520659527",
      "id" : 520659527,
      "in_reply_to_id" : 520228906,
      "line" : 116,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1OTUyNw==",
      "original_commit_id" : "53b35be8f87fd894614a5e3609b1d8895a96c93c",
      "original_line" : 116,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "test/functional/wallet_bumpfee.py",
      "position" : 63,
      "pull_request_review_id" : 527331349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T15:38:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520659527",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520662771"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520662771"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's still the default unit elsewhere (until the remaining RPCs move to sat/vB). For now, this PR remains in the scope of the 6 RPCs described in the PR description and the \"wallet: introduce fee_rate (sat/vB) param/option\" commit message. I was sort of tempted to scope-creep it to include some of the other RPCs, but it's already doing a lot.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:42:53Z",
      "diff_hunk" : "@@ -19,8 +19,8 @@ enum class FeeEstimateMode {\n     UNSET,        //!< Use default settings based on other criteria\n     ECONOMICAL,   //!< Force estimateSmartFee to use non-conservative estimates\n     CONSERVATIVE, //!< Force estimateSmartFee to use conservative estimates\n-    BTC_KB,       //!< Use explicit BTC/kB fee given in coin control\n-    SAT_B,        //!< Use explicit sat/B fee given in coin control\n+    BTC_KVB,      //!< Use BTC/kvB fee rate unit\n+    SAT_VB,       //!< Use sat/vB fee rate unit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520662771",
      "id" : 520662771,
      "in_reply_to_id" : 520232666,
      "line" : 23,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2Mjc3MQ==",
      "original_commit_id" : "ced7d54e6da522c964510ea0c379ef84c7ac689c",
      "original_line" : 23,
      "original_position" : 7,
      "original_start_line" : 22,
      "path" : "src/policy/feerate.h",
      "position" : 7,
      "pull_request_review_id" : 527335551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : 22,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-10T15:43:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520662771",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520664675"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520664675"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, scope creep on an already-wide PR. Could be a next step if you want to tackle it.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T15:45:13Z",
      "diff_hunk" : "@@ -2303,7 +2303,7 @@ static RPCHelpMan settxfee()\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n                 \"Can be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\\n\",\n                 {\n-                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kvB\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520664675",
      "id" : 520664675,
      "in_reply_to_id" : 520234818,
      "line" : 2311,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2NDY3NQ==",
      "original_commit_id" : "cfc14701c6fef7dd3340bfeb5675a821ae615284",
      "original_line" : 2306,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 151,
      "pull_request_review_id" : 527338078,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T15:45:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520664675",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520730092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520730092"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would be nice to have a comment explaining this because it is not immediately clear why this works and future work on this code may not see this explanation.",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T17:12:45Z",
      "diff_hunk" : "@@ -217,12 +215,8 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Selected estimate_mode %s requires a fee rate to be specified in conf_target\", estimate_mode.get_str()));\n         }\n \n-        CAmount fee_rate = AmountFromValue(estimate_param);\n-        if (cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-            fee_rate /= WALLET_BTC_KB_TO_SAT_B;\n-        }\n-\n-        cc.m_feerate = CFeeRate(fee_rate);\n+        CAmount feerate{AmountFromValue(estimate_param)};\n+        cc.m_feerate = cc.m_fee_mode == FeeEstimateMode::SAT_B ? CFeeRate(feerate, COIN) : CFeeRate(feerate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520730092",
      "id" : 520730092,
      "in_reply_to_id" : 519986635,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMDA5Mg==",
      "original_commit_id" : "0f7df6b2e87ab5177409dd108fff7c519283b205",
      "original_line" : 219,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 527425347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T17:12:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520730092",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T18:11:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-724875274",
      "id" : 724875274,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyNDg3NTI3NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-10T18:11:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724875274",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520782513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520782513"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, added doxygen documentation.\r\n\r\n```diff\r\n-    /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\r\n+\r\n+    /** Constructor for a fee rate in satoshis per kvB (sat/kvB). The size in bytes must not exceed (2^63 - 1).\r\n+     *\r\n+     *  Passing an nBytes value of COIN (1e8) returns a fee rate in satoshis per vB (sat/vB),\r\n+     *  e.g. (nFeePaid * 1e8 / 1e3) == (nFeePaid / 1e5),\r\n+     *  where 1e5 is the ratio to convert from BTC/kvB to sat/vB.\r\n+     *\r\n+     *  @param[in] nFeePaid  CAmount fee rate to construct with\r\n+     *  @param[in] nBytes    size_t bytes (units) to construct with\r\n+     *  @returns   fee rate\r\n+     */\r\n     CFeeRate(const CAmount& nFeePaid, size_t nBytes);\r\n```\r\n",
      "commit_id" : "5660dd301152c0c7a70934cc7650ad162a44c9b4",
      "created_at" : "2020-11-10T18:35:43Z",
      "diff_hunk" : "@@ -217,12 +215,8 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Selected estimate_mode %s requires a fee rate to be specified in conf_target\", estimate_mode.get_str()));\n         }\n \n-        CAmount fee_rate = AmountFromValue(estimate_param);\n-        if (cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-            fee_rate /= WALLET_BTC_KB_TO_SAT_B;\n-        }\n-\n-        cc.m_feerate = CFeeRate(fee_rate);\n+        CAmount feerate{AmountFromValue(estimate_param)};\n+        cc.m_feerate = cc.m_fee_mode == FeeEstimateMode::SAT_B ? CFeeRate(feerate, COIN) : CFeeRate(feerate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520782513",
      "id" : 520782513,
      "in_reply_to_id" : 519986635,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MjUxMw==",
      "original_commit_id" : "0f7df6b2e87ab5177409dd108fff7c519283b205",
      "original_line" : 219,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 527493170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20305",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-10T18:40:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520782513",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for all the feedback. Re-checking all the fiddly things, will push the update in a few minutes.",
      "created_at" : "2020-11-10T18:48:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-724893997",
      "id" : 724893997,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20305",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyNDg5Mzk5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-10T18:48:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724893997",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
