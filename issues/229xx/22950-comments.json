[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23053](https://github.com/bitcoin/bitcoin/pull/23053) ([fuzz] Use public methods in addrman fuzz tests by jnewbery)\n* [#23035](https://github.com/bitcoin/bitcoin/pull/23035) (p2p, rpc, test: expose tried and refcount in getnodeaddresses, update/improve tests by jonatack)\n* [#23025](https://github.com/bitcoin/bitcoin/pull/23025) (bench: update nanobench add `-min_time` by martinus)\n* [#22976](https://github.com/bitcoin/bitcoin/pull/22976) (scripted-diff: Rename overloaded int GetArg to GetIntArg by ryanofsky)\n* [#22937](https://github.com/bitcoin/bitcoin/pull/22937) (refactor: Forbid calling unsafe fs::path(std::string) constructor and fs::path::string() method by ryanofsky)\n* [#22872](https://github.com/bitcoin/bitcoin/pull/22872) (log: improve checkaddrman logging with duration in milliseconds by jonatack)\n* [#22839](https://github.com/bitcoin/bitcoin/pull/22839) (log: improve addrman logging by mzumsande)\n* [#22508](https://github.com/bitcoin/bitcoin/pull/22508) (fuzz: replace every fuzzer-controlled while loop with a macro by apoelstra)\n* [#20295](https://github.com/bitcoin/bitcoin/pull/20295) (rpc: getblockfrompeer by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-09-11T14:56:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-917420738",
      "id" : 917420738,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII5842rrrC",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-22T18:56:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/917420738",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Fixed the [lint failure](https://cirrus-ci.com/task/5301111516037120) that was caused by the circular dependencies check ~with 95a066efff8c63b7d81d93977c1980e019708fa9. The check treated `file_name.h` and `file_name.cpp` as the same module, so the import pattern here of `addrman.h` <- `addrman_impl.h` <- `addrman.cpp` was perceived as a circular dependency. I fixed this by telling it to also treat `file_name_impl.h` as part of the same module.~\r\n\r\nMore info about updated fix here: https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-921056093",
      "created_at" : "2021-09-13T22:57:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-918643347",
      "id" : 918643347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII5842wWKT",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-16T16:35:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918643347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. I'm a big fan of compilation firewall patterns. From Herb Sutter:\r\n\r\n> One big advantage of this idiom is that it breaks compile-time dependencies. First, system builds run faster because using a Pimpl can eliminate extra #includes. I have worked on projects where converting just a few widely-visible classes to use Pimpls has halved the systemâs build time. Second, it localizes the build impact of code changes because the parts of a class that reside in the Pimpl can be freely changed â that is, members can be freely added or removed â without recompiling client code. Because itâs so good at eliminating compilation cascades due to changes in only the now-hidden members, itâs often dubbed a âcompilation firewall.â\r\n\r\n(https://herbsutter.com/gotw/_100/)\r\n\r\nBoth are relevant here. addrman.h is eventually included by just about everything, so minimizing its compilation time is potentially a big win. There's also a plan to rework its implementation. If we first make addrman into a pimpl, that could theoretically be done without any impact on the rest of the codebase.",
      "created_at" : "2021-09-14T12:14:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-919092484",
      "id" : 919092484,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII5842yD0E",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-14T12:14:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/919092484",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK on improved separation and shorter build times. Debug build clean. Just read through pages 147-156 of Scott Meyers' \"Effective Modern C++\" about the (unique) pointer to implementation idiom and started looking at the commit organisation, particularly the choices in the second (\"Introduce CAddrMan::Impl to encapsulate addrman implementation\") and third (\"Remove external dependencies on CAddrInfo objects\") commits where the action appears to be.\r\n\r\nEdit, noting for myself, also:\r\n- Scott Meyers, \"Effective C++\", item 31\r\n- Herb Sutter, \"Exceptional C++\", items 26-30",
      "created_at" : "2021-09-15T17:59:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-920249059",
      "id" : 920249059,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII58422eLj",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-15T19:34:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/920249059",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\n> Both are relevant here. addrman.h is eventually included by just about everything, so minimizing its compilation time is potentially a big win.\r\n\r\nYes, at some point there was discussion about doing this for `txmempool.h` too, as it's included a fair bit and includes all these boost `multi_index` structures, which i'm sure slow down compilation quite a bit.\r\n",
      "created_at" : "2021-09-16T16:24:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-921048350",
      "id" : 921048350,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII58425hUe",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-16T16:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/921048350",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "adopted a different fix to the detected circular dependency- I made the impl a stand-alone class, so it's now `AddrManImpl` instead of `AddrMan::Impl`. this means `addrman_impl.h` does not need to import `addrman.h`, and the linter script does not need to be updated :) ",
      "created_at" : "2021-09-16T16:34:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-921056093",
      "id" : 921056093,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII58425jNd",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-16T16:34:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/921056093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-09-20T17:58:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-923150531",
      "id" : 923150531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII5843BijD",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-20T17:58:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923150531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "concept ack!",
      "created_at" : "2021-09-21T03:29:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-923583452",
      "id" : 923583452,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII5843DMPc",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-21T03:29:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923583452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "thanks for the concept ACKs! rebased to incorporate the recent addrman changes. ",
      "created_at" : "2021-09-21T21:55:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-924415628",
      "id" : 924415628,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII5843GXaM",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-21T21:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/924415628",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I had missed a silent merge conflict, fixed now and ready for review ð",
      "created_at" : "2021-09-22T00:35:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-924488565",
      "id" : 924488565,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII5843GpN1",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-22T00:35:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/924488565",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713849263"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713849263"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a forward declaration, so the usual place for it would be at the top of the file. I think placing it here would also means that the doxygen comment would be associated with `AddrManImpl` instead of `AddrMan`.",
      "commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "created_at" : "2021-09-22T11:33:17Z",
      "diff_hunk" : "@@ -123,290 +48,63 @@ class CAddrInfo : public CAddress\n  *    * Several indexes are kept for high performance. Setting m_consistency_check_ratio with the -checkaddrman\n  *      configuration option will introduce (expensive) consistency checks for the entire data structure.\n  */\n-\n-/** Total number of buckets for tried addresses */\n-static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n-static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n-\n-/** Total number of buckets for new addresses */\n-static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n-static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n-\n-/** Maximum allowed number of entries in buckets for new and tried addresses */\n-static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n-static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n-\n-/**\n- * Stochastical (IP) address manager\n- */\n-class CAddrMan\n+class AddrManImpl;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713849263",
      "id" : 713849263,
      "line" : 51,
      "node_id" : "PRRC_kwDOABII584qjHmv",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 51,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 118,
      "pull_request_review_id" : 760789697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-22T12:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713849263",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713887633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713887633"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This may just be personal preference, but I think this file would be tidier/easier to read if all of these `AddrMan` boilerplate forwarding functions were collected at the bottom (as is done in txrequest.cpp), rather than interleaved with `AddrManImpl` functions.",
      "commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "created_at" : "2021-09-22T12:26:22Z",
      "diff_hunk" : "@@ -1004,16 +984,187 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     // If id_new not found in mapInfo remove it from m_tried_collisions\n     if (mapInfo.count(id_new) != 1) {\n         m_tried_collisions.erase(it);\n-        return CAddrInfo();\n+        return {};\n     }\n \n-    const CAddrInfo& newInfo = mapInfo[id_new];\n+    const AddrInfo& newInfo = mapInfo[id_new];\n \n     // which tried bucket to move the entry to\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);\n     int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n \n-    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+    auto info_old = mapInfo[vvTried[tried_bucket][tried_bucket_pos]];\n+    return {info_old, info_old.nLastTry};\n+}\n+\n+// explicit instantiation\n+template void AddrMan::Serialize(CHashWriter& s) const;\n+template void AddrMan::Serialize(CAutoFile& s) const;\n+template void AddrMan::Serialize(CDataStream& s) const;\n+template void AddrMan::Unserialize(CAutoFile& s);\n+template void AddrMan::Unserialize(CHashVerifier<CAutoFile>& s);\n+template void AddrMan::Unserialize(CDataStream& s);\n+template void AddrMan::Unserialize(CHashVerifier<CDataStream>& s);\n+\n+template <typename Stream>\n+void AddrMan::Serialize(Stream& s_) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713887633",
      "id" : 713887633,
      "line" : 1010,
      "node_id" : "PRRC_kwDOABII584qjQ-R",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 1010,
      "original_position" : 546,
      "original_start_line" : null,
      "path" : "src/addrman.cpp",
      "position" : 546,
      "pull_request_review_id" : 760789697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-22T12:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713887633",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713891466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713891466"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe we should just update the internal `GetAddr_()` function to return a `std::vector<CAddress>` instead of introducing this comment?",
      "commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "created_at" : "2021-09-22T12:31:02Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>\n+#include <unordered_map>\n+#include <unordered_set>\n+\n+/** Total number of buckets for tried addresses */\n+static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n+static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n+/** Total number of buckets for new addresses */\n+static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n+static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n+/** Maximum allowed number of entries in buckets for new and tried addresses */\n+static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n+static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n+\n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class AddrInfo : public CAddress\n+{\n+public:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};\n+\n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt{0};\n+\n+    //! where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    //! last successful connection by us\n+    int64_t nLastSuccess{0};\n+\n+    //! connection attempts since last successful attempt\n+    int nAttempts{0};\n+\n+    //! reference count in new sets (memory only)\n+    int nRefCount{0};\n+\n+    //! in tried set? (memory only)\n+    bool fInTried{false};\n+\n+    //! position in vRandom\n+    mutable int nRandomPos{-1};\n+\n+    SERIALIZE_METHODS(AddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+    }\n+\n+    AddrInfo(const CAddress& addrIn, const CNetAddr& addrSource) : CAddress(addrIn), source(addrSource)\n+    {\n+    }\n+\n+    AddrInfo() : CAddress(), source()\n+    {\n+    }\n+\n+    //! Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const uint256& nKey, const std::vector<bool>& asmap) const\n+    {\n+        return GetNewBucket(nKey, source, asmap);\n+    }\n+\n+    //! Calculate in which position of a bucket to store this entry.\n+    int GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const;\n+\n+    //! Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n+\n+    //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n+};\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio)\n+        : insecure_rand{deterministic}\n+        , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n+        , m_consistency_check_ratio{consistency_check_ratio}\n+        , m_asmap{std::move(asmap)}\n+    {\n+        for (auto& bucket : vvNew) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+        for (auto& bucket : vvTried) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+    }\n+\n+    ~AddrManImpl()\n+    {\n+        nKey.SetNull();\n+    }\n+\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    bool Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Good(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Attempt(const CService& addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> Select(bool newOnly = false) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Connected(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void SetServices(const CService& addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    const std::vector<bool>& GetAsmap() const;\n+\n+    friend class AddrManTest;\n+    friend class AddrManDeterministic;\n+\n+private:\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n+\n+    //! Source of random numbers for randomization in inner loops\n+    mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n+\n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n+    //! Serialization versions.\n+    enum Format : uint8_t {\n+        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n+        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n+        V2_ASMAP = 2,         //!< for files including asmap version\n+        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n+    };\n+\n+    //! The maximum format this software knows it can unserialize. Also, we always serialize\n+    //! in this format.\n+    //! The format (first byte in the serialized stream) can be higher than this and\n+    //! still this software may be able to unserialize the file - if the second byte\n+    //! (see `lowest_compatible` in `Unserialize()`) is less or equal to this.\n+    static constexpr Format FILE_FORMAT = Format::V3_BIP155;\n+\n+    //! The initial value of a field that is incremented every time an incompatible format\n+    //! change is made (such that old software versions would not be able to parse and\n+    //! understand the new file format). This is 32 because we overtook the \"key size\"\n+    //! field which was 32 historically.\n+    //! @note Don't increment this. Increment `lowest_compatible` in `Serialize()` instead.\n+    static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n+\n+    //! last used nId\n+    int nIdCount GUARDED_BY(cs){0};\n+\n+    //! table with information about all nIds\n+    std::unordered_map<int, AddrInfo> mapInfo GUARDED_BY(cs);\n+\n+    //! find an nId based on its network address\n+    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n+\n+    //! randomly-ordered vector of all nIds\n+    //! This is mutable because it is unobservable outside the class, so any\n+    //! changes to it (even in const methods) are also unobservable.\n+    mutable std::vector<int> vRandom GUARDED_BY(cs);\n+\n+    // number of \"tried\" entries\n+    int nTried GUARDED_BY(cs){0};\n+\n+    //! list of \"tried\" buckets\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! number of (unique) \"new\" entries\n+    int nNew GUARDED_BY(cs){0};\n+\n+    //! list of \"new\" buckets\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! last time Good was called (memory only). Initially set to 1 so that \"never\" is strictly worse.\n+    int64_t nLastGood GUARDED_BY(cs){1};\n+\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n+    /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n+    const int32_t m_consistency_check_ratio;\n+\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the existing records\n+    // would be re-bucketed accordingly.\n+    const std::vector<bool> m_asmap;\n+\n+    //! Find an entry.\n+    AddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Create a new entry and add it to the internal data structures mapInfo, mapAddr and vRandom.\n+    AddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Swap two elements in vRandom.\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Move an entry from the \"new\" table(s) to the \"tried\" table\n+    void MakeTried(AddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Delete an entry. It must not be in tried, and have refcount 0.\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    bool Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> Select_(bool newOnly) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Consistency check, taking into account m_consistency_check_ratio. Will std::abort if an inconsistency is detected.\n+    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Perform consistency check, regardless of m_consistency_check_ratio.\n+    //! @returns an error code or zero.\n+    int ForceCheckAddrman() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /**\n+     * This internal function adds one parameter to the GetAddr wrapper.\n+     *\n+     * @param[out] vAddr         Vector of randomly selected addresses from vRandom.\n+     */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713891466",
      "id" : 713891466,
      "line" : 279,
      "node_id" : "PRRC_kwDOABII584qjR6K",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 279,
      "original_position" : 279,
      "original_start_line" : 276,
      "path" : "src/addrman_impl.h",
      "position" : 279,
      "pull_request_review_id" : 760789697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : 276,
      "start_side" : "RIGHT",
      "updated_at" : "2021-09-22T12:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713891466",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713892970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713892970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be grouped above with logging.h, since sync.h is a project header and not a stl header.",
      "commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "created_at" : "2021-09-22T12:32:55Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713892970",
      "id" : 713892970,
      "line" : 10,
      "node_id" : "PRRC_kwDOABII584qjSRq",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 10,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/addrman_impl.h",
      "position" : 10,
      "pull_request_review_id" : 760789697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-22T12:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713892970",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713897836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713897836"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also include:\r\n\r\n- cstdint (for fixed width integer types)\r\n- netaddress.h (for CNetAddr)\r\n- serialize.h (for serialization functions)\r\n- protocol.h (for CAddress)\r\n- uint256.h (for uint256)\r\n- vector (for std::vector)\r\n- utility (for std::pair)\r\n- set (for std::set)\r\n- optional (for std::optional)",
      "commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "created_at" : "2021-09-22T12:38:44Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>\n+#include <unordered_map>\n+#include <unordered_set>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713897836",
      "id" : 713897836,
      "line" : 12,
      "node_id" : "PRRC_kwDOABII584qjTds",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 12,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/addrman_impl.h",
      "position" : 12,
      "pull_request_review_id" : 760789697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-22T12:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713897836",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713899748"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713899748"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also include streams.h",
      "commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "created_at" : "2021-09-22T12:41:01Z",
      "diff_hunk" : "@@ -6,94 +6,19 @@\n #ifndef BITCOIN_ADDRMAN_H\n #define BITCOIN_ADDRMAN_H\n \n-#include <fs.h>\n-#include <logging.h>\n #include <netaddress.h>\n #include <protocol.h>\n-#include <sync.h>\n #include <timedata.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713899748",
      "id" : 713899748,
      "line" : 11,
      "node_id" : "PRRC_kwDOABII584qjT7k",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 11,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 9,
      "pull_request_review_id" : 760789697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-22T12:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713899748",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714350992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714350992"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "bb22a365c85f76537aba61c36277fa49d68d5c9f",
      "created_at" : "2021-09-22T22:20:48Z",
      "diff_hunk" : "@@ -123,290 +48,63 @@ class CAddrInfo : public CAddress\n  *    * Several indexes are kept for high performance. Setting m_consistency_check_ratio with the -checkaddrman\n  *      configuration option will introduce (expensive) consistency checks for the entire data structure.\n  */\n-\n-/** Total number of buckets for tried addresses */\n-static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n-static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n-\n-/** Total number of buckets for new addresses */\n-static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n-static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n-\n-/** Maximum allowed number of entries in buckets for new and tried addresses */\n-static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n-static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n-\n-/**\n- * Stochastical (IP) address manager\n- */\n-class CAddrMan\n+class AddrManImpl;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714350992",
      "id" : 714350992,
      "in_reply_to_id" : 713849263,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584qlCGQ",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 51,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 761457568,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-22T22:20:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714350992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351114"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351114"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree, updated",
      "commit_id" : "bb22a365c85f76537aba61c36277fa49d68d5c9f",
      "created_at" : "2021-09-22T22:21:01Z",
      "diff_hunk" : "@@ -1004,16 +984,187 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     // If id_new not found in mapInfo remove it from m_tried_collisions\n     if (mapInfo.count(id_new) != 1) {\n         m_tried_collisions.erase(it);\n-        return CAddrInfo();\n+        return {};\n     }\n \n-    const CAddrInfo& newInfo = mapInfo[id_new];\n+    const AddrInfo& newInfo = mapInfo[id_new];\n \n     // which tried bucket to move the entry to\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);\n     int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n \n-    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+    auto info_old = mapInfo[vvTried[tried_bucket][tried_bucket_pos]];\n+    return {info_old, info_old.nLastTry};\n+}\n+\n+// explicit instantiation\n+template void AddrMan::Serialize(CHashWriter& s) const;\n+template void AddrMan::Serialize(CAutoFile& s) const;\n+template void AddrMan::Serialize(CDataStream& s) const;\n+template void AddrMan::Unserialize(CAutoFile& s);\n+template void AddrMan::Unserialize(CHashVerifier<CAutoFile>& s);\n+template void AddrMan::Unserialize(CDataStream& s);\n+template void AddrMan::Unserialize(CHashVerifier<CDataStream>& s);\n+\n+template <typename Stream>\n+void AddrMan::Serialize(Stream& s_) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351114",
      "id" : 714351114,
      "in_reply_to_id" : 713887633,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584qlCIK",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 1010,
      "original_position" : 546,
      "original_start_line" : null,
      "path" : "src/addrman.cpp",
      "position" : null,
      "pull_request_review_id" : 761457672,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-22T22:21:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351114",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351625"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351625"
         }
      },
      "author_association" : "MEMBER",
      "body" : "sounds good, added commit 5a8415750cdc93b719a8e4c18ee245e236b93006 to handle that ",
      "commit_id" : "bb22a365c85f76537aba61c36277fa49d68d5c9f",
      "created_at" : "2021-09-22T22:22:17Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>\n+#include <unordered_map>\n+#include <unordered_set>\n+\n+/** Total number of buckets for tried addresses */\n+static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n+static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n+/** Total number of buckets for new addresses */\n+static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n+static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n+/** Maximum allowed number of entries in buckets for new and tried addresses */\n+static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n+static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n+\n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class AddrInfo : public CAddress\n+{\n+public:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};\n+\n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt{0};\n+\n+    //! where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    //! last successful connection by us\n+    int64_t nLastSuccess{0};\n+\n+    //! connection attempts since last successful attempt\n+    int nAttempts{0};\n+\n+    //! reference count in new sets (memory only)\n+    int nRefCount{0};\n+\n+    //! in tried set? (memory only)\n+    bool fInTried{false};\n+\n+    //! position in vRandom\n+    mutable int nRandomPos{-1};\n+\n+    SERIALIZE_METHODS(AddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+    }\n+\n+    AddrInfo(const CAddress& addrIn, const CNetAddr& addrSource) : CAddress(addrIn), source(addrSource)\n+    {\n+    }\n+\n+    AddrInfo() : CAddress(), source()\n+    {\n+    }\n+\n+    //! Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const uint256& nKey, const std::vector<bool>& asmap) const\n+    {\n+        return GetNewBucket(nKey, source, asmap);\n+    }\n+\n+    //! Calculate in which position of a bucket to store this entry.\n+    int GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const;\n+\n+    //! Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n+\n+    //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n+};\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio)\n+        : insecure_rand{deterministic}\n+        , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n+        , m_consistency_check_ratio{consistency_check_ratio}\n+        , m_asmap{std::move(asmap)}\n+    {\n+        for (auto& bucket : vvNew) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+        for (auto& bucket : vvTried) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+    }\n+\n+    ~AddrManImpl()\n+    {\n+        nKey.SetNull();\n+    }\n+\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    bool Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Good(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Attempt(const CService& addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> Select(bool newOnly = false) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Connected(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void SetServices(const CService& addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    const std::vector<bool>& GetAsmap() const;\n+\n+    friend class AddrManTest;\n+    friend class AddrManDeterministic;\n+\n+private:\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n+\n+    //! Source of random numbers for randomization in inner loops\n+    mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n+\n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n+    //! Serialization versions.\n+    enum Format : uint8_t {\n+        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n+        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n+        V2_ASMAP = 2,         //!< for files including asmap version\n+        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n+    };\n+\n+    //! The maximum format this software knows it can unserialize. Also, we always serialize\n+    //! in this format.\n+    //! The format (first byte in the serialized stream) can be higher than this and\n+    //! still this software may be able to unserialize the file - if the second byte\n+    //! (see `lowest_compatible` in `Unserialize()`) is less or equal to this.\n+    static constexpr Format FILE_FORMAT = Format::V3_BIP155;\n+\n+    //! The initial value of a field that is incremented every time an incompatible format\n+    //! change is made (such that old software versions would not be able to parse and\n+    //! understand the new file format). This is 32 because we overtook the \"key size\"\n+    //! field which was 32 historically.\n+    //! @note Don't increment this. Increment `lowest_compatible` in `Serialize()` instead.\n+    static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n+\n+    //! last used nId\n+    int nIdCount GUARDED_BY(cs){0};\n+\n+    //! table with information about all nIds\n+    std::unordered_map<int, AddrInfo> mapInfo GUARDED_BY(cs);\n+\n+    //! find an nId based on its network address\n+    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n+\n+    //! randomly-ordered vector of all nIds\n+    //! This is mutable because it is unobservable outside the class, so any\n+    //! changes to it (even in const methods) are also unobservable.\n+    mutable std::vector<int> vRandom GUARDED_BY(cs);\n+\n+    // number of \"tried\" entries\n+    int nTried GUARDED_BY(cs){0};\n+\n+    //! list of \"tried\" buckets\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! number of (unique) \"new\" entries\n+    int nNew GUARDED_BY(cs){0};\n+\n+    //! list of \"new\" buckets\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! last time Good was called (memory only). Initially set to 1 so that \"never\" is strictly worse.\n+    int64_t nLastGood GUARDED_BY(cs){1};\n+\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n+    /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n+    const int32_t m_consistency_check_ratio;\n+\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the existing records\n+    // would be re-bucketed accordingly.\n+    const std::vector<bool> m_asmap;\n+\n+    //! Find an entry.\n+    AddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Create a new entry and add it to the internal data structures mapInfo, mapAddr and vRandom.\n+    AddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Swap two elements in vRandom.\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Move an entry from the \"new\" table(s) to the \"tried\" table\n+    void MakeTried(AddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Delete an entry. It must not be in tried, and have refcount 0.\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    bool Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> Select_(bool newOnly) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Consistency check, taking into account m_consistency_check_ratio. Will std::abort if an inconsistency is detected.\n+    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Perform consistency check, regardless of m_consistency_check_ratio.\n+    //! @returns an error code or zero.\n+    int ForceCheckAddrman() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /**\n+     * This internal function adds one parameter to the GetAddr wrapper.\n+     *\n+     * @param[out] vAddr         Vector of randomly selected addresses from vRandom.\n+     */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351625",
      "id" : 714351625,
      "in_reply_to_id" : 713891466,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584qlCQJ",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 279,
      "original_position" : 279,
      "original_start_line" : 276,
      "path" : "src/addrman_impl.h",
      "position" : null,
      "pull_request_review_id" : 761458297,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-09-22T22:22:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351625",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351782"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "bb22a365c85f76537aba61c36277fa49d68d5c9f",
      "created_at" : "2021-09-22T22:22:35Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351782",
      "id" : 714351782,
      "in_reply_to_id" : 713892970,
      "line" : 12,
      "node_id" : "PRRC_kwDOABII584qlCSm",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 12,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/addrman_impl.h",
      "position" : 12,
      "pull_request_review_id" : 761458475,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-22T22:22:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351782",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714352065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714352065"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "bb22a365c85f76537aba61c36277fa49d68d5c9f",
      "created_at" : "2021-09-22T22:23:27Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>\n+#include <unordered_map>\n+#include <unordered_set>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714352065",
      "id" : 714352065,
      "in_reply_to_id" : 713897836,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII584qlCXB",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 19,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/addrman_impl.h",
      "position" : 19,
      "pull_request_review_id" : 761458913,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-22T22:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714352065",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714352157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714352157"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "bb22a365c85f76537aba61c36277fa49d68d5c9f",
      "created_at" : "2021-09-22T22:23:40Z",
      "diff_hunk" : "@@ -6,94 +6,19 @@\n #ifndef BITCOIN_ADDRMAN_H\n #define BITCOIN_ADDRMAN_H\n \n-#include <fs.h>\n-#include <logging.h>\n #include <netaddress.h>\n #include <protocol.h>\n-#include <sync.h>\n #include <timedata.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714352157",
      "id" : 714352157,
      "in_reply_to_id" : 713899748,
      "line" : 12,
      "node_id" : "PRRC_kwDOABII584qlCYd",
      "original_commit_id" : "11926b09935f491c33b611f1a112a800377a481a",
      "original_line" : 12,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 10,
      "pull_request_review_id" : 761459023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-22T22:23:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714352157",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "thanks for the review @jnewbery. I took all your suggestions except for this one that I have a question about-\r\n\r\n> In commit scripted-diff: Rename CAddrMan to AddrMan, is there a reason not to use git grep -l CAddrMan?\r\n\r\nI was trying this out, but am unsure how to exclude release notes. This is what I have so far, any suggestions? `git grep -l CAddrMan | xargs sed -i 's/CAddrMan/AddrMan/g'`\r\n\r\nalso, thank you for the feedback about commit breakdown. I hope its all straightened out now :) ",
      "created_at" : "2021-09-22T22:24:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-925372937",
      "id" : 925372937,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII5843KBIJ",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-22T22:24:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925372937",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "If this is being done in the name of compilation performance, do you have any measurements justifying the change?",
      "created_at" : "2021-09-22T23:39:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-925404222",
      "id" : 925404222,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
      "node_id" : "IC_kwDOABII5843KIw-",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-22T23:39:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925404222",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
