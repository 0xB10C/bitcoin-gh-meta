{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "**See first #18987 and #18988 for code PoCs**\r\n\r\nCurrent networking approach suffers from a wide range of issues with regards to [transaction origin inference](https://github.com/bitcoin/bips/blob/master/bip-0156.mediawiki), counter-measures against [key infrastructure attackers](https://www.comp.nus.edu.sg/~kangms/papers/erebus-attack.pdf), [harder security assumptions](https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-December/002369.html) of higher-level protocols. Being heavily optimized and at same time trying to solve diverse goals a reasonable network security , tx-relay privacy, hindering block-topology, peer diversity, ... actual networking stack is likely limited to address aforementioned issues without [compromising](https://github.com/bitcoin/bitcoin/pull/17332) its [robustness](https://bitcoin.stackexchange.com/questions/81503/what-is-the-tradeoff-between-privacy-and-implementation-complexity-of-dandelion/81504#81504).\r\n\r\nIdeally you want to address thorougher scenarios like an exchange receiving headers-over-DNS to detect tip pinning. Or a conscientious user always relying on tx-over-radio for each of its coins sends. You can also think to a LN hub willingly to use a HTTPS connection to a block explorer for emergency tx broadcast. Or a SPV wallet receiving filters-headers-over-obfs4 to defeat local Internet censorship. Of course, you can still rely on external modules or project, but better integrating them with Core may ease deployment and combine them for increased benefits.\r\n\r\nCombining may make sense with regards to:\r\n* Solving _first-hop transaction relay_ by easing identityless broadcast as a best-practice through wireless communications or anonymous network without relying only on one of them\r\n* Increasing _block mesh distribution_, if you have few power users receiving block from space or long-range radios and beaming them through any link to geographical-near other full-nodes you may increase considerably network security in face of network infrastructure disruption\r\n* Reactive behavior for LN node, you may detect an abnormal block delay by receiving headers-over-LN and use any link available to close your channels\r\n\r\nAnd you still do have to encompass a lot of variables, like _user capacities_, _disruption length_, _user block-time sensitiveness_, _disruption amplitude_, _information leakage_. Building a clear model to cover everything is hard, even if there is few [attempt](https://stanford2017.scalingbitcoin.org/files/Day2/Weak-Signal-Radio-Communications-for-Bitcoin-Network-Resilience.pdf). And there is likely trade-off, urgency filter-headers fetching from centralized service may solve your eclipsing at the cost of privacy.\r\n\r\nMinding these, introducing an alternative networking stack as PoC'ed in XXX may be a long-term solution. While designing such stack, minding per-user requirement, technical capabilities and unknown real-world topology, flexibility and modularity should be end-goals. A generic \"drivers\" framework abstracting every link oddities seems interesting to explore. Such drivers activation should never be the default to avoid any massive topology modification and be well-documented to let user pick up what suits its needs. If we have a robust, fail-safe higher half in the codebase, in the meanwhile drivers codes may rely on another repo like under bitcoin-core to avoid painful review process.\r\n\r\nIt may be objected that with regards to anonymity and network censorship-resistant we may rely on Tor work a) Tor DoS is [something](https://giia.cs.georgetown.edu/~tavish/pointbreak-usenix-sec2019.pdf) b) bridges dissemination may not suit bitcoin security assumptions c) they don't seem to explore wireless communications d) we may still reuse pluggable transports like Snowflake or meek without forcing to pas through monitorable exit nodes.\r\n\r\nIf such proposal is evaluated as worthy for the project, there is a lot of design issues to address, like Rust vs CPP, architecture integration (new threads vs new process), fanciness of new fetching logic, how to avoid a review iceberg like https://github.com/bitcoin/bitcoin/pull/17376 as a first step but instead privileging incremental steps, how drivers devs may contribute tto the project without understanding of other components and therefore experiment smoother with protocol unique flow semantic...\r\n\r\nSuch subject is hard to encompass so it's likely there is a lot of aspects not raised here, so I'm eager of people feedbacks.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18989/comments",
   "created_at" : "2020-05-16T10:50:09Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18989/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/18989",
   "id" : 619442481,
   "labels" : [
      {
         "color" : "7cf575",
         "default" : false,
         "description" : null,
         "id" : 64583,
         "name" : "Feature",
         "node_id" : "MDU6TGFiZWw2NDU4Mw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature"
      },
      {
         "color" : "006b75",
         "default" : false,
         "description" : null,
         "id" : 98298007,
         "name" : "P2P",
         "node_id" : "MDU6TGFiZWw5ODI5ODAwNw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18989/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU2MTk0NDI0ODE=",
   "number" : 18989,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Towards alternative transports first-class support",
   "updated_at" : "2020-05-16T11:18:05Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18989",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
      "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
      "followers_url" : "https://api.github.com/users/ariard/followers",
      "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/ariard",
      "id" : 23310655,
      "login" : "ariard",
      "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
      "organizations_url" : "https://api.github.com/users/ariard/orgs",
      "received_events_url" : "https://api.github.com/users/ariard/received_events",
      "repos_url" : "https://api.github.com/users/ariard/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/ariard"
   }
}
