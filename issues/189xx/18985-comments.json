[
   {
      "author_association" : "MEMBER",
      "body" : "Do you have a good way to quantify the impact of this change? That would be interesting to see :)",
      "created_at" : "2020-05-16T06:05:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-629594527",
      "id" : 629594527,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTU5NDUyNw==",
      "updated_at" : "2020-05-16T06:14:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629594527",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19601 (Refactoring CHashWriter & Get{Prevouts,Sequence,Outputs}Hash to SHA256 (Alternative to #18071) by JeremyRubin)\n* #19326 (Simplify hash.h interface using Spans by sipa)\n* #19107 (p2p: Move all header verification into the network layer, extend logging by troygiorshev)\n* #18071 (Refactoring CHashWriter & Get{Prevouts,Sequence,Outputs}Hash to SHA256 by JeremyRubin)\n* #17977 (Implement BIP 340-342 validation (Schnorr/taproot/tapscript) by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-05-16T08:32:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-629609551",
      "id" : 629609551,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTYwOTU1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-31T05:38:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629609551",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift this is something I want to do once I figure out how to use the benchmarking suite. This one might be nontrivial though since it's networking code. I might just do the benchmarking in #18849 to start.\r\n\r\nOne piece of data that I can show here is the number of allocations before and after which I'll do",
      "created_at" : "2020-05-16T14:24:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-629653971",
      "id" : 629653971,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTY1Mzk3MQ==",
      "updated_at" : "2020-05-16T16:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629653971",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, I think this is the right approach. In general I think that most functions that take either a const vector/prevector as input, or begin/end pointer, or a begin pointer + size, should be replaced with versions that just take in a Span.\r\n\r\nIt would be worthwhile to make `uint256` amendable to the range Span constructor. I think all you'd need is rename the data field to m_data, and then add a data() member function that does the same as begin().\r\n\r\nNit: uint256 is not a vector internally, but an array.",
      "created_at" : "2020-05-16T20:48:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-629703864",
      "id" : 629703864,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTcwMzg2NA==",
      "updated_at" : "2020-05-16T20:52:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629703864",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've noticed that we consistently pass `Span` by const-ref instead of by value in the project (this PR follows that convention): is that an intentional choice? Just curious :)\r\n\r\n```\r\n$ git grep -E '\\([^(]*Span<.*>[^)]*\\)' \":(exclude)src/span.h\"\r\nsrc/script/descriptor.cpp:std::string DescriptorChecksum(const Span<const char>& span)\r\nsrc/script/descriptor.cpp:NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out, std::string& error)\r\nsrc/script/descriptor.cpp:std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\r\nsrc/script/descriptor.cpp:std::unique_ptr<PubkeyProvider> ParsePubkey(uint32_t key_exp_index, const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\r\nsrc/script/descriptor.cpp:std::unique_ptr<DescriptorImpl> ParseScript(uint32_t key_exp_index, Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\r\nsrc/script/descriptor.cpp:bool CheckChecksum(Span<const char>& sp, bool require_checksum, std::string& error, std::string* out_checksum = nullptr)\r\nsrc/script/interpreter.cpp:static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)\r\nsrc/serialize.h:template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }\r\nsrc/serialize.h:template<typename Stream> inline void Serialize(Stream& s, const Span<unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }\r\nsrc/serialize.h:template<typename Stream> inline void Unserialize(Stream& s, Span<unsigned char>& span) { s.read(CharCast(span.data()), span.size()); }\r\nsrc/test/util_tests.cpp:static std::string SpanToStr(Span<const char>& span)\r\nsrc/util/spanparsing.cpp:bool Const(const std::string& str, Span<const char>& sp)\r\nsrc/util/spanparsing.cpp:bool Func(const std::string& str, Span<const char>& sp)\r\nsrc/util/spanparsing.cpp:Span<const char> Expr(Span<const char>& sp)\r\nsrc/util/spanparsing.cpp:std::vector<Span<const char>> Split(const Span<const char>& sp, char sep)\r\nsrc/util/spanparsing.h:bool Const(const std::string& str, Span<const char>& sp);\r\nsrc/util/spanparsing.h:bool Func(const std::string& str, Span<const char>& sp);\r\nsrc/util/spanparsing.h:Span<const char> Expr(Span<const char>& sp);\r\nsrc/util/spanparsing.h:std::vector<Span<const char>> Split(const Span<const char>& sp, char sep);\r\n```",
      "created_at" : "2020-05-16T22:13:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-629712670",
      "id" : 629712670,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTcxMjY3MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-05-17T05:22:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629712670",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-08-03T16:26:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-668116420",
      "id" : 668116420,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2ODExNjQyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-03T16:26:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668116420",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Will review as soon as this is rebased.\r\n\r\n> I've noticed that we consistently pass Span by const-ref instead of by value in the project (this PR follows that convention): is that an intentional choice? Just curious :)\r\n\r\n@practicalswift: Good point. I guess seen from a performance perspective it doesn't really make a difference, considering how lightweight spans are. In any case I agree that we should agree on one passing type and use it consistently in the code-base (my personal preference would be to always pass it by value, though).",
      "created_at" : "2020-08-11T21:44:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-672294728",
      "id" : 672294728,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MjI5NDcyOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-11T21:44:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672294728",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sebastian Falbesoner <notifications@github.com> writes:\n> Concept ACK. Will review as soon as this is rebased.\n>\n>> I've noticed that we consistently pass Span by const-ref instead of\n>> by value in the project (this PR follows that convention): is that an\n>> intentional choice? Just curious :)\n>\n> @practicalswift: Good point. I guess seen from a performance\n> perspective it doesn't really make a difference, considering how\n> lightweight spans are. In any case I agree that we should agree on one\n> passing type and use it consistently in the code-base (my personal\n> preference would be to always pass it by value, though).\n\nIt looks like they are being passed by value in other PRs, I don't mind\nswitching to that style here.\n",
      "created_at" : "2020-08-11T23:22:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-672351980",
      "id" : 672351980,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MjM1MTk4MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-11T23:22:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672351980",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@theStack @jb55 FWIW, throughout the C++ Core Guidelines `span` is consistently passed by value, and the following is said about it:\r\n\r\n> Note: A `span<T>` object does not own its elements and is so small that it can be passed by value.\r\nPassing a `span` object as an argument is exactly as efficient as passing a pair of pointer arguments or passing a pointer and an integer count. ([F.24](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f24-use-a-spant-or-a-span_pt-to-designate-a-half-open-sequence))\r\n\r\nSame goes for `en.cppreference.com` FWIW.",
      "created_at" : "2020-08-12T09:41:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-672769541",
      "id" : 672769541,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3Mjc2OTU0MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-12T09:42:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672769541",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "rebased and switched from `const Span<const unsigned char>&` style to `Span<const unsigned char>`",
      "created_at" : "2020-08-14T16:18:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-674152101",
      "id" : 674152101,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDE1MjEwMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-14T16:18:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674152101",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18985#discussion_r470974869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18985"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470974869"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could simply use the recently introduced `MakeUCharSpan()` helper here and on other occurences of the commit.",
      "commit_id" : "1466b656625b3896176d3aa6f794d1d8d0f7c3e0",
      "created_at" : "2020-08-15T12:51:58Z",
      "diff_hunk" : "@@ -59,17 +59,15 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    insert(data);\n+    insert(Span<const unsigned char>((const unsigned char*)stream.data(), stream.size()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#discussion_r470974869",
      "id" : 470974869,
      "line" : 62,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk3NDg2OQ==",
      "original_commit_id" : "1466b656625b3896176d3aa6f794d1d8d0f7c3e0",
      "original_line" : 62,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/bloom.cpp",
      "position" : 22,
      "pull_request_review_id" : 467970109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18985",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-15T12:51:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470974869",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sebastian Falbesoner <notifications@github.com> writes:\n> Could simply use the recently introduced `MakeUCharSpan()` helper here and on other occurences of the commit.\n\noh nice, I didn't know that was a thing. I'll do that.\n",
      "created_at" : "2020-08-17T00:37:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-674601507",
      "id" : 674601507,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDYwMTUwNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T00:37:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674601507",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "pushed 897f5be28c072c700a55a511bf0a88efc3b71602\r\n\r\n`git diff 1466b656625b3896176d3aa6f794d1d8d0f7c3e0 897f5be28c072c700a55a511bf0a88efc3b71602`\r\n\r\nmuch cleaner ð¤©\r\n\r\n```diff\r\ndiff --git a/src/bloom.cpp b/src/bloom.cpp\r\nindex 436e913aa5..c19d6e7d7d 100644\r\n--- a/src/bloom.cpp\r\n+++ b/src/bloom.cpp\r\n@@ -59,12 +59,12 @@ void CBloomFilter::insert(const COutPoint& outpoint)\r\n {\r\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\r\n     stream << outpoint;\r\n-    insert(Span<const unsigned char>((const unsigned char*)stream.data(), stream.size()));\r\n+    insert(MakeUCharSpan(stream));\r\n }\r\n \r\n void CBloomFilter::insert(const uint256& hash)\r\n {\r\n-    insert(Span<const unsigned char>(hash.begin(), hash.end()));\r\n+    insert(MakeUCharSpan(hash));\r\n }\r\n \r\n bool CBloomFilter::contains(Span<const unsigned char> vKey) const\r\n@@ -85,13 +85,12 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\r\n {\r\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\r\n     stream << outpoint;\r\n-    return contains(Span<const unsigned char>((const unsigned char*)stream.data(),\r\n-        stream.size()));\r\n+    return contains(MakeUCharSpan(stream));\r\n }\r\n \r\n bool CBloomFilter::contains(const uint256& hash) const\r\n {\r\n-    return contains(Span<const unsigned char>(hash.begin(), hash.end()));\r\n+    return contains(MakeUCharSpan(hash));\r\n }\r\n \r\n bool CBloomFilter::IsWithinSizeConstraints() const\r\n@@ -241,7 +240,7 @@ void CRollingBloomFilter::insert(Span<const unsigned char> vKey)\r\n \r\n void CRollingBloomFilter::insert(const uint256& hash)\r\n {\r\n-    insert(Span<const unsigned char>(hash.begin(), hash.end()));\r\n+    insert(MakeUCharSpan(hash));\r\n }\r\n \r\n bool CRollingBloomFilter::contains(Span<const unsigned char> vKey) const\r\n@@ -260,7 +259,7 @@ bool CRollingBloomFilter::contains(Span<const unsigned char> vKey) const\r\n \r\n bool CRollingBloomFilter::contains(const uint256& hash) const\r\n {\r\n-    return contains(Span<const unsigned char>(hash.begin(), hash.end()));\r\n+    return contains(MakeUCharSpan(hash));\r\n }\r\n \r\n void CRollingBloomFilter::reset()\r\ndiff --git a/src/test/bloom_tests.cpp b/src/test/bloom_tests.cpp\r\nindex 1ad5607429..9cf6e352e4 100644\r\n--- a/src/test/bloom_tests.cpp\r\n+++ b/src/test/bloom_tests.cpp\r\n@@ -91,7 +91,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\r\n     CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);\r\n     filter.insert(vchPubKey);\r\n     uint160 hash = pubkey.GetID();\r\n-    filter.insert(Span<unsigned char>(hash.begin(), hash.end()));\r\n+    filter.insert(MakeUCharSpan(hash));\r\n \r\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\r\n     stream << filter;\r\n```",
      "created_at" : "2020-08-17T15:21:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-674945434",
      "id" : 674945434,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18985",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDk0NTQzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T15:21:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674945434",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   }
]
