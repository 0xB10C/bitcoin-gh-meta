[
   {
      "author_association" : "MEMBER",
      "body" : "This is something I'm actively working on.\r\n\r\nBefore we can move to a new datbase, we need to cleanup and refactor our database handling code. It's really convoluted right now and not well encapsulated.",
      "created_at" : "2020-05-08T16:37:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-625902438",
      "id" : 625902438,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTkwMjQzOA==",
      "updated_at" : "2020-05-08T16:37:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625902438",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> This is something I'm actively working on.\r\n> \r\n> Before we can move to a new datbase, we need to cleanup and refactor our database handling code. It's really convoluted right now and not well encapsulated.\r\n\r\nThis is great! On the code cleanup, I'd be curious to know what some ideas are there, and in particular if you think a change like #18608, specifically the `walletdb.h` / `walletdb.cpp` changes there goes in the right direction or wrong direction. (You can ignore the discussion in that PR where I lose my sanity arguing with luke ð ).\r\n\r\nI think the originally intended structure where `db.h` / `db.cpp` provides an API for reading and writing key value blobs, and `walletdb.h` / `walletdb.cpp` handles turning higher types like\r\nCKeyMetadata, CPubKey, CKeyMetadata, CMasterKey, CWalletTx, CTxDestination into blobs on behalf of wallet application code is a sane basic structure, that we're not just following very well right now. The startup / verify / recovery code is probably the worst of it.\r\n\r\nThis is just one model though. Another type of model I could think of (not pushing for it) is one where instead of the data layer only handling persistent storage, and application code indexing its own state in memory, the data layer handles persistent storage and memory, and the wallet code queries and writes information to that.",
      "created_at" : "2020-05-08T18:10:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-625946139",
      "id" : 625946139,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTk0NjEzOQ==",
      "updated_at" : "2020-05-08T18:10:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625946139",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> This is great! On the code cleanup, I'd be curious to know what some ideas are there, and in particular if you think a change like #18608, specifically the `walletdb.h` / `walletdb.cpp` changes there goes in the right direction or wrong direction. (You can ignore the discussion in that PR where I lose my sanity arguing with luke grin ).\r\n\r\nI think its in the right direction, but that's also an application level change that is orthogonal to what I'd like to do.\r\n\r\n> I think the originally intended structure where `db.h` / `db.cpp` provides an API for reading and writing key value blobs, and `walletdb.h` / `walletdb.cpp` handles turning higher types like\r\n> CKeyMetadata, CPubKey, CKeyMetadata, CMasterKey, CWalletTx, CTxDestination into blobs on behalf of wallet application code is a sane basic structure, that we're not just following very well right now. The startup / verify / recovery code is probably the worst of it.\r\n\r\nIndeed. I'd like to move towards that. I have some notes on the startup/verify/recovery stuff: https://gist.github.com/achow101/cda3ea1bb07f585e56caaf969e842188 and how I would like to change it (most of that is just me trying to follow how it all works).\r\n",
      "created_at" : "2020-05-08T18:43:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-625959905",
      "id" : 625959905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTk1OTkwNQ==",
      "updated_at" : "2020-05-08T18:43:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625959905",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Indeed. I'd like to move towards that. I have some notes on the startup/verify/recovery stuff: https://gist.github.com/achow101/cda3ea1bb07f585e56caaf969e842188 and how I would like to change it (most of that is just me trying to follow how it all works).\r\n\r\nWow, I love this! Description of current code was surprisingly fun to read, and in your plans I see you're focusing on the blob storage layer so #18608 is orthogonal. Only feedback on the gist is I'm not sure what you get out of combining the Database & Batch classes (obviously the Environment class is a Berkeley specific detail and should go away or be hidden in the bdb implementation). But I guess having just Database objects without Batch objects is not a problem, as nothing in the wallet really relies on atomic writes.",
      "created_at" : "2020-05-08T18:57:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-625966327",
      "id" : 625966327,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTk2NjMyNw==",
      "updated_at" : "2020-05-08T18:57:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625966327",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Only feedback on the gist is I'm not sure what you get out of combining the Database & Batch classes\r\n\r\nThe goal is to kind of emulate the typical database api where reads and writes are functions of the database. Essentially just to have it be a wrapper around `Db` for now. But what we have now with Database kind of doesn't make sense. Batch uses the `Db` from Database. It's the one that opens and closes it for some reason. It also calls private functions in Database. So what we have now kind of feels like the same class anyways.",
      "created_at" : "2020-05-08T20:15:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-625999265",
      "id" : 625999265,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTk5OTI2NQ==",
      "updated_at" : "2020-05-08T20:15:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625999265",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes current code is a little unusual because Batch doesn't just do a transaction, but actually opens and closes the db object.\r\n\r\n> The goal is to kind of emulate the typical database api where reads and writes are functions of the database.\r\n\r\nIt is pretty normal part of database APIs to have one object connecting to the database, and a different object doing reads and writes and fancier things like creating transactions and batching operations. E.g. in the sqlite python API you have [connection and cursor](https://docs.python.org/3/library/sqlite3.html) objects, and in the sqlite C API you have [connection and statement](https://www.sqlite.org/cintro.html) objects.\r\n\r\nBut that's just explaining my reaction, no need to overthink this",
      "created_at" : "2020-05-08T20:35:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-626008768",
      "id" : 626008768,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNjAwODc2OA==",
      "updated_at" : "2020-05-08T20:35:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626008768",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "There was discussion in yesterdays IRC wallet meeting about Sqlite vs. Berkeley DB, forward and backwards compatibility, whether dead projects are good, etc: http://www.erisian.com.au/meetbot/bitcoin-core-dev/2020/bitcoin-core-dev.2020-05-08-19.00.log.html",
      "created_at" : "2020-05-09T09:42:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-626138328",
      "id" : 626138328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNjEzODMyOA==",
      "updated_at" : "2020-05-09T09:42:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626138328",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> There was discussion in yesterdays IRC wallet meeting about Sqlite vs. Berkeley DB, forward and backwards compatibility, whether dead projects are good, etc: http://www.erisian.com.au/meetbot/bitcoin-core-dev/2020/bitcoin-core-dev.2020-05-08-19.00.log.html\r\n\r\n@Sjors, perhaps add that link to the PR description, as well as http://www.erisian.com.au/bitcoin-core-dev/log-2020-05-05.html#l-100",
      "created_at" : "2020-05-09T12:37:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-626169721",
      "id" : 626169721,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNjE2OTcyMQ==",
      "updated_at" : "2020-05-09T12:37:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626169721",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "None of the \"arguments in favor\" listed in the opener (or, seemingly, in the discussion on IRC) there seem to be \"arguments in favor\". They're more like \"if bdb is causing issues, this is a good alternative because its designed more for our use-case\". Of course, that is predicated on BDB causing issues. I'm not sure that the existing issues that we've seemingly pretty much fully worked around are worth the legwork to switch? What am I missing?",
      "created_at" : "2020-05-10T00:47:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-626255384",
      "id" : 626255384,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNjI1NTM4NA==",
      "updated_at" : "2020-05-10T00:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626255384",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The current model is to load the entire contents of the wallet database into memory on load. Supporting sqlite only really makes sense if this model is changed. However it doesn't seem likely to me that performance can be held anywhere near close to current if we're actively querying a sqlite database.\r\n\r\nI can't find it now but there was an issue opened about using an append only journal file for the wallet database.  That seems to match our usage much better than sqlite does.",
      "created_at" : "2020-05-10T15:39:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-626346669",
      "id" : 626346669,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNjM0NjY2OQ==",
      "updated_at" : "2020-05-10T15:39:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626346669",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/620611?v=4",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "node_id" : "MDQ6VXNlcjYyMDYxMQ==",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> None of the \"arguments in favor\" listed in the opener (or, seemingly, in the discussion on IRC) there seem to be \"arguments in favor\". They're more like \"if bdb is causing issues, this is a good alternative because its designed more for our use-case\". Of course, that is predicated on BDB causing issues. I'm not sure that the existing issues that we've seemingly pretty much fully worked around are worth the legwork to switch? What am I missing?\r\n\r\nI would agree if this was just brought up without other wallet changes occurring simultaneously.\r\n\r\nThe reason I had originally suggested this on IRC recently was because we had recently merged descriptor wallets. My idea was to introduce a new storage database along with descriptor wallets for descriptor wallets only. The reason is that changing BDB for something else is something that we had been wanting to do for a while. It seemed reasonable to me to do this at the same time we introduced a wholly new, backwards incompatible wallet feature like descriptor wallets. So what I had wanted was this to be for descriptor wallets only to go along with the fact that descriptor wallets were completely new.\r\n\r\n> The current model is to load the entire contents of the wallet database into memory on load. Supporting sqlite only really makes sense if this model is changed. However it doesn't seem likely to me that performance can be held anywhere near close to current if we're actively querying a sqlite database.\r\n\r\nI would like for us to use some features provided by sqlite and relational databases in general. Not initially, but in the future.\r\n\r\n> I can't find it now but there was an issue opened about using an append only journal file for the wallet database. That seems to match our usage much better than sqlite does.\r\n\r\n#5686 is the previous PR. But I'm not convinced that append only really fits what we do as we don't use the database strictly append only. There are times when things are being rewritten and updated. Additionally I'm not convinced that a homegrown append only format provides enough guarantees of consistency and non-corruption. And I couldn't find any such database in existence already.",
      "created_at" : "2020-05-11T16:58:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-626825638",
      "id" : 626825638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNjgyNTYzOA==",
      "updated_at" : "2020-05-11T16:58:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626825638",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The reason is that changing BDB for something else is something that we had been wanting to do for a while\r\n\r\nIt is? Why? Its come up, but never with any real justification that I've seen. Only \"wouldnt it be nice\". There doesn't appear to be a feature that we want from a non-BDB database, nor any issues we've having with BDB. Its not like we can drop the BDB dependency, either, given we'd need to be able to load old wallets, so its just yet another thing.",
      "created_at" : "2020-05-21T19:20:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-632295186",
      "id" : 632295186,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjI5NTE4Ng==",
      "updated_at" : "2020-05-21T19:21:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632295186",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Some old historical info,\r\nMailing list thread: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011604.html\r\nCode reference: https://github.com/jgarzik/bitcoin/tree/2015_sqlite\r\n\r\nIt's not addressing the same goals as this issue, but worth including for background.\r\n\r\nWith regards to BDB dependency, technically it can be dropped from the main binary via a conversion tool, possibly even the repo, if the tool is in a separate repo.   Regardless, @TheBlueMatt 's point is valid.",
      "created_at" : "2020-05-21T19:28:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-632299532",
      "id" : 632299532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjI5OTUzMg==",
      "updated_at" : "2020-05-21T19:28:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632299532",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it's concerning that the BDB we're using now is 10 years old, and even the latest version we can reasonably support (5.3) is 7 years old. I think that on its own makes it worth considering alternatives.",
      "created_at" : "2020-05-21T19:29:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-632299646",
      "id" : 632299646,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjI5OTY0Ng==",
      "updated_at" : "2020-05-21T19:29:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632299646",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think it's concerning that the BDB we're using now is 10 years old\r\n\r\nI don't entirely disagree, but I also haven't heard of any issues with it? If we were using a bunch of its features like cross-process db use etc or seeing real performance drag from it I might agree, but, to my knowledge, we haven't seen a single issue that appears likely to have been cause by BDB (the possible interaction of log files not being copied with the wallet.dat aside, and we've largely fixed that with constant flushing and wallet folders instead of files).",
      "created_at" : "2020-05-21T19:46:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-632307412",
      "id" : 632307412,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjMwNzQxMg==",
      "updated_at" : "2020-05-21T19:46:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632307412",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It is? Why?\r\n\r\nI think there are three primary reasons to move off of BDB.\r\n\r\n1. It does not fit our use case and there are still some issues with potential corruption and data loss.\r\n\r\nBDB seems to be more designed for large, multithreaded and multiprocess applications with multiple things trying to access the database at once. It isn't designed to be a single portable application file format like we are trying to do with the wallet file. It isn't designed for the idea of having a single file. This means that for us to achieve this goal, we are constantly flushing and have to have workarounds to achieve this goal. It would be better if we could use something that is designed to be a single portable application file format.\r\n\r\nEven with all of the workarounds that we do, there are still some issues with flushing (albeit in very edge cases). An example of this came up in #18844 which tried to bump BDB to 5.3. There, the `feature_backwards_compatibility.py` test was copying a wallet.dat file to be opened in a previous release, but without unloading the wallet file. What happened was that even though we have aggressive flushing, not all the changes were actually being flushed to the wallet.dat file. So the wallet.dat file that was copied didn't actually have the correct data written to it before being loaded into the previous release. Because the log files were not compatible, the logs which contained what had actually been written were being removed so none of the data ended up being persisted and readable by the previous release. This is, of course, data loss and also resulted in the test failing. While this is an edge case that we can't see in a release, it just shows how BDB doesn't fit our usage.\r\n\r\n2. Because we are trying to use it in a way it perhaps wasn't intended to be used, we have tons of workarounds and magic that makes the code developer unfriendly and scary to touch\r\n\r\nFurthermore, the way that we use BDB is very fragile. Changing the implementation would probably result in a regression. This makes it difficult to improve and change things. It's just workarounds on workarounds on workarounds which makes it a scary thing to even consider touching. I don't think we should have stuff like that in the codebase. We shouldn't be have something that a refactor could accidentally introduce a regression that is both hard to test and debug. The complexity of our implementation seems to be largely due to the workarounds that we have in place to try to make BDB do what we want it to do.\r\n\r\nFor example, in trying to refactor the storage code so that we can support other storage backends, I've somehow [caused travis to fail](https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-632235166) even though the refactor shouldn't be changing behavior and is largely a bunch of moves.\r\n\r\n3. It's old, unsupported, and unmaintained.\r\n\r\nSome people argue that this is a good thing because it's a stable API and that moving to something that is maintained would mean we risk having changing APIs and behavior changing unexpectedly. But we can simply pin to a specific version of whatever library and get the same thing. But I think that being able to use up to date and maintained versions of a library is a good thing. The fact that BDB 4.8 is now over 10 years old should itself be something to consider. Additionally, we have to apply patches to BDB just to make it compile in the depends system with C++11. I can only imagine that this will get worse as C++ and compilers change. I would rather we use a library that has the requisite changes to work with modern libraries and has had testing to ensure that the behavior is still the same.\r\n\r\n***\r\n\r\nAs for why SQLite specifically, it is designed for our use case (application file format is an advertised use case of SQLite) and makes the workarounds that we have had with BDB unnecessary. I've already done most of the implementation of a SQLite storage backend and it's much simpler and easier to follow than the BDB stuff. Because SQLite does not require the use of a database environment like BDB does, and it does not use a shared cache by default, we don't need the workarounds of separate directories and unique fileids that we currently use for BDB. This itself would reduce a lot of complexity.\r\n\r\nBecause SQLite doesn't use a persistent log file, we don't have the issue of users forgetting log files when copying their wallets. The log files that SQLite generates are cleaned up after each transaction. This means that once everything is flushed, it all ends up in the database file, not just in the log file as BDB does. There is additionally no need for force flushing or periodic flushing. This would let us remove a scheduler thread for periodic flushes when we remove BDB. The edge case I mentioned above would no longer be an issue as once SQLite says the data is written, it is actually written to the database file, not the log file. So copying a wallet file while it is still in use, while still not recommended, wouldn't result in data loss.\r\n\r\nAnd of course SQLite is still maintained with the code released in the public domain so Licensing shouldn't be an issue for us as it was with BDB.\r\n\r\n***\r\n\r\nWhile we would still need to keep BDB around for a while after introducing and switching to a new database system, we can still allow for migration without needing to have BDB. I've done some digging into the database file format and it's actually fairly simple. We could implement our own BDB file deserializer and just pull the key/value pairs from the file directly and then import them into whatever new database we use. I've even implemented such a deserializer in python for tests in #18836. So we can still do migrations without needing BDB. BDB would only be necessary if we want to continue allowing people to keep using old wallet files without migrating.",
      "created_at" : "2020-05-21T20:40:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18916#issuecomment-632333834",
      "id" : 632333834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18916",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjMzMzgzNA==",
      "updated_at" : "2020-05-21T20:48:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632333834",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
