[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Exciting stuff but I question the logic of there being a framework just for \"alternatives\". Shouldn't ipv4/6 and onion be one of many drivers with their own capabilities and trustworthiness?\r\n\r\nMore work initially but probably easier maintenance down the road and a guarantee that any type of  smoke signal protocol driver could be a first-class citizen like ip.\r\n\r\nConcept NACK for not being ambitious enough :wink: ",
      "created_at" : "2020-05-16T13:16:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-629644207",
      "id" : 629644207,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTY0NDIwNw==",
      "updated_at" : "2020-05-16T13:16:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629644207",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/762502?v=4",
         "events_url" : "https://api.github.com/users/icota/events{/privacy}",
         "followers_url" : "https://api.github.com/users/icota/followers",
         "following_url" : "https://api.github.com/users/icota/following{/other_user}",
         "gists_url" : "https://api.github.com/users/icota/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/icota",
         "id" : 762502,
         "login" : "icota",
         "node_id" : "MDQ6VXNlcjc2MjUwMg==",
         "organizations_url" : "https://api.github.com/users/icota/orgs",
         "received_events_url" : "https://api.github.com/users/icota/received_events",
         "repos_url" : "https://api.github.com/users/icota/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/icota/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/icota/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/icota"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18354 (Protect wallet by using shared pointers by bvbfan)\n* #16365 (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* #15367 (feature: Added ability for users to add a startup command by benthecarman)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-05-16T17:52:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-629683305",
      "id" : 629683305,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTY4MzMwNQ==",
      "updated_at" : "2020-05-22T20:54:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629683305",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18988#discussion_r426188237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18988"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426188237"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this should be way more disconnected from the existing P2P stack. Accessing anything but validation.h and some utils seems bad.",
      "commit_id" : "3667d18a76f72acf0741a886715b6c9fee40001d",
      "created_at" : "2020-05-16T20:27:48Z",
      "diff_hunk" : "@@ -0,0 +1,76 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ALTNET_H\n+#define BITCOIN_ALTNET_H\n+\n+#include <alt_processing.h>\n+#include <drivers.h>\n+#include <net.h>\n+#include <netmessagemaker.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#discussion_r426188237",
      "id" : 426188237,
      "line" : 12,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4ODIzNw==",
      "original_commit_id" : "3667d18a76f72acf0741a886715b6c9fee40001d",
      "original_line" : 12,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/altnet.h",
      "position" : 12,
      "pull_request_review_id" : 413106295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18988",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-16T20:32:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426188237",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@TheBlueMatt what's about a thread pool for every blocking alternative and a `CDriver::IsReady` when we try to read from it ? Have you in mind other alternative which needs a really specific threading model ? That's a bit more complexity but you may allocate priority to avoid starvation.\r\n\r\nI agree that the `mapNodeState` isn't great and ideally you do want to defer every peer policy to the driver. Reducing state is less error-prone.\r\n\r\n@icota Do you have in mind a different ipv4/ipv6 flow that the one implemented by main net ? Path-aware routing could be cool and definitely something belonging there. ",
      "created_at" : "2020-05-17T00:08:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-629722377",
      "id" : 629722377,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTcyMjM3Nw==",
      "updated_at" : "2020-05-17T00:08:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629722377",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Hello @ariard pluggable alternative transport systems for Bitcoin Core gets a concept ACK from me.\r\n\r\nI wonder if in the future this framework could include some transport prioritisation which might, for example, relay blocks over an internet/Tor connection but attempt to broadcast and relay transactions over Amateur radio/bluetooth (as available) with a new Tor circuit as a fallback, to further obscure a transactions origin.\r\n\r\nIn the case that your node might have a metered main connection e.g. 3G along with a secondary transport mechanism, the same prioritisation might be able to help split bandwidth required between multiple transports simultaneously.\r\n\r\nFor the low bandwidth/metered scenario, I feel this would be an excellent match for the compressed block headers scheme I picked up on in my email [here](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017834.html).",
      "created_at" : "2020-05-18T08:20:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630023966",
      "id" : 630023966,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDAyMzk2Ng==",
      "updated_at" : "2020-05-18T08:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630023966",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I love this concept! I will need some more time to have implementation comments, but will try to think about this in the context of the alt net I'm most familiar with (stateless unlicensed UHF Mesh / goTenna). Some preliminary big picture thoughts:\r\n\r\n 1) should the Watchdog functionality eventually be broken out as its own RFC? even without an altnet transport wouldn't a core wallet also want notification of unusual p2p events?\r\n\r\n 2) Right now core is aware of [ASN buckets](https://bitcoincore.reviews/16702.html), do think different altnet connections could be treated as diverse ASNs?\r\n 2a) Should altnet peers be treated as one ASN, or is there a way to ensure diversity to protect against sybil altnet peers.\r\n\r\n 3) Do you envision a plugin-driver model so that core would support the high level CDriver/Watchdog, but people could plug-in their own low-level implementations? \r\n 3a) In the case of goTenna, we have a low-level C driver that is not open source so would not be appropriate to include in core. Would something like the HWI system make sense for different vender specfic CDriver instances?\r\n\r\n 4) A deeper integration to make altnet peers 1st class peers would be difficult, but if a CNetAddr worked more like a URI then peers could be stored as ip:\\\\ipaddress:port and altnet nodes would look like clightning:\\\\peeraddr and use an altnet CDriver named `clightning`.\r\n 4a) A less invasive approach to 1st class would be that any altnet peer just uses 127.0.0.1:cdriver_port, but all peers can include user configurable transport capabilities.\r\n\r\nGreat work, I'm really excited to try this out.\r\n",
      "created_at" : "2020-05-18T09:53:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630075496",
      "id" : 630075496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDA3NTQ5Ng==",
      "updated_at" : "2020-05-18T09:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630075496",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8568892?v=4",
         "events_url" : "https://api.github.com/users/remyers/events{/privacy}",
         "followers_url" : "https://api.github.com/users/remyers/followers",
         "following_url" : "https://api.github.com/users/remyers/following{/other_user}",
         "gists_url" : "https://api.github.com/users/remyers/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/remyers",
         "id" : 8568892,
         "login" : "remyers",
         "node_id" : "MDQ6VXNlcjg1Njg4OTI=",
         "organizations_url" : "https://api.github.com/users/remyers/orgs",
         "received_events_url" : "https://api.github.com/users/remyers/received_events",
         "repos_url" : "https://api.github.com/users/remyers/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/remyers/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/remyers/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/remyers"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, but I am wondering if some of this would be better off outside the Bitcoin Core build system. Obviously stuff that can be done with no additional requirements (additional requirements could be a proxy, another daemon or even new hardware like an antenna) and that is a clear benefit to Bitcoin Core can live inside of Bitcoin Core. For example something like the existing `TipMayBeStale` logic.\r\n\r\nHowever, for transports that would pull in additional dependencies, a more flexible approach would be to define a common interface. The drivers could then ask Bitcoin Core for raw validation data and statistics, then reply with new headers or blocks. For example, this could be done over the RPC interface. I haven't thought about all the trade-offs, but it seems beneficial if addons can be attached and removed during run-time as well as being developed independently of the Bitcoin Core development process?",
      "created_at" : "2020-05-18T12:36:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630153460",
      "id" : 630153460,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDE1MzQ2MA==",
      "updated_at" : "2020-05-18T12:36:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630153460",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Hi @willcl-ark,\r\n\r\n> I wonder if in the future this framework could include some transport prioritisation which might, for example, relay blocks over an internet/Tor connection but attempt to broadcast and relay transactions over Amateur radio/bluetooth (as available) with a new Tor circuit as a fallback, to further obscure a transactions origin.\r\n\r\nYes introducing drivers capabilities (`fHeaders`, `fTransaction`, ...) should be seen as primitives to label traffic according to application/user requirements. I can foresee `bitcoin-cli ioctl bluetooth --label=tx,headers`, you're envisioning something like this ?\r\n\r\n> In the case that your node might have a metered main connection e.g. 3G along with a secondary transport mechanism, the same prioritisation might be able to help split bandwidth required between multiple transports simultaneously.\r\n\r\nAh thanks didn't think about this, effectively when bandwidth has been consumed on one device you may want to fallback on another one. I do think bandwidth tracking should be done drivers-side.\r\n\r\n> For the low bandwidth/metered scenario, I feel this would be an excellent match for the compressed block headers scheme I picked up on in my email here.\r\n\r\nYes IIRC compressed block headers in the linked issue (#18989). Clearly that would be easier to innovate on message protocol, like also transaction compression.",
      "created_at" : "2020-05-19T06:48:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630619829",
      "id" : 630619829,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDYxOTgyOQ==",
      "updated_at" : "2020-05-19T06:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630619829",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@remyers \r\n\r\n> should the Watchdog functionality eventually be broken out Do you envision a plugin-driver model so that core would support the high level CDriver/Watchdog, but people could plug-in their own low-level implementations?\r\n3a) In the case of goTenna, we have a low-level C driver that is not open source so would not be appropriate to include in core. Would something like the HWI system make sense for different vender specfic CDriver instances?as its own RFC? even without an altnet transport wouldn't a core wallet also want notification of unusual p2p events?\r\n\r\nYes Watchdog has its own PR (#18987), with a `CWatchdogInterface`. It could be used by any kind of application, including the wallet.\r\n\r\n> Right now core is aware of ASN buckets, do think different altnet connections could be treated as diverse ASNs?\r\n2a) Should altnet peers be treated as one ASN, or is there a way to ensure diversity to protect against sybil altnet peers.\r\n\r\nI would like to avoid dealing with ASN/IP address at all. If you assume wireless communications there is no ASN to deal with, peer discovery and policy should be inside the driver. With regards to peer, you may only need a general way to authenticate them, so maybe some driver method enumerating its hosted peers ?\r\n\r\n> Do you envision a plugin-driver model so that core would support the high level CDriver/Watchdog, but people could plug-in their own low-level implementations?\r\n3a) In the case of goTenna, we have a low-level C driver that is not open source so would not be appropriate to include in core. Would something like the HWI system make sense for different vender specfic CDriver instances?\r\n\r\nI clearly envision a plugin-driver model and exactly core would support the high-level `CDriver/`CWatchdog`/`AtLogicValidation`. I lean to something like HWI and drivers implementations being hosted outside of core, under bitcoin-core/ for the open-sources ones. With regards to proprietary, I don't have opinion, if they bind to the interface that's better for you I guess.\r\n\r\n> A deeper integration to make altnet peers 1st class peers would be difficult, but if a CNetAddr worked more like a URI then peers could be stored as ip:\\ipaddress:port and altnet nodes would look like clightning:\\peeraddr and use an altnet CDriver named clightning.\r\n4a) A less invasive approach to 1st class would be that any altnet peer just uses 127.0.0.1:cdriver_port, but all peers can include user configurable transport capabilities.\r\n\r\nI don't want to interfere with the actual p2p stack. But if what you want to address is user configurable transport capabilities that can be done at the rpc-level and yes something like `bitcoin-cli ioctl Wifi:XXX --label=tx,addr` ?\r\n\r\nThanks for the feedback!",
      "created_at" : "2020-05-19T07:17:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630632988",
      "id" : 630632988,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDYzMjk4OA==",
      "updated_at" : "2020-05-19T07:17:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630632988",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> However, for transports that would pull in additional dependencies, a more flexible approach would be to define a common interface.\r\n\r\nYes that's the idea defining a `CDriver` interface, even if it needs refinement. `drivers/` should be elsewhere and you just keep the fetching logic/interface in Core. I don't think drivers should ask for raw validation data on their own, i.e you may receive your block from actual p2p but want to broadcast it over WiFi. Drivers acting on their own means you poll a lot for nothing due to block variance, and that's what RPC doesn't fit IMO. Haven't thought that much about run-time addition but I completely agree to not encumber Bitcoin Core development process more. You provide a generic framework and drivers devs can work on their own in another repo.",
      "created_at" : "2020-05-19T07:36:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630643033",
      "id" : 630643033,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDY0MzAzMw==",
      "updated_at" : "2020-05-19T07:37:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630643033",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> but I am wondering if some of this would be better off outside the Bitcoin Core build system.\r\n\r\n@MarcoFalke sadly, such a design kicks something out to live in purgatory forever. We've never materially seen any real adoption of \"additional, on the side\" contrib things. Even opt-in configuration is rarely used, let alone something with additional setup requirements. I don't think this carries much value unless its targeting (eventually) being built-in (though not enabled) by default.",
      "created_at" : "2020-05-21T19:24:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-632297532",
      "id" : 632297532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjI5NzUzMg==",
      "updated_at" : "2020-05-21T19:25:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632297532",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @TheBlueMatt what's about a thread pool for every blocking alternative and a CDriver::IsReady when we try to read from it ? Have you in mind other alternative which needs a really specific threading model ? That's a bit more complexity but you may allocate priority to avoid starvation.\r\n\r\nI don't know that the framework even needs to provide any kind of threading? Why not let the applications decide that. Using the net.h stuff like NetMsgType, CBlockLocator, NetMsgMaker and the connection types really limits the utility here. eg radio stuff probably wants to read/write from a tty, not a \"real socket\". Let alone something like DNS which doesn't even have a file descriptor, only a libc call to poll.",
      "created_at" : "2020-05-21T19:27:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-632298835",
      "id" : 632298835,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjI5ODgzNQ==",
      "updated_at" : "2020-05-21T19:27:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632298835",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm starting to look at this and my first impressions are basically the things Matt's saying: that the API for transports can probably be very minimal and not deal with threading, and not interact with (or duplicate and fork) existing net_processing and net code.\r\n\r\nA real anomaly detection implementation, on the other hand, may need to have access to more things, but hopefully that could happen more by passively receiving events than actively looking up state.\r\n\r\nI think the writeups in #18987, #18988, #18989 provide a good description of the features this is trying to support, and the PR code provides a good proof or concept and sketch of design. But one thing that's missing and would be nice would be a plan for how this might be rolled out. I'm assuming we wouldn't add a new framework before anything was using it, and I know Matt has already implemented a lot of things that could use this framework. So it'd be great if there was a writeup (or outline like the [assumeutxo plan](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal#plan)) saying what the steps could be for rolling this out, and linking to Matt's implementations, and saying how things could be integrated. The [dev wiki](https://github.com/bitcoin-core/bitcoin-devwiki) could be a good place to put this, since it would be speculative and subject to change.\r\n\r\nOn the PR itself, I know it is exploratory and you don't expect it to be merged, but was hard not to notice it was copying and pasting a lot of existing code from net/net_processing/validationinteface code and also introducing new code following older conventions (`CPrefixedClassNames` `bHungarianVariables`), so I just want to quickly encourage using the current [style](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c) in new code and trying to avoid duplicate implementations of things like [`WatchSignalsInstance`](https://github.com/ariard/bitcoin/blob/3667d18a76f72acf0741a886715b6c9fee40001d/src/watchdoginterface.cpp#L14) / [`MainSignalsInstance`](https://github.com/ariard/bitcoin/blob/3667d18a76f72acf0741a886715b6c9fee40001d/src/validationinterface.cpp#L26) in the real version of this.",
      "created_at" : "2020-05-22T15:07:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-632742644",
      "id" : 632742644,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjc0MjY0NA==",
      "updated_at" : "2020-05-22T15:07:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632742644",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-05-23T12:05:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-633038609",
      "id" : 633038609,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzAzODYwOQ==",
      "updated_at" : "2020-05-23T12:05:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633038609",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Using the net.h stuff like NetMsgType, CBlockLocator, NetMsgMaker and the connection types really limits the utility here. eg radio stuff probably wants to read/write from a tty, not a \"real socket\". Let alone something like DNS which doesn't even have a file descriptor, only a libc call to poll.\r\n\r\nI think message translation from a wire format suiting communication channel should be done by the driver, it doesn't make sense at all to make it in the framework. So we may pass `NetMsgType` to the driver interface without caring further.\r\n\r\nWith regards to threading right, but isn't the case in main stack we have a separation between `ThreadSocketHandler` and `ThreadMessageHandler` for performance reasons ? We may follow there ?",
      "created_at" : "2020-05-27T07:21:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-634477797",
      "id" : 634477797,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDQ3Nzc5Nw==",
      "updated_at" : "2020-05-27T07:21:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634477797",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @ryanofsky for review !\r\n\r\n> and not interact with (or duplicate and fork) existing net_processing and net code.\r\n\r\nRight, what are all the reasons between net_processing and net code separation ?\r\n\r\n> A real anomaly detection implementation, on the other hand, may need to have access to more things, but hopefully that could happen more by passively receiving events than actively looking up state.\r\n\r\nRight, `CWatchdog` may be consumer of an asynchronous interface too, I keep it simple for a PoC but that's a good suggestion.\r\n\r\n>  So it'd be great if there was a writeup (or outline like the assumeutxo plan) saying what the steps could be for rolling this out\r\n\r\nYes it's here : https://github.com/ariard/altnet-proposals/tree/master, still WIP. Note: I've been talking with folks actively working on alt-com like BlockSat. As first functional step , I plan to reuse the headers-over-DNS from Matt, it's pretty straightforward and can be used by anyone without further requirement.\r\n\r\n> On the PR itself, I know it is exploratory and you don't expect it to be merged, but was hard not to notice it was copying and pasting a lot of existing code from net/net_processing/validationinteface\r\n\r\nRight, it may make sense to refactor `MainSignalsInstance` to make it generic enough for reuse.",
      "created_at" : "2020-05-27T07:33:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-634483858",
      "id" : 634483858,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDQ4Mzg1OA==",
      "updated_at" : "2020-05-27T07:33:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634483858",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Concept ACK, but I am wondering if some of this would be better off outside the Bitcoin Core build system. ...\r\n\r\nTotally agree.\r\nIn principle could be better as a separate project. It seems interesting but as you say, a common interface can help in this particular, separating transport logic from the Bitcoin Core logic.\r\n\r\nI like the idea and will think carefully the next days in the context that is most familiar to me, ISM and low power mesh networks, and in particular Locha Mesh.\r\n\r\n",
      "created_at" : "2020-05-27T16:26:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-634781514",
      "id" : 634781514,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18988",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDc4MTUxNA==",
      "updated_at" : "2020-05-27T16:26:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634781514",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/10358374?v=4",
         "events_url" : "https://api.github.com/users/luisan00/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luisan00/followers",
         "following_url" : "https://api.github.com/users/luisan00/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luisan00/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luisan00",
         "id" : 10358374,
         "login" : "luisan00",
         "node_id" : "MDQ6VXNlcjEwMzU4Mzc0",
         "organizations_url" : "https://api.github.com/users/luisan00/orgs",
         "received_events_url" : "https://api.github.com/users/luisan00/received_events",
         "repos_url" : "https://api.github.com/users/luisan00/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luisan00/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luisan00/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luisan00"
      }
   }
]
