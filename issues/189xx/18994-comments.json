[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18938 (tests: Fill fuzzing coverage gaps for functions in consensus/validation.h, primitives/block.h and util/translation.h by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-05-17T11:05:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18994#issuecomment-629779615",
      "id" : 629779615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTc3OTYxNQ==",
      "updated_at" : "2020-05-17T11:05:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629779615",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426250850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426250850"
         }
      },
      "author_association" : "MEMBER",
      "body" : "unrelated nit: At compile time this can never be null. I'd prefer if the return value for strings was always `std::string`. Every caller of `ScriptErrorString` converts to `std::string` anyway.",
      "commit_id" : "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "created_at" : "2020-05-17T11:37:05Z",
      "diff_hunk" : "@@ -119,4 +125,41 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             wit.SetNull();\n         }\n     }\n+\n+    const char* op_name = GetOpName(ConsumeOpcodeType(fuzzed_data_provider));\n+    assert(op_name != nullptr);\n+\n+    const char* error_string = ScriptErrorString(static_cast<ScriptError>(fuzzed_data_provider.ConsumeIntegralInRange<int>(0, SCRIPT_ERR_ERROR_COUNT)));\n+    assert(error_string != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426250850",
      "id" : 426250850,
      "line" : 133,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MDg1MA==",
      "original_commit_id" : "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "original_line" : 133,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/test/fuzz/script.cpp",
      "position" : 29,
      "pull_request_review_id" : 413153538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-17T11:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426250850",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426251317"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426251317"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this looks like a unit test that does not depend on any fuzz input",
      "commit_id" : "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "created_at" : "2020-05-17T11:42:17Z",
      "diff_hunk" : "@@ -119,4 +125,41 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             wit.SetNull();\n         }\n     }\n+\n+    const char* op_name = GetOpName(ConsumeOpcodeType(fuzzed_data_provider));\n+    assert(op_name != nullptr);\n+\n+    const char* error_string = ScriptErrorString(static_cast<ScriptError>(fuzzed_data_provider.ConsumeIntegralInRange<int>(0, SCRIPT_ERR_ERROR_COUNT)));\n+    assert(error_string != nullptr);\n+\n+    {\n+        const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        CScript append_script{bytes.begin(), bytes.end()};\n+        append_script << fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+        append_script << ConsumeOpcodeType(fuzzed_data_provider);\n+        append_script << CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n+        append_script << ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    }\n+\n+    {\n+        WitnessUnknown witness_unknown_1{};\n+        witness_unknown_1.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_1.length = witness_unknown_program_1.size();\n+        std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown_1.program);\n+\n+        WitnessUnknown witness_unknown_2{};\n+        witness_unknown_2.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_2 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_2.length = witness_unknown_program_2.size();\n+        std::copy(witness_unknown_program_2.begin(), witness_unknown_program_2.end(), witness_unknown_2.program);\n+\n+        (void)(witness_unknown_1 == witness_unknown_2);\n+        (void)(witness_unknown_1 < witness_unknown_2);\n+\n+        const CNoDestination no_destination_1;\n+        const CNoDestination no_destination_2;\n+        (void)(no_destination_1 == no_destination_2);\n+        (void)(no_destination_1 < no_destination_2);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426251317",
      "id" : 426251317,
      "line" : 163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MTMxNw==",
      "original_commit_id" : "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "original_line" : 163,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/test/fuzz/script.cpp",
      "position" : 59,
      "pull_request_review_id" : 413153538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-17T11:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426251317",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426252814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426252814"
         }
      },
      "author_association" : "MEMBER",
      "body" : "unrelated, but I was wondering if `ConsumeDeserializable<T>` could always return type `T` (if the stream was empty, it would return `T{}`). Not returning optional would bring this helper in line with all other helpers. For example `ConsumeRandomLengthString` always return `std::string`.",
      "commit_id" : "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "created_at" : "2020-05-17T11:58:00Z",
      "diff_hunk" : "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const Optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const Optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const Optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const Optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const Optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const Optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426252814",
      "id" : 426252814,
      "line" : 134,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MjgxNA==",
      "original_commit_id" : "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "original_line" : 134,
      "original_position" : 134,
      "original_start_line" : null,
      "path" : "src/test/fuzz/script_sign.cpp",
      "position" : 134,
      "pull_request_review_id" : 413153538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-17T11:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426252814",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426252948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426252948"
         }
      },
      "author_association" : "MEMBER",
      "body" : "My suggestion would be to construct a random `CTxDestination`.",
      "commit_id" : "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "created_at" : "2020-05-17T11:59:38Z",
      "diff_hunk" : "@@ -119,4 +125,41 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             wit.SetNull();\n         }\n     }\n+\n+    const char* op_name = GetOpName(ConsumeOpcodeType(fuzzed_data_provider));\n+    assert(op_name != nullptr);\n+\n+    const char* error_string = ScriptErrorString(static_cast<ScriptError>(fuzzed_data_provider.ConsumeIntegralInRange<int>(0, SCRIPT_ERR_ERROR_COUNT)));\n+    assert(error_string != nullptr);\n+\n+    {\n+        const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        CScript append_script{bytes.begin(), bytes.end()};\n+        append_script << fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+        append_script << ConsumeOpcodeType(fuzzed_data_provider);\n+        append_script << CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n+        append_script << ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    }\n+\n+    {\n+        WitnessUnknown witness_unknown_1{};\n+        witness_unknown_1.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_1.length = witness_unknown_program_1.size();\n+        std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown_1.program);\n+\n+        WitnessUnknown witness_unknown_2{};\n+        witness_unknown_2.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_2 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_2.length = witness_unknown_program_2.size();\n+        std::copy(witness_unknown_program_2.begin(), witness_unknown_program_2.end(), witness_unknown_2.program);\n+\n+        (void)(witness_unknown_1 == witness_unknown_2);\n+        (void)(witness_unknown_1 < witness_unknown_2);\n+\n+        const CNoDestination no_destination_1;\n+        const CNoDestination no_destination_2;\n+        (void)(no_destination_1 == no_destination_2);\n+        (void)(no_destination_1 < no_destination_2);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426252948",
      "id" : 426252948,
      "in_reply_to_id" : 426251317,
      "line" : 163,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Mjk0OA==",
      "original_commit_id" : "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "original_line" : 163,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/test/fuzz/script.cpp",
      "position" : 59,
      "pull_request_review_id" : 413155155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-17T11:59:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426252948",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
