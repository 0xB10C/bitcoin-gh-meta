[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "In response to @jnewbery's [comment](https://github.com/bitcoin/bitcoin/pull/19995#pullrequestreview-505540213)\r\n\r\n> I think I'd prefer log-shedding to be done globally, with a special log at the end of a log suppression period that tallies up which log locations have been suppressed.\r\n\r\nI disagree on the global schedding, i think the source location based schedding is over all the better approach.\r\nI agree with your point that it could be confusing to drop some logs in the context of user issues but schedding should only kick in if there is an attack or something is horribly wrong, so i would think that almost all logs provided by users would be complete. We can also always tell if rate limiting is taking place since we log when it starts/stops and in those cases a partial log is better then no log.\r\n\r\n(This is obviously mostly an opinion and I am totally willing to be convinced of global log-schedding if enough reviewers favor it)",
      "created_at" : "2021-04-05T12:49:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813376120",
      "id" : 813376120,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMzM3NjEyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-05T12:49:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813376120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21706 (log: Mitigate disk filling attacks by globally rate limiting LogPrintf(â¦) by dergoegge)\n* #21526 (validation: UpdateTip/CheckBlockIndex assumeutxo support by jamesob)\n* #16673 (Relog configuration args on debug.log rotation by LarryRuane)\n* #15719 (Wallet passive startup by ryanofsky)\n* #15606 ([experimental] UTXO snapshots by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-04-05T15:08:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813443768",
      "id" : 813443768,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMzQ0Mzc2OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-15T22:37:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813443768",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> schedding should only kick in if there is an attack or something is horribly wrong, so i would think that almost all logs provided by users would be complete.\r\n\r\nRight, and those cases are exactly where we need the best possible logs.\r\n\r\n> We can also always tell if rate limiting is taking place since we log when it starts/stops and in those cases a partial log is better then no log.\r\n\r\nI guarantee you that not everyone will know this and most people will miss a single log line saying \"rate-limiting log x\".\r\n\r\nI can only speak from my own experience of supporting network equipment for several years - partial logs are often worse than no logs at all since they're so misleading.",
      "created_at" : "2021-04-06T07:39:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813901411",
      "id" : 813901411,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMzkwMTQxMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-06T07:39:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813901411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Strongest possible Concept ACK: this mitigation will kill an entire bug class (the \"disk fill via logging\" bug class). \r\n\r\nThanks for taking up this work @dergoegge.\r\n\r\nWill test and review.",
      "created_at" : "2021-04-06T07:55:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813912391",
      "id" : 813912391,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMzkxMjM5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-06T07:55:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813912391",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jnewbery \r\n\r\n> I think I'd prefer log-shedding to be done globally, with a special log at the end of a log suppression period that tallies up which log locations have been suppressed.\r\n\r\nClarifying questions to fully understand what is suggested:\r\n\r\nLet's assume that log location A is a misplaced `LogPrintf` in a code path that the attacker can make us take.\r\n\r\nIn the case of an attacker using log location A to fill our disk by making us log from there repeatedly, is the suggestion then that _all_ log locations should be suppressed during the suppression period (instead of suppressing only the \"attacker controlled\" log location A)?\r\n\r\nTo make your suggestion clear: could you exemplify what the special log entry at the end of the log suppression period would look like? (A patch or even a separate PR would be even better, but an example log entry would probably clarify enough!)",
      "created_at" : "2021-04-06T08:27:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813933612",
      "id" : 813933612,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMzkzMzYxMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-06T08:27:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813933612",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r608211735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608211735"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this line is tripping up the linter:\r\n```\r\nsrc/test/logging_tests.cpp: Expected 0 argument(s) after format string but found 1 argument(s): LogPrintf(fmt, args...)\r\n```",
      "commit_id" : "1653167de64b15df306158d0d2e9bef9c8bea79e",
      "created_at" : "2021-04-06T22:08:27Z",
      "diff_hunk" : "@@ -33,4 +32,109 @@ BOOST_AUTO_TEST_CASE(logging_timer)\n     SetMockTime(0);\n }\n \n+void GetLogFileSize(size_t& size)\n+{\n+    boost::system::error_code ec;\n+    size = fs::file_size(LogInstance().m_file_path, ec);\n+    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), LogInstance().m_file_path);\n+    BOOST_CHECK(!ec);\n+}\n+\n+template <typename... Args>\n+void LogFromFixedLocation(const char* fmt, const Args&... args)\n+{\n+    LogPrintf(fmt, args...);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r608211735",
      "id" : 608211735,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIxMTczNQ==",
      "original_commit_id" : "fa114ff2d4b098891569d4f1d67c1e46850cbd5e",
      "original_line" : 46,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/test/logging_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 629448028,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-06T23:37:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608211735",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@dergoegge \r\n\r\nThanks for your work on this PR!\r\n\r\nWould you be willing to implement also @jnewbery's suggestions as a separate PR?\r\n\r\nI tried to summarise his suggestion in https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813933612. I'm not certain I got it right though - @jnewbery, feel free to chime in :)\r\n\r\nI think it makes sense to do it as separate PR since it deviates in important ways from the original suggestion. By having two separate PRs we would see which of the two approaches to address this type of attack that have consensus support.\r\n\r\nPersonally I think I could live with both approaches: as long as we kill the disk-fill-via-logging bug class sooner rather than later I'm happy :)",
      "created_at" : "2021-04-16T04:09:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-820891905",
      "id" : 820891905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDg5MTkwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-16T04:09:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820891905",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Would you be willing to implement also jnewbery's suggestions as a separate PR?\r\n\r\n@practicalswift Sure, thats a good idea :)\r\n",
      "created_at" : "2021-04-16T12:25:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-821138307",
      "id" : 821138307,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMTEzODMwNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-16T12:25:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821138307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "concept ACK (not that I'm sure if my opinion is relevant) and I think this makes more sense than the global alternative.",
      "created_at" : "2021-04-17T09:45:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-821797545",
      "id" : 821797545,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMTc5NzU0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-17T09:45:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821797545",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-04-23T09:36:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-825534545",
      "id" : 825534545,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTUzNDU0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-23T09:36:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825534545",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nðµï¸ @sipa has been requested to review this pull request as specified in the REVIEWERS file.",
      "created_at" : "2021-05-03T09:32:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-831141878",
      "id" : 831141878,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMTE0MTg3OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-03T09:32:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831141878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-06-12T04:41:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-859997363",
      "id" : 859997363,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1OTk5NzM2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-12T04:41:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859997363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@dergoegge Thanks for working on this. Would you mind rebasing? I would like to review the updated version :)",
      "created_at" : "2021-06-12T08:04:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-860018394",
      "id" : 860018394,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDAxODM5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-12T08:04:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860018394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift Rebased :)\r\n\r\nFor anyone reviewing this: I made a rpc [here](https://github.com/dergoegge/bitcoin/commit/8e6d15d6be06834d1f634f4a54ea646be8bc3491) that can log excessive amounts of \"a\"s from different locations which might be useful for testing.\r\n`bitcoin-cli excessivelog <location (1-5)> <num_bytes>`\r\n\r\nâ ï¸One thing to note with that rpc is that the rate limiting logic still prints the last message that triggered the limiting to disk, so something like `bitcoin-cli excessivelog 1 536870912` would still log ~512MiB to disk. Logging to console is also never suppressed (unless -printtoconsole=0)  â ï¸\r\n\r\nA simple example to use the rpc:\r\n```bash\r\nbitcoin-cli excessivelog 1 1048500 # log just under 1MiB\r\nbitcoin-cli excessivelog 1 100 # this should get the total amount logged above 1MiB and the rate limiting logic should kick in\r\n```",
      "created_at" : "2021-06-12T11:02:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-860037566",
      "id" : 860037566,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDAzNzU2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-12T11:02:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860037566",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "concept ACK \r\nI think this PR makes more sense than the global alternative, because global rate limiting would open another attack vector.\r\nAn attacker could trigger the global limit in one category and conceal another attack from the log.",
      "created_at" : "2021-06-16T17:01:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-862552556",
      "id" : 862552556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MjU1MjU1Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-16T17:01:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862552556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1223908?v=4",
         "events_url" : "https://api.github.com/users/Emzy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Emzy/followers",
         "following_url" : "https://api.github.com/users/Emzy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Emzy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Emzy",
         "id" : 1223908,
         "login" : "Emzy",
         "node_id" : "MDQ6VXNlcjEyMjM5MDg=",
         "organizations_url" : "https://api.github.com/users/Emzy/orgs",
         "received_events_url" : "https://api.github.com/users/Emzy/received_events",
         "repos_url" : "https://api.github.com/users/Emzy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Emzy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Emzy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Emzy"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I moved the rate limiting logic into its own method.\r\n[log_ratelimiting.0](https://github.com/dergoegge/bitcoin/tree/log_ratelimiting.0) -> [log_ratelimiting.1](https://github.com/dergoegge/bitcoin/tree/log_ratelimiting.1)\r\n\r\n<details>\r\n<summary>git range-diff master log_ratelimiting.0 log_ratelimiting.1</summary>\r\n\r\n```\r\n1:  76c59a1cc ! 1:  a3a2cfd64 log: Mitigate disk filling attacks by rate limiting LogPrintf\r\n    @@ Metadata\r\n      ## Commit message ##\r\n         log: Mitigate disk filling attacks by rate limiting LogPrintf\r\n     \r\n    +    Co-authored-by: dergoegge <n.goeggi@gmail.com>\r\n    +\r\n      ## src/init/common.cpp ##\r\n     @@ src/init/common.cpp: void AddLoggingArgs(ArgsManager& argsman)\r\n          argsman.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\r\n    @@ src/logging.cpp: namespace BCLog {\r\n     -void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line)\r\n     +static constexpr uint64_t HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION{1024 * 1024};\r\n     +\r\n    ++bool BCLog::Logger::RateLimit(std::string& str, const std::string& logging_function, const SourceLocation& source_location)\r\n    ++{\r\n    ++    if (!m_rate_limiting) {\r\n    ++        // Rate limiting is disabled.\r\n    ++        return false;\r\n    ++    }\r\n    ++\r\n    ++    const std::chrono::seconds now = GetTime<std::chrono::seconds>();\r\n    ++    QuotaUsage& quota_usage = m_quota_usage_per_source_location[source_location];\r\n    ++    // Is the quota exceeded before this log call?\r\n    ++    bool quota_exceeded_before = quota_usage.m_bytes_logged > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    ++\r\n    ++    bool dont_skip = false;\r\n    ++    // Every hour the quota usage for a source location is reset.\r\n    ++    if ((now - quota_usage.m_last_reset) > std::chrono::hours{1}) {\r\n    ++        // Should logging to disk continue to be disabled?\r\n    ++        bool quota_still_exceeded = quota_usage.m_bytes_dropped > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    ++\r\n    ++        if (quota_still_exceeded) {\r\n    ++            str = LogTimestampStr(strprintf(\r\n    ++                \"Not restarting logging from %s:%d (%s): \"\r\n    ++                \"because %d messages (%d MiB) were dropped during the last hour which still exceeds the limit of %d MiB.\\n\",\r\n    ++                source_location.first, source_location.second, logging_function, quota_usage.m_messages_dropped,\r\n    ++                quota_usage.m_bytes_dropped / (1024 * 1024), HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION / (1024 * 1024)));\r\n    ++        } else if (quota_exceeded_before) {\r\n    ++            str = LogTimestampStr(strprintf(\r\n    ++                \"Restarting logging from %s:%d (%s): \"\r\n    ++                \"%d messages (%d MiB) were dropped during the last hour.\\n\"\r\n    ++                \"%s\",\r\n    ++                source_location.first, source_location.second, logging_function, quota_usage.m_messages_dropped,\r\n    ++                quota_usage.m_bytes_dropped / (1024 * 1024), str));\r\n    ++            --m_rate_limited_locations;\r\n    ++        }\r\n    ++\r\n    ++        // Dont skip the reset logs.\r\n    ++        dont_skip = quota_exceeded_before || quota_still_exceeded;\r\n    ++\r\n    ++        // Logging to disk is only re-enabled if the number of dropped bytes did not exceed the limit.\r\n    ++        if (!quota_still_exceeded) quota_usage.m_bytes_logged = 0;\r\n    ++        quota_usage.m_messages_dropped = 0;\r\n    ++        quota_usage.m_bytes_dropped = 0;\r\n    ++        quota_usage.m_last_reset = now;\r\n    ++    }\r\n    ++\r\n    ++    if (!quota_exceeded_before) quota_usage.m_bytes_logged += str.size();\r\n    ++\r\n    ++    bool quota_exceeded_after = quota_usage.m_bytes_logged > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    ++    if (!quota_exceeded_after) {\r\n    ++        // The limits were not exceeded and the message should not be dropped.\r\n    ++        return false;\r\n    ++    }\r\n    ++\r\n    ++    if (!quota_exceeded_before) {\r\n    ++        str = LogTimestampStr(strprintf(\r\n    ++            \"Excessive logging detected from %s:%d (%s): \"\r\n    ++            \">%d MiB logged during the last hour. \"\r\n    ++            \"Suppressing logging to disk from this source location for up to one hour. \"\r\n    ++            \"Console logging unaffected. Last log entry: %s\",\r\n    ++            source_location.first, source_location.second, logging_function,\r\n    ++            HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION / (1024 * 1024), str));\r\n    ++        ++m_rate_limited_locations;\r\n    ++    } else if (!dont_skip) {\r\n    ++        // The log message should be dropped.\r\n    ++        quota_usage.m_messages_dropped++;\r\n    ++        quota_usage.m_bytes_dropped += str.size();\r\n    ++        return true;\r\n    ++    }\r\n    ++\r\n    ++    return false;\r\n    ++}\r\n    ++\r\n     +void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const SourceLocation& source_location, const bool skip_disk_usage_rate_limiting)\r\n      {\r\n          StdLockGuard scoped_lock(m_cs);\r\n    @@ src/logging.cpp: void BCLog::Logger::LogPrintStr(const std::string& str, const s\r\n      \r\n     +    // Rate limit logging to disk to avoid disk filling attacks.\r\n     +    bool skip_writing_to_disk_due_to_rate_limiting{false};\r\n    -+    if (!skip_disk_usage_rate_limiting && m_rate_limiting) {\r\n    -+        const std::chrono::seconds now = GetTime<std::chrono::seconds>();\r\n    -+        QuotaUsage& quota_usage = m_quota_usage_per_source_location[source_location];\r\n    -+        // Is the quota exceeded before this log call?\r\n    -+        bool quota_exceeded_before = quota_usage.m_bytes_logged > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    -+\r\n    -+        bool dont_skip = false;\r\n    -+        // Every hour the quota usage for a source location is reset.\r\n    -+        if ((now - quota_usage.m_last_reset) > std::chrono::hours{1}) {\r\n    -+            // Should logging to disk continue to be disabled?\r\n    -+            bool quota_still_exceeded = quota_usage.m_bytes_dropped > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    -+\r\n    -+            if (quota_still_exceeded) {\r\n    -+                str_prefixed = LogTimestampStr(strprintf(\"Not restarting logging from %s:%d (%s): because %d messages (%d MiB) were dropped during the last hour which still exceeds the limit of %d MiB.\\n\", source_location.first, source_location.second, logging_function, quota_usage.m_messages_dropped, quota_usage.m_bytes_dropped / (1024 * 1024), HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION / (1024 * 1024)));\r\n    -+            } else if (quota_exceeded_before) {\r\n    -+                str_prefixed = LogTimestampStr(strprintf(\"Restarting logging from %s:%d (%s): %d messages (%d MiB) were dropped during the last hour.\\n\", source_location.first, source_location.second, logging_function, quota_usage.m_messages_dropped, quota_usage.m_bytes_dropped / (1024 * 1024)));\r\n    -+            }\r\n    -+\r\n    -+            // Dont skip the reset logs.\r\n    -+            dont_skip = quota_exceeded_before || quota_still_exceeded;\r\n    -+\r\n    -+            // Logging to disk is only re-enabled if the number of dropped bytes did not exceed the limit.\r\n    -+            if (!quota_still_exceeded) quota_usage.m_bytes_logged = 0;\r\n    -+            quota_usage.m_messages_dropped = 0;\r\n    -+            quota_usage.m_bytes_dropped = 0;\r\n    -+            quota_usage.m_last_reset = now;\r\n    -+        }\r\n    ++    if (!skip_disk_usage_rate_limiting) {\r\n    ++        skip_writing_to_disk_due_to_rate_limiting = RateLimit(str_prefixed, logging_function, source_location);\r\n    ++    }\r\n     +\r\n    -+        if (!quota_exceeded_before) quota_usage.m_bytes_logged += str_prefixed.size();\r\n    -+\r\n    -+        bool quota_exceeded_after = quota_usage.m_bytes_logged > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    -+        if (quota_exceeded_after) {\r\n    -+            if (!quota_exceeded_before) {\r\n    -+                str_prefixed = LogTimestampStr(strprintf(\"Excessive logging detected from %s:%d (%s): >%d MiB logged during the last hour. Suppressing logging to disk from this source location for up to one hour. Console logging unaffected. Last log entry: %s\", source_location.first, source_location.second, logging_function, HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION / (1024 * 1024), str_prefixed));\r\n    -+            } else if (!dont_skip) {\r\n    -+                skip_writing_to_disk_due_to_rate_limiting = !dont_skip;\r\n    -+                quota_usage.m_messages_dropped++;\r\n    -+                quota_usage.m_bytes_dropped += str_prefixed.size();\r\n    -+            }\r\n    -+        }\r\n    ++    if (m_rate_limited_locations > 0) {\r\n    ++        str_prefixed.insert(0, \"[*] \");\r\n     +    }\r\n     +\r\n          m_started_new_line = !str.empty() && str[str.size()-1] == '\\n';\r\n    @@ src/logging.h: namespace BCLog {\r\n              std::list<std::string> m_msgs_before_open GUARDED_BY(m_cs);\r\n              bool m_buffering GUARDED_BY(m_cs) = true; //!< Buffer messages before logging can be started.\r\n     +        std::unordered_map<SourceLocation, QuotaUsage, SourceLocationHasher> m_quota_usage_per_source_location GUARDED_BY(m_cs);\r\n    ++        std::atomic_int m_rate_limited_locations;\r\n      \r\n              /**\r\n               * m_started_new_line is a state variable that will suppress printing of\r\n    @@ src/logging.h: namespace BCLog {\r\n              fs::path m_file_path;\r\n              std::atomic<bool> m_reopen_file{false};\r\n      \r\n    ++        /** Evaluate if a log message should not be printed to disk.\r\n    ++         *\r\n    ++         * @param[in,out] The log message.\r\n    ++         *                The rate limiting logic message may change the message\r\n    ++         *                to signal the start or end of a supression period.\r\n    ++         * @param[in]     The function from which the log message originated.\r\n    ++         * @param[in]     The source location from which the log message originated.\r\n    ++         */\r\n    ++        bool RateLimit(std::string& str, const std::string& logging_function, const SourceLocation& source_location) EXCLUSIVE_LOCKS_REQUIRED(m_cs);\r\n    ++\r\n              /** Send a string to the log output */\r\n     -        void LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line);\r\n     +        void LogPrintStr(const std::string& str, const std::string& logging_function, const SourceLocation& source_location, const bool skip_disk_usage_rate_limiting);\r\n2:  855d05e43 = 2:  5b46965aa test: Add logging test for rate limiting\r\n```\r\n</details>\r\n\r\nI also decided to move forward with the approach in this PR and will close #21706. See the updated PR description for reasoning.",
      "created_at" : "2021-06-17T19:07:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-863494151",
      "id" : 863494151,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MzQ5NDE1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-17T19:07:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863494151",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   }
]
