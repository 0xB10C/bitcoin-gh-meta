[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It's great for this to be removing the recursive locks in 09c924d3beb56a6b64d8855b1818b6e73c40ec0d and 5b8587f0bf5076d6651ec67d4a941034b5287429. Also annotating CChainState::m_chain in 8257e9ab7592a7fe459089f021053c7740004817 makes a lot of sense.\r\n\r\nThe thing I don't understand is what bug is prevented by making `m_active_chainstate` `std::atomic<CChainState*>` instead of `CChainState*`? What bugs are prevented by adding `LOCK(m_cs_chainstates);` or having `m_cs_chainstates` exist at all?\r\n\r\nNot putting EXCLUSIVE_LOCKS_REQUIRED(cs_main) on ChainstateManager methods seems like Six Flags saying congratulations, we're waiving the $100 fee to get into the park, we're just going to charge you $100 the first time you get onto any ride. It seems like this could only be appealing if you wanted to go to a `CChainState` theme park without trying any rides (accessing any data inside).\r\n",
      "created_at" : "2021-04-06T20:19:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-814412610",
      "id" : 814412610,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDQxMjYxMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-06T20:20:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814412610",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21584 (Fix assumeutxo crash due to invalid base_blockhash by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-04-06T23:51:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-814504792",
      "id" : 814504792,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDUwNDc5Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-09T21:21:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814504792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the quick look @ryanofsky. \r\n\r\n> The thing I don't understand is what bug is prevented by making m_active_chainstate std::atomic<CChainState*> instead of CChainState*? What bugs are prevented by adding LOCK(m_cs_chainstates); or having m_cs_chainstates exist at all?\r\n\r\nStrictly speaking, I don't think there's a difference in bugs between this approach and just repurposing `cs_main` to guard this stuff. But there are a number of usability/maybe-performance arguments. I think the major arguments are:\r\n- `cs_main` is a lock that's used for many different things, and eventually (I think?) we want to break it up into more granular, specified locks - though I could be wrong about that,\r\n- it's kind of nice not having to worry callers about *any* locks if indeed this `std::atomic` approach works in the way that I claim it does, because....\r\n- otherwise, if we apply a `GUARDED_BY(::cs_main)` to `m_active_chainstate`, we'll need to do [awkward stuff like temporarily holding `cs_main`](https://github.com/bitcoin/bitcoin/pull/17737/files#diff-b1e19192258d83199d8adaa5ac31f067af98f63554bfdd679bd8e8073815e69dR713-R722) to acquire the active chainstate before we call `ActivateBestChain()`, since you can't go into ABC holding cs_main.\r\n\r\nI think your Six Flags analogy is both entertaining and true (in a strict sense), but if everyone generally agrees that we eventually need to break up `cs_main` to avoid unnecessary lock contention, then I think these changes are a step in that direction.\r\n\r\nBut otherwise I'm happy to separate out the commits that you mention and just annotate everything with `cs_main` if it makes more sense for that lock to live on in its spirit of \"I lock every damn thing related to chainstate,\" which may be easier to reason about than having three or four more granular locks running around.\r\n\r\nBut it does seem appealing to decouple, say, block storage locking from chain locking so that we can do things like prune while continuing validation. And longer term I suspect that each chainstate instance will want its own little cs_main so that we can do various chainstate operations in parallel should something like utreexo come around.",
      "created_at" : "2021-04-07T02:08:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-814548722",
      "id" : 814548722,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDU0ODcyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-07T02:08:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814548722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Will review in more detail, and I'm all for lock granularity if locks are independent. But if we're just turning one lock into two dependent locks where you acquire one lock, release it, then always acquire the other lock, it seems pointlessly complex. It increases the number of states things can be in and makes thread safety annotations less likely to catch race conditions. If there is theoretically a place where having these two locks could be better for performance, I would be curious to know where it is. The ActivateBestChain example just seems like a case of weird code organization that should be cleaned up, not a case where two locks make more sense for code as it is executed.\r\n\r\nI think the clearest thing would be for this low level code not to have any synchronization: no locks or atomics, just plain annotations stating locking assumptions so higher level code can call it correctly. I've suggested this before https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-584279133, and it can be done separately from this PR. This PR does make other improvements, and I'm happy with all the changes, and planning to review it.\r\n\r\n\r\n",
      "created_at" : "2021-04-08T21:28:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-816222195",
      "id" : 816222195,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNjIyMjE5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-08T21:28:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816222195",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I haven't read everything yet, and plan on doing it soon. Q for you: Does this mean that even if we hold `::cs_main`, we won't be sure that the `m_active_chainstate` won't change from under us?",
      "created_at" : "2021-04-13T01:51:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-818372304",
      "id" : 818372304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxODM3MjMwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-13T01:51:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818372304",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   }
]
