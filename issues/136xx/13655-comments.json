[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13655#discussion_r202352534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13655"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202352534"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Previous behavior:\r\n - result == bitcoinconsensus_ERR_INVALID_FLAGS (5)\r\n - err is untouched",
      "commit_id" : "5506b7f14dc4ba147c9b29c77813671310610e42",
      "created_at" : "2018-07-13T13:40:51Z",
      "diff_hunk" : "@@ -1495,4 +1495,146 @@ BOOST_AUTO_TEST_CASE(script_can_append_self)\n     BOOST_CHECK(s == d);\n }\n \n+\n+#if defined(HAVE_CONSENSUS_LIB)\n+\n+/* Test simple (successful) usage of bitcoinconsensus_verify_script */\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_returns_true)\n+{\n+    unsigned int libconsensus_flags = 0;\n+    int nIn = 0;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_1;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << spendTx;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), nIn, libconsensus_flags, &err);\n+    BOOST_CHECK(result == 1);\n+    BOOST_CHECK(err == bitcoinconsensus_ERR_OK);\n+}\n+\n+/* Test bitcoinconsensus_verify_script returns invalid tx index err*/\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_index_err)\n+{\n+    unsigned int libconsensus_flags = 0;\n+    int nIn = 3;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_EQUAL;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << spendTx;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), nIn, libconsensus_flags, &err);\n+    BOOST_CHECK(result == 0);\n+    BOOST_CHECK(err == bitcoinconsensus_ERR_TX_INDEX);\n+}\n+\n+/* Test bitcoinconsensus_verify_script returns tx size mismatch err*/\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_size)\n+{\n+    unsigned int libconsensus_flags = 0;\n+    int nIn = 0;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_EQUAL;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << spendTx;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size() * 2, nIn, libconsensus_flags, &err);\n+    BOOST_CHECK(result == 0);\n+    BOOST_CHECK(err == bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n+}\n+\n+/* Test bitcoinconsensus_verify_script returns invalid tx serialization error */\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_serialization)\n+{\n+    unsigned int libconsensus_flags = 0;\n+    int nIn = 0;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_EQUAL;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << 0xffffffff;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), nIn, libconsensus_flags, &err);\n+    BOOST_CHECK(result == 0);\n+    BOOST_CHECK(err == bitcoinconsensus_ERR_TX_DESERIALIZE);\n+}\n+\n+/* Test bitcoinconsensus_verify_script returns amount required error */\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_amount_required_err)\n+{\n+    unsigned int libconsensus_flags = bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS;\n+    int nIn = 0;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_EQUAL;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << spendTx;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), nIn, libconsensus_flags, &err);\n+    BOOST_CHECK(result == 0);\n+    BOOST_CHECK(err == bitcoinconsensus_ERR_AMOUNT_REQUIRED);\n+}\n+\n+/* Test bitcoinconsensus_verify_script returns invalid flags err */\n+BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_invalid_flags)\n+{\n+    unsigned int libconsensus_flags = 1 << 3;\n+    int nIn = 0;\n+\n+    CScript scriptPubKey;\n+    CScript scriptSig;\n+    CScriptWitness wit;\n+\n+    scriptPubKey << OP_EQUAL;\n+    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << spendTx;\n+\n+    bitcoinconsensus_error err;\n+    int result = bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), nIn, libconsensus_flags, &err);\n+    BOOST_CHECK(result == 0);\n+    BOOST_CHECK(err == bitcoinconsensus_ERR_INVALID_FLAGS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13655#discussion_r202352534",
      "id" : 202352534,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjM1MjUzNA==",
      "original_commit_id" : "5506b7f14dc4ba147c9b29c77813671310610e42",
      "original_position" : 142,
      "path" : "src/test/script_tests.cpp",
      "position" : 142,
      "pull_request_review_id" : 137039310,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13655",
      "updated_at" : "2018-07-13T13:40:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202352534",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5617245?v=4",
         "events_url" : "https://api.github.com/users/afk11/events{/privacy}",
         "followers_url" : "https://api.github.com/users/afk11/followers",
         "following_url" : "https://api.github.com/users/afk11/following{/other_user}",
         "gists_url" : "https://api.github.com/users/afk11/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/afk11",
         "id" : 5617245,
         "login" : "afk11",
         "node_id" : "MDQ6VXNlcjU2MTcyNDU=",
         "organizations_url" : "https://api.github.com/users/afk11/orgs",
         "received_events_url" : "https://api.github.com/users/afk11/received_events",
         "repos_url" : "https://api.github.com/users/afk11/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/afk11/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/afk11/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/afk11"
      }
   }
]
