[
   {
      "author_association" : "MEMBER",
      "body" : "How does it react to diverse network policies?",
      "created_at" : "2020-03-04T20:04:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-594803706",
      "id" : 594803706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NDgwMzcwNg==",
      "updated_at" : "2020-03-04T20:04:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594803706",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2020-03-04T20:13:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-594810354",
      "id" : 594810354,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NDgxMDM1NA==",
      "updated_at" : "2020-03-04T20:13:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594810354",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2020-03-04T20:40:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-594823883",
      "id" : 594823883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NDgyMzg4Mw==",
      "updated_at" : "2020-03-04T20:40:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594823883",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r387925726"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387925726"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm afraid `std::to_string` is locale dependent.\r\n\r\n---\r\n\r\nFor those interested in permanently killing the locale dependency bug class, consider reviewing:\r\n* #18124 â init: Clarify C and C++ locale assumptions. Add locale sanity checks to verify assumptions at run-time\r\n* #18126 â tests: Add fuzzing harness testing the locale independence of the `strencodings.h` functions\r\n* #18147 â qt: Kill the locale dependency bug class by not allowing Qt to mess with `LC_NUMERIC`\r\n",
      "commit_id" : "b93eb384cdaeaceaab89f855753bae6231a8ce77",
      "created_at" : "2020-03-04T20:49:13Z",
      "diff_hunk" : "@@ -3258,6 +3403,331 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         return true;\n     }\n \n+    // Received from an inbound peer planning to reconcilie transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    if (strCommand == NetMsgType::SENDRECON) {\n+        if (!pfrom->m_tx_relay) return true;\n+        if(pfrom->m_recon_state != nullptr) return true; // Do not support reconciliation salt/version updates.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return true;\n+\n+        // According to current erlay spec.\n+        if (recon_sender == recon_responder) return true;\n+\n+        if (pfrom->fInbound) {\n+            if (!recon_sender) return true;\n+            // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+            pfrom->m_flood_to = false;\n+        } else {\n+            if (!recon_responder) return true;\n+            uint64_t outbound_flooding = connman->GetOutboundCountByTxRelayType(true);\n+            if (outbound_flooding > MAX_OUTBOUND_FLOOD_TO)\n+                pfrom->m_flood_to = false;\n+        }\n+\n+        pfrom->m_recon_state = MakeUnique<CNode::ReconState>();\n+        pfrom->m_recon_state->sender = recon_sender;\n+        pfrom->m_recon_state->responder = recon_responder;\n+        pfrom->m_recon_state->local_q = DEFAULT_RECON_Q;\n+\n+        uint64_t local_salt = connman->m_local_recon_salt;\n+\n+        std::string salt1, salt2;\n+        if (remote_salt < local_salt) {\n+            salt1 = std::to_string(remote_salt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r387925726",
      "id" : 387925726,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNTcyNg==",
      "original_commit_id" : "b93eb384cdaeaceaab89f855753bae6231a8ce77",
      "original_position" : 529,
      "path" : "src/net_processing.cpp",
      "position" : 529,
      "pull_request_review_id" : 369111380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261",
      "updated_at" : "2020-03-04T20:57:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387925726",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@luke-jr \r\n\r\nWhen it comes to network policies, I'm using the same code originally used by regular gossip (\"Determine transactions to relay\" in net_processing.cpp). So nothing should be lost or sent wastefully as a result of policy discrepancies.",
      "created_at" : "2020-03-07T19:23:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596129273",
      "id" : 596129273,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjEyOTI3Mw==",
      "updated_at" : "2020-03-07T19:23:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596129273",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@luke-jr  I'm understanding your question as being inspired by earlier 'mempool sync' ideas that would bleed bandwidth if there was a long lasting mempool discrepancy.\r\n\r\nErlay isn't a mempool sync. It's uses a way of communicating lists of things you want to relay which only takes bandwidth proportional to the difference rather than the total size.  So there is no on-going bandwidth usage due to differences in *mempool* content. Bandwidth is used is roughly  A*ntx_relayed + B*peers*(difference_in_tx_relayed) + C*peers.  for some constants A,B,C. \r\n\r\nIf a peer has a radically different relay policy than you, it works fine and continues to save bandwidth below what usage would be without erlay even though the erlay savings itself comes largely from eliminating data that both sides would send.\r\n\r\nDoes that answer your question?",
      "created_at" : "2020-03-08T22:57:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596262994",
      "id" : 596262994,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjI2Mjk5NA==",
      "updated_at" : "2020-03-08T22:57:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596262994",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@naumenkogs When trying out this PR I ran in to two small testing issues:\r\n\r\n* The suffix of the functional test `p2p_erlay` is `.p2p` (`p2p_erlay.p2p`) instead of the expected `.py` (`p2p_erlay.py`) :)\r\n* It seems like `make check` runs the `minisketch` binaries `test-exhaust` and `test-exhaust-verify`. The running times of these are quite substantial - is there some way to do a quick sanity check as part of `make check` instead of exhaustive testing? :)\r\n",
      "created_at" : "2020-03-09T19:57:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596749292",
      "id" : 596749292,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5Njc0OTI5Mg==",
      "updated_at" : "2020-03-09T20:03:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596749292",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift The unit test minisketch binaries actually run forever. I need to fix that.",
      "created_at" : "2020-03-09T20:48:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596771889",
      "id" : 596771889,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5Njc3MTg4OQ==",
      "updated_at" : "2020-03-09T20:48:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596771889",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@naumenkogs \r\n\r\nI did some robustness testing of this code by pulling in PRs #17989 (`ProcessMessage(â¦)` fuzzer). and #18288 (MemorySanitizer) and found an use of uninitialized memory (UUM) that is remotely triggerable.\r\n\r\nYou can reproduce the issue by pulling in the commits from those PR:s and simply run:\r\n\r\n```\r\n$ src/test/fuzz/process_message\r\nâ¦\r\n```\r\n\r\nThe issue will be hit within a few seconds: `libFuzzer` is amazing :)\r\n\r\nNotice also how `libFuzzer` will automatically find the newly added message names (`wtxidrelay`, `sendrecon`, `reqrecon`, `sketch`, `reqbisec` and `reconcildiff`) and probe using them all! The fuzzer harness does not need to be teached about the existence of those :)\r\n\r\nPerhaps this UUM is the reason of the intermittent test failure you're seeing?\r\n\r\nI encourage everybody to review (or at least Concept ACK :)) #17989 (`ProcessMessage(â¦)` fuzzer). and #18288 (MemorySanitizer): having them merged would be great for robustness/security.",
      "created_at" : "2020-03-09T22:10:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596803815",
      "id" : 596803815,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjgwMzgxNQ==",
      "updated_at" : "2020-03-09T22:10:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596803815",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
