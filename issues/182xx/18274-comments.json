[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nGood catch!\r\n\r\nFWIW I still think it would be a good idea to consider moving towards a \"initialize-to-zero-or-sane-value-by-default\" policy. Realistically and empirically it seems like that is the only way we'll permanently avoid the steady stream of uninitialised reads we're seeing in the project.\r\n\r\nFrom the [C++ Core Guidlines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es20-always-initialize-an-object) (edited by Herb Sutter & Bjarne Stroustrup):\r\n\r\n> [ES.20: Always initialize an object](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es20-always-initialize-an-object)\r\n>\r\n> **Reason:** Avoid used-before-set errors and their associated undefined behavior. Avoid problems with comprehension of complex initialization. Simplify refactoring.\r\n>\r\n> The \"always initialize rule\" is deliberately stronger than the an \"object must be set before used\" language rule. The latter, more relaxed rule, catches the technical bugs, but:\r\n> * It leads to less readable code\r\n> * It encourages people to declare names in greater than necessary scopes\r\n> * It leads to harder to read code\r\n> * It leads to logic bugs by encouraging complex code\r\n> * It hampers refactoring\r\n\r\nJ F Bastien of Clang/LLVM fame from the [\"Automatic variable initialization\" LLVM patch thread](https://reviews.llvm.org/D54604):\r\n\r\n> Is it a good idea? Security-minded folks think so, and apparently so does the Microsoft Visual Studio team [1] who say \"Between 2017 and mid 2018, this feature would have killed 49 MSRC cases that involved uninitialized struct data leaking across a trust boundary. It would have also mitigated a number of bugs involving uninitialized struct data being used directly.\". They seem to use pure zero initialization, and claim to have taken the overheads down to within noise. Don't just trust Microsoft though, here's another relevant person asking for this [2]. It's been proposed for GCC [3] and LLVM [4] before.\r\n\r\nKees (âCaseâ) Cook of the Kernel Self-Protection Project (KSPP):\r\n\r\n> [Always-initialized local variables: just do it](https://outflux.net/slides/2018/lss/danger.pdf) \r\n\r\nI know about the \"but if you initialize then Valgrind won't find the issue\" argument. I love Valgrind and MSan - I use them daily, but we're facing a trade-off here: I think the security benefits of avoiding uninitialized reads by initializing outweighs the discoverability benefits of not initializing.",
      "created_at" : "2020-03-06T16:22:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595845466",
      "id" : 595845466,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18274",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTg0NTQ2Ng==",
      "updated_at" : "2020-03-06T16:28:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595845466",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
