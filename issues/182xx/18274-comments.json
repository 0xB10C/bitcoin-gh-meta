[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nGood catch!\r\n\r\nFWIW I still think it would be a good idea to consider moving towards a \"initialize-to-zero-or-sane-value-by-default\" policy. Realistically and empirically it seems like that is the only way we'll permanently avoid the steady stream of uninitialised reads we're seeing in the project.\r\n\r\nFrom the [C++ Core Guidlines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es20-always-initialize-an-object) (edited by Herb Sutter & Bjarne Stroustrup):\r\n\r\n> [ES.20: Always initialize an object](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es20-always-initialize-an-object)\r\n>\r\n> **Reason:** Avoid used-before-set errors and their associated undefined behavior. Avoid problems with comprehension of complex initialization. Simplify refactoring.\r\n>\r\n> The \"always initialize rule\" is deliberately stronger than the an \"object must be set before used\" language rule. The latter, more relaxed rule, catches the technical bugs, but:\r\n> * It leads to less readable code\r\n> * It encourages people to declare names in greater than necessary scopes\r\n> * It leads to harder to read code\r\n> * It leads to logic bugs by encouraging complex code\r\n> * It hampers refactoring\r\n\r\nJ F Bastien of Clang/LLVM fame from the [\"Automatic variable initialization\" LLVM patch thread](https://reviews.llvm.org/D54604):\r\n\r\n> Is it a good idea? Security-minded folks think so, and apparently so does the Microsoft Visual Studio team [1] who say \"Between 2017 and mid 2018, this feature would have killed 49 MSRC cases that involved uninitialized struct data leaking across a trust boundary. It would have also mitigated a number of bugs involving uninitialized struct data being used directly.\". They seem to use pure zero initialization, and claim to have taken the overheads down to within noise. Don't just trust Microsoft though, here's another relevant person asking for this [2]. It's been proposed for GCC [3] and LLVM [4] before.\r\n\r\nKees (âCaseâ) Cook of the Kernel Self-Protection Project (KSPP):\r\n\r\n> [Always-initialized local variables: just do it](https://outflux.net/slides/2018/lss/danger.pdf) \r\n\r\nKostya Serebryany - the father of AddressSanitizer, libFuzzer, OSS-Fuzz and Clang Control Flow Integrity - on the topic of auto-initialization in Clang/LLVM:\r\n\r\n> Very exciting, and long overdue. Thanks for doing this! Countless security bugs would have been mitigated by this, see below. [â¦]Â Here are some links to bugs, vulnerabilities and full exploits based on uses of uninitialized memory. The list is not exhaustive by any means, and we keep finding them every day. The problem is, of course, that we don't find all of them.\r\n\r\nI know about the \"but if you initialize then Valgrind won't find the issue\" argument. I love Valgrind and MSan - I use them daily, but we're facing a trade-off here: I think the security benefits of avoiding uninitialized reads by initializing outweighs the discoverability benefits of not initializing.",
      "created_at" : "2020-03-06T16:22:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595845466",
      "id" : 595845466,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18274",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTg0NTQ2Ng==",
      "updated_at" : "2020-03-06T18:18:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595845466",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> FWIW I still think it would be a good idea to consider moving towards a \"initialize-to-zero-or-sane-value-by-default\" policy. Realistically and empirically it seems like that is the only way we'll permanently avoid the steady stream of uninitialized reads we're seeing in the project.\r\n\r\nI agree with this, would it be worth the time to start refactoring code to initialize to zero/sane?",
      "created_at" : "2020-03-06T16:55:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595860558",
      "id" : 595860558,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18274",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTg2MDU1OA==",
      "updated_at" : "2020-03-06T16:55:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595860558",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10261698?v=4",
         "events_url" : "https://api.github.com/users/sanjaykdragon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanjaykdragon/followers",
         "following_url" : "https://api.github.com/users/sanjaykdragon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanjaykdragon",
         "id" : 10261698,
         "login" : "sanjaykdragon",
         "node_id" : "MDQ6VXNlcjEwMjYxNjk4",
         "organizations_url" : "https://api.github.com/users/sanjaykdragon/orgs",
         "received_events_url" : "https://api.github.com/users/sanjaykdragon/received_events",
         "repos_url" : "https://api.github.com/users/sanjaykdragon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanjaykdragon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanjaykdragon"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Don't forget to remove the original from line 2664. Can you also initialize `nFeeRequired` to `0`?\r\n\r\nMaybe instead of initializing inside `CreateTransaction()` you could assert that it's zero?\r\n\r\n> I agree with this, would it be worth the time to start refactoring code to initialize to zero/sane?\r\n\r\nPure refactor PRs usually don't work well. There is already a code guideline to do this in new places, and in code that's being touched by a PR: https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures",
      "created_at" : "2020-03-06T17:19:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595871812",
      "id" : 595871812,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18274",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTg3MTgxMg==",
      "updated_at" : "2020-03-06T17:19:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595871812",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > I agree with this, would it be worth the time to start refactoring code to initialize to zero/sane?\r\n>\r\n> Pure refactor PRs usually don't work well.\r\n\r\nCan a type of change that [is known to have prevented literally countless security bugs in other projects](https://lists.llvm.org/pipermail/cfe-dev/2018-November/060177.html) (had the type of change been in place) really be called a \"pure refactoring\"? :) \r\n\r\nPerhaps mitigation is a better term.",
      "created_at" : "2020-03-06T18:21:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595896409",
      "id" : 595896409,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18274",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTg5NjQwOQ==",
      "updated_at" : "2020-03-06T18:23:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595896409",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "NACK. I have a hard time following the discussion here and why people seem to agree that this is a good change. My rationale for the NACK:\r\n\r\n* Reading a return value in the case of failure, where it was not properly written to, is always illegal. Setting it to `0` or any other value does not make it legal to read it. IIUC, In this case it will print `Error: This transaction requires a transaction fee of at least 0`, which is obviously the wrong error message.\r\n\r\n* Blind Zero-or-otherwise initialization completely defeats the purpose of valgrind and other address sanitizers to find these bugs. When we remove the chance to fix these bugs, we might as well remove valgrind et al again.\r\n\r\nSo NACK on hiding the bug and not actually fixing it. If it is too hard to fix the bug without major code changes, we are lucky that C++ offers us many ways to safely return values from functions that may fail:\r\n\r\n* Optional<CFeeRate>, which is not initialized on error. Only initialized when successfully written to.\r\n* Return an enum to distinguish different error cases or maybe even pass out the error string, so that the caller can simply use that error string and does not have to guess.",
      "created_at" : "2020-03-06T18:45:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595906141",
      "id" : 595906141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18274",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTkwNjE0MQ==",
      "updated_at" : "2020-03-06T18:45:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595906141",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I am pretty sure we have had this exact discussion about uninitialized reads the 7th time. I wonder if it helps to write up a policy about that.",
      "created_at" : "2020-03-06T18:47:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595906755",
      "id" : 595906755,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18274",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTkwNjc1NQ==",
      "updated_at" : "2020-03-06T18:47:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595906755",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > FWIW I still think it would be a good idea to consider moving towards a \"initialize-to-zero-or-sane-value-by-default\" policy. Realistically and empirically it seems like that is the only way we'll permanently avoid the steady stream of uninitialized reads we're seeing in the project.\r\n> \r\n> I agree with this, would it be worth the time to start refactoring code to initialize to zero/sane?\r\n\r\nIf we do this for all builds, we might as well remove valgrind et al (as I mentioned above). I think it could make sense to enable it for release builds, but I see no way where it could make sense to enable this for developer builds.",
      "created_at" : "2020-03-06T18:50:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595907938",
      "id" : 595907938,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18274",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTkwNzkzOA==",
      "updated_at" : "2020-03-06T18:50:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595907938",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "If we decide to do initialization everywhere, it should be done with the `ftrivial-auto-var-init` compiler flag (or similar), and not in the code.",
      "created_at" : "2020-03-06T18:57:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595910813",
      "id" : 595910813,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18274",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTkxMDgxMw==",
      "updated_at" : "2020-03-06T18:57:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595910813",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tend to agree with Marco and think that a policy of initializing variables to 0 or -1 in cases where these values would still be bugs could be counterproductive and reduce our ability to find these bugs with fuzzing and static analysis.\r\n\r\nA different rule to either declare every variable with a valid initial value or to declare it as `std::optional` could be preferable because it could remove nondeterminism while still allowing tools to detect unset values. It could also improve code review because the need to dereference would alert reviewers to the possibility that a variable might be unset.",
      "created_at" : "2020-03-06T19:10:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595916364",
      "id" : 595916364,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18274",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTkxNjM2NA==",
      "updated_at" : "2020-03-06T19:14:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595916364",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
