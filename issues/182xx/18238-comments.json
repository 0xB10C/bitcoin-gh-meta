[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This is an alternative approach to #15505 that's minimally invasive on the data structures. Doing something about this was suggested as a pre-req for #17303 in https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-547589047\r\n\r\n@sdaftuar  expressed some concerns about how much of a CPU hit it could be in worst case scenarios, but it doesn't look too bad in testing:\r\n\r\n```diff\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex 3373f7f544..1b9e66456a 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -735,8 +735,13 @@ std::chrono::microseconds CalculateTxGetDataTime(const uint256& txid, std::chron\r\n     return process_time;\r\n }\r\n \r\n+static uint64_t xxx_time_spent GUARDED_BY(cs_main) = 0;\r\n+static uint64_t xxx_invocations GUARDED_BY(cs_main) = 0;\r\n+\r\n static void RetryProcessTx(CConnman& connman, const uint256& txid, const std::chrono::microseconds current_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n {\r\n+    uint64_t time_start = GetTimeMicros();\r\n+\r\n     CNodeState::TxDownloadState* best_d = nullptr;\r\n     std::chrono::microseconds best;\r\n \r\n@@ -764,6 +769,12 @@ static void RetryProcessTx(CConnman& connman, const uint256& txid, const std::ch\r\n             }\r\n         }\r\n     }\r\n+\r\n+    xxx_time_spent += GetTimeMicros() - time_start;\r\n+    ++xxx_invocations;\r\n+    if (xxx_invocations % 1000 == 0) {\r\n+        LogPrintf(\"Time spent in RetryProcessTx %d.%03ds, %d us per call (%d calls)\\n\", xxx_time_spent / 1000000, (xxx_time_spent / 1000) % 1000, xxx_time_spent/xxx_invocations, xxx_invocations);\r\n+    }\r\n }\r\n \r\n void RequestTx(CNodeState* state, const uint256& txid, std::chrono::microseconds current_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\ndiff --git a/test/functional/p2p_notfound_perf.py b/test/functional/p2p_notfound_perf.py\r\nnew file mode 100755\r\nindex 0000000000..970452696c\r\n--- /dev/null\r\n+++ b/test/functional/p2p_notfound_perf.py\r\n@@ -0,0 +1,63 @@\r\n+#!/usr/bin/env python3\r\n+# Copyright (c) 2017-2018 The Bitcoin Core developers\r\n+# Distributed under the MIT software license, see the accompanying\r\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\"\"\"Test that we don't leak txs to inbound peers that we haven't yet announced to\"\"\"\r\n+\r\n+import time\r\n+from test_framework.messages import msg_notfound, msg_inv, CInv\r\n+from test_framework.mininode import P2PDataStore\r\n+from test_framework.test_framework import BitcoinTestFramework\r\n+from test_framework.util import (\r\n+    assert_equal,\r\n+)\r\n+\r\n+\r\n+class P2PNode(P2PDataStore):\r\n+    def on_inv(self, msg):\r\n+        pass\r\n+\r\n+    def on_getdata(self, msg):\r\n+        t = time.time()\r\n+        self.notfound_queue.extend(msg.inv)\r\n+        for inv in msg.inv:\r\n+            self.getdata[inv] = t\r\n+        while len(self.notfound_queue) >= 100:\r\n+            self.send_message(msg_notfound(vec=self.notfound_queue[:100]))\r\n+            self.notfound_queue = self.notfound_queue[100:]\r\n+\r\n+    def summary(self):\r\n+        return len(self.getdata), len(self.notfound_queue)\r\n+\r\n+class P2PNotFoundPerf(BitcoinTestFramework):\r\n+    def set_test_params(self):\r\n+        self.num_nodes = 1\r\n+\r\n+    def run_test(self):\r\n+        PEERS = 11\r\n+        TRANSACTIONS = 99000\r\n+\r\n+        gen_node = self.nodes[0]  # The block and tx generating node\r\n+        gen_node.generate(1)\r\n+\r\n+        inbound_peers = [ self.nodes[0].add_p2p_connection(P2PNode()) for _ in range(PEERS) ]\r\n+        for inbound in inbound_peers:\r\n+            inbound.getdata = {}\r\n+            inbound.notfound_queue = []\r\n+\r\n+        for txbatch in range(TRANSACTIONS//100):\r\n+            self.log.info(\"Doing batch %d\" % (txbatch+1))\r\n+            ann = [CInv(t=1, h=(txbatch*1000+i)) for i in range(100)]\r\n+            for inbound in inbound_peers:\r\n+                inbound.send_message(msg_inv(inv=ann))\r\n+\r\n+        #gen_node.logging(exclude=['net'])\r\n+\r\n+\r\n+        for i in range(60):\r\n+            self.log.info(\"State: \" + \" \".join(\"%d:%d\" % inbound.summary() for inbound in inbound_peers))\r\n+            time.sleep(15)\r\n+\r\n+\r\n+if __name__ == '__main__':\r\n+    P2PNotFoundPerf().main()\r\n```\r\n\r\nGives: `2020-03-02T06:58:54.778347Z [msghand] Time spent in RetryProcessTx 18.754s, 17 us per call (1089000 calls)` by the end for me, which doesn't seem too bad. It took about 12 minutes for all 99k transactions to get requested/notfound by all 11 peers, so 19 seconds total doesn't seem too bad. (The check for MAX_PEER_TX_IN_FLIGHT significantly cuts down on whether this actually does anything -- if there's lots of tx's announced by each peer, then most of them will always have most tx's in flight)",
      "created_at" : "2020-03-02T07:13:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-593254632",
      "id" : 593254632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzI1NDYzMg==",
      "updated_at" : "2020-03-02T07:13:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593254632",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18044 (Use wtxid for transaction relay by sdaftuar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-03-02T11:05:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-593348410",
      "id" : 593348410,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzM0ODQxMA==",
      "updated_at" : "2020-03-02T11:05:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593348410",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Code looks good to me.\r\nCan you provide more context to understand the test? Are you basically trying to show that DoS-vector your PR opens is probably less than those which already exist?",
      "created_at" : "2020-03-02T17:44:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-593526565",
      "id" : 593526565,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzUyNjU2NQ==",
      "updated_at" : "2020-03-02T17:44:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593526565",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   }
]
