[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18673 (scripted-diff: Sort test includes by MarcoFalke)\n* #18638 (net: Use mockable time for ping/pong, add tests by MarcoFalke)\n* #18446 (test: Add test for wtxid transaction relay by fjahr)\n* #18165 (Consolidate service flag bit-to-name conversion to a shared serviceFlagToStr function by luke-jr)\n* #18077 (net: Add NAT-PMP port forwarding support by hebasto)\n* #18044 (Use wtxid for transaction relay by sdaftuar)\n* #17428 (p2p: Try to preserve outbound block-relay-only connections during restart by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-03-02T16:41:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593496115",
      "id" : 593496115,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzQ5NjExNQ==",
      "updated_at" : "2020-04-17T00:01:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593496115",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2020-03-02T22:54:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593665514",
      "id" : 593665514,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzY2NTUxNA==",
      "updated_at" : "2020-03-02T22:54:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593665514",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept:\r\n\r\nConcept ACK - thanks for working on this!\r\n\r\n---\r\n\r\nImplementation:\r\n\r\nSome comments after first read-through of the implementation:\r\n\r\n**1. Uninitialized read in case of invalid command name**\r\n\r\nIn the \"Invalid command name\" case then a read (and use) of the uninitialized variable `size_or_shortid` will take place on L808:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/73db845771628983c7f288ead73cd3a8793f8c6a/src/net.cpp#L802-L808\r\n\r\n_Shameless plug:_ For those interested in killing the uninitialised read bug class, consider reviewing:\r\n* #17639 â tests: Add `make check-valgrind` to run the unit tests under Valgrind\r\n* #17895 â build: Enable Clang's `-Wconditional-uninitialized` to warn on potential uninitialized reads\r\n\r\n**2. Use of a locale dependent formatting function `itostr(â¦)`**\r\n\r\n`itostr` is used here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/73db845771628983c7f288ead73cd3a8793f8c6a/src/net.cpp#L819-L823\r\n\r\n`itostr` calls `strprintf` which calls `tfm::format` (tinyformat) which uses the standard C++ formatting stringstream interface which is locale dependent.\r\n\r\n_Shameless plug:_ For those interested in permanently killing the locale dependency bug class, consider reviewing:\r\n* #18124 â init: Clarify C and C++ locale assumptions. Add locale sanity checks to verify assumptions at run-time\r\n* #18126 â tests: Add fuzzing harness testing the locale independence of the strencodings.h functions\r\n* #18147 â qt: Kill the locale dependency bug class by not allowing Qt to mess with `LC_NUMERIC`\r\n\r\n**3. `std::exception` vs expected `std::ios_base::failure`**\r\n\r\nA question: I notice that `std::exception` is guarded against instead of the expected `std::ios_base::failure` in case of deserialization errors throughout this PR. Is it intentional? :)\r\n\r\nIt is somewhat related to another deserialization-exception anomaly I mailed you about back in October last year:\r\n\r\n```\r\nWhen fuzzing some deserialization code I noticed that `CExtKey::Unserialize(...)`\r\nand `CExtPubKey::(...)` throw `std::runtime_error` instead of the\r\n`std::ios_base::failure` I expected in case of deserialization errors.\r\n\r\nI saw that this code was written by you originally: do you remember if there\r\nwas a particular reason to go with `std::runtime_error` instead of\r\n`std::ios_base::failure`? If not, do you think it would be safe to change it? :)\r\n\r\nThe commits in question:\r\n*Â https://github.com/bitcoin/bitcoin/commit/07685d1bc1b0b815c00a68a5b7b335ffa0d4d90d\r\n*Â https://github.com/bitcoin/bitcoin/commit/90604f16af63ec066d6561337f476ccd8acec326\r\n```\r\n\r\nThese deviations from the expected`std::ios_base::failure` puzzle me - are they intentional, and if so why? I want to learn :)",
      "created_at" : "2020-03-02T23:22:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593674721",
      "id" : 593674721,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzY3NDcyMQ==",
      "updated_at" : "2020-03-03T11:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593674721",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Very nice to see that the `V2TransportDeserializer` is fuzzed already from birth! I hope that fuzz testing will be as natural as unit testing when introducing security critical code in the future. Kudos for taking care of it here!\r\n\r\nA small comment regarding the fuzzer:\r\n\r\nI think the assertion â¦\r\n\r\n```\r\nassert(msg.m_raw_message_size == CMessageHeader::HEADER_SIZE + msg.m_message_size);\r\n```\r\n\r\nâ¦ in the fuzzing harness is guaranteed to hold for `V1TransportDeserializer` but not for `V2TransportDeserializer`.\r\n\r\nCould that be the case? :)",
      "created_at" : "2020-03-02T23:36:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593678921",
      "id" : 593678921,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzY3ODkyMQ==",
      "updated_at" : "2020-03-02T23:53:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593678921",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Add \"Waiting for author\" tag? :)",
      "created_at" : "2020-03-21T11:09:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-602028339",
      "id" : 602028339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMjAyODMzOQ==",
      "updated_at" : "2020-03-21T11:09:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602028339",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @practicalswift for the review. I tried to fix the exception handling as well as uninitialised read. I also fixed the invalid fuzzing assertion (for V2).\r\n\r\nI'm unsure about the locale dependent formatting. What would you recommend instead of `itotsr`?",
      "created_at" : "2020-03-27T09:04:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-604891842",
      "id" : 604891842,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNDg5MTg0Mg==",
      "updated_at" : "2020-03-27T09:04:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604891842",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jonasschnelli \r\n\r\n> I'm unsure about the locale dependent formatting. What would you recommend instead of `itotsr`?\r\n\r\nI recommend `ToString(â¦)` (`util/string.h`) :)",
      "created_at" : "2020-03-27T14:08:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-605020188",
      "id" : 605020188,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTAyMDE4OA==",
      "updated_at" : "2020-03-27T14:08:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605020188",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989046"
         }
      },
      "author_association" : "NONE",
      "body" : "Nit remove extra newline \r\n```suggestion\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:38:12Z",
      "diff_hunk" : "@@ -199,3 +199,116 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989046",
      "id" : 401989046,
      "line" : 208,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4OTA0Ng==",
      "original_commit_id" : "0e9b029fdceafceffe92a66ac08b74748c92d9da",
      "original_line" : 208,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 5,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989046",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989454"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    // use 32 byte keys with all zeros\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:39:41Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989454",
      "id" : 401989454,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4OTQ1NA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 325,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989454",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990279"
         }
      },
      "author_association" : "NONE",
      "body" : "I could be wrong but style guide seems to say these should be on the same line https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c\r\n```suggestion\r\n    } else {\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:43:06Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990279",
      "id" : 401990279,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDI3OQ==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 337,
      "original_position" : 28,
      "original_start_line" : 336,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990279",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990508"
         }
      },
      "author_association" : "NONE",
      "body" : "Proper social distancing should be followed and pre-inc is preferred.\r\n```suggestion\r\n    for (unsigned int i = 0; i < 100; ++i) {\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:43:50Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990508",
      "id" : 401990508,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDUwOA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 342,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990508",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990612"
         }
      },
      "author_association" : "NONE",
      "body" : "Not sure if this was intended or not, but if it was intended I don't understand why\r\n```suggestion\r\n            // first: read header\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:44:10Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990612",
      "id" : 401990612,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDYxMg==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 354,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990612",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990710"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n            // second: read the encrypted payload (if required)\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:44:34Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char *)serialized_header.data(), serialized_header.size());\n+            //  second: read the encrypted payload (if required)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990710",
      "id" : 401990710,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDcxMA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 357,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990710",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991160"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    for (unsigned int i = 0;i < 1000; ++i) { \r\n        vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash()));\r\n    }\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:46:09Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char *)serialized_header.data(), serialized_header.size());\n+            //  second: read the encrypted payload (if required)\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read((const char *)msg.data.data(), msg.data.size());\n+            if (msg.data.size() > read_bytes && msg.data.size()-read_bytes > 0) read_bytes += deserializer->Read((const char *)msg.data.data()+read_bytes, msg.data.size()-read_bytes);\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size()+serialized_header.size());\n+            // message must be complete\n+            CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+            BOOST_CHECK_EQUAL(msg_deser.m_command, msg.command);\n+            BOOST_CHECK_EQUAL(raw_msg_size, msg_deser.m_message_size);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(net_v2)\n+{\n+    // create some messages where we perform serialization and deserialization\n+    std::vector<CSerializedNetMsg> test_msgs;\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\n+    CDataStream stream(ParseHex(\"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::TX, CTransaction(deserialize, stream)));\n+    std::vector<CInv> vInv;\n+    for (unsigned int i=0;i<1000;i++) { vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash())); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991160",
      "id" : 401991160,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTE2MA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 380,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991160",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991466"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    for (unsigned int i = 0; i < 100; ++i) { \r\n        dummy += \"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\";\r\n    }\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:47:10Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char *)serialized_header.data(), serialized_header.size());\n+            //  second: read the encrypted payload (if required)\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read((const char *)msg.data.data(), msg.data.size());\n+            if (msg.data.size() > read_bytes && msg.data.size()-read_bytes > 0) read_bytes += deserializer->Read((const char *)msg.data.data()+read_bytes, msg.data.size()-read_bytes);\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size()+serialized_header.size());\n+            // message must be complete\n+            CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+            BOOST_CHECK_EQUAL(msg_deser.m_command, msg.command);\n+            BOOST_CHECK_EQUAL(raw_msg_size, msg_deser.m_message_size);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(net_v2)\n+{\n+    // create some messages where we perform serialization and deserialization\n+    std::vector<CSerializedNetMsg> test_msgs;\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\n+    CDataStream stream(ParseHex(\"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::TX, CTransaction(deserialize, stream)));\n+    std::vector<CInv> vInv;\n+    for (unsigned int i=0;i<1000;i++) { vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash())); }\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::INV, vInv));\n+\n+    // add a dummy message\n+    std::string dummy;\n+    for (unsigned int i=0;i<100;i++) { dummy += \"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991466",
      "id" : 401991466,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTQ2Ng==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 385,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991466",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992204"
         }
      },
      "author_association" : "NONE",
      "body" : "maybe \r\n```suggestion\r\n    } else if (m_bytes_decrypted > REKEY_ABORT_LIMIT_BYTES || GetTime() - m_time_last_rekey > REKEY_ABORT_LIMIT_TIME ||\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:49:50Z",
      "diff_hunk" : "@@ -834,6 +846,30 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     msg.m_message_size = msg.m_recv.size(); //message payload size (excluding command)\n     msg.m_raw_message_size =  CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n \n+    if (m_rekey_flag) {\n+        // make sure we rekey at this point, next message is supposed to be encrypted with the new key\n+        CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k1.data(), m_aead_k1.size()).Finalize(m_aead_k1.data());\n+        CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k2.data(), m_aead_k2.size()).Finalize(m_aead_k2.data());\n+\n+        // reset the AEAD context\n+        m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));\n+        LogPrint(BCLog::NET, \"Rekey: new recv keys (%s, %s)\\n\", HexStr(m_aead_k1), HexStr(m_aead_k2));\n+\n+        // reset sequence numbers\n+        m_payload_seqnr = 0;\n+        m_aad_seqnr = 0;\n+        m_aad_pos = 0;\n+        m_bytes_decrypted = 0;\n+        m_time_last_rekey = GetTime();\n+    }\n+    else if (m_bytes_decrypted > REKEY_ABORT_LIMIT_BYTES || GetTime() - m_time_last_rekey > REKEY_ABORT_LIMIT_TIME ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992204",
      "id" : 401992204,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjIwNA==",
      "original_commit_id" : "b2397b06c0b644ca5c0984ed5f17a7c97a4b8844",
      "original_line" : 865,
      "original_position" : 46,
      "original_start_line" : 864,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992204",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992396"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    for (unsigned int i = 0; i <= 76; ++i) {\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:50:40Z",
      "diff_hunk" : "@@ -389,5 +397,78 @@ BOOST_AUTO_TEST_CASE(net_v2)\n     message_serialize_deserialize_test(false, test_msgs);\n }\n \n+BOOST_AUTO_TEST_CASE(net_rekey)\n+{\n+    CPrivKey mutable_k1 = k1;\n+    CPrivKey mutable_k2 = k2;\n+    uint256 mutable_session_id = session_id;\n+\n+    CSerializedNetMsg test_msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true);\n+    CSerializedNetMsg test_msg_short = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK);\n+\n+    // make sure we use the fast rekey rules\n+    std::unique_ptr<TransportSerializer> serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));;\n+    std::unique_ptr<TransportDeserializer> deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2, session_id));\n+\n+    ChaCha20Poly1305AEAD test_decryption_aead(k1.data(), k1.size(), k2.data(), k2.size());\n+\n+    for (unsigned int i=0; i<=76;i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992396",
      "id" : 401992396,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjM5Ng==",
      "original_commit_id" : "b2397b06c0b644ca5c0984ed5f17a7c97a4b8844",
      "original_line" : 415,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992396",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992502"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    for (unsigned int i = 0; i <= 100; ++i) {\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:51:08Z",
      "diff_hunk" : "@@ -389,5 +397,78 @@ BOOST_AUTO_TEST_CASE(net_v2)\n     message_serialize_deserialize_test(false, test_msgs);\n }\n \n+BOOST_AUTO_TEST_CASE(net_rekey)\n+{\n+    CPrivKey mutable_k1 = k1;\n+    CPrivKey mutable_k2 = k2;\n+    uint256 mutable_session_id = session_id;\n+\n+    CSerializedNetMsg test_msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true);\n+    CSerializedNetMsg test_msg_short = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK);\n+\n+    // make sure we use the fast rekey rules\n+    std::unique_ptr<TransportSerializer> serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));;\n+    std::unique_ptr<TransportDeserializer> deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2, session_id));\n+\n+    ChaCha20Poly1305AEAD test_decryption_aead(k1.data(), k1.size(), k2.data(), k2.size());\n+\n+    for (unsigned int i=0; i<=76;i++) {\n+        // encrypt the message without the fast-rekey rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"0\");\n+        std::vector<unsigned char> serialized_header;\n+        serializer->prepareForTransport(test_msg, serialized_header);\n+\n+        // decrypt the message with the fast rekey-rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"1\");\n+        read_message(deserializer, serialized_header, test_msg);\n+        CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+\n+        // make sure we detect the failed rekey\n+        // the 76. message (32kb) must have violated the fast rekey limits\n+        BOOST_CHECK(msg_deser.m_valid_header == (i!=76));\n+    }\n+\n+    // now make sure we are rekeying by checking against a manual aead instance\n+    serializer.reset(new V2TransportSerializer(mutable_k1, mutable_k2, mutable_session_id));\n+    deserializer.reset(new V2TransportDeserializer(Params().MessageStart(), mutable_k1, mutable_k2, mutable_session_id));\n+    uint32_t aad_seqnr = 0;\n+    uint32_t aad_pos = 0;\n+    for (unsigned int i=0; i<=100;i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992502",
      "id" : 401992502,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjUwMg==",
      "original_commit_id" : "b2397b06c0b644ca5c0984ed5f17a7c97a4b8844",
      "original_line" : 436,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992502",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992678"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\nvoid test_deserializer(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<uint8_t>& buffer, const int header_size) \r\n{\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-02T00:51:49Z",
      "diff_hunk" : "@@ -17,24 +18,22 @@ void initialize()\n     SelectParams(CBaseChainParams::REGTEST);\n }\n \n-void test_one_input(const std::vector<uint8_t>& buffer)\n-{\n-    V1TransportDeserializer deserializer{Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION};\n+void test_deserializer(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<uint8_t>& buffer, const int header_size) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992678",
      "id" : 401992678,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjY3OA==",
      "original_commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "original_line" : 21,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/test/fuzz/p2p_transport_deserializer.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992678",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@PastaPastaPasta Worth mentioning for future reviews: we use `clang-format` in the project so the 11 specific whitespace review comments could be simplified to a one general review comment \"Nit: Please use `clang-format-diff.py ` on this diff\" :)",
      "created_at" : "2020-04-02T04:32:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-607614762",
      "id" : 607614762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzYxNDc2Mg==",
      "updated_at" : "2020-04-02T04:32:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607614762",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @PastaPastaPasta and @practicalswift. Applied clang-format now.",
      "created_at" : "2020-04-02T19:23:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-608056625",
      "id" : 608056625,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwODA1NjYyNQ==",
      "updated_at" : "2020-04-02T19:23:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608056625",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407260396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407260396"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T22:30:06Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407260396",
      "id" : 407260396,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDM5Ng==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 726,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407260396",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407260785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407260785"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n        const unsigned int copy_bytes = std::min(remaining, bytes);\r\n```\r\n\r\nAlso `#include <algorithm>` header for `std::min()`.",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T22:34:20Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407260785",
      "id" : 407260785,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDc4NQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 727,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407260785",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261271"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261271"
         }
      },
      "author_association" : "MEMBER",
      "body" : "An explicit type conversion could improve readability:\r\n```suggestion\r\n        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T22:39:59Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261271",
      "id" : 407261271,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTI3MQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 746,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261271",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261365"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is the purpose of `m_message_size` in the log message?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T22:41:29Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261365",
      "id" : 407261365,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTM2NQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 748,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261365",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\r\n        const unsigned int copy_bytes = std::min(remaining, bytes);\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T22:44:00Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261568",
      "id" : 407261568,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTU2OA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 764,
      "original_position" : 54,
      "original_start_line" : 763,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261568",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261836"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\r\n```\r\n\r\n... and drop the line 762:\r\n```\r\n       const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T22:46:45Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[AAD_LEN + m_data_pos], pch, copy_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261836",
      "id" : 407261836,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTgzNg==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 772,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261836",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407262244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407262244"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What if `size_or_shortid` is still `== 0` ?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T22:50:46Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // count bytes we decrypted including MAC tag + AD\n+        m_bytes_decrypted += vRecv.size();\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {\n+            // string command\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID\n+        if (!valid_header && size_or_shortid > 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407262244",
      "id" : 407262244,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MjI0NA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 825,
      "original_position" : 115,
      "original_start_line" : 809,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407262244",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407262788"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407262788"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T22:56:44Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407262788",
      "id" : 407262788,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2Mjc4OA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 903,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407262788",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263182"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be combined:\r\n```suggestion\r\n    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:00:42Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263182",
      "id" : 407263182,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MzE4Mg==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 917,
      "original_position" : 193,
      "original_start_line" : 907,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263182",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    // append the short-ID or (eventually) the varstr of the command\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:01:07Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263223",
      "id" : 407263223,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MzIyMw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 923,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263223",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263272"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263272"
         }
      },
      "author_association" : "MEMBER",
      "body" : "typo:\r\n```suggestion\r\n    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:02:00Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263272",
      "id" : 407263272,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MzI3Mg==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 934,
      "original_position" : 210,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263272",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263619"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n    const int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:06:06Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + 16, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263619",
      "id" : 407263619,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MzYxOQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 946,
      "original_position" : 222,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263619",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407264511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407264511"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually, `bit24` is equivalent to `rekey`. Maybe drop `bit24` in lines 934-935 and:\r\n```suggestion\r\n    bool rekey = msg.data[2] & (1U << 7);\r\n    assert(!rekey);\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:15:51Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + 16, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407264511",
      "id" : 407264511,
      "line" : 945,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NDUxMQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 945,
      "original_position" : 223,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 236,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407264511",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407264883"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407264883"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mind using a named constant:\r\n```suggestion\r\n    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\r\n```\r\n?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:19:39Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + 16, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407264883",
      "id" : 407264883,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NDg4Mw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 939,
      "original_position" : 215,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407264883",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265167"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mind using a named constant:\r\n```suggestion\r\n    m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, msg.data.data(), msg.data.size(), msg.data.data(), msg.data.size() - CHACHA20_POLY1305_AEAD_TAG_LEN, true);\r\n```\r\n?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:22:49Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + 16, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;\n+    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 10 : REKEY_LIMIT_TIME)) {\n+        LogPrint(BCLog::NET, \"Rekey limits reached, performing rekey.\\n\");\n+        msg.data[2] |= (1u << 7);\n+        rekey = true;\n+    }\n+\n+    // encrypt the payload, ignore return code since it can't fail in this case (controlled buffers, don't check the MAC during encrypting)\n+    m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, msg.data.data(), msg.data.size(), msg.data.data(), msg.data.size() - 16, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265167",
      "id" : 407265167,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTE2Nw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 955,
      "original_position" : 231,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265167",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265366"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mind moving the member initializer list to next line to improve readability?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:24:30Z",
      "diff_hunk" : "@@ -703,6 +705,68 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey;\n+    uint256 m_session_id;     // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr; // sequence number for the payload\n+    uint64_t m_aad_seqnr;     // sequence number for the packet length (AD)\n+    int m_aad_pos;            // position in the aad keystream\n+    bool m_in_data;           // parsing header (false) or data (true)\n+    uint32_t m_message_size;  // expected message size\n+    CDataStream vRecv;        // received message data\n+    unsigned int m_hdr_pos;   // read pos in header\n+    unsigned int m_data_pos;  // read pos in data\n+    bool m_rekey_flag;        // rekey in message detected\n+\n+public:\n+    V2TransportDeserializer(const CMessageHeader::MessageStartChars& pchMessageStartIn, const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_bytes_decrypted(0), m_time_last_rekey(GetTime()), m_session_id(session_id), m_payload_seqnr(0), m_aad_seqnr(0), m_aad_pos(0), vRecv(SER_NETWORK, INIT_PROTO_VERSION)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265366",
      "id" : 407265366,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTM2Ng==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 737,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265366",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265633"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style nit: could be placed into one line or in braces.",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:27:29Z",
      "diff_hunk" : "@@ -703,6 +705,68 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey;\n+    uint256 m_session_id;     // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr; // sequence number for the payload\n+    uint64_t m_aad_seqnr;     // sequence number for the packet length (AD)\n+    int m_aad_pos;            // position in the aad keystream\n+    bool m_in_data;           // parsing header (false) or data (true)\n+    uint32_t m_message_size;  // expected message size\n+    CDataStream vRecv;        // received message data\n+    unsigned int m_hdr_pos;   // read pos in header\n+    unsigned int m_data_pos;  // read pos in data\n+    bool m_rekey_flag;        // rekey in message detected\n+\n+public:\n+    V2TransportDeserializer(const CMessageHeader::MessageStartChars& pchMessageStartIn, const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_bytes_decrypted(0), m_time_last_rekey(GetTime()), m_session_id(session_id), m_payload_seqnr(0), m_aad_seqnr(0), m_aad_pos(0), vRecv(SER_NETWORK, INIT_PROTO_VERSION)\n+    {\n+        Reset();\n+    }\n+\n+    void Reset()\n+    {\n+        vRecv.clear();\n+        vRecv.resize(CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        m_in_data = false;\n+        m_hdr_pos = 0;\n+        m_message_size = 0;\n+        m_data_pos = 0;\n+        m_rekey_flag = false;\n+    }\n+    bool Complete() const\n+    {\n+        if (!m_in_data)\n+            return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265633",
      "id" : 407265633,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTYzMw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 753,
      "original_position" : 62,
      "original_start_line" : 754,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265633",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265779"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mind moving the member initializer list to next line to improve readability?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:28:46Z",
      "diff_hunk" : "@@ -717,6 +781,27 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for a later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_encrypted = 0; //counter of bytes encrypted with same key\n+    int64_t m_time_last_rekey = 0;\n+    uint256 m_session_id; // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr = 0;\n+    uint64_t m_aad_seqnr = 0;\n+    int m_aad_pos = 0;\n+\n+public:\n+    V2TransportSerializer(const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_session_id(session_id)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265779",
      "id" : 407265779,
      "line" : 797,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTc3OQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 797,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 99,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265779",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265968"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Have you consider a `switch` statement as an alternative?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:30:49Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265968",
      "id" : 407265968,
      "line" : 211,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTk2OA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 211,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 8,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265968",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265992"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Have you consider a `switch` statement as an alternative?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:31:04Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)\n+{\n+    if (shortID == NetMsgType::ADDR_SHORT_ID) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265992",
      "id" : 407265992,
      "line" : 276,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTk5Mg==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 276,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 73,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265992",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407266260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407266260"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: hereinafter\r\n```suggestion\r\nconstexpr uint8_t VERSION_SHORT_ID = 38;\r\n```",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:33:59Z",
      "diff_hunk" : "@@ -71,99 +71,115 @@ namespace NetMsgType {\n  * @see https://bitcoin.org/en/developer-reference#version\n  */\n extern const char *VERSION;\n+const uint8_t VERSION_SHORT_ID = 38;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407266260",
      "id" : 407266260,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NjI2MA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 74,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407266260",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407266630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407266630"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`MIN_REKEY_TIME` is unused now. Is it added intended on purpose in the future?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-12T23:38:24Z",
      "diff_hunk" : "@@ -703,6 +705,68 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407266630",
      "id" : 407266630,
      "line" : 713,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NjYzMA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 713,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 22,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407266630",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407715006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407715006"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you explain a bit what you envision the `-netencryptionfastrekey` flag to do? Is it a command line flag for testing purposes?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-13T20:54:12Z",
      "diff_hunk" : "@@ -393,5 +402,79 @@ BOOST_AUTO_TEST_CASE(net_v2)\n     message_serialize_deserialize_test(false, test_msgs);\n }\n \n+BOOST_AUTO_TEST_CASE(net_rekey)\n+{\n+    CPrivKey mutable_k1 = k1;\n+    CPrivKey mutable_k2 = k2;\n+    uint256 mutable_session_id = session_id;\n+\n+    CSerializedNetMsg test_msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true);\n+    CSerializedNetMsg test_msg_short = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK);\n+\n+    // make sure we use the fast rekey rules\n+    std::unique_ptr<TransportSerializer> serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));\n+    ;\n+    std::unique_ptr<TransportDeserializer> deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2, session_id));\n+\n+    ChaCha20Poly1305AEAD test_decryption_aead(k1.data(), k1.size(), k2.data(), k2.size());\n+\n+    for (unsigned int i = 0; i <= 76; i++) {\n+        // encrypt the message without the fast-rekey rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"0\");\n+        std::vector<unsigned char> serialized_header;\n+        serializer->prepareForTransport(test_msg, serialized_header);\n+\n+        // decrypt the message with the fast rekey-rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"1\");\n+        read_message(deserializer, serialized_header, test_msg);\n+        CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+\n+        // make sure we detect the failed rekey\n+        // the 76. message (32kb) must have violated the fast rekey limits\n+        BOOST_CHECK(msg_deser.m_valid_header == (i != 76));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407715006",
      "id" : 407715006,
      "line" : 436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxNTAwNg==",
      "original_commit_id" : "1b2f52af4f85910673ac43be1568e3ad32e878ee",
      "original_line" : 436,
      "original_position" : 94,
      "original_start_line" : 422,
      "path" : "src/test/net_tests.cpp",
      "position" : 128,
      "pull_request_review_id" : 392431872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : 424,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407715006",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407726340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407726340"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps I'm mistaken, but it seems like this `pchMessageStartIn` is not needed. I tried compiling with it removed and that seemed to work.",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-13T21:16:25Z",
      "diff_hunk" : "@@ -703,6 +705,55 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    uint64_t m_payload_seqnr; // sequence number for the payload\n+    uint64_t m_aad_seqnr;     // sequence number for the packet length (AD)\n+    int m_aad_pos;            // position in the aad keystream\n+    bool m_in_data;           // parsing header (false) or data (true)\n+    uint32_t m_message_size;  // expected message size\n+    CDataStream vRecv;        // received message data\n+    unsigned int m_hdr_pos;   // read pos in header\n+    unsigned int m_data_pos;  // read pos in data\n+\n+    int readHeader(const char* pch, unsigned int nBytes);\n+    int readData(const char* pch, unsigned int nBytes);\n+\n+public:\n+    V2TransportDeserializer(const CMessageHeader::MessageStartChars& pchMessageStartIn, const CPrivKey& k1, const CPrivKey& k2) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_payload_seqnr(0), m_aad_seqnr(0), m_aad_pos(0), vRecv(SER_NETWORK, INIT_PROTO_VERSION)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407726340",
      "id" : 407726340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyNjM0MA==",
      "original_commit_id" : "786ec9bffc09c73d5b94e5056e7396adc0c2eb3d",
      "original_line" : 725,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 392431872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407726340",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407729684"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407729684"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps we could use in-class member initializers to de-clutter the constructor signature",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-13T21:23:14Z",
      "diff_hunk" : "@@ -703,6 +705,55 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    uint64_t m_payload_seqnr; // sequence number for the payload\n+    uint64_t m_aad_seqnr;     // sequence number for the packet length (AD)\n+    int m_aad_pos;            // position in the aad keystream\n+    bool m_in_data;           // parsing header (false) or data (true)\n+    uint32_t m_message_size;  // expected message size\n+    CDataStream vRecv;        // received message data\n+    unsigned int m_hdr_pos;   // read pos in header\n+    unsigned int m_data_pos;  // read pos in data",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407729684",
      "id" : 407729684,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyOTY4NA==",
      "original_commit_id" : "786ec9bffc09c73d5b94e5056e7396adc0c2eb3d",
      "original_line" : 719,
      "original_position" : 26,
      "original_start_line" : 711,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 392431872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407729684",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407741063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407741063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please replace occurrences of \"command\" with something like \"msg_type\" at least in new code. See also #18533 ",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-13T21:48:06Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407741063",
      "id" : 407741063,
      "line" : 274,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MTA2Mw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 274,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 71,
      "pull_request_review_id" : 392463471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407741063",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407962780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407962780"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd like to keep it to be consistent with BIP324 (and other bips). Changing it might make it more confusing.",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-14T08:37:36Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407962780",
      "id" : 407962780,
      "in_reply_to_id" : 407741063,
      "line" : 274,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2Mjc4MA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 274,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 71,
      "pull_request_review_id" : 392717158,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407962780",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408000719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408000719"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. I added the check for not violating the `MIN_REKEY_TIME`.",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-14T09:36:46Z",
      "diff_hunk" : "@@ -703,6 +705,68 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408000719",
      "id" : 408000719,
      "in_reply_to_id" : 407266630,
      "line" : 713,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMDcxOQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 713,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 22,
      "pull_request_review_id" : 392762346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408000719",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408001077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408001077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you elaborate on the differences? Aren't the compiler differences marginal?",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-14T09:37:17Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)\n+{\n+    if (shortID == NetMsgType::ADDR_SHORT_ID) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408001077",
      "id" : 408001077,
      "in_reply_to_id" : 407265992,
      "line" : 276,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTA3Nw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 276,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 73,
      "pull_request_review_id" : 392762761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408001077",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408001745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408001745"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It was initially to debug the most significant bit. I'll remove it.",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-14T09:38:22Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408001745",
      "id" : 408001745,
      "in_reply_to_id" : 407261365,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTc0NQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 748,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 392763565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408001745",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408013698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408013698"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch. Add `0` now to the `unknown` branch.",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-14T09:57:00Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // count bytes we decrypted including MAC tag + AD\n+        m_bytes_decrypted += vRecv.size();\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {\n+            // string command\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID\n+        if (!valid_header && size_or_shortid > 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408013698",
      "id" : 408013698,
      "in_reply_to_id" : 407262244,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMzY5OA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 825,
      "original_position" : 115,
      "original_start_line" : 809,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 392777788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408013698",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408018775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408018775"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Let's keep it for readability.",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-14T10:05:17Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + 16, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408018775",
      "id" : 408018775,
      "in_reply_to_id" : 407264511,
      "line" : 945,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxODc3NQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 945,
      "original_position" : 223,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 236,
      "pull_request_review_id" : 392783952,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-17T15:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408018775",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @hebasto, @dongcarl and @MarcoFalke for the review.\r\nI tried to address all the points. You'r invited to go again through the PR for further findings.\r\n",
      "created_at" : "2020-04-14T10:11:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-613350737",
      "id" : 613350737,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMzM1MDczNw==",
      "updated_at" : "2020-04-14T10:11:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613350737",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-04-17T15:17:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-615303093",
      "id" : 615303093,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNTMwMzA5Mw==",
      "updated_at" : "2020-04-17T15:17:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/615303093",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.",
      "created_at" : "2020-04-17T15:52:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-615322957",
      "id" : 615322957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNTMyMjk1Nw==",
      "updated_at" : "2020-04-17T15:52:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/615322957",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r414820256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414820256"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you explain the fuzzer a bit more? It seems you are reusing the buffer for both deserializers. Assuming that the structure of the buffer for both deserializers should be different, this might cause the fuzz engine to only focus on one of them (the \"easier\" one) and rarely explore paths in the v2 one, no?\r\n\r\nIf so, maybe you can split them up in two targets. See `./src/test/fuzz/deserialize.cpp` on how to do that.",
      "commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "created_at" : "2020-04-24T19:43:44Z",
      "diff_hunk" : "@@ -45,3 +45,14 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         }\n     }\n }\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    std::unique_ptr<TransportDeserializer> v1_deserializer = MakeUnique<V1TransportDeserializer>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION);\n+    const CPrivKey k1(32, 0);\n+    const CPrivKey k2(32, 0);\n+    const uint256 session_id;\n+    std::unique_ptr<TransportDeserializer> v2_deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(k1, k2, session_id));\n+    test_deserializer(v1_deserializer, buffer, CMessageHeader::HEADER_SIZE);\n+    test_deserializer(v2_deserializer, buffer, CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r414820256",
      "id" : 414820256,
      "line" : 57,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMDI1Ng==",
      "original_commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "original_line" : 57,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/fuzz/p2p_transport_deserializer.cpp",
      "position" : 51,
      "pull_request_review_id" : 400224123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-24T19:43:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414820256",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
