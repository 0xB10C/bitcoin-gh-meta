[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18446 (test: Add test for wtxid transaction relay by fjahr)\n* #18165 (Consolidate service flag bit-to-name conversion to a shared serviceFlagToStr function by luke-jr)\n* #18044 (Use wtxid for transaction relay by sdaftuar)\n* #16442 (Serve BIP 157 compact filters by jimpo)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-03-02T16:41:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593496115",
      "id" : 593496115,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzQ5NjExNQ==",
      "updated_at" : "2020-04-01T05:26:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593496115",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2020-03-02T22:54:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593665514",
      "id" : 593665514,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzY2NTUxNA==",
      "updated_at" : "2020-03-02T22:54:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593665514",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept:\r\n\r\nConcept ACK - thanks for working on this!\r\n\r\n---\r\n\r\nImplementation:\r\n\r\nSome comments after first read-through of the implementation:\r\n\r\n**1. Uninitialized read in case of invalid command name**\r\n\r\nIn the \"Invalid command name\" case then a read (and use) of the uninitialized variable `size_or_shortid` will take place on L808:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/73db845771628983c7f288ead73cd3a8793f8c6a/src/net.cpp#L802-L808\r\n\r\n_Shameless plug:_ For those interested in killing the uninitialised read bug class, consider reviewing:\r\n* #17639 â tests: Add `make check-valgrind` to run the unit tests under Valgrind\r\n* #17895 â build: Enable Clang's `-Wconditional-uninitialized` to warn on potential uninitialized reads\r\n\r\n**2. Use of a locale dependent formatting function `itostr(â¦)`**\r\n\r\n`itostr` is used here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/73db845771628983c7f288ead73cd3a8793f8c6a/src/net.cpp#L819-L823\r\n\r\n`itostr` calls `strprintf` which calls `tfm::format` (tinyformat) which uses the standard C++ formatting stringstream interface which is locale dependent.\r\n\r\n_Shameless plug:_ For those interested in permanently killing the locale dependency bug class, consider reviewing:\r\n* #18124 â init: Clarify C and C++ locale assumptions. Add locale sanity checks to verify assumptions at run-time\r\n* #18126 â tests: Add fuzzing harness testing the locale independence of the strencodings.h functions\r\n* #18147 â qt: Kill the locale dependency bug class by not allowing Qt to mess with `LC_NUMERIC`\r\n\r\n**3. `std::exception` vs expected `std::ios_base::failure`**\r\n\r\nA question: I notice that `std::exception` is guarded against instead of the expected `std::ios_base::failure` in case of deserialization errors throughout this PR. Is it intentional? :)\r\n\r\nIt is somewhat related to another deserialization-exception anomaly I mailed you about back in October last year:\r\n\r\n```\r\nWhen fuzzing some deserialization code I noticed that `CExtKey::Unserialize(...)`\r\nand `CExtPubKey::(...)` throw `std::runtime_error` instead of the\r\n`std::ios_base::failure` I expected in case of deserialization errors.\r\n\r\nI saw that this code was written by you originally: do you remember if there\r\nwas a particular reason to go with `std::runtime_error` instead of\r\n`std::ios_base::failure`? If not, do you think it would be safe to change it? :)\r\n\r\nThe commits in question:\r\n*Â https://github.com/bitcoin/bitcoin/commit/07685d1bc1b0b815c00a68a5b7b335ffa0d4d90d\r\n*Â https://github.com/bitcoin/bitcoin/commit/90604f16af63ec066d6561337f476ccd8acec326\r\n```\r\n\r\nThese deviations from the expected`std::ios_base::failure` puzzle me - are they intentional, and if so why? I want to learn :)",
      "created_at" : "2020-03-02T23:22:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593674721",
      "id" : 593674721,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzY3NDcyMQ==",
      "updated_at" : "2020-03-03T11:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593674721",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Very nice to see that the `V2TransportDeserializer` is fuzzed already from birth! I hope that fuzz testing will be as natural as unit testing when introducing security critical code in the future. Kudos for taking care of it here!\r\n\r\nA small comment regarding the fuzzer:\r\n\r\nI think the assertion â¦\r\n\r\n```\r\nassert(msg.m_raw_message_size == CMessageHeader::HEADER_SIZE + msg.m_message_size);\r\n```\r\n\r\nâ¦ in the fuzzing harness is guaranteed to hold for `V1TransportDeserializer` but not for `V2TransportDeserializer`.\r\n\r\nCould that be the case? :)",
      "created_at" : "2020-03-02T23:36:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593678921",
      "id" : 593678921,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzY3ODkyMQ==",
      "updated_at" : "2020-03-02T23:53:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593678921",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Add \"Waiting for author\" tag? :)",
      "created_at" : "2020-03-21T11:09:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-602028339",
      "id" : 602028339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMjAyODMzOQ==",
      "updated_at" : "2020-03-21T11:09:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602028339",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @practicalswift for the review. I tried to fix the exception handling as well as uninitialised read. I also fixed the invalid fuzzing assertion (for V2).\r\n\r\nI'm unsure about the locale dependent formatting. What would you recommend instead of `itotsr`?",
      "created_at" : "2020-03-27T09:04:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-604891842",
      "id" : 604891842,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNDg5MTg0Mg==",
      "updated_at" : "2020-03-27T09:04:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604891842",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jonasschnelli \r\n\r\n> I'm unsure about the locale dependent formatting. What would you recommend instead of `itotsr`?\r\n\r\nI recommend `ToString(â¦)` (`util/string.h`) :)",
      "created_at" : "2020-03-27T14:08:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-605020188",
      "id" : 605020188,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTAyMDE4OA==",
      "updated_at" : "2020-03-27T14:08:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605020188",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989046"
         }
      },
      "author_association" : "NONE",
      "body" : "Nit remove extra newline \r\n```suggestion\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:38:12Z",
      "diff_hunk" : "@@ -199,3 +199,116 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989046",
      "id" : 401989046,
      "line" : 203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4OTA0Ng==",
      "original_commit_id" : "0e9b029fdceafceffe92a66ac08b74748c92d9da",
      "original_line" : 203,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 5,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T00:54:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989046",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989454"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    // use 32 byte keys with all zeros\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:39:41Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989454",
      "id" : 401989454,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4OTQ1NA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 325,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T00:54:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989454",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990279"
         }
      },
      "author_association" : "NONE",
      "body" : "I could be wrong but style guide seems to say these should be on the same line https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c\r\n```suggestion\r\n    } else {\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:43:06Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990279",
      "id" : 401990279,
      "line" : 347,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDI3OQ==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 337,
      "original_position" : 28,
      "original_start_line" : 336,
      "path" : "src/test/net_tests.cpp",
      "position" : 38,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : 346,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-02T00:54:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990279",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990508"
         }
      },
      "author_association" : "NONE",
      "body" : "Proper social distancing should be followed and pre-inc is preferred.\r\n```suggestion\r\n    for (unsigned int i = 0; i < 100; ++i) {\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:43:50Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990508",
      "id" : 401990508,
      "line" : 352,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDUwOA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 342,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 43,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T00:54:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990508",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990612"
         }
      },
      "author_association" : "NONE",
      "body" : "Not sure if this was intended or not, but if it was intended I don't understand why\r\n```suggestion\r\n            // first: read header\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:44:10Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990612",
      "id" : 401990612,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDYxMg==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 354,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T00:54:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990612",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990710"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n            // second: read the encrypted payload (if required)\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:44:34Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char *)serialized_header.data(), serialized_header.size());\n+            //  second: read the encrypted payload (if required)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990710",
      "id" : 401990710,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDcxMA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 357,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T00:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990710",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991160"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    for (unsigned int i = 0;i < 1000; ++i) { \r\n        vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash()));\r\n    }\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:46:09Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char *)serialized_header.data(), serialized_header.size());\n+            //  second: read the encrypted payload (if required)\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read((const char *)msg.data.data(), msg.data.size());\n+            if (msg.data.size() > read_bytes && msg.data.size()-read_bytes > 0) read_bytes += deserializer->Read((const char *)msg.data.data()+read_bytes, msg.data.size()-read_bytes);\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size()+serialized_header.size());\n+            // message must be complete\n+            CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+            BOOST_CHECK_EQUAL(msg_deser.m_command, msg.command);\n+            BOOST_CHECK_EQUAL(raw_msg_size, msg_deser.m_message_size);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(net_v2)\n+{\n+    // create some messages where we perform serialization and deserialization\n+    std::vector<CSerializedNetMsg> test_msgs;\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\n+    CDataStream stream(ParseHex(\"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::TX, CTransaction(deserialize, stream)));\n+    std::vector<CInv> vInv;\n+    for (unsigned int i=0;i<1000;i++) { vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash())); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991160",
      "id" : 401991160,
      "line" : 388,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTE2MA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 380,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 79,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T00:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991160",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991466"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    for (unsigned int i = 0; i < 100; ++i) { \r\n        dummy += \"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\";\r\n    }\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:47:10Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char *)serialized_header.data(), serialized_header.size());\n+            //  second: read the encrypted payload (if required)\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read((const char *)msg.data.data(), msg.data.size());\n+            if (msg.data.size() > read_bytes && msg.data.size()-read_bytes > 0) read_bytes += deserializer->Read((const char *)msg.data.data()+read_bytes, msg.data.size()-read_bytes);\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size()+serialized_header.size());\n+            // message must be complete\n+            CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+            BOOST_CHECK_EQUAL(msg_deser.m_command, msg.command);\n+            BOOST_CHECK_EQUAL(raw_msg_size, msg_deser.m_message_size);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(net_v2)\n+{\n+    // create some messages where we perform serialization and deserialization\n+    std::vector<CSerializedNetMsg> test_msgs;\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\n+    CDataStream stream(ParseHex(\"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::TX, CTransaction(deserialize, stream)));\n+    std::vector<CInv> vInv;\n+    for (unsigned int i=0;i<1000;i++) { vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash())); }\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::INV, vInv));\n+\n+    // add a dummy message\n+    std::string dummy;\n+    for (unsigned int i=0;i<100;i++) { dummy += \"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991466",
      "id" : 401991466,
      "line" : 393,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTQ2Ng==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 385,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 84,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T00:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991466",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992204"
         }
      },
      "author_association" : "NONE",
      "body" : "maybe \r\n```suggestion\r\n    } else if (m_bytes_decrypted > REKEY_ABORT_LIMIT_BYTES || GetTime() - m_time_last_rekey > REKEY_ABORT_LIMIT_TIME ||\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:49:50Z",
      "diff_hunk" : "@@ -834,6 +846,30 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     msg.m_message_size = msg.m_recv.size(); //message payload size (excluding command)\n     msg.m_raw_message_size =  CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n \n+    if (m_rekey_flag) {\n+        // make sure we rekey at this point, next message is supposed to be encrypted with the new key\n+        CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k1.data(), m_aead_k1.size()).Finalize(m_aead_k1.data());\n+        CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k2.data(), m_aead_k2.size()).Finalize(m_aead_k2.data());\n+\n+        // reset the AEAD context\n+        m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));\n+        LogPrint(BCLog::NET, \"Rekey: new recv keys (%s, %s)\\n\", HexStr(m_aead_k1), HexStr(m_aead_k2));\n+\n+        // reset sequence numbers\n+        m_payload_seqnr = 0;\n+        m_aad_seqnr = 0;\n+        m_aad_pos = 0;\n+        m_bytes_decrypted = 0;\n+        m_time_last_rekey = GetTime();\n+    }\n+    else if (m_bytes_decrypted > REKEY_ABORT_LIMIT_BYTES || GetTime() - m_time_last_rekey > REKEY_ABORT_LIMIT_TIME ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992204",
      "id" : 401992204,
      "line" : 865,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjIwNA==",
      "original_commit_id" : "b2397b06c0b644ca5c0984ed5f17a7c97a4b8844",
      "original_line" : 865,
      "original_position" : 46,
      "original_start_line" : 864,
      "path" : "src/net.cpp",
      "position" : 155,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : 864,
      "start_side" : "RIGHT",
      "updated_at" : "2020-04-02T00:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992204",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992396"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    for (unsigned int i = 0; i <= 76; ++i) {\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:50:40Z",
      "diff_hunk" : "@@ -389,5 +397,78 @@ BOOST_AUTO_TEST_CASE(net_v2)\n     message_serialize_deserialize_test(false, test_msgs);\n }\n \n+BOOST_AUTO_TEST_CASE(net_rekey)\n+{\n+    CPrivKey mutable_k1 = k1;\n+    CPrivKey mutable_k2 = k2;\n+    uint256 mutable_session_id = session_id;\n+\n+    CSerializedNetMsg test_msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true);\n+    CSerializedNetMsg test_msg_short = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK);\n+\n+    // make sure we use the fast rekey rules\n+    std::unique_ptr<TransportSerializer> serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));;\n+    std::unique_ptr<TransportDeserializer> deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2, session_id));\n+\n+    ChaCha20Poly1305AEAD test_decryption_aead(k1.data(), k1.size(), k2.data(), k2.size());\n+\n+    for (unsigned int i=0; i<=76;i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992396",
      "id" : 401992396,
      "line" : 415,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjM5Ng==",
      "original_commit_id" : "b2397b06c0b644ca5c0984ed5f17a7c97a4b8844",
      "original_line" : 415,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 106,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T00:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992396",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992502"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    for (unsigned int i = 0; i <= 100; ++i) {\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:51:08Z",
      "diff_hunk" : "@@ -389,5 +397,78 @@ BOOST_AUTO_TEST_CASE(net_v2)\n     message_serialize_deserialize_test(false, test_msgs);\n }\n \n+BOOST_AUTO_TEST_CASE(net_rekey)\n+{\n+    CPrivKey mutable_k1 = k1;\n+    CPrivKey mutable_k2 = k2;\n+    uint256 mutable_session_id = session_id;\n+\n+    CSerializedNetMsg test_msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true);\n+    CSerializedNetMsg test_msg_short = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK);\n+\n+    // make sure we use the fast rekey rules\n+    std::unique_ptr<TransportSerializer> serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));;\n+    std::unique_ptr<TransportDeserializer> deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2, session_id));\n+\n+    ChaCha20Poly1305AEAD test_decryption_aead(k1.data(), k1.size(), k2.data(), k2.size());\n+\n+    for (unsigned int i=0; i<=76;i++) {\n+        // encrypt the message without the fast-rekey rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"0\");\n+        std::vector<unsigned char> serialized_header;\n+        serializer->prepareForTransport(test_msg, serialized_header);\n+\n+        // decrypt the message with the fast rekey-rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"1\");\n+        read_message(deserializer, serialized_header, test_msg);\n+        CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+\n+        // make sure we detect the failed rekey\n+        // the 76. message (32kb) must have violated the fast rekey limits\n+        BOOST_CHECK(msg_deser.m_valid_header == (i!=76));\n+    }\n+\n+    // now make sure we are rekeying by checking against a manual aead instance\n+    serializer.reset(new V2TransportSerializer(mutable_k1, mutable_k2, mutable_session_id));\n+    deserializer.reset(new V2TransportDeserializer(Params().MessageStart(), mutable_k1, mutable_k2, mutable_session_id));\n+    uint32_t aad_seqnr = 0;\n+    uint32_t aad_pos = 0;\n+    for (unsigned int i=0; i<=100;i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992502",
      "id" : 401992502,
      "line" : 436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjUwMg==",
      "original_commit_id" : "b2397b06c0b644ca5c0984ed5f17a7c97a4b8844",
      "original_line" : 436,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 127,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T00:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992502",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992678"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\nvoid test_deserializer(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<uint8_t>& buffer, const int header_size) \r\n{\r\n```",
      "commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "created_at" : "2020-04-02T00:51:49Z",
      "diff_hunk" : "@@ -17,24 +18,22 @@ void initialize()\n     SelectParams(CBaseChainParams::REGTEST);\n }\n \n-void test_one_input(const std::vector<uint8_t>& buffer)\n-{\n-    V1TransportDeserializer deserializer{Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION};\n+void test_deserializer(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<uint8_t>& buffer, const int header_size) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992678",
      "id" : 401992678,
      "line" : 21,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjY3OA==",
      "original_commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "original_line" : 21,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/test/fuzz/p2p_transport_deserializer.cpp",
      "position" : 15,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T00:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992678",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@PastaPastaPasta Worth mentioning for future reviews: we use `clang-format` in the project so the 11 specific whitespace review comments could be simplified to a one general review comment \"Nit: Please use `clang-format-diff.py ` on this diff\" :)",
      "created_at" : "2020-04-02T04:32:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-607614762",
      "id" : 607614762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzYxNDc2Mg==",
      "updated_at" : "2020-04-02T04:32:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607614762",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @PastaPastaPasta and @practicalswift. Applied clang-format now.",
      "created_at" : "2020-04-02T19:23:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-608056625",
      "id" : 608056625,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwODA1NjYyNQ==",
      "updated_at" : "2020-04-02T19:23:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608056625",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
