[
   {
      "author_association" : "MEMBER",
      "body" : "For completeness, the other bugs that mention the same exception \"Invalid argument\" in the scheduler: #16307, #16027, #14200.",
      "created_at" : "2020-02-28T21:14:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18227#issuecomment-592731234",
      "id" : 592731234,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18227",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MjczMTIzNA==",
      "updated_at" : "2020-02-28T21:14:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/592731234",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Could you post the specs/setup for the Google Cloud instance you were using to reliably recreate the issue?",
      "created_at" : "2020-02-28T21:24:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18227#issuecomment-592735760",
      "id" : 592735760,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18227",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MjczNTc2MA==",
      "updated_at" : "2020-02-28T21:24:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/592735760",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it was `n1-standard-1 (1 vCPU, 3.75 GB memory)` and it only happened after a reboot once.\r\n\r\nAlso, it only happened with `make -j 2 check`, as opposed to `src/test/test_bitcoin -t scheduler_tests`",
      "created_at" : "2020-02-28T21:27:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18227#issuecomment-592736694",
      "id" : 592736694,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18227",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MjczNjY5NA==",
      "updated_at" : "2020-02-28T21:27:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/592736694",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Although I haven't been able to replicate the failure, my current best guess is an invalid timespec passed to `pthread_cond_timedwait` from [the timed wait loop](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/scheduler.cpp#L64).\r\n\r\nI'm hoping someone can suggest a cleaner way of corroborating or ruling out this hypothesis (see below), especially since @amitiuttarwar told me that @ajtowns has concluded that an invalid timespec is *not* the cause.\r\n\r\n#### Assumptions/observations:\r\n\r\n- only `serviceQueue` waits on `newTasksScheduled`, one indefinite wait loop which terminates when the queue is not empty, and one timed wait loop which terminates when the scheduled time of the first task has been reached.\r\n\r\n- It appears the failures always happens with `make depends` and therefore boost 1.70.0, which implies that [`wait_until` is used (as opposed to `timed_wait`)](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/scheduler.cpp#L59-L67).\r\n\r\n- `mockforward` [declares `CScheduler scheduler`](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/test/scheduler_tests.cpp#L158), which isn't copied or moved, but is shared by reference with the [`serviceQueue` thread](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/test/scheduler_tests.cpp#L162) (only one), and [the task that stops the scheduler](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/test/scheduler_tests.cpp#L179).\r\n\r\n- the error is returned after [there are already tasks in the queue](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/test/scheduler_tests.cpp#L173) (as per boot test checkpoints, see build logs) but before [the queue servicing thread has terminated](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/test/scheduler_tests.cpp#L180) (because only `serviceQueue` waits on the condition variable, and the only timed wait is at [on line 64](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/scheduler.cpp#L64)).\r\n\r\n- the `serviceQueue` thread and the test are not synchronized before the call to `MockForward`, so a race is possible:\r\n  - `serviceQueue` may reach the timed wait loop with the original queue and then [woken up](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/scheduler.cpp#L136) by [the call to MockForward](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/test/scheduler_tests.cpp#L176) after the queue has been updated.\r\n  - `MockForward` may update the queue for the updated task times before the 1st iteration of the timed wait loop.\r\n    This seems less likely since the failure appears to have been introduced by the new mocking behavior, and `manythreads` already tests [scheduling of tasks for times in the past](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/test/scheduler_tests.cpp#L56) (note, the function name implies milliseconds - or is it megaseconds? :wink: - but [the returned value is interpreted as microseconds](https://github.com/amitiuttarwar/bitcoin/blob/df29a71f056e448763d05a40b07ff365b4526ba5/src/test/scheduler_tests.cpp#L66))\r\n\r\n#### Alternative explanations for `EINVAL` and evidence against them\r\n\r\n- unintiialized condvar or mutex, since `pthread_cond_init` and `pthread_mutex_init` are called from the constructors of the scheduler member variables `boost::condition_variable newTasksScheduled` and `mutable boost::mutex newTasksMutex`\r\n- destroyed condvar or mutex, since the scheduler lifetime is bound to the test's scope\r\n- different mutex for same condvar, since there is only one `serviceQueue` thread[1]\r\n\r\nAs far as I'm aware the only way for the timespec to be invalid is if `tv_msec` is outside the range `[0, 1e9)`.\r\n\r\nThere is also some very weak evidence for this cause, namely condition variable and other timed wait related bugfixes mentioned boost release notes, but these generally pertain to win32, and non monotonic system clock values. Furthermore, such a bug only seems plausible if time values are converted (see my question below about `do_wait_until` variants and `internal_chrono_clock`).\r\n\r\n#### Next steps\r\n\r\nI suppose this can be validated by patching boost in make depends, so that it checks the `tv_msec` field of the timespec returned by `getTs` to see if this makes a difference on the CI machines that reliably fail.\r\n\r\nHowever my understanding of C++ is at it's limit and it's not clear to me which definition of `do_wait_until` is used by [`wait_until`](https://github.com/boostorg/thread/blob/boost-1.70.0/include/boost/thread/pthread/condition_variable.hpp#L351-L380):\r\n\r\n- [`inline bool condition_variable::do_wait_until`](https://github.com/boostorg/thread/blob/boost-1.70.0/include/boost/thread/pthread/condition_variable.hpp#L105-L142)\r\n- [private function template](https://github.com/boostorg/thread/blob/boost-1.70.0/include/boost/thread/pthread/condition_variable.hpp#L460-L490)\r\n\r\nAdditionally, it's not clear to me which definition of `wait_until` itself is used, i.e. when does `detail::internal_chrono_clock` correspond to `boost::system_clock`, but that doesn't seem consequential.\r\n\r\nIn either case, sanity checks could on the following `getTs` calls' return values could be added in a patch:\r\n\r\n- https://github.com/boostorg/thread/blob/boost-1.70.0/include/boost/thread/pthread/condition_variable.hpp#L122\r\n- https://github.com/boostorg/thread/blob/boost-1.70.0/include/boost/thread/pthread/condition_variable.hpp#L127\r\n- https://github.com/boostorg/thread/blob/boost-1.70.0/include/boost/thread/pthread/condition_variable.hpp#L474\r\n\r\nbut like I said I'm hoping someone can suggest a simpler approach, or finds flaws in my reasoning, since I'm not really looking forward to trying this approach without being able to replicate the failure locally.\r\n\r\n[1] furthermore, if `BOOST_THREAD_PROVIDES_INTERRUPTIONS` is defined `boost::condition_variable` [will use an internal mutex](https://github.com/boostorg/thread/blob/boost-1.70.0/include/boost/thread/pthread/condition_variable.hpp#L122) instead the one corresponding to the lock argument",
      "created_at" : "2020-02-29T00:08:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18227#issuecomment-592786130",
      "id" : 592786130,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18227",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5Mjc4NjEzMA==",
      "updated_at" : "2020-02-29T00:09:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/592786130",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/14242?v=4",
         "events_url" : "https://api.github.com/users/nothingmuch/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nothingmuch/followers",
         "following_url" : "https://api.github.com/users/nothingmuch/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nothingmuch/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nothingmuch",
         "id" : 14242,
         "login" : "nothingmuch",
         "node_id" : "MDQ6VXNlcjE0MjQy",
         "organizations_url" : "https://api.github.com/users/nothingmuch/orgs",
         "received_events_url" : "https://api.github.com/users/nothingmuch/received_events",
         "repos_url" : "https://api.github.com/users/nothingmuch/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nothingmuch/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nothingmuch/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nothingmuch"
      }
   }
]
