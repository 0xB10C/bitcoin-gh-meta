[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK: less boost is better",
      "created_at" : "2020-04-04T16:37:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609054980",
      "id" : 609054980,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18524",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwOTA1NDk4MA==",
      "updated_at" : "2020-04-04T16:37:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609054980",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK: it solved [the issue](https://github.com/bitcoin/bitcoin/issues/18517) I had.",
      "created_at" : "2020-04-04T16:39:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609055282",
      "id" : 609055282,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18524",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwOTA1NTI4Mg==",
      "updated_at" : "2020-04-04T16:39:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609055282",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2020-04-04T16:40:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609055471",
      "id" : 609055471,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18524",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwOTA1NTQ3MQ==",
      "updated_at" : "2020-04-04T16:40:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609055471",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated ba8312c7dca427463c83acd490281bc35dde34b7 -> ad067a98ea1ca383898bf26d4abd00981246471f ([`pr/nosig.1`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.1) -> [`pr/nosig.2`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/nosig.1..pr/nosig.2)) avoiding unneeded shared_ptr copies and cleaning up typedefs\r\nUpdated ad067a98ea1ca383898bf26d4abd00981246471f -> 01639a21d12df54895d0214542b84335d7f58a94 ([`pr/nosig.2`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.2) -> [`pr/nosig.3`](https://github.com/ryanofsky/bitcoin/commits/pr/nosig.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/nosig.2..pr/nosig.3)) removing last typedef",
      "created_at" : "2020-04-04T16:55:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18524#issuecomment-609057547",
      "id" : 609057547,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18524",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwOTA1NzU0Nw==",
      "updated_at" : "2020-04-04T17:04:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609057547",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403493465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403493465"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So we add the same twice?",
      "commit_id" : "01639a21d12df54895d0214542b84335d7f58a94",
      "created_at" : "2020-04-04T17:15:53Z",
      "diff_hunk" : "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403493465",
      "id" : 403493465,
      "line" : 34,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MzQ2NQ==",
      "original_commit_id" : "01639a21d12df54895d0214542b84335d7f58a94",
      "original_line" : 34,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : 42,
      "pull_request_review_id" : 387717466,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-04T17:20:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403493465",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403493569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403493569"
         }
      },
      "author_association" : "MEMBER",
      "body" : "How about local copy and then iterate it lock free?",
      "commit_id" : "01639a21d12df54895d0214542b84335d7f58a94",
      "created_at" : "2020-04-04T17:16:57Z",
      "diff_hunk" : "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403493569",
      "id" : 403493569,
      "line" : 63,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MzU2OQ==",
      "original_commit_id" : "01639a21d12df54895d0214542b84335d7f58a94",
      "original_line" : 63,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : 71,
      "pull_request_review_id" : 387717466,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-04T17:20:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403493569",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403513585"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403513585"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think some C++ compilers don't allow to use `auto` in combination with C++11 list initialization for non-primitive types. You might have to write \r\n```suggestion\r\n        for (auto it = m_list.begin(), prev{m_list.end()};; prev = it++) {\r\n```",
      "commit_id" : "01639a21d12df54895d0214542b84335d7f58a94",
      "created_at" : "2020-04-04T20:31:17Z",
      "diff_hunk" : "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);\n+        for (auto it{m_list.begin()}, prev{m_list.end()};; prev = it++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403513585",
      "id" : 403513585,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMzU4NQ==",
      "original_commit_id" : "01639a21d12df54895d0214542b84335d7f58a94",
      "original_line" : 64,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : 72,
      "pull_request_review_id" : 387732352,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-04T20:31:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403513585",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403514268"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403514268"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I think some C++ compilers don't allow to use `auto` in combination with C++11 list initialization for non-primitive types.\r\n\r\nI think they allow to do it, but the [deducted type](https://en.cppreference.com/w/cpp/language/template_argument_deduction#Other_contexts) is `std::initializer_list` in this case, which is not what we want here.",
      "commit_id" : "01639a21d12df54895d0214542b84335d7f58a94",
      "created_at" : "2020-04-04T20:38:31Z",
      "diff_hunk" : "@@ -16,36 +16,59 @@\n #include <unordered_map>\n #include <utility>\n \n-#include <boost/signals2/signal.hpp>\n-\n-struct ValidationInterfaceConnections {\n-    boost::signals2::scoped_connection UpdatedBlockTip;\n-    boost::signals2::scoped_connection TransactionAddedToMempool;\n-    boost::signals2::scoped_connection BlockConnected;\n-    boost::signals2::scoped_connection BlockDisconnected;\n-    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n-    boost::signals2::scoped_connection ChainStateFlushed;\n-    boost::signals2::scoped_connection BlockChecked;\n-    boost::signals2::scoped_connection NewPoWValidBlock;\n-};\n-\n struct MainSignalsInstance {\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock>&, const CBlockIndex* pindex)> BlockDisconnected;\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n-    boost::signals2::signal<void (const CBlock&, const BlockValidationState&)> BlockChecked;\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n-\n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n-    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n+    Mutex m_mutex;\n+    struct Entry { std::shared_ptr<CValidationInterface> callbacks; int count = 1; };\n+    std::list<Entry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CValidationInterface*, std::list<Entry>::iterator> m_map GUARDED_BY(m_mutex);\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Add(std::shared_ptr<CValidationInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) {\n+            m_list.emplace_back();\n+            inserted.first->second = std::prev(m_list.end());\n+        }\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Remove(CValidationInterface* key)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(key);\n+        if (it != m_map.end()) {\n+            if (--it->second->count == 0) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            if (--it->count == 0) it = m_list.erase(it); else ++it;\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);\n+        for (auto it{m_list.begin()}, prev{m_list.end()};; prev = it++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18524#discussion_r403514268",
      "id" : 403514268,
      "in_reply_to_id" : 403513585,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxNDI2OA==",
      "original_commit_id" : "01639a21d12df54895d0214542b84335d7f58a94",
      "original_line" : 64,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : 72,
      "pull_request_review_id" : 387732840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18524",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-04T20:41:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403514268",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   }
]
