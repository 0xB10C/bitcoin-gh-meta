[
   {
      "body" : "#2751",
      "created_at" : "2016-09-20T05:48:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#issuecomment-248207693",
      "id" : 248207693,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8763",
      "updated_at" : "2016-09-20T05:48:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248207693",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8107318?v=3",
         "events_url" : "https://api.github.com/users/CryptAxe/events{/privacy}",
         "followers_url" : "https://api.github.com/users/CryptAxe/followers",
         "following_url" : "https://api.github.com/users/CryptAxe/following{/other_user}",
         "gists_url" : "https://api.github.com/users/CryptAxe/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/CryptAxe",
         "id" : 8107318,
         "login" : "CryptAxe",
         "organizations_url" : "https://api.github.com/users/CryptAxe/orgs",
         "received_events_url" : "https://api.github.com/users/CryptAxe/received_events",
         "repos_url" : "https://api.github.com/users/CryptAxe/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/CryptAxe/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/CryptAxe/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/CryptAxe"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543223"
         }
      },
      "body" : "But the wallet won't have tracked UTXOs for this private key...",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:29:47Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543223",
      "id" : 79543223,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 32,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 32,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543266"
         }
      },
      "body" : "It's the full UTXO set you need to look through, not merely the wallet's coins.",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:30:20Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543266",
      "id" : 79543266,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 38,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 38,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543266",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543628"
         }
      },
      "body" : "3x the fee why? Probably should make this configurable...",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:34:10Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543628",
      "id" : 79543628,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 70,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 70,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543628",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543694"
         }
      },
      "body" : "This should probably be shared with the wallet code doing the same...",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:34:58Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543694",
      "id" : 79543694,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 72,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 72,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543831"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543831"
         }
      },
      "body" : "This should probably get moved into a non-RPC-specific location, and RPC-specific errors moved out.",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:36:30Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543831",
      "id" : 79543831,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 19,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 19,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543909"
         }
      },
      "body" : "Too late to error here - it's already been fed into AcceptToMemoryPool.",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:37:24Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543909",
      "id" : 79543909,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 112,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 112,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543909",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543977"
         }
      },
      "body" : "Suggest \"sweepprivkey\" to match \"dumpprivkey\" and \"importprivkey\"",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:37:57Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79543977",
      "id" : 79543977,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 131,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 131,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79543977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544011"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544011"
         }
      },
      "body" : "bitcoinaddress isn't a JSON type. Just string.",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:38:17Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544011",
      "id" : 79544011,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 135,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544067"
         }
      },
      "body" : "Why? Shouldn't this work without unlocking the wallet?",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:38:55Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544067",
      "id" : 79544067,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 145,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544110"
         }
      },
      "body" : "Furthermore, so long as you're insisting on an address here, it makes no sense to include this as a wallet RPC...",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:39:22Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544110",
      "id" : 79544110,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 135,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544110",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544186"
         }
      },
      "body" : "Importing an untrusted key is never secure, so it doesn't make sense to import+sweep...",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T06:40:19Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();\n+\n+    string strSecret = params[0].get_str();\n+    string strAddress = params[1].get_str();\n+\n+    CBitcoinSecret vchSecret;\n+    if (!vchSecret.SetString(strSecret))\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+\n+    CBitcoinAddress address(strAddress);\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    if (!SweepPrivKey(vchSecret, address))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"SweepPrivKey failed!\");\n+\n+    return NullUniValue;\n+}\n+\n UniValue importprivkey(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-    \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+\n+    if (fHelp || params.size() < 1 || params.size() > 5)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. sweepkey             (boolean, optional, default=false) Sweep imported key for improved security\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79544186",
      "id" : 79544186,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 179,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 179,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T06:40:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79544186",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "I think a `sweep` command is desirable.\r\n\r\nJust thinking: how would it be if we would have something like `createrawsweeptransaction <pubkey> <outputaddress>` as a first step.\r\nThe people can use `signrawtransaction` together with the privatekey.\r\nWe could still support a `sweepkey` RPC call that would use `createrawsweeptransaction || signrawtransaction || sendrawtransaction`.\r\n\r\nSplitting it up into a `createrawsweeptransaction` would allow to have more control over the sweep (confirmation page, etc.).",
      "created_at" : "2016-09-20T07:01:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#issuecomment-248219746",
      "id" : 248219746,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8763",
      "updated_at" : "2016-09-20T07:01:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248219746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79547155"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79547155"
         }
      },
      "body" : "It'll need to be unlocked at some point won't it? (in order to move the bitcoins from the swept address), although ideally there ought to be a way to do this without needing to unlock manually - i.e. store the private key for the swept address but require the private key of the wallet it is being swept to to access them.",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T07:07:51Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79547155",
      "id" : 79547155,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 145,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T07:08:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79547155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=3",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79549986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79549986"
         }
      },
      "body" : "No. The swept *key* (not address; addresses don't control bitcoins) is not part of the wallet, and the wallet doesn't need to be unlocked to receive. Furthermore, so long as the user is proving the sweep-to address, the wallet isn't even being *used*.",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T07:29:52Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);\n+\n+    mtx.nLockTime = chainActive.Height();\n+\n+    // Add the private key to a keystore\n+    CBasicKeyStore tempKeystore;\n+    tempKeystore.AddKey(dirtyKey);\n+\n+    const CTransaction txConst(mtx);\n+    const CKeyStore& keystoreConst = tempKeystore;\n+    for (uint32_t i = 0; i < mtx.vin.size(); i++)\n+    {\n+        CTxIn& input = mtx.vin[i];\n+        TransactionSignatureCreator creator(&keystoreConst, &txConst, i, mtx.vout[input.prevout.n].nValue);\n+\n+        SignatureData sigdata;\n+        bool sigCreated = ProduceSignature(creator, vToSweep[i].tx->vout[input.prevout.n].scriptPubKey, sigdata);\n+\n+        if (sigCreated && i < mtx.vin.size()) {\n+            mtx.vin[i].scriptSig = sigdata.scriptSig;\n+        }\n+    }\n+\n+    // Commit the transaction\n+    const CTransaction commit(mtx);\n+    CValidationState state;\n+    bool fMissingInputs;\n+    if (!AcceptToMemoryPool(mempool, state, commit, false, &fMissingInputs, false, maxTxFee)) {\n+        if (state.IsInvalid()) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else {\n+            if (fMissingInputs) {\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+            }\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+        }\n+\n+        LogPrintf(\"SweepPrivKey(): Error: Transaction not valid\\n\");\n+        return false;\n+    }\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Broadcast the transaction\n+    CInv inv(MSG_TX, commit.GetHash());\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+}\n+\n+UniValue sweepkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"sweepkey \\\"bitcoinprivkey\\\" \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nSweep the privkey's outputs to the specified address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"bitcoinaddress\\\"   (bitcoinaddress, required) The destination address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSweep a private key\\n\"\n+            + HelpExampleCli(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sweepkey\", \"\\\"mykey\\\" \\\"myaddress\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79549986",
      "id" : 79549986,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 145,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T07:29:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79549986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79558562"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79558562"
         }
      },
      "body" : "Nit: Don't use `BOOST_*`",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T08:24:48Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79558562",
      "id" : 79558562,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 38,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 38,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T08:27:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79558562",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79558765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79558765"
         }
      },
      "body" : "Agree. Also, the new rpc should take a dictionary as input and not positional args to make this easier.",
      "commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "created_at" : "2016-09-20T08:26:11Z",
      "diff_hunk" : "@@ -74,19 +77,166 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool SweepPrivKey(CBitcoinSecret key, CBitcoinAddress destAddress) {\n+    // Get the private key to be swept and validate it\n+    CKey dirtyKey = key.GetKey();\n+    if (!dirtyKey.IsValid())\n+        return false;\n+\n+    // Generate public key and verify it\n+    CPubKey pubkey = dirtyKey.GetPubKey();\n+    if (!dirtyKey.VerifyPubKey(pubkey))\n+        return false;\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Get outputs from wallet\n+    std::vector<COutput> vCoins;\n+    pwalletMain->AvailableCoins(vCoins, false);\n+\n+    // Find all outputs of the key\n+    std::vector<COutput> vToSweep;\n+    BOOST_FOREACH(COutput output, vCoins)\n+    {\n+        vector<vector<unsigned char>> vSolution;\n+        txnouttype whichType;\n+        if (!Solver(output.tx->vout[output.i].scriptPubKey, whichType, vSolution))\n+            continue;\n+\n+        CKeyID keyID;\n+        if (whichType == TX_PUBKEY)\n+            keyID = CPubKey(vSolution[0]).GetID();\n+        else\n+        if (whichType == TX_PUBKEYHASH || whichType == TX_WITNESS_V0_KEYHASH)\n+            keyID = CKeyID(uint160(vSolution[0]));\n+\n+        if (keyID == pubkey.GetID())\n+            vToSweep.push_back(output);\n+    }\n+\n+    // Add inputs to sweep transaction\n+    CMutableTransaction mtx;\n+    CAmount total = 0;\n+    BOOST_FOREACH(COutput output, vToSweep)\n+    {\n+        mtx.vin.push_back(CTxIn(output.tx->GetHash(), output.i));\n+        total += output.tx->vout[output.i].nValue;\n+    }\n+\n+    if (!mtx.vin.size() || !(total > 0))\n+        return false;\n+\n+    // Add sweep destination - fee\n+    mtx.vout.push_back(CTxOut(total, GetScriptForDestination(destAddress.Get())));\n+    mtx.vout[0].nValue -= 3*CWallet::GetMinimumFee(GetVirtualTransactionSize(mtx), DEFAULT_TX_CONFIRM_TARGET, mempool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8763#discussion_r79558765",
      "id" : 79558765,
      "original_commit_id" : "58afbb2868902669b17d8084afe55d3615bf9f6d",
      "original_position" : 70,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 70,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8763",
      "updated_at" : "2016-09-20T08:27:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79558765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
