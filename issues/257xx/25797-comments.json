[
   {
      "author_association" : "MEMBER",
      "body" : "concept ack",
      "created_at" : "2022-08-08T06:51:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1207736528",
      "id" : 1207736528,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585H_JjQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1207736528/reactions"
      },
      "updated_at" : "2022-08-08T06:51:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1207736528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 485bd54f26c061ff3aa21587f8d8fd6ca86b5980 -> 1d09ef577b2b5e6d13b83f5241bad037a0a8f7b8 ([pr25797.01](https://github.com/hebasto/bitcoin/commits/pr25797.01) -> [pr25797.02](https://github.com/hebasto/bitcoin/commits/pr25797.02)):\r\n\r\n- fixed Berkeley DB detection on OpenBSD.\r\n- improved all `cmake/modules/Find<Package>.cmake` modules.\r\n\r\n@theStack \r\n> I retested on OpenBSD 7.1 with the instructions from the PR description and unfortunately still have a BDB issue\r\n\r\nThank you for sorrow testing. The issue should be fixed now.",
      "created_at" : "2022-08-08T22:54:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1208700569",
      "id" : 1208700569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IC06Z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1208700569/reactions"
      },
      "updated_at" : "2022-08-08T22:54:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1208700569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 1d09ef577b2b5e6d13b83f5241bad037a0a8f7b8 -> 66c4ce440021004149779bb74207ce0c8bc93b2f ([pr25797.02](https://github.com/hebasto/bitcoin/commits/pr25797.02) -> [pr25797.03](https://github.com/hebasto/bitcoin/commits/pr25797.03)):\r\n\r\n- the `leveldbutil` target removed from \"all targets\" being built by default; thanks to @theStack for [pointing](https://github.com/bitcoin/bitcoin/pull/25797#pullrequestreview-1066634807) it out\r\n\r\n@theStack \r\n>  I'm assuming that unit-test build support with CMake is still under construction?\r\n\r\nIt is, but not as a part of this PR. My intention is to keep the latter more or less digestible for reviewers.",
      "created_at" : "2022-08-09T14:22:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1209449253",
      "id" : 1209449253,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IFrsl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1209449253/reactions"
      },
      "updated_at" : "2022-08-09T14:22:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1209449253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept NACK. Our autotools build system is a mess, but this doesn't appear to significantly improve it. I don't think the benefits are worth the costs.\r\n\r\n(I realise this PR doesn't remove autotools, but AIUI that's the eventual intention.)\r\n\r\n>an opportunity to drop the build_msvc subdirectory from the repo altogether\r\n\r\nI don't see why CMake changes the situation around build_msvc. We could drop it today and tell Windows builders to use autotools just as well.\r\n\r\n>Also there is a non-technical/social benefit. Over time, the Autotools community shrinks, but CMake community grows. New contributors, who join this project in the future, will readily support a CMake-based system rather an Autotools-based one.\r\n\r\nDo you have evidence of this? Autotools is fairly standard, and mostly just standard sh and make stuff (and m4, but that's admittedly more of a downside). CMake breaks from the norm, and requires a domain-specific language.",
      "created_at" : "2022-08-10T01:26:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210049309",
      "id" : 1210049309,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IH-Md",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210049309/reactions"
      },
      "updated_at" : "2022-08-10T01:26:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210049309",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 66c4ce440021004149779bb74207ce0c8bc93b2f -> e098ba80b6ec0debc62c32c65b72a518b126ed54 ([pr25797.03](https://github.com/hebasto/bitcoin/commits/pr25797.03) -> [pr25797.04](https://github.com/hebasto/bitcoin/commits/pr25797.04)):\r\n\r\n- in-subtree [bugfix](https://github.com/bitcoin-core/crc32c-subtree/pull/5) been replaced with out-subtree workaround\r\n- fixed white spaces\r\n\r\nAll changes above made the linter CI task happy now :tiger2: ",
      "created_at" : "2022-08-10T07:45:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210290174",
      "id" : 1210290174,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585II4_-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210290174/reactions"
      },
      "updated_at" : "2022-08-10T07:45:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210290174",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > an opportunity to drop the build_msvc subdirectory from the repo altogether\r\n> \r\n> I don't see why CMake changes the situation around build_msvc. We could drop it today and tell Windows builders to use autotools just as well.\r\n\r\nYou are talking about \"to build on Windows\". But the idea is \"to build with MSVC\". Being a cross-platform tool, CMake is able to [create](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html) input files for a wide range of build systems, including Unix Makefiles and Visual Studio project files.\r\n\r\n@sipsorcery What do you think about this stuff?",
      "created_at" : "2022-08-10T08:03:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210309203",
      "id" : 1210309203,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585II9pT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210309203/reactions"
      },
      "updated_at" : "2022-08-10T09:05:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210309203",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > Also there is a non-technical/social benefit. Over time, the Autotools community shrinks, but CMake community grows. New contributors, who join this project in the future, will readily support a CMake-based system rather an Autotools-based one.\r\n> \r\n> Do you have evidence of this?\r\n\r\nI do. There are open-source projects which have [dropped](https://lists.freedesktop.org/archives/wayland-devel/2019-October/040962.html) Autotools, and there are no ones which do the opposite. Also we could ask people who graduated CS recently whether their curriculums encompassed Autotools and/or CMake (not an evidence, rather a hint).\r\n\r\n> Autotools is fairly standard, and mostly just standard sh and make stuff (and m4, but that's admittedly more of a downside). \r\n\r\nMoving \"Autotools --> CMake\" is very similar to \"shell --> Python\" which we have [done](https://github.com/bitcoin/bitcoin/issues/24783) recently.\r\n\r\n> CMake breaks from the norm\r\n\r\nWhich \"the norm\"?\r\n\r\n> and requires a domain-specific language.\r\n\r\nUsing a domain-specific language which serves its purpose much better than a general macro language is a benefit for reviewing and maintaining.",
      "created_at" : "2022-08-10T08:42:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210353660",
      "id" : 1210353660,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IJIf8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210353660/reactions"
      },
      "updated_at" : "2022-08-10T09:07:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210353660",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> You are talking about \"to build on Windows\". But the idea is \"to build with MSVC\". Being a cross-platform tool, CMake is able to [create](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html) input files for a wide range of build systems, including Unix Makefiles and Visual Studio project files.\r\n> \r\n> @sipsorcery What do you think about this stuff?\r\n\r\nThe Visual Studio project files produced by CMake aren't as clean as the hand rolled ones but in my experience they still build well (note the vcpkg dependecies generally use cmake).\r\n\r\nIMHO it's worth having less clean VS project files if the eventual goal is to have a single build system.\r\n\r\nConcept ACK.",
      "created_at" : "2022-08-10T09:01:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210376728",
      "id" : 1210376728,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IJOIY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210376728/reactions"
      },
      "updated_at" : "2022-08-10T09:01:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210376728",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/197660?v=4",
         "events_url" : "https://api.github.com/users/sipsorcery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipsorcery/followers",
         "following_url" : "https://api.github.com/users/sipsorcery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipsorcery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipsorcery",
         "id" : 197660,
         "login" : "sipsorcery",
         "node_id" : "MDQ6VXNlcjE5NzY2MA==",
         "organizations_url" : "https://api.github.com/users/sipsorcery/orgs",
         "received_events_url" : "https://api.github.com/users/sipsorcery/received_events",
         "repos_url" : "https://api.github.com/users/sipsorcery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipsorcery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipsorcery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@luke-jr \r\n> Concept NACK. Our autotools build system is a mess, but this doesn't appear to significantly improve it. I don't think the benefits are worth the costs.\r\n\r\nAnd this mess is going to get bigger:\r\n- we are about introducing the [4th](https://github.com/bitcoin/bitcoin/issues/25008#issuecomment-1113964111) hack to the Libtool\r\n- more [hacks](https://github.com/bitcoin/bitcoin/pull/24798#discussion_r854001982) are required to bring Qt 6 support\r\n\r\nAs you are a developer who is involved into the GUI development, could you share your vision of Qt 6 integration without migration to CMake?",
      "created_at" : "2022-08-10T09:34:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210415595",
      "id" : 1210415595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IJXnr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210415595/reactions"
      },
      "updated_at" : "2022-08-10T09:34:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210415595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@dongcarl @fanquake @ryanofsky @theuni \r\n\r\nYour conceptual assessments of this PR will be much appreciated. ",
      "created_at" : "2022-08-10T13:52:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210706815",
      "id" : 1210706815,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IKet_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210706815/reactions"
      },
      "updated_at" : "2022-08-10T13:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210706815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Also we could ask people who graduated CS recently whether their curriculums encompassed Autotools and/or CMake (not an evidence, rather a hint).\r\n\r\nWe handmade our Makefiles...",
      "created_at" : "2022-08-10T14:52:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210789206",
      "id" : 1210789206,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IKy1W",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 1,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210789206/reactions"
      },
      "updated_at" : "2022-08-10T14:52:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210789206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24798](https://github.com/bitcoin/bitcoin/pull/24798) ([POC] build: Hello Qt 6 by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-08-10T16:57:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210993232",
      "id" : 1210993232,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ILkpQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210993232/reactions"
      },
      "updated_at" : "2022-08-10T16:57:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210993232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">You are talking about \"to build on Windows\". But the idea is \"to build with MSVC\". Being a cross-platform tool, CMake is able to create input files for a wide range of build systems, including Unix Makefiles and Visual Studio project files.\r\n\r\n[autotools can be used with the MSVC compiler](https://github.com/swig/cccl)\r\n\r\n> There are open-source projects which have dropped Autotools, and there are no ones which do the opposite.\r\n\r\n\"No ones\"? There are lots which adopt autotools. Otherwise it wouldn't even exist...\r\n\r\n>Also we could ask people who graduated CS recently whether their curriculums encompassed Autotools and/or CMake\r\n\r\nPeople to ask would be experienced open source developers, not novices who got scammed by colleges.\r\n\r\n>Which \"the norm\"?\r\n\r\nMost open source software uses autotools.\r\n\r\n> As you are a developer who is involved into the GUI development, could you share your vision of Qt 6 integration without migration to CMake?\r\n\r\nSeems easy enough to just do it the same as Qt 5 already is? pkg-config support was fixed in Qt 6.2.5.\r\n\r\n",
      "created_at" : "2022-08-10T20:26:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1211231175",
      "id" : 1211231175,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IMevH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211231175/reactions"
      },
      "updated_at" : "2022-08-10T20:26:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211231175",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > There are open-source projects which have dropped Autotools, and there are no ones which do the opposite.\r\n> \r\n> \"No ones\"? There are lots which adopt autotools. Otherwise it wouldn't even exist...\r\n\r\nI mean, there are no projects which _moved_ from non-Autotools to Autotools recent decade.",
      "created_at" : "2022-08-10T20:37:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1211243726",
      "id" : 1211243726,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IMhzO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211243726/reactions"
      },
      "updated_at" : "2022-08-10T20:46:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211243726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> pkg-config support was fixed in Qt 6.2.5.\r\n\r\nNot for [static](https://codereview.qt-project.org/c/qt/qtbase/+/381127) builds:\r\n> Although it has some limitations, with qt_internal_add_qml_module if it specifies non-public deps these won't be listed and with non-Qt requirements, notably in _static_ builds, not being appended to the PkgConfig file.",
      "created_at" : "2022-08-10T20:39:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1211246020",
      "id" : 1211246020,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IMiXE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211246020/reactions"
      },
      "updated_at" : "2022-08-10T20:44:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211246020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Static builds are abnormal and only need to be supported for depends-based builds, where we can trivially patch it.",
      "created_at" : "2022-08-10T21:02:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1211268464",
      "id" : 1211268464,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IMn1w",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211268464/reactions"
      },
      "updated_at" : "2022-08-10T21:02:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211268464",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Static builds are abnormal and only need to be supported for depends-based builds...\r\n\r\n\"abnormal\"? We deliver users static builds.\r\n\r\n> we can trivially patch it\r\n\r\nI doubt about \"trivially\". Anyway, your patch for Qt code will be much appreciated.",
      "created_at" : "2022-08-10T21:08:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1211275465",
      "id" : 1211275465,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IMpjJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211275465/reactions"
      },
      "updated_at" : "2022-08-10T21:09:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211275465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> dongcarlvfanquake ryanofsky theuni\r\n> Your conceptual assessments of this PR will be much appreciated.\r\n\r\nI am a Concept ~0/ACK for CMake.\r\n\r\nHowever I think if we are going to break every existing piece of Bitcoin Core related build infrastracture (build scripts, docker files, downstream projects, package managers etc), as well as obselete (external) build guides & documentation, we should be able to enumerate some more benefits to doing so. \r\n\r\n> Here are some benefits of using [CMake](https://cmake.org/) in the Bitcoin Core project:\r\n\r\nLooking at this list, there's nothing interesting here for anyone that doesn't care about the GUI, or Windows `DEBUG` depends builds; and given that this is the group which will more-than-likely be most impacted by this change, i.e compiling bitcoind + utils on Linux, we should be able to better justify a migration. Even starting with some rationale from something like [\"Why CMake?\"](https://cmake.org/cmake/help/book/mastering-cmake/chapter/Why%20CMake.html).\r\n\r\n> The plan is to have it in the repo shortly after branching 24.x off, and make CMake-based build system a drop-in replacement of Autotools-based one during the next 2 or 3 release cycles.\r\n\r\nConcept NACK on any approach that has as maintaining multiple build systems over multiple, or even a single release. That will be a maintainability / developer nightmare. If we are going to switch, we should just switch. CMake in, Autotools out, over a short period, ideally just after a branch off, so there is plenty of time for changes to settle and issues to be fixed before the next release.",
      "created_at" : "2022-08-12T11:51:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1213030359",
      "id" : 1213030359,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ITV_X",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213030359/reactions"
      },
      "updated_at" : "2022-08-12T11:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213030359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Looking at this list, there's nothing interesting here for anyone that doesn't care about the GUI...\r\n\r\nThe GUI _is_ a part of the Bitcoin Core project. Not caring about any part of the project won't be helpful for it.",
      "created_at" : "2022-08-12T12:41:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1213070838",
      "id" : 1213070838,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ITf32",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213070838/reactions"
      },
      "updated_at" : "2022-08-12T12:41:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213070838",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept ACK e098ba80b6ec0debc62c32c65b72a518b126ed54\r\n\r\nI'm testing on macOS 12.5 M1 MacBook Pro and running into errors.  It's possible this is an issue with my system, but I exhausted any possibilities that I could think of.\r\n\r\nAre there additional setup steps to proceed these steps during your macOS testing?\r\n\r\n```\r\n$ cmake -S . -B build\r\n\r\n-- Found Qt, version 5.15.5\r\n\r\n\r\nConfigure summary\r\n=================\r\nBuild type ......................... RelHardened\r\nPreprocessor defined macros: MAC_OSX;OBJC_OLD_DISPATCH_PROTOTYPES=0\r\nCXX: /opt/homebrew/bin/ccache /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++\r\nCompile options:\r\nUtility binaries:\r\n  bitcoin-cli ...................... ON\r\n  bitcoin-tx ....................... ON\r\n  bitcoin-util ..................... ON\r\nWallet functionality ............... yes\r\n  SQLite, descriptor wallets ....... yes\r\n  Berkeley DB, legacy wallets ...... yes\r\n  wallet tool ...................... ON\r\nOptional packages:\r\n  GUI .............................. Qt5\r\n  QR code (GUI) .................... yes\r\n  external signer .................. no\r\n  NAT-PMP .......................... yes\r\n  UPNP ............................. yes\r\n  ZeroMQ ........................... yes\r\n  USDT tracing ..................... no\r\n  experimental syscall sandbox ..... no\r\n\r\n\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/adam2k/Documents/bitcoin/build\r\n adam2k@Adams-MacBook-Pro î° ~/Documents/bitcoin î° î  220807-cmake Â± î°\r\n adam2k@Adams-MacBook-Pro î° ~/Documents/bitcoin î° î  220807-cmake Â± î° cmake --build build\r\nConsolidate compiler generated dependencies of target univalue\r\n[  0%] Building CXX object src/univalue/CMakeFiles/univalue.dir/lib/univalue.cpp.o\r\nerror: option 'cf-protection=return' cannot be specified on this target\r\nerror: option 'cf-protection=branch' cannot be specified on this target\r\n2 errors generated.\r\nmake[2]: *** [src/univalue/CMakeFiles/univalue.dir/lib/univalue.cpp.o] Error 1\r\nmake[1]: *** [src/univalue/CMakeFiles/univalue.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```",
      "created_at" : "2022-08-12T20:25:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1213486854",
      "id" : 1213486854,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IVFcG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213486854/reactions"
      },
      "updated_at" : "2022-08-12T20:25:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213486854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/749118?v=4",
         "events_url" : "https://api.github.com/users/adam2k/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adam2k/followers",
         "following_url" : "https://api.github.com/users/adam2k/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adam2k/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adam2k",
         "id" : 749118,
         "login" : "adam2k",
         "node_id" : "MDQ6VXNlcjc0OTExOA==",
         "organizations_url" : "https://api.github.com/users/adam2k/orgs",
         "received_events_url" : "https://api.github.com/users/adam2k/received_events",
         "repos_url" : "https://api.github.com/users/adam2k/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adam2k/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adam2k/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adam2k"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "There seems to be [long running resistance](https://github.com/bitcoin/bitcoin/issues/19693) to this in this repo and continued resistance expressed in the comments of this PR.\r\n\r\nDoes libsecp256k1 (potentially, certainly seems [less resistance](https://github.com/bitcoin-core/secp256k1/pull/1113) there currently) adding CMake support have any impact on this discussion? A case of seeing if it gets merged in libsecp256k1, seeing if there are any problems with it, contributors getting comfortable with it etc? Or are they entirely separate discussions? i.e. libsecp256k1 could merge in CMake support, it could work fine but it would have no impact on the discussion here? Also would there be opposition to libsecp256k1 maintaining a different build system to this main Core repo or is that a non-issue?",
      "created_at" : "2022-08-13T09:21:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1214078906",
      "id" : 1214078906,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IXV-6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214078906/reactions"
      },
      "updated_at" : "2022-08-13T09:21:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214078906",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've updated the PR description with the following Qt-specific details.\r\n\r\n## What happened before?\r\n\r\n- https://www.qt.io/blog/qt-6-build-system:\r\n> CMake is the build system for Qt 6\r\n\r\n- https://www.qt.io/blog/qt-and-cmake-the-past-the-present-and-the-future:\r\n> We made a big decision to start using CMake to build Qt 6 one and a half years ago.\r\n\r\n- https://doc.qt.io/qt-6/qt6-buildsystem.html:\r\n> The Qt 5 build system was built on top of [qmake](https://doc.qt.io/qt-6.2/qtquick-deployment.html#qmake). In Qt 6, we ported the build system to CMake.\r\n\r\nIt is important to note that CMake has extensive [support](https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html) for Qt, including Qt-specific tools such as MOC, RCC, UIC.\r\n\r\n## Why Qt 6 build system does matter if the Bitcoin Core GUI uses Qt 5?\r\n\r\nFor release builds we use Qt 5.15.5 LTS, the latest Qt 5 version available under a free-software license.\r\n\r\nFor dynamic linking users can use Qt 5.11.3+, which allows them to use packages provided in Debian Buster and Ubuntu Focal.\r\n\r\nOn the other hand, Qt 6 packages are available in the following systems/package managers:\r\n- [Ubuntu Jammy](https://packages.ubuntu.com/jammy/qt6-base-dev)+\r\n- [Debian Bullseye](https://packages.debian.org/bullseye-backports/qt6-base-dev)+\r\n- [Fedora 35](https://packages.fedoraproject.org/pkgs/qt6-qtbase/qt6-qtbase/)+\r\n- [Homebrew](https://formulae.brew.sh/formula/qt)\r\n\r\nAs long as Qt GUI is a part of Bitcoin Core, it is inevitable to embrace Qt 6 support, sooner or later.\r\n\r\n## Can we just adjust our current build system to handle Qt 6?\r\n\r\nThe main problem with integration of Qt 6 into the current build system is lacking of pkg-config `*.pc` files for static builds (please note that a patch from [QTBUG-86080](https://bugreports.qt.io/browse/QTBUG-86080) works for non-static builds only).\r\n\r\nTo handle Qt 6 with our current build system we need to:\r\n- patch Qt, which looks like a non-trivial task, or\r\n- apply some [nasty hacks](https://github.com/bitcoin/bitcoin/pull/24798#discussion_r854001982) to our own build system\r\n- keep in our repo the required `*.pc` files\r\n- check Qt libraries manually\r\n\r\nAll approaches imply maintaining burden for a long time. And last three are pretty ugly :)",
      "created_at" : "2022-08-14T11:23:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1214344789",
      "id" : 1214344789,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IYW5V",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214344789/reactions"
      },
      "updated_at" : "2022-08-14T11:28:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214344789",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated e098ba80b6ec0debc62c32c65b72a518b126ed54 -> 88d797f926cb0d874a30aa732dcc0221f78b007a ([pr25797.04](https://github.com/hebasto/bitcoin/commits/pr25797.04) -> [pr25797.05](https://github.com/hebasto/bitcoin/commits/pr25797.05)):\r\n\r\n- fixed a bug pointed out in https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1213486854\r\n- small improvements regarding advanced variables\r\n\r\n@adam2k \r\n> I'm testing on macOS 12.5 M1 MacBook Pro and running into errors.\r\n\r\nThank you for testing! Should be fixed now :tiger2: ",
      "created_at" : "2022-08-14T16:33:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1214411508",
      "id" : 1214411508,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IYnL0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214411508/reactions"
      },
      "updated_at" : "2022-08-14T16:33:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214411508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Updated [e098ba8](https://github.com/bitcoin/bitcoin/commit/e098ba80b6ec0debc62c32c65b72a518b126ed54) -> [88d797f](https://github.com/bitcoin/bitcoin/commit/88d797f926cb0d874a30aa732dcc0221f78b007a) ([pr25797.04](https://github.com/hebasto/bitcoin/commits/pr25797.04) -> [pr25797.05](https://github.com/hebasto/bitcoin/commits/pr25797.05)):\r\n> \r\n> * fixed a bug pointed out in [build: Add CMake-based build systemÂ #25797 (comment)](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1213486854)\r\n> * small improvements regarding advanced variables\r\n> \r\n> @adam2k\r\n> \r\n> > I'm testing on macOS 12.5 M1 MacBook Pro and running into errors.\r\n> \r\n> Thank you for testing! Should be fixed now ð\r\n\r\nConcept ACK 88d797f926cb0d874a30aa732dcc0221f78b007a\r\n\r\nAgain, I'm testing on macOS 12.5 M1 MacBook Pro and the previous errors seem to be resolved.\r\n\r\n```\r\n$ cmake -S . -B build\r\n-- Performing Test HAS_CXX_-pipe_FLAG\r\n-- Performing Test HAS_CXX_-pipe_FLAG - Success\r\n-- Performing Test HAS_CXX_-O2_FLAG\r\n-- Performing Test HAS_CXX_-O2_FLAG - Success\r\n-- Performing Test HAS_CXX_-g_FLAG\r\n-- Performing Test HAS_CXX_-g_FLAG - Success\r\n-- Performing Test HAS_CXX_-Wstack-protector_FLAG\r\n-- Performing Test HAS_CXX_-Wstack-protector_FLAG - Success\r\n-- Performing Test HAS_CXX_-fstack-protector-all_FLAG\r\n-- Performing Test HAS_CXX_-fstack-protector-all_FLAG - Success\r\n-- Performing Test HAS_CXX_-fcf-protection=full_FLAG\r\n-- Performing Test HAS_CXX_-fcf-protection=full_FLAG - Failed\r\n-- Found Qt, version 5.15.5\r\n\r\n\r\nConfigure summary\r\n=================\r\nBuild type ......................... RelHardened\r\nPreprocessor defined macros ........ MAC_OSX;OBJC_OLD_DISPATCH_PROTOTYPES=0\r\nC++ compiler ....................... /opt/homebrew/bin/ccache /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++\r\nCompile options ....................\r\nUtility binaries:\r\n  bitcoin-cli ...................... ON\r\n  bitcoin-tx ....................... ON\r\n  bitcoin-util ..................... ON\r\nWallet functionality ............... yes\r\n  SQLite, descriptor wallets ....... yes\r\n  Berkeley DB, legacy wallets ...... yes\r\n  wallet tool ...................... ON\r\nOptional packages:\r\n  GUI .............................. Qt5\r\n  QR code (GUI) .................... yes\r\n  external signer .................. no\r\n  NAT-PMP .......................... yes\r\n  UPNP ............................. yes\r\n  ZeroMQ ........................... yes\r\n  USDT tracing ..................... no\r\n  experimental syscall sandbox ..... no\r\n\r\n\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/adam2k/Documents/bitcoin/build\r\n```\r\n\r\nAlthough, I am running into errors during the second step in the process when I get to the `Linking CXX executable bitcoin-qt`.  I added the `-v` to gather more debug logs.\r\n\r\n```\r\n$ cmake --build build -v\r\n...\r\nConsolidate compiler generated dependencies of target bitcoin-qt\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  -f src/qt/CMakeFiles/bitcoin-qt.dir/build.make src/qt/CMakeFiles/bitcoin-qt.dir/build\r\n[ 98%] Linking CXX executable bitcoin-qt\r\ncd /Users/adam2k/Documents/bitcoin/build/src/qt && /opt/homebrew/Cellar/cmake/3.24.0/bin/cmake -E cmake_link_script CMakeFiles/bitcoin-qt.dir/link.txt --verbose=1\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -pipe -O2 -g -Wstack-protector -fstack-protector-all -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names -L/opt/homebrew/opt/llvm/lib \"CMakeFiles/bitcoin-qt.dir/bitcoin-qt_autogen/mocs_compilation.cpp.o\" \"CMakeFiles/bitcoin-qt.dir/main.cpp.o\" \"CMakeFiles/bitcoin-qt.dir/__/init/bitcoin-qt.cpp.o\" -o bitcoin-qt -F/opt/homebrew/opt/qt@5/lib  -Wl,-headerpad_max_install_names libbitcoinqt.a ../libbitcoin_node.a ../libbitcoin_common.a ../libbitcoin_consensus.a ../util/libbitcoin_util.a ../crypto/libbitcoin_crypto.a /opt/homebrew/opt/qt@5/lib/QtWidgets.framework/QtWidgets /opt/homebrew/opt/qt@5/lib/QtGui.framework/QtGui ../librpc_client.a /opt/homebrew/Cellar/qrencode/4.1.1/lib/libqrencode.dylib ../wallet/libbitcoin_wallet.a ../libbitcoin_common.a /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/usr/lib/libsqlite3.tbd /opt/homebrew/opt/qt@5/lib/QtNetwork.framework/QtNetwork /opt/homebrew/opt/qt@5/lib/QtCore.framework/QtCore /opt/homebrew/opt/libnatpmp/lib/libnatpmp.dylib /opt/homebrew/lib/libminiupnpc.dylib /opt/homebrew/opt/berkeley-db@4/lib/libdb_cxx-4.8.dylib ../../libminisketch.a /opt/homebrew/Cellar/libevent/2.1.12/lib/libevent_pthreads.dylib ../zmq/libbitcoin_zmq.a ../leveldb/libleveldb.a ../crc32c/libcrc32c.a /opt/homebrew/Cellar/zeromq/4.3.4/lib/libzmq.dylib ../crypto/libbitcoin_crypto.a ../../libsecp256k1.a ../univalue/libunivalue.a -Wl,-headerpad_max_install_names /opt/homebrew/Cellar/libevent/2.1.12/lib/libevent.dylib\r\nUndefined symbols for architecture arm64:\r\n  \"_NSClassFromString\", referenced from:\r\n      MacNotificationHandler::hasUserNotificationCenterSupport() in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_OBJC_CLASS_$_NSApplication\", referenced from:\r\n      objc-class-ref in libbitcoinqt.a(macdockiconhandler.mm.o)\r\n  \"_OBJC_CLASS_$_NSBundle\", referenced from:\r\n      objc-class-ref in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n      __OBJC_$_CATEGORY_NSBundle_$_returnCorrectIdentifier in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_OBJC_CLASS_$_NSProcessInfo\", referenced from:\r\n      objc-class-ref in libbitcoinqt.a(macos_appnap.mm.o)\r\n  \"_OBJC_CLASS_$_NSUserNotification\", referenced from:\r\n      objc-class-ref in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_OBJC_CLASS_$_NSUserNotificationCenter\", referenced from:\r\n      objc-class-ref in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"___CFConstantStringClassReference\", referenced from:\r\n      CFString in libbitcoinqt.a(macos_appnap.mm.o)\r\n      CFString in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n      CFString in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_class_getInstanceMethod\", referenced from:\r\n      MacNotificationHandler::instance() in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_class_replaceMethod\", referenced from:\r\n      setupDockClickHandler() in libbitcoinqt.a(macdockiconhandler.mm.o)\r\n  \"_method_exchangeImplementations\", referenced from:\r\n      MacNotificationHandler::instance() in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_objc_alloc_init\", referenced from:\r\n      MacNotificationHandler::showNotification(QString const&, QString const&) in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_objc_autoreleasePoolPop\", referenced from:\r\n      CAppNapInhibitor::CAppNapImpl::disableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      CAppNapInhibitor::CAppNapImpl::enableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n  \"_objc_autoreleasePoolPush\", referenced from:\r\n      CAppNapInhibitor::CAppNapImpl::disableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      CAppNapInhibitor::CAppNapImpl::enableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n  \"_objc_getClass\", referenced from:\r\n      MacNotificationHandler::instance() in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_objc_msgSend\", referenced from:\r\n      setupDockClickHandler() in libbitcoinqt.a(macdockiconhandler.mm.o)\r\n      ForceActivation() in libbitcoinqt.a(macdockiconhandler.mm.o)\r\n      CAppNapInhibitor::CAppNapImpl::disableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      CAppNapInhibitor::CAppNapImpl::enableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      -[NSBundle(returnCorrectIdentifier) __bundleIdentifier] in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n      MacNotificationHandler::showNotification(QString const&, QString const&) in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_objc_opt_class\", referenced from:\r\n      setupDockClickHandler() in libbitcoinqt.a(macdockiconhandler.mm.o)\r\n  \"_objc_opt_respondsToSelector\", referenced from:\r\n      CAppNapInhibitor::CAppNapImpl::disableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      CAppNapInhibitor::CAppNapImpl::enableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n  \"_objc_release\", referenced from:\r\n      CAppNapInhibitor::CAppNapImpl::enableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      MacNotificationHandler::showNotification(QString const&, QString const&) in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_objc_retain\", referenced from:\r\n      CAppNapInhibitor::CAppNapImpl::disableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n  \"_sel_registerName\", referenced from:\r\n      setupDockClickHandler() in libbitcoinqt.a(macdockiconhandler.mm.o)\r\nld: symbol(s) not found for architecture arm64\r\nclang-14: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[2]: *** [src/qt/bitcoin-qt] Error 1\r\nmake[1]: *** [src/qt/CMakeFiles/bitcoin-qt.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```\r\n",
      "created_at" : "2022-08-15T15:55:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1215224500",
      "id" : 1215224500,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Ibtq0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215224500/reactions"
      },
      "updated_at" : "2022-08-15T15:55:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215224500",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/749118?v=4",
         "events_url" : "https://api.github.com/users/adam2k/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adam2k/followers",
         "following_url" : "https://api.github.com/users/adam2k/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adam2k/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adam2k",
         "id" : 749118,
         "login" : "adam2k",
         "node_id" : "MDQ6VXNlcjc0OTExOA==",
         "organizations_url" : "https://api.github.com/users/adam2k/orgs",
         "received_events_url" : "https://api.github.com/users/adam2k/received_events",
         "repos_url" : "https://api.github.com/users/adam2k/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adam2k/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adam2k/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adam2k"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 88d797f926cb0d874a30aa732dcc0221f78b007a -> 6e1dcc2ae5096dde327b71efb6bfa0bf120227e5 ([pr25797.05](https://github.com/hebasto/bitcoin/commits/pr25797.05) -> [pr25797.06](https://github.com/hebasto/bitcoin/commits/pr25797.06)):\r\n\r\n- rebased on top of the #25836\r\n- fixed native building on Windows (MSVC + vcpkg). No longer needed to pre-build Qt :tiger2: \r\n\r\nInstructions for native building on Windows (MSVC + vcpkg) added to the PR description.\r\n\r\ncc @sipsorcery ",
      "created_at" : "2022-08-15T23:32:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1215983238",
      "id" : 1215983238,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Iem6G",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215983238/reactions"
      },
      "updated_at" : "2022-08-15T23:32:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215983238",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@hebasto Could you give us an idea of the diff between the new CMake and the old autotools build systems from a user's perspective? Have we achieved feature-parity yet?",
      "created_at" : "2022-08-16T17:29:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1216939762",
      "id" : 1216939762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IiQby",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1216939762/reactions"
      },
      "updated_at" : "2022-08-16T17:29:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1216939762",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@dongcarl \r\n> Could you give us an idea of the diff between the new CMake and the old autotools build systems from a user's perspective? \r\n\r\n1. The main difference is a directory structure. While the current Autotools-based build system (AT) supports out-of-source builds, most users make in-source builds. The new CMake-based build system (CM) does not support in-source builds. I consider this as a [benefit](https://cmake.org/cmake/help/book/mastering-cmake/chapter/Getting%20Started.html#directory-structure). As a consequence, there is no `make distclean` in CM.\r\n\r\n2. Most of AT configure options are mapped to CM cache variable, for example:\r\n- `--with-daemon` --> `-DBUILD_DAEMON`\r\n- `--enable-zmq` --> `-DWITH_ZMQ`\r\n\r\n3. Some of AT configure options are implemented as custom [build types](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html?highlight=build%20type#build-configurations) in CM, for example:\r\n- `--enable-hardening` --> `-DCMAKE_BUILD_TYPE=RelHardened`\r\n\r\n4. User provided `CC`, `CXX`, `CFLAGS`, `CXXFLAGS`, `LDFLAGS` are supported by CM perfectly out of the box.\r\n\r\n5. Integration with our depends build subsystem has been implemented already:\r\n- `CONFIG_SITE=$PWD/depends/<HOST>/share/config.site` --> `--toolchain depends/<HOST>/share/toolchain.cmake`\r\n\r\n6. With CM users are able to use the same build system natively on a wider range of platforms, e.g., on Windows with MSVC.\r\n\r\n7. With CM the GUI users get Qt 6 support finally :tiger2:\r\n\r\n> Have we achieved feature-parity yet?\r\n\r\nNot in this PR, to [keep](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1209449253) it in reviewable state. The full feature-parity is achievable with a couple follow ups.",
      "created_at" : "2022-08-17T06:06:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1217500839",
      "id" : 1217500839,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IkZan",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217500839/reactions"
      },
      "updated_at" : "2022-08-17T06:06:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217500839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947594259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947594259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We don't currently suppress this in configure, why is it being added here?",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:18:29Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947594259",
      "id" : 947594259,
      "line" : 139,
      "node_id" : "PRRC_kwDOABII5844eyQT",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 139,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 139,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947594259/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947594259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947595141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947595141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We don't currently add linker optimisation flags in configure, why are they being added here?",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:19:23Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947595141",
      "id" : 947595141,
      "line" : 141,
      "node_id" : "PRRC_kwDOABII5844eyeF",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 141,
      "original_position" : 141,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 141,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947595141/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947595141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947598982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947598982"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't this link flag also be used when cross-compiling?",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:23:11Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947598982",
      "id" : 947598982,
      "line" : 162,
      "node_id" : "PRRC_kwDOABII5844ezaG",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 162,
      "original_position" : 162,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 162,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947598982/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947598982",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947606178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947606178"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Cross-compiling for macOS, the \"C++ compiler\" output is `/usr/bin/ccache /usr/bin/env`. Not super helpful.",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:29:05Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)\n+endif()\n+\n+if(CMAKE_CROSSCOMPILING)\n+  add_definitions(${CPPFLAGS_FROM_DEPENDS})\n+  foreach(c_flag ${CFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:C>:${c_flag}>)\n+  endforeach()\n+  foreach(cxx_flag ${CXXFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${cxx_flag}>)\n+  endforeach()\n+  link_libraries(${LDFLAGS_FROM_DEPENDS})\n+endif()\n+\n+include(cmake/introspection.cmake)\n+\n+include(cmake/subtree-minisketch.cmake)\n+include(cmake/subtree-secp256k1.cmake)\n+\n+include(cmake/optional_qt.cmake)\n+include(cmake/optional.cmake)\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR BUILD_TX OR BUILD_BITCOINKERNEL_LIB OR BUILD_WALLET_TOOL OR NOT WITH_GUI STREQUAL no)\n+  # Find Boost headers only.\n+  find_package(Boost 1.64.0 REQUIRED)\n+\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+endif()\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR NOT WITH_GUI STREQUAL no)\n+  include(FindPkgConfig)\n+  pkg_check_modules(libevent REQUIRED libevent>=2.1.8 IMPORTED_TARGET)\n+  if(CMAKE_SYSTEM_NAME STREQUAL Windows AND TARGET PkgConfig::libevent)\n+    target_link_libraries(PkgConfig::libevent INTERFACE iphlpapi ws2_32)\n+  endif()\n+endif()\n+\n+if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows AND (BUILD_DAEMON OR NOT WITH_GUI STREQUAL no))\n+  pkg_check_modules(libevent_pthreads REQUIRED libevent_pthreads>=2.1.8 IMPORTED_TARGET)\n+endif()\n+\n+add_subdirectory(src)\n+\n+set(abs_top_srcdir ${CMAKE_SOURCE_DIR})\n+set(abs_top_builddir ${CMAKE_BINARY_DIR})\n+set(EXEEXT ${CMAKE_EXECUTABLE_SUFFIX})\n+if(NOT ENABLE_WALLET)\n+  set(ENABLE_WALLET_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_SQLITE)\n+  set(USE_SQLITE_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_BDB)\n+  set(USE_BDB_TRUE \\#)\n+endif()\n+if(NOT BUILD_CLI)\n+  set(BUILD_BITCOIN_CLI_TRUE \\#)\n+endif()\n+if(NOT BUILD_UTIL)\n+  set(BUILD_BITCOIN_UTIL_TRUE \\#)\n+endif()\n+if(NOT BUILD_WALLET_TOOL)\n+  set(BUILD_BITCOIN_WALLET_TRUE \\#)\n+endif()\n+if(NOT BUILD_DAEMON)\n+  set(BUILD_BITCOIND_TRUE \\#)\n+endif()\n+if(NOT WITH_ZMQ)\n+  set(ENABLE_ZMQ_TRUE \\#)\n+endif()\n+if(NOT ENABLE_EXTERNAL_SIGNER)\n+  set(ENABLE_EXTERNAL_SIGNER_TRUE \\#)\n+endif()\n+if(NOT USE_SYSCALL_SANDBOX)\n+  set(ENABLE_SYSCALL_SANDBOX_TRUE \\#)\n+endif()\n+if(NOT ENABLE_TRACING)\n+  set(ENABLE_USDT_TRACEPOINTS_TRUE \\#)\n+endif()\n+configure_file(test/config.ini.in test/config.ini @ONLY)\n+execute_process(COMMAND mkdir -p ${CMAKE_BINARY_DIR}/test/functional)\n+execute_process(COMMAND rm -f ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+execute_process(COMMAND ln -s ${CMAKE_SOURCE_DIR}/test/functional/test_runner.py ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+\n+message(\"\\n\")\n+message(\"Configure summary\")\n+message(\"=================\")\n+if(cached_cmake_build_type)\n+  message(\"Build type ......................... ${CMAKE_BUILD_TYPE}\")\n+else()\n+  message(\"Available configurations ........... ${CMAKE_CONFIGURATION_TYPES}\")\n+endif()\n+if(CMAKE_CROSSCOMPILING)\n+  message(\"Cross compiling for ................ ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}\")\n+endif()\n+get_directory_property(definitions COMPILE_DEFINITIONS)\n+message(\"Preprocessor defined macros ........ ${definitions}\")\n+message(\"C++ compiler ....................... ${CMAKE_CXX_COMPILER_LAUNCHER} ${CMAKE_CXX_COMPILER}\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947606178",
      "id" : 947606178,
      "line" : 260,
      "node_id" : "PRRC_kwDOABII5844e1Ki",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 260,
      "original_position" : 260,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 260,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947606178/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947606178",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947607265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947607265"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Cross-compiling for macOS/Windows, the \"Compile options\" output is something like `$<$<COMPILE_LANGUAGE:C>:-pipe>;$<$<COMPILE_LANGUAGE:C>:-std=c11>;$<$<COMPILE_LANGUAGE:C>:-O2>;$<$<COMPILE_LANGUAGE:CXX>:-pipe>;$<$<COMPILE_LANGUAGE:CXX>:-std=c++17>;$<$<COMPILE_LANGUAGE:CXX>:-O2>`. Which isn't readable.",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:29:55Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)\n+endif()\n+\n+if(CMAKE_CROSSCOMPILING)\n+  add_definitions(${CPPFLAGS_FROM_DEPENDS})\n+  foreach(c_flag ${CFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:C>:${c_flag}>)\n+  endforeach()\n+  foreach(cxx_flag ${CXXFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${cxx_flag}>)\n+  endforeach()\n+  link_libraries(${LDFLAGS_FROM_DEPENDS})\n+endif()\n+\n+include(cmake/introspection.cmake)\n+\n+include(cmake/subtree-minisketch.cmake)\n+include(cmake/subtree-secp256k1.cmake)\n+\n+include(cmake/optional_qt.cmake)\n+include(cmake/optional.cmake)\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR BUILD_TX OR BUILD_BITCOINKERNEL_LIB OR BUILD_WALLET_TOOL OR NOT WITH_GUI STREQUAL no)\n+  # Find Boost headers only.\n+  find_package(Boost 1.64.0 REQUIRED)\n+\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+endif()\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR NOT WITH_GUI STREQUAL no)\n+  include(FindPkgConfig)\n+  pkg_check_modules(libevent REQUIRED libevent>=2.1.8 IMPORTED_TARGET)\n+  if(CMAKE_SYSTEM_NAME STREQUAL Windows AND TARGET PkgConfig::libevent)\n+    target_link_libraries(PkgConfig::libevent INTERFACE iphlpapi ws2_32)\n+  endif()\n+endif()\n+\n+if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows AND (BUILD_DAEMON OR NOT WITH_GUI STREQUAL no))\n+  pkg_check_modules(libevent_pthreads REQUIRED libevent_pthreads>=2.1.8 IMPORTED_TARGET)\n+endif()\n+\n+add_subdirectory(src)\n+\n+set(abs_top_srcdir ${CMAKE_SOURCE_DIR})\n+set(abs_top_builddir ${CMAKE_BINARY_DIR})\n+set(EXEEXT ${CMAKE_EXECUTABLE_SUFFIX})\n+if(NOT ENABLE_WALLET)\n+  set(ENABLE_WALLET_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_SQLITE)\n+  set(USE_SQLITE_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_BDB)\n+  set(USE_BDB_TRUE \\#)\n+endif()\n+if(NOT BUILD_CLI)\n+  set(BUILD_BITCOIN_CLI_TRUE \\#)\n+endif()\n+if(NOT BUILD_UTIL)\n+  set(BUILD_BITCOIN_UTIL_TRUE \\#)\n+endif()\n+if(NOT BUILD_WALLET_TOOL)\n+  set(BUILD_BITCOIN_WALLET_TRUE \\#)\n+endif()\n+if(NOT BUILD_DAEMON)\n+  set(BUILD_BITCOIND_TRUE \\#)\n+endif()\n+if(NOT WITH_ZMQ)\n+  set(ENABLE_ZMQ_TRUE \\#)\n+endif()\n+if(NOT ENABLE_EXTERNAL_SIGNER)\n+  set(ENABLE_EXTERNAL_SIGNER_TRUE \\#)\n+endif()\n+if(NOT USE_SYSCALL_SANDBOX)\n+  set(ENABLE_SYSCALL_SANDBOX_TRUE \\#)\n+endif()\n+if(NOT ENABLE_TRACING)\n+  set(ENABLE_USDT_TRACEPOINTS_TRUE \\#)\n+endif()\n+configure_file(test/config.ini.in test/config.ini @ONLY)\n+execute_process(COMMAND mkdir -p ${CMAKE_BINARY_DIR}/test/functional)\n+execute_process(COMMAND rm -f ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+execute_process(COMMAND ln -s ${CMAKE_SOURCE_DIR}/test/functional/test_runner.py ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+\n+message(\"\\n\")\n+message(\"Configure summary\")\n+message(\"=================\")\n+if(cached_cmake_build_type)\n+  message(\"Build type ......................... ${CMAKE_BUILD_TYPE}\")\n+else()\n+  message(\"Available configurations ........... ${CMAKE_CONFIGURATION_TYPES}\")\n+endif()\n+if(CMAKE_CROSSCOMPILING)\n+  message(\"Cross compiling for ................ ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}\")\n+endif()\n+get_directory_property(definitions COMPILE_DEFINITIONS)\n+message(\"Preprocessor defined macros ........ ${definitions}\")\n+message(\"C++ compiler ....................... ${CMAKE_CXX_COMPILER_LAUNCHER} ${CMAKE_CXX_COMPILER}\")\n+get_directory_property(compile_options COMPILE_OPTIONS)\n+message(\"Compile options .................... ${compile_options}\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947607265",
      "id" : 947607265,
      "line" : 262,
      "node_id" : "PRRC_kwDOABII5844e1bh",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 262,
      "original_position" : 262,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 262,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947607265/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947607265",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947627848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947627848"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't we check these flags are available, rather than assuming the user has as certain version of binutils?",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:45:11Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947627848",
      "id" : 947627848,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII5844e6dI",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 97,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 97,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947627848/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947627848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947628207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947628207"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here.",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:45:31Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947628207",
      "id" : 947628207,
      "line" : 99,
      "node_id" : "PRRC_kwDOABII5844e6iv",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 99,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 99,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947628207/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947628207",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947668248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947668248"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This test fails when cross-compiling for Windows, and we end up building without `-fstack-protector-all`.\r\n```bash\r\n/usr/lib/gcc/x86_64-w64-mingw32/11.2.1/../../../../x86_64-w64-mingw32/bin/ld: CMakeFiles/cmTC_c6384.dir/objects.a(src.cxx.obj):src.cxx:(.text+0x35): undefined reference to `__stack_chk_fail'\r\n/usr/lib/gcc/x86_64-w64-mingw32/11.2.1/../../../../x86_64-w64-mingw32/bin/ld: CMakeFiles/cmTC_c6384.dir/objects.a(src.cxx.obj):src.cxx:(.rdata$.refptr.__stack_chk_guard[.refptr.__stack_chk_guard]+0x0): undefined reference to `__stack_chk_guard'\r\n```",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T09:23:49Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947668248",
      "id" : 947668248,
      "line" : 87,
      "node_id" : "PRRC_kwDOABII5844fEUY",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 87,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 87,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947668248/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947668248",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 6e1dcc2ae5096dde327b71efb6bfa0bf120227e5 -> d56e4d193b7266212686dab00f57a3adf3b11db0 ([pr25797.06](https://github.com/hebasto/bitcoin/commits/pr25797.06) -> [pr25797.07](https://github.com/hebasto/bitcoin/commits/pr25797.07)):\r\n\r\n- addressed some of @fanquake's comments\r\n\r\n_(addressing of other comments in progress)_",
      "created_at" : "2022-08-17T13:19:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218000434",
      "id" : 1218000434,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ImTYy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218000434/reactions"
      },
      "updated_at" : "2022-08-17T13:19:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218000434",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947921489"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947921489"
         }
      },
      "author_association" : "MEMBER",
      "body" : "[Updated](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218000434).",
      "commit_id" : "d56e4d193b7266212686dab00f57a3adf3b11db0",
      "created_at" : "2022-08-17T13:19:48Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947921489",
      "id" : 947921489,
      "in_reply_to_id" : 947594259,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5844gCJR",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 139,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : null,
      "pull_request_review_id" : 1075710910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947921489/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T13:19:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947921489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> We shouldn't have to pass any options to suppress, as Cmake shouldn't even be looking for these libs if we've opted out of in depends.\r\n\r\nFixed in the recent [update](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218000434).",
      "created_at" : "2022-08-17T13:22:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218003804",
      "id" : 1218003804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ImUNc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218003804/reactions"
      },
      "updated_at" : "2022-08-17T13:22:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218003804",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">The new CMake-based build system (CM) does not support in-source builds.\r\n\r\nThis is a HUGE regression for development.\r\n\r\n>We shouldn't have to pass any options to suppress, as Cmake shouldn't even be looking for these libs if we've opted out of in depends.\r\n\r\nDon't some depends users want to build using those system libs (while using depends for other stuff)?\r\n\r\nOn another note, I've noticed a lot of build system refactoring/NIH in Core has broken things that worked previously, and had to be fixed later. This indicates build system stuff, especially homegrown, is underreviewed. CMake might help this, or make it worse. If it's going to help, I would expect to see it reflected in a higher than normal amount of code review on this PR.",
      "created_at" : "2022-08-17T14:59:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218128430",
      "id" : 1218128430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Imyou",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218128430/reactions"
      },
      "updated_at" : "2022-08-17T14:59:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218128430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Don't some depends users want to build using those system libs (while using depends for other stuff)?\n\nOnly if you explicitly opt in. That shouldn't be the default behaviour (would defeat the point of depends), and I hadn't opted in here.",
      "created_at" : "2022-08-17T15:10:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218141678",
      "id" : 1218141678,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Im13u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218141678/reactions"
      },
      "updated_at" : "2022-08-17T15:10:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218141678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK-ish, but only with 100% feature parity.\r\n\r\nThis is the kind of work that's easy enough to get 90% of the way there, but the remaining 10% will almost certainly be brutal.\r\n\r\nI'm in agreement about moving to something more maintainable than Autotools in the long-term, but I'm absolutely against merging this for the sake of the stated reasons: Qt6, MSVC, trendiness (note that I've switched to CMake for my own projects, so I certainly have nothing against it). No offense, but honestly I think it's more reasonable to consider dropping those platforms than to cater our entire infrastructure to them. I share many of @luke-jr's concerns as well.\r\n\r\nThat said, I am very open to a feature-complete CMake port of our current build-system for the sake of modernization and future-proofing. But again, that means feature-parity and a focus on the high-priority targets. Sorry, but Qt6 and MSVC just aren't that.\r\n\r\nI'm honestly not sure how to even begin reviewing this without some kind of 1:1 feature completion mapping. Our current build system does a whole lot more than just build binaries and libs.\r\n\r\nFor example, comments like this don't inspire much confidence\r\n\r\n>     I'm assuming that unit-test build support with CMake is still under construction?\r\n> \r\n> It is, but not as a part of this PR. My intention is to keep the latter more or less digestible for reviewers.\r\n\r\nCould you please advise how we can review this without simply testing it on each platform? That approach would likely take years of after-the-fact corner-case fixing. For example, I think it'd be reasonable to set \"autotools/cmake binary output equivalents for all supported platforms, or detailed explanations as to why they differ\" as a pretty obvious requirement for merge. Otherwise we're just kinda hoping for no regressions, no? \r\n\r\nI don't mean to be harsh with the above, I know how much time/effort work like this takes. But I'm afraid this will require some pretty intense planning and arguing to make it to the finish line.\r\n\r\ntl;dr: charts and graphs please :)",
      "created_at" : "2022-08-17T18:38:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218365904",
      "id" : 1218365904,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585InsnQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218365904/reactions"
      },
      "updated_at" : "2022-08-17T18:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218365904",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948310221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948310221"
         }
      },
      "author_association" : "NONE",
      "body" : "That output on macOS 12.5 is different for me\r\n\r\n```\r\nC++ compiler ....................... /opt/homebrew/bin/ccache /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++\r\n```",
      "commit_id" : "d56e4d193b7266212686dab00f57a3adf3b11db0",
      "created_at" : "2022-08-17T18:58:15Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)\n+endif()\n+\n+if(CMAKE_CROSSCOMPILING)\n+  add_definitions(${CPPFLAGS_FROM_DEPENDS})\n+  foreach(c_flag ${CFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:C>:${c_flag}>)\n+  endforeach()\n+  foreach(cxx_flag ${CXXFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${cxx_flag}>)\n+  endforeach()\n+  link_libraries(${LDFLAGS_FROM_DEPENDS})\n+endif()\n+\n+include(cmake/introspection.cmake)\n+\n+include(cmake/subtree-minisketch.cmake)\n+include(cmake/subtree-secp256k1.cmake)\n+\n+include(cmake/optional_qt.cmake)\n+include(cmake/optional.cmake)\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR BUILD_TX OR BUILD_BITCOINKERNEL_LIB OR BUILD_WALLET_TOOL OR NOT WITH_GUI STREQUAL no)\n+  # Find Boost headers only.\n+  find_package(Boost 1.64.0 REQUIRED)\n+\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+endif()\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR NOT WITH_GUI STREQUAL no)\n+  include(FindPkgConfig)\n+  pkg_check_modules(libevent REQUIRED libevent>=2.1.8 IMPORTED_TARGET)\n+  if(CMAKE_SYSTEM_NAME STREQUAL Windows AND TARGET PkgConfig::libevent)\n+    target_link_libraries(PkgConfig::libevent INTERFACE iphlpapi ws2_32)\n+  endif()\n+endif()\n+\n+if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows AND (BUILD_DAEMON OR NOT WITH_GUI STREQUAL no))\n+  pkg_check_modules(libevent_pthreads REQUIRED libevent_pthreads>=2.1.8 IMPORTED_TARGET)\n+endif()\n+\n+add_subdirectory(src)\n+\n+set(abs_top_srcdir ${CMAKE_SOURCE_DIR})\n+set(abs_top_builddir ${CMAKE_BINARY_DIR})\n+set(EXEEXT ${CMAKE_EXECUTABLE_SUFFIX})\n+if(NOT ENABLE_WALLET)\n+  set(ENABLE_WALLET_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_SQLITE)\n+  set(USE_SQLITE_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_BDB)\n+  set(USE_BDB_TRUE \\#)\n+endif()\n+if(NOT BUILD_CLI)\n+  set(BUILD_BITCOIN_CLI_TRUE \\#)\n+endif()\n+if(NOT BUILD_UTIL)\n+  set(BUILD_BITCOIN_UTIL_TRUE \\#)\n+endif()\n+if(NOT BUILD_WALLET_TOOL)\n+  set(BUILD_BITCOIN_WALLET_TRUE \\#)\n+endif()\n+if(NOT BUILD_DAEMON)\n+  set(BUILD_BITCOIND_TRUE \\#)\n+endif()\n+if(NOT WITH_ZMQ)\n+  set(ENABLE_ZMQ_TRUE \\#)\n+endif()\n+if(NOT ENABLE_EXTERNAL_SIGNER)\n+  set(ENABLE_EXTERNAL_SIGNER_TRUE \\#)\n+endif()\n+if(NOT USE_SYSCALL_SANDBOX)\n+  set(ENABLE_SYSCALL_SANDBOX_TRUE \\#)\n+endif()\n+if(NOT ENABLE_TRACING)\n+  set(ENABLE_USDT_TRACEPOINTS_TRUE \\#)\n+endif()\n+configure_file(test/config.ini.in test/config.ini @ONLY)\n+execute_process(COMMAND mkdir -p ${CMAKE_BINARY_DIR}/test/functional)\n+execute_process(COMMAND rm -f ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+execute_process(COMMAND ln -s ${CMAKE_SOURCE_DIR}/test/functional/test_runner.py ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+\n+message(\"\\n\")\n+message(\"Configure summary\")\n+message(\"=================\")\n+if(cached_cmake_build_type)\n+  message(\"Build type ......................... ${CMAKE_BUILD_TYPE}\")\n+else()\n+  message(\"Available configurations ........... ${CMAKE_CONFIGURATION_TYPES}\")\n+endif()\n+if(CMAKE_CROSSCOMPILING)\n+  message(\"Cross compiling for ................ ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}\")\n+endif()\n+get_directory_property(definitions COMPILE_DEFINITIONS)\n+message(\"Preprocessor defined macros ........ ${definitions}\")\n+message(\"C++ compiler ....................... ${CMAKE_CXX_COMPILER_LAUNCHER} ${CMAKE_CXX_COMPILER}\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948310221",
      "id" : 948310221,
      "in_reply_to_id" : 947606178,
      "line" : 259,
      "node_id" : "PRRC_kwDOABII5844hhDN",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 259,
      "original_position" : 260,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 259,
      "pull_request_review_id" : 1076252179,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948310221/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T18:58:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948310221",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/749118?v=4",
         "events_url" : "https://api.github.com/users/adam2k/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adam2k/followers",
         "following_url" : "https://api.github.com/users/adam2k/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adam2k/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adam2k",
         "id" : 749118,
         "login" : "adam2k",
         "node_id" : "MDQ6VXNlcjc0OTExOA==",
         "organizations_url" : "https://api.github.com/users/adam2k/orgs",
         "received_events_url" : "https://api.github.com/users/adam2k/received_events",
         "repos_url" : "https://api.github.com/users/adam2k/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adam2k/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adam2k/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adam2k"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> This is the kind of work that's easy enough to get 90% of the way there, but the remaining 10% will almost certainly be brutal.\r\n\r\nI'm probably naive, but I wonder what types of things might be difficult to implement with cmake.\r\n\r\nIt would also be helpful if PR description mentioned what features autotools build supports that cmake build doesn't support yet. Just skimming it wasn't clear if this mostly needs more testing on different platforms or if it has some major missing features that need to be implemented still.",
      "created_at" : "2022-08-17T19:13:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218395147",
      "id" : 1218395147,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585InzwL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218395147/reactions"
      },
      "updated_at" : "2022-08-17T19:13:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218395147",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky I didn't mean to imply that there's anything that wouldn't be possible with CMake, just that there's a _lot_ to get done other than vanilla builds. A long list of little stuff like profiling output, configurable shared/static builds, deployment targets (dmg/exe installer creation), etc. Many of those things may even be _easier_ with CMake, there's just a lot to account for.\r\n\r\n> It would also be helpful if PR description mentioned what features autotools build supports that cmake build doesn't support yet. Just skimming it wasn't clear if this mostly needs more testing on different platforms or if it has some major missing features that need to be implemented still.\r\n\r\nAgreed, this is my ask as well. It could be that I skimmed too quickly, but I didn't see those kinds of things addressed here yet.",
      "created_at" : "2022-08-17T19:23:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218403640",
      "id" : 1218403640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585In104",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218403640/reactions"
      },
      "updated_at" : "2022-08-17T19:23:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218403640",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> dongcarl fanquake ryanofsky theuni\r\n> \r\n> Your conceptual assessments of this PR will be much appreciated.\r\n\r\nDefinitely major concept ACK from me. And the implementation seems very clean. I guess I can try getting multiprocess build to work with this since I don't see a flag for it yet.",
      "created_at" : "2022-08-17T19:39:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218416462",
      "id" : 1218416462,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585In49O",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218416462/reactions"
      },
      "updated_at" : "2022-08-17T19:39:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218416462",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948344256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948344256"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@adam2k You are building natively on macOS for macOS, while @fanquake cross builds on Linux for macOS. Right?",
      "commit_id" : "d56e4d193b7266212686dab00f57a3adf3b11db0",
      "created_at" : "2022-08-17T19:42:27Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)\n+endif()\n+\n+if(CMAKE_CROSSCOMPILING)\n+  add_definitions(${CPPFLAGS_FROM_DEPENDS})\n+  foreach(c_flag ${CFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:C>:${c_flag}>)\n+  endforeach()\n+  foreach(cxx_flag ${CXXFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${cxx_flag}>)\n+  endforeach()\n+  link_libraries(${LDFLAGS_FROM_DEPENDS})\n+endif()\n+\n+include(cmake/introspection.cmake)\n+\n+include(cmake/subtree-minisketch.cmake)\n+include(cmake/subtree-secp256k1.cmake)\n+\n+include(cmake/optional_qt.cmake)\n+include(cmake/optional.cmake)\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR BUILD_TX OR BUILD_BITCOINKERNEL_LIB OR BUILD_WALLET_TOOL OR NOT WITH_GUI STREQUAL no)\n+  # Find Boost headers only.\n+  find_package(Boost 1.64.0 REQUIRED)\n+\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+endif()\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR NOT WITH_GUI STREQUAL no)\n+  include(FindPkgConfig)\n+  pkg_check_modules(libevent REQUIRED libevent>=2.1.8 IMPORTED_TARGET)\n+  if(CMAKE_SYSTEM_NAME STREQUAL Windows AND TARGET PkgConfig::libevent)\n+    target_link_libraries(PkgConfig::libevent INTERFACE iphlpapi ws2_32)\n+  endif()\n+endif()\n+\n+if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows AND (BUILD_DAEMON OR NOT WITH_GUI STREQUAL no))\n+  pkg_check_modules(libevent_pthreads REQUIRED libevent_pthreads>=2.1.8 IMPORTED_TARGET)\n+endif()\n+\n+add_subdirectory(src)\n+\n+set(abs_top_srcdir ${CMAKE_SOURCE_DIR})\n+set(abs_top_builddir ${CMAKE_BINARY_DIR})\n+set(EXEEXT ${CMAKE_EXECUTABLE_SUFFIX})\n+if(NOT ENABLE_WALLET)\n+  set(ENABLE_WALLET_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_SQLITE)\n+  set(USE_SQLITE_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_BDB)\n+  set(USE_BDB_TRUE \\#)\n+endif()\n+if(NOT BUILD_CLI)\n+  set(BUILD_BITCOIN_CLI_TRUE \\#)\n+endif()\n+if(NOT BUILD_UTIL)\n+  set(BUILD_BITCOIN_UTIL_TRUE \\#)\n+endif()\n+if(NOT BUILD_WALLET_TOOL)\n+  set(BUILD_BITCOIN_WALLET_TRUE \\#)\n+endif()\n+if(NOT BUILD_DAEMON)\n+  set(BUILD_BITCOIND_TRUE \\#)\n+endif()\n+if(NOT WITH_ZMQ)\n+  set(ENABLE_ZMQ_TRUE \\#)\n+endif()\n+if(NOT ENABLE_EXTERNAL_SIGNER)\n+  set(ENABLE_EXTERNAL_SIGNER_TRUE \\#)\n+endif()\n+if(NOT USE_SYSCALL_SANDBOX)\n+  set(ENABLE_SYSCALL_SANDBOX_TRUE \\#)\n+endif()\n+if(NOT ENABLE_TRACING)\n+  set(ENABLE_USDT_TRACEPOINTS_TRUE \\#)\n+endif()\n+configure_file(test/config.ini.in test/config.ini @ONLY)\n+execute_process(COMMAND mkdir -p ${CMAKE_BINARY_DIR}/test/functional)\n+execute_process(COMMAND rm -f ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+execute_process(COMMAND ln -s ${CMAKE_SOURCE_DIR}/test/functional/test_runner.py ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+\n+message(\"\\n\")\n+message(\"Configure summary\")\n+message(\"=================\")\n+if(cached_cmake_build_type)\n+  message(\"Build type ......................... ${CMAKE_BUILD_TYPE}\")\n+else()\n+  message(\"Available configurations ........... ${CMAKE_CONFIGURATION_TYPES}\")\n+endif()\n+if(CMAKE_CROSSCOMPILING)\n+  message(\"Cross compiling for ................ ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}\")\n+endif()\n+get_directory_property(definitions COMPILE_DEFINITIONS)\n+message(\"Preprocessor defined macros ........ ${definitions}\")\n+message(\"C++ compiler ....................... ${CMAKE_CXX_COMPILER_LAUNCHER} ${CMAKE_CXX_COMPILER}\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948344256",
      "id" : 948344256,
      "in_reply_to_id" : 947606178,
      "line" : 259,
      "node_id" : "PRRC_kwDOABII5844hpXA",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 259,
      "original_position" : 260,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 259,
      "pull_request_review_id" : 1076299556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948344256/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T19:42:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948344256",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Just to explain my concept ACK a little bit: I don't think CMake build needs to add much of a maintenance burden and don't think it needs to have parity with the autotools build. I think if we can start using CMake build for binary releases, then developers can switch to using cmake for all the cool new stuff (qt6, jetbrains, android, web IDEs, rust, bitcoin kernel) and autotools build can hang around in maintenance mode for the old boring stuff.\r\n\r\nI don't think having two build systems should could much trouble for normal developers. Only difference is if you add or renaming a file or flag, you have to may have to make an extra edit.\r\n\r\nI also don't think having two build systems should cause much trouble for people working on build features either, as long as we don't insist on parity between two systems and are clear about which build system is used for binary releases.",
      "created_at" : "2022-08-17T20:05:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218440885",
      "id" : 1218440885,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585In-61",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218440885/reactions"
      },
      "updated_at" : "2022-08-17T20:05:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218440885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948376580"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948376580"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Cross-compiling for macOS, the \"C++ compiler\" output is `/usr/bin/ccache /usr/bin/env`. Not super helpful.\r\n\r\nThis is caused by the #21552 bug. A possible fix has been suggested in #24620.",
      "commit_id" : "d56e4d193b7266212686dab00f57a3adf3b11db0",
      "created_at" : "2022-08-17T20:19:50Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)\n+endif()\n+\n+if(CMAKE_CROSSCOMPILING)\n+  add_definitions(${CPPFLAGS_FROM_DEPENDS})\n+  foreach(c_flag ${CFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:C>:${c_flag}>)\n+  endforeach()\n+  foreach(cxx_flag ${CXXFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${cxx_flag}>)\n+  endforeach()\n+  link_libraries(${LDFLAGS_FROM_DEPENDS})\n+endif()\n+\n+include(cmake/introspection.cmake)\n+\n+include(cmake/subtree-minisketch.cmake)\n+include(cmake/subtree-secp256k1.cmake)\n+\n+include(cmake/optional_qt.cmake)\n+include(cmake/optional.cmake)\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR BUILD_TX OR BUILD_BITCOINKERNEL_LIB OR BUILD_WALLET_TOOL OR NOT WITH_GUI STREQUAL no)\n+  # Find Boost headers only.\n+  find_package(Boost 1.64.0 REQUIRED)\n+\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+endif()\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR NOT WITH_GUI STREQUAL no)\n+  include(FindPkgConfig)\n+  pkg_check_modules(libevent REQUIRED libevent>=2.1.8 IMPORTED_TARGET)\n+  if(CMAKE_SYSTEM_NAME STREQUAL Windows AND TARGET PkgConfig::libevent)\n+    target_link_libraries(PkgConfig::libevent INTERFACE iphlpapi ws2_32)\n+  endif()\n+endif()\n+\n+if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows AND (BUILD_DAEMON OR NOT WITH_GUI STREQUAL no))\n+  pkg_check_modules(libevent_pthreads REQUIRED libevent_pthreads>=2.1.8 IMPORTED_TARGET)\n+endif()\n+\n+add_subdirectory(src)\n+\n+set(abs_top_srcdir ${CMAKE_SOURCE_DIR})\n+set(abs_top_builddir ${CMAKE_BINARY_DIR})\n+set(EXEEXT ${CMAKE_EXECUTABLE_SUFFIX})\n+if(NOT ENABLE_WALLET)\n+  set(ENABLE_WALLET_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_SQLITE)\n+  set(USE_SQLITE_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_BDB)\n+  set(USE_BDB_TRUE \\#)\n+endif()\n+if(NOT BUILD_CLI)\n+  set(BUILD_BITCOIN_CLI_TRUE \\#)\n+endif()\n+if(NOT BUILD_UTIL)\n+  set(BUILD_BITCOIN_UTIL_TRUE \\#)\n+endif()\n+if(NOT BUILD_WALLET_TOOL)\n+  set(BUILD_BITCOIN_WALLET_TRUE \\#)\n+endif()\n+if(NOT BUILD_DAEMON)\n+  set(BUILD_BITCOIND_TRUE \\#)\n+endif()\n+if(NOT WITH_ZMQ)\n+  set(ENABLE_ZMQ_TRUE \\#)\n+endif()\n+if(NOT ENABLE_EXTERNAL_SIGNER)\n+  set(ENABLE_EXTERNAL_SIGNER_TRUE \\#)\n+endif()\n+if(NOT USE_SYSCALL_SANDBOX)\n+  set(ENABLE_SYSCALL_SANDBOX_TRUE \\#)\n+endif()\n+if(NOT ENABLE_TRACING)\n+  set(ENABLE_USDT_TRACEPOINTS_TRUE \\#)\n+endif()\n+configure_file(test/config.ini.in test/config.ini @ONLY)\n+execute_process(COMMAND mkdir -p ${CMAKE_BINARY_DIR}/test/functional)\n+execute_process(COMMAND rm -f ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+execute_process(COMMAND ln -s ${CMAKE_SOURCE_DIR}/test/functional/test_runner.py ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+\n+message(\"\\n\")\n+message(\"Configure summary\")\n+message(\"=================\")\n+if(cached_cmake_build_type)\n+  message(\"Build type ......................... ${CMAKE_BUILD_TYPE}\")\n+else()\n+  message(\"Available configurations ........... ${CMAKE_CONFIGURATION_TYPES}\")\n+endif()\n+if(CMAKE_CROSSCOMPILING)\n+  message(\"Cross compiling for ................ ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}\")\n+endif()\n+get_directory_property(definitions COMPILE_DEFINITIONS)\n+message(\"Preprocessor defined macros ........ ${definitions}\")\n+message(\"C++ compiler ....................... ${CMAKE_CXX_COMPILER_LAUNCHER} ${CMAKE_CXX_COMPILER}\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948376580",
      "id" : 948376580,
      "in_reply_to_id" : 947606178,
      "line" : 259,
      "node_id" : "PRRC_kwDOABII5844hxQE",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 259,
      "original_position" : 260,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 259,
      "pull_request_review_id" : 1076381088,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948376580/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T20:19:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948376580",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948385280"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948385280"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why? This link flag is being processed _after_ the `if  test $cross_compiling != \"yes\";` block end in the `configure.ac`.",
      "commit_id" : "d56e4d193b7266212686dab00f57a3adf3b11db0",
      "created_at" : "2022-08-17T20:29:15Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948385280",
      "id" : 948385280,
      "in_reply_to_id" : 947598982,
      "line" : 161,
      "node_id" : "PRRC_kwDOABII5844hzYA",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 161,
      "original_position" : 162,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 161,
      "pull_request_review_id" : 1076391230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948385280/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T20:29:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948385280",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948392209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948392209"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes. Which means it gets used for both native and cross-compile builds.",
      "commit_id" : "d56e4d193b7266212686dab00f57a3adf3b11db0",
      "created_at" : "2022-08-17T20:36:51Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948392209",
      "id" : 948392209,
      "in_reply_to_id" : 947598982,
      "line" : 161,
      "node_id" : "PRRC_kwDOABII5844h1ER",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 161,
      "original_position" : 162,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 161,
      "pull_request_review_id" : 1076399365,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948392209/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T20:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948392209",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated d56e4d193b7266212686dab00f57a3adf3b11db0 -> 156afca1c03e2688417d1da313a475e58260d4ac ([pr25797.07](https://github.com/hebasto/bitcoin/commits/pr25797.07) -> [pr25797.08](https://github.com/hebasto/bitcoin/commits/pr25797.08)):\r\n\r\n- addressed more of @fanquake's comments, _(addressing of other comments in progress)_\r\n- improved and detailed configure summary",
      "created_at" : "2022-08-18T00:48:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218798376",
      "id" : 1218798376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IpWMo",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218798376/reactions"
      },
      "updated_at" : "2022-08-18T00:48:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218798376",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948556733"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948556733"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218798376).",
      "commit_id" : "156afca1c03e2688417d1da313a475e58260d4ac",
      "created_at" : "2022-08-18T00:49:12Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948556733",
      "id" : 948556733,
      "in_reply_to_id" : 947595141,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5844idO9",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 140,
      "original_position" : 141,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : null,
      "pull_request_review_id" : 1076567291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948556733/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-18T00:49:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948556733",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948556928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948556928"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! Should be [fixed](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218798376) now.",
      "commit_id" : "156afca1c03e2688417d1da313a475e58260d4ac",
      "created_at" : "2022-08-18T00:49:47Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)\n+endif()\n+\n+if(CMAKE_CROSSCOMPILING)\n+  add_definitions(${CPPFLAGS_FROM_DEPENDS})\n+  foreach(c_flag ${CFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:C>:${c_flag}>)\n+  endforeach()\n+  foreach(cxx_flag ${CXXFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${cxx_flag}>)\n+  endforeach()\n+  link_libraries(${LDFLAGS_FROM_DEPENDS})\n+endif()\n+\n+include(cmake/introspection.cmake)\n+\n+include(cmake/subtree-minisketch.cmake)\n+include(cmake/subtree-secp256k1.cmake)\n+\n+include(cmake/optional_qt.cmake)\n+include(cmake/optional.cmake)\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR BUILD_TX OR BUILD_BITCOINKERNEL_LIB OR BUILD_WALLET_TOOL OR NOT WITH_GUI STREQUAL no)\n+  # Find Boost headers only.\n+  find_package(Boost 1.64.0 REQUIRED)\n+\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+endif()\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR NOT WITH_GUI STREQUAL no)\n+  include(FindPkgConfig)\n+  pkg_check_modules(libevent REQUIRED libevent>=2.1.8 IMPORTED_TARGET)\n+  if(CMAKE_SYSTEM_NAME STREQUAL Windows AND TARGET PkgConfig::libevent)\n+    target_link_libraries(PkgConfig::libevent INTERFACE iphlpapi ws2_32)\n+  endif()\n+endif()\n+\n+if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows AND (BUILD_DAEMON OR NOT WITH_GUI STREQUAL no))\n+  pkg_check_modules(libevent_pthreads REQUIRED libevent_pthreads>=2.1.8 IMPORTED_TARGET)\n+endif()\n+\n+add_subdirectory(src)\n+\n+set(abs_top_srcdir ${CMAKE_SOURCE_DIR})\n+set(abs_top_builddir ${CMAKE_BINARY_DIR})\n+set(EXEEXT ${CMAKE_EXECUTABLE_SUFFIX})\n+if(NOT ENABLE_WALLET)\n+  set(ENABLE_WALLET_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_SQLITE)\n+  set(USE_SQLITE_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_BDB)\n+  set(USE_BDB_TRUE \\#)\n+endif()\n+if(NOT BUILD_CLI)\n+  set(BUILD_BITCOIN_CLI_TRUE \\#)\n+endif()\n+if(NOT BUILD_UTIL)\n+  set(BUILD_BITCOIN_UTIL_TRUE \\#)\n+endif()\n+if(NOT BUILD_WALLET_TOOL)\n+  set(BUILD_BITCOIN_WALLET_TRUE \\#)\n+endif()\n+if(NOT BUILD_DAEMON)\n+  set(BUILD_BITCOIND_TRUE \\#)\n+endif()\n+if(NOT WITH_ZMQ)\n+  set(ENABLE_ZMQ_TRUE \\#)\n+endif()\n+if(NOT ENABLE_EXTERNAL_SIGNER)\n+  set(ENABLE_EXTERNAL_SIGNER_TRUE \\#)\n+endif()\n+if(NOT USE_SYSCALL_SANDBOX)\n+  set(ENABLE_SYSCALL_SANDBOX_TRUE \\#)\n+endif()\n+if(NOT ENABLE_TRACING)\n+  set(ENABLE_USDT_TRACEPOINTS_TRUE \\#)\n+endif()\n+configure_file(test/config.ini.in test/config.ini @ONLY)\n+execute_process(COMMAND mkdir -p ${CMAKE_BINARY_DIR}/test/functional)\n+execute_process(COMMAND rm -f ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+execute_process(COMMAND ln -s ${CMAKE_SOURCE_DIR}/test/functional/test_runner.py ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+\n+message(\"\\n\")\n+message(\"Configure summary\")\n+message(\"=================\")\n+if(cached_cmake_build_type)\n+  message(\"Build type ......................... ${CMAKE_BUILD_TYPE}\")\n+else()\n+  message(\"Available configurations ........... ${CMAKE_CONFIGURATION_TYPES}\")\n+endif()\n+if(CMAKE_CROSSCOMPILING)\n+  message(\"Cross compiling for ................ ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}\")\n+endif()\n+get_directory_property(definitions COMPILE_DEFINITIONS)\n+message(\"Preprocessor defined macros ........ ${definitions}\")\n+message(\"C++ compiler ....................... ${CMAKE_CXX_COMPILER_LAUNCHER} ${CMAKE_CXX_COMPILER}\")\n+get_directory_property(compile_options COMPILE_OPTIONS)\n+message(\"Compile options .................... ${compile_options}\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948556928",
      "id" : 948556928,
      "in_reply_to_id" : 947607265,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5844idSA",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 261,
      "original_position" : 262,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : null,
      "pull_request_review_id" : 1076567533,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948556928/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-18T00:49:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948556928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948557375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948557375"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! [Fixed](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1218798376).",
      "commit_id" : "156afca1c03e2688417d1da313a475e58260d4ac",
      "created_at" : "2022-08-18T00:51:02Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r948557375",
      "id" : 948557375,
      "in_reply_to_id" : 947668248,
      "line" : 95,
      "node_id" : "PRRC_kwDOABII5844idY_",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 95,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 95,
      "pull_request_review_id" : 1076568076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948557375/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-18T00:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/948557375",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Doing a depends build of 156afca1c03e2688417d1da313a475e58260d4ac, on aarch64 Linux, currently fails with:\r\n```bash\r\nmake -C depends -j9 NO_QT=1 NO_WALLET=1 NO_ZMQ=1 NO_UPNP=1 NO_NATPMP=1 CC=clang CXX=clang++\r\ncmake --toolchain depends/aarch64-unknown-linux-gnu/share/toolchain.cmake -S . -B build\r\nWallet functionality:\r\n  SQLite, descriptor wallets ....... auto\r\n  Berkeley DB, legacy wallets ...... auto\r\n  wallet tool ...................... OFF\r\n...\r\ncmake --build build -j9\r\nConsolidate compiler generated dependencies of target univalue\r\n[  0%] Building CXX object CMakeFiles/minisketch.dir/src/minisketch/src/fields/generic_1byte.cpp.o\r\n[  0%] Building CXX object src/crypto/CMakeFiles/bitcoin_crypto.dir/aes.cpp.o\r\n[  0%] Building CXX object src/crc32c/CMakeFiles/crc32c_arm64.dir/src/crc32c_arm64.cc.o\r\n[  1%] Building CXX object CMakeFiles/minisketch.dir/src/minisketch/src/fields/generic_2bytes.cpp.o\r\n[  1%] Building CXX object CMakeFiles/minisketch.dir/src/minisketch/src/minisketch.cpp.o\r\n[  1%] Building CXX object CMakeFiles/minisketch.dir/src/minisketch/src/fields/generic_3bytes.cpp.o\r\nclang-14: warning: argument unused during compilation: '-fstack-clash-protection' [-Wunused-command-line-argument]\r\n[  3%] Building CXX object src/crc32c/CMakeFiles/crc32c_sse42.dir/src/crc32c_sse42.cc.o\r\n[  3%] Built target univalue\r\n[  3%] Building C object CMakeFiles/secp256k1.dir/src/secp256k1/src/secp256k1.c.o\r\nclang-14clang-14: warning: argument unused during compilation: '-fstack-clash-protection' [-Wunused-command-line-argument]\r\nclang-14: warning: argument unused during compilation: '-fstack-clash-protection' [-Wunused-command-line-argument]\r\n: error: argument unused during compilation: '-fstack-clash-protection' [-Werror,-Wunused-command-line-argument]\r\ngmake[2]: *** [src/crc32c/CMakeFiles/crc32c_arm64.dir/build.make:76: src/crc32c/CMakeFiles/crc32c_arm64.dir/src/crc32c_arm64.cc.o] Error 1\r\ngmake[1]: *** [CMakeFiles/Makefile2:543: src/crc32c/CMakeFiles/crc32c_arm64.dir/all] Error 2\r\ngmake[1]: *** Waiting for unfinished jobs....\r\nConsolidate compiler generated dependencies of target bitcoin_util\r\nclang-14: warning: argument unused during compilation: '-fstack-clash-protection' [-Wunused-command-line-argument]\r\n[  3%] Building C object CMakeFiles/secp256k1.dir/src/secp256k1/src/precomputed_ecmult.c.o\r\nclang-14: warning: argument unused during compilation: '-fstack-clash-protection' [-Wunused-command-line-argument]\r\nclang-14: error: argument unused during compilation: '-fstack-clash-protection' [-Werror,-Wunused-command-line-argument]\r\ngmake[2]: *** [src/crc32c/CMakeFiles/crc32c_sse42.dir/build.make:76: src/crc32c/CMakeFiles/crc32c_sse42.dir/src/crc32c_sse42.cc.o] Error 1\r\n```\r\n\r\nCXXFLAG detection marks `-fstack-clash-protection` as usable even though it's unused:\r\n```bash\r\nSource file was:\r\nint main() { return 0; }\r\nPerforming C++ SOURCE FILE Test CXX_SUPPORTS_FSTACK_CLASH_PROTECTION succeeded with the following output:\r\nChange Dir: /home/fedora/bitcoin/build/CMakeFiles/CMakeTmp\r\n\r\nRun Build Command(s):/usr/bin/gmake -f Makefile cmTC_c2ada/fast && /usr/bin/gmake  -f CMakeFiles/cmTC_c2ada.dir/build.make CMakeFiles/cmTC_c2ada.dir/build\r\ngmake[1]: Entering directory '/home/fedora/bitcoin/build/CMakeFiles/CMakeTmp'\r\nBuilding CXX object CMakeFiles/cmTC_c2ada.dir/src.cxx.o\r\n/usr/bin/clang++ -DCXX_SUPPORTS_FSTACK_CLASH_PROTECTION  -fstack-clash-protection -std=c++17 -MD -MT CMakeFiles/cmTC_c2ada.dir/src.cxx.o -MF CMakeFiles/cmTC_c2ada.dir/src.cxx.o.d -o CMakeFiles/cmTC_c2ada.dir/src.cxx.o -c /home/fedora/bitcoin/build/CMakeFiles/CMakeTmp/src.cxx\r\nclang-14: warning: argument unused during compilation: '-fstack-clash-protection' [-Wunused-command-line-argument]\r\nLinking CXX static library libcmTC_c2ada.a\r\n/usr/bin/cmake -P CMakeFiles/cmTC_c2ada.dir/cmake_clean_target.cmake\r\n/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_c2ada.dir/link.txt --verbose=1\r\n/usr/bin/llvm-ar qc libcmTC_c2ada.a CMakeFiles/cmTC_c2ada.dir/src.cxx.o\r\n/usr/bin/llvm-ranlib libcmTC_c2ada.a\r\ngmake[1]: Leaving directory '/home/fedora/bitcoin/build/CMakeFiles/CMakeTmp'\r\n```\r\nAny reason you're not using `-Werror` for flag checks like we do in configure? \r\n\r\nThe build ultimately fails because `-Werror` is enabled for the crc32c build. Looks like we'll need to turn off any flags we don't want enabled by default (like `-Werror`) in the subproject CMake configurations. \r\n\r\nNote that I included the `Wallet functionality` snippet above, because even though I built depends with `NO_WALLET=1`, the configure summary says `auto` for sqlite/bdb, where it should say `no`.",
      "created_at" : "2022-08-18T09:37:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219265408",
      "id" : 1219265408,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IrIOA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219265408/reactions"
      },
      "updated_at" : "2022-08-18T09:37:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219265408",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nhttps://blog.jetbrains.com/clion/2020/06/dev-eco-cpp-2020/#project_models has some numbers on build systems' popularity and trends. ",
      "created_at" : "2022-08-18T10:31:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219324421",
      "id" : 1219324421,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IrWoF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219324421/reactions"
      },
      "updated_at" : "2022-08-18T10:31:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219324421",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 156afca1c03e2688417d1da313a475e58260d4ac -> e016b22e6c365194743f54a7111f44caf6051394 ([pr25797.08](https://github.com/hebasto/bitcoin/commits/pr25797.08) -> [pr25797.09](https://github.com/hebasto/bitcoin/commits/pr25797.09)):\r\n\r\n- added the `TryAppendLinkerFlag` module\r\n- addressed more of @fanquake's comments, _(addressing of other comments in progress)_",
      "created_at" : "2022-08-18T14:29:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219567775",
      "id" : 1219567775,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IsSCf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219567775/reactions"
      },
      "updated_at" : "2022-08-18T14:29:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219567775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r949216184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/949216184"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219567775).",
      "commit_id" : "e016b22e6c365194743f54a7111f44caf6051394",
      "created_at" : "2022-08-18T14:30:49Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r949216184",
      "id" : 949216184,
      "in_reply_to_id" : 947627848,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5844k-O4",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 111,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : null,
      "pull_request_review_id" : 1077473924,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/949216184/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-18T14:30:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/949216184",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r949216869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/949216869"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219567775).",
      "commit_id" : "e016b22e6c365194743f54a7111f44caf6051394",
      "created_at" : "2022-08-18T14:31:14Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r949216869",
      "id" : 949216869,
      "in_reply_to_id" : 947628207,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5844k-Zl",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 113,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : null,
      "pull_request_review_id" : 1077474682,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/949216869/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-18T14:31:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/949216869",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Just to explain my concept ACK a little bit: I don't think CMake build needs to add much of a maintenance burden and don't think it needs to have parity with the autotools build. I think if we can start using CMake build for binary releases, then developers can switch to using cmake for all the cool new stuff (qt6, jetbrains, android, web IDEs, rust, bitcoin kernel) and autotools build can hang around in maintenance mode for the old boring stuff.\r\n> \r\n> I don't think having two build systems should could much trouble for normal developers. Only difference is if you add or renaming a file or flag, you have to may have to make an extra edit.\r\n> \r\n> I also don't think having two build systems should cause much trouble for people working on build features either, as long as we don't insist on parity between two systems and are clear about which build system is used for binary releases.\r\n\r\n> \r\n\r\nI beg you not to trivialize this way. The buildsystem has major implications for how work is done, namely large refactoring projects like libkernel. Maintaining two build systems may only make one-off PRs a little tougher, but it's guaranteed to significantly impede more interesting (and important) long-term efforts. Given the burnout and long-term developer attrition we've seen lately, that seems exactly backwards prioritization to me. Sure I'm biased towards the big cleanup projects, but at as I said above I think the project would benefit from dropping features and scope rather than adding/expanding. Sure, IDE integration and new platforms and bells and whistles would be nice, but this has whiffs of [Zawinski's Law](https://en.wikipedia.org/wiki/Jamie_Zawinski#Zawinski's_Law) to me.\r\n\r\nCall me a cranky old git, but as much as I'd like a more modern infrastructure, I'm changing/editing my support to a NACK for CMake until it's clear that the implications are better understood by everyone involved/affected. I don't understand the support/concept ACKs that this is receiving when so much of the concept (or even a roadmap) is still absent.\r\n\r\nAnd all that is without even mentioning the new overhead of adding what's essentially a new language that we have no history of reviewing/supporting in this project. Please consider the growing pains.\r\n\r\nI support @hebasto's work here, but I think this PR was opened too early. Personally, I'd suggest taking a step back and making a plan before throwing it up for a committee-style discussion. I'd be happy to take another look at this if/when there's a thoughtful roadmap/feature matrix attached. Until then I'm honestly not sure what we're discussing here so I'll keep out.",
      "created_at" : "2022-08-18T14:55:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219597093",
      "id" : 1219597093,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IsZMl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219597093/reactions"
      },
      "updated_at" : "2022-08-18T14:55:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219597093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> it's guaranteed to significantly impede more interesting (and important) long-term efforts.\r\n\r\nMy point is that this is only true if you require parity between the two build systems. I think it's fine (and preferable) if libbitcoinkernel and other newer projects target cmake only, and just keep autotools build working in maintenance mode. Of course if any autotools-lovers want to step up and contribute new features to the autotools build they should be free to do that, too.",
      "created_at" : "2022-08-18T15:03:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219604881",
      "id" : 1219604881,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IsbGR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219604881/reactions"
      },
      "updated_at" : "2022-08-18T15:03:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219604881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@theuni, I think you not making a clear enough distinction between maintaining a build system, and adding new features to a build system. I can attest to the difference personally. For everyday development, my interaction with autotools is very pleasant. It is very easy to **maintain** makefiles during normal c++ development as flags are switched or files are added and moved around. By contrast, implementing multiprocess support where I was **adding a new build feature** to autotools was a painful process that was very difficult to get right, and even had subtle bugs that were uncovered years after original code was written (#25214).\r\n\r\nI think we both agree that requiring new features to be implemented in two build systems would be a major setback to development. But your solution to that would be to ban use of a build system that would make development easier. My solution would be to choose one build system to use for binary releases, and drop the requirement that the both systems need to have feature parity for other types of development. For development purposes, it's fine to say that we have two build systems, and you are free to use the one your prefer. Build system X supports features A B and C, system Y supports features A B and D. If there is a build feature which your preferred build system is missing, you are welcome to submit a patch.\r\n\r\nI think new IDEs and new development tools tend to use cmake, and tend not use or even support autotools. I think we will make onboarding of new developers more difficult by feverishly clinging to autotools, and make existing developers less productive and code less safe if we can't benefit from using new tools. I also think adding new build features easier using cmake, but obviously this is subjective, and a reason why I think we shouldn't be demanding feature parity.",
      "created_at" : "2022-08-18T15:36:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219642834",
      "id" : 1219642834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IskXS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219642834/reactions"
      },
      "updated_at" : "2022-08-18T15:36:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219642834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky Please re-read my comments and please don't twist my words. Nowhere to I advocate for autotools. I hate it. it's dated and awful. In each comment I've advocated FOR CMake. I use, like, and prefer it.\r\n\r\nI'm just begging that we not hand-wave the very real pain of switching or maintaining two, and figure out a way to do it right. I'm on your side here, really.",
      "created_at" : "2022-08-18T15:56:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219664195",
      "id" : 1219664195,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IsplD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219664195/reactions"
      },
      "updated_at" : "2022-08-18T15:56:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219664195",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky as for partial/incremental support of CMake, I suppose my hesitation (which I should've made more clear) is that neither a (partial) build-system switch or a long-term feature merge happen overnight, nor in a vacuum. Realistically they'll overlap. It's easy to say \"just use CMake for the new stuff\", but for long-lived projects, that unfortunately will mean supporting both (or one awkwardly) during the dev/work/comment/merge periods.\r\n\r\nFor the CMake buildsystem to become supported for release, I would expect that to take no less than 6months to a year. Maybe I'm over-estimating, but that's exactly what I'm trying to flesh out here. When I alluded to the 90%/10% work above, that's what I was getting at. Getting to the point where the binaries build is one milestone, but getting to the point where we have that process fully integrated and we're ready to ship those deterministic/hardened/etc. binaries with all tests passing and happy downstreams is another. It's doable and we SHOULD do it, but it will take time and process and people-power. And during that time, it will be an extra burden for long-lived projects.",
      "created_at" : "2022-08-18T16:23:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219691903",
      "id" : 1219691903,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IswV_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219691903/reactions"
      },
      "updated_at" : "2022-08-18T16:23:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219691903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@theuni \r\n\r\n> I'd be happy to take another look at this if/when there's a ... feature matrix attached.\r\n\r\nIs the following table a move in the right direction?\r\n\r\n## Autotools -- CMake Feature Parity Table\r\n\r\nAutotool-based build system (AT) features being listed according to the `./configure --help` output. \r\n\r\n| AT feature | CM feature |\r\n|---|---|\r\n| `--enable-c++20` | TBD |\r\n| `--disable-wallet` | `-DENABLE_WALLET` |\r\n| `--enable-usdt` | `-DWITH_USDT` |\r\n| `--enable-upnp-default` | `-DENABLE_UPNP_DEFAULT` |\r\n| `--enable-natpmp-default` | `-DENABLE_NATPMP_DEFAULT` |\r\n| `--disable-tests` | TBD |\r\n| `--disable-gui-tests` | TBD |\r\n| `--disable-bench` | TBD |\r\n| `--enable-extended-functional-tests` | TBD |\r\n| `--enable-fuzz` | TBD |\r\n| `--enable-fuzz-binary` | TBD |\r\n| `--disable-hardening` | `-DCMAKE_BUILD_TYPE=RelHardened` |\r\n| `--enable-reduce-exports` | `-DREDUCE_EXPORTS` |\r\n| `--disable-ccache` | `-DUSE_CCACHE` |\r\n| `--enable-suppress-external-warnings` | TBD |\r\n| `--enable-lcov` | TBD |\r\n| `--enable-lcov-branch-coverage` | TBD |\r\n| `--enable-threadlocal` | TBD |\r\n| `--disable-asm` | TBD |\r\n| `--disable-zmq` | `-DWITH_ZMQ` |\r\n| `--enable-multiprocess` | TBD |\r\n| `--disable-man` | TBD |\r\n| `--enable-debug` | TBD |\r\n| `--enable-gprof` | TBD |\r\n| `--enable-werror` | TBD |\r\n| `--enable-external-signer` | `-DWITH_EXTERNAL_SIGNER` |\r\n| `--enable-lto` | TBD |\r\n| `--enable-util-cli` | `-DBUILD_CLI` |\r\n| `--enable-util-tx` | `-DBUILD_TX` |\r\n| `--enable-util-wallet` | `-DBUILD_WALLET_TOOL` |\r\n| `--enable-util-util` | `-DBUILD_UTIL` |\r\n| `--enable-experimental-util-chainstate` | TBD |\r\n| `--with-seccomp` | `-DWITH_SECCOMP` |\r\n| `--with-sqlite` | `-DWITH_SQLITE` |\r\n| `--without-bdb` | `-DWITH_BDB` |\r\n| `--with-miniupnpc` | `-DWITH_MINIUPNPC` |\r\n| `--with-natpmp` | `-DWITH_NATPMP` |\r\n| `--with-qrencode` | `-DWITH_QRENCODE` |\r\n| `--with-libmultiprocess` | TBD |\r\n| `--with-mpgen` | TBD |\r\n| `--with-sanitizers` | TBD |\r\n| `--with-utils` | individual options |\r\n| `--with-libs` | TBD |\r\n| `--with-experimental-kernel-lib` | TBD |\r\n| `--with-daemon` | `-DBUILD_DAEMON` |\r\n| `--with-gui` | `-DWITH_GUI` |\r\n",
      "created_at" : "2022-08-18T16:29:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219697059",
      "id" : 1219697059,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Isxmj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219697059/reactions"
      },
      "updated_at" : "2022-08-18T16:29:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219697059",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@hebasto Yes thanks, that's a huge help! One other helpful set of features to add would be convenience targets used by release processes/ci/etc. There are lots, but `make deploy` and `make check` are the two most obvious that come to mind.\r\n\r\nEdit: s/release/deploy/\r\n\r\nEdit2: Also `--enable-shared` and `--enable-static` are biggies for the libs in that they add lots of build complexity.",
      "created_at" : "2022-08-18T16:48:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219713828",
      "id" : 1219713828,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Is1sk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219713828/reactions"
      },
      "updated_at" : "2022-08-18T17:06:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219713828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @ryanofsky Please re-read my comments and please don't twist my words. Nowhere to I advocate for autotools. I hate it. it's dated and awful. In each comment I've advocated FOR CMake. I use, like, and prefer it.\r\n\r\nSorry, it's a really bad thing to misrepresent someone's position and I was not trying to do that. I wasn't trying to say you personally prefer autotools, just that, as I see it, the bitcoin core project is unproductively stuck clinging to autotools, and costs of adding cmake support should be small as long as we (1) choose one build system to use for official releases (2) allow each build system to have different features for other development and don't insist on parity",
      "created_at" : "2022-08-18T17:38:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219758967",
      "id" : 1219758967,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ItAt3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219758967/reactions"
      },
      "updated_at" : "2022-08-18T17:38:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219758967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Sorry, it's a really bad thing to misrepresent someone's position and I was not trying to do that. I wasn't trying to say you personally prefer autotools, just that, as I see it, the bitcoin core project is unproductively stuck clinging to autotools, and costs of adding cmake support should be small as long as we (1) choose one build system to use for official releases (2) allow each build system to have different features for other development and don't insist on parity\r\n\r\nThanks. And it's understandable that I'm pretty much synonymous with autotools around here, since I did that to us.\r\n\r\nAgree to disagree on 2), as I believe problems with this approach will expose themselves as @hebasto plods on. But I'll try to keep the discussion productive.",
      "created_at" : "2022-08-18T17:53:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219771771",
      "id" : 1219771771,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ItD17",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219771771/reactions"
      },
      "updated_at" : "2022-08-18T17:53:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219771771",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> (2) allow each build system to have different features for other development and don't insist on parity\r\n\r\nMore specifically, I don't think that a flag-day switch-over would be the only way to do this. But maybe I've been misrepresenting your \"some stuff here, some stuff there\" approach as well. So maybe we should drill down some.\r\n\r\nI took your approach to mean something like (using a made-up but maybe realistic example): \"CMake builds the release binaries, but autotools continues to handle the c-i for a while\". I think this would be a bad idea. I jumped to that conclusion because @hebasto mentioned hooking up the unit tests in a follow-up PR. I think that would be a very unwise approach.\r\n\r\nHowever, if (once the feature matrix is more built out) we can agree on a set of essentials (I would say release binaries, c-i, everyday dev features, not sure what else), then something like a feature-freeze for autotools and a promise to move over the remaining less critical features (for ex profiling, coverage, etc) over the course of a release cycle.. I could see that as realistic. So I guess that relies on a few things happening:\r\n- a minimum viable set of features being 100% complete, tested, and working with CMake\r\n- a clear direction of feature movement (away from frozen autotools to CMake)\r\n- a plan/promise to move the remaining features\r\n- a sunset plan for autotools\r\n\r\nAgain, the absence of those things here is what leads me to believe that this work is jumping the gun. But instead of grumping, I should've just laid that out. Turns out it took some fighting for that to materialize for me. Thank you for your patience :)",
      "created_at" : "2022-08-18T18:08:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219786004",
      "id" : 1219786004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ItHUU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219786004/reactions"
      },
      "updated_at" : "2022-08-18T19:04:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219786004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Converted to a draft until achievement of essential features parity.",
      "created_at" : "2022-08-18T20:12:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219914679",
      "id" : 1219914679,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Itmu3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219914679/reactions"
      },
      "updated_at" : "2022-08-18T20:12:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1219914679",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated e016b22e6c365194743f54a7111f44caf6051394 -> 99793951bb06819aa626f7813e7d6f0a26ebd205 ([pr25797.09](https://github.com/hebasto/bitcoin/commits/pr25797.09) -> [pr25797.10](https://github.com/hebasto/bitcoin/commits/pr25797.10)):\r\n\r\n- rebased\r\n- addressed issues mentioned by @fanquake in his [comment](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1219265408)\r\n\r\n> Any reason you're not using `-Werror` for flag checks like we do in configure?\r\n\r\nFixed. Actually, it is [that file](https://gitlab.kitware.com/cmake/cmake/-/blob/master/Modules/CMakeCheckCompilerFlagCommonPatterns.cmake)'s job, but it needs to be updated with the \"argument unused during compilation\" case.\r\n\r\n> The build ultimately fails because `-Werror` is enabled for the crc32c build. Looks like we'll need to turn off any flags we don't want enabled by default (like `-Werror`) in the subproject CMake configurations.\r\n\r\nAs the `crc32c` project modifies the `CMAKE_CXX_FLAGS` variable directly, it must be fixed within the project (a bad CMake practice case -- global compiler flags instead of binding them to targets).",
      "created_at" : "2022-08-19T12:19:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1220608428",
      "id" : 1220608428,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IwQGs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1220608428/reactions"
      },
      "updated_at" : "2022-08-19T12:19:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1220608428",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : " > As the `crc32c` project modifies the `CMAKE_CXX_FLAGS` variable directly, it must be fixed within the project (a bad CMake practice case -- global compiler flags instead of binding them to targets).\r\n\r\nAny reason not to PR a fix for this upstream?",
      "created_at" : "2022-08-26T15:10:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1228615718",
      "id" : 1228615718,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585JOzAm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1228615718/reactions"
      },
      "updated_at" : "2022-08-26T15:10:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1228615718",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Interesting. Many open-source project have considered [meson](https://mesonbuild.com/) a very lightweight, effective, and well-maintained build system.\r\n\r\nHave you compared or contrasted CMake with Meson?",
      "created_at" : "2022-08-28T22:38:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1229568872",
      "id" : 1229568872,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585JSbto",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 1,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229568872/reactions"
      },
      "updated_at" : "2022-08-28T22:38:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229568872",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/691439?v=4",
         "events_url" : "https://api.github.com/users/da2ce7/events{/privacy}",
         "followers_url" : "https://api.github.com/users/da2ce7/followers",
         "following_url" : "https://api.github.com/users/da2ce7/following{/other_user}",
         "gists_url" : "https://api.github.com/users/da2ce7/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/da2ce7",
         "id" : 691439,
         "login" : "da2ce7",
         "node_id" : "MDQ6VXNlcjY5MTQzOQ==",
         "organizations_url" : "https://api.github.com/users/da2ce7/orgs",
         "received_events_url" : "https://api.github.com/users/da2ce7/received_events",
         "repos_url" : "https://api.github.com/users/da2ce7/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/da2ce7/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/da2ce7/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/da2ce7"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@da2ce7 \r\n> Have you compared or contrasted CMake with Meson?\r\n\r\nFrom the PR description:\r\n\r\n\r\n\r\n> * https://www.qt.io/blog/qt-6-build-system:\r\n> \r\n> \r\n> > CMake is the build system for Qt 6\r\n\r\n",
      "created_at" : "2022-08-28T22:40:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1229569133",
      "id" : 1229569133,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585JSbxt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229569133/reactions"
      },
      "updated_at" : "2022-08-28T22:40:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229569133",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> @da2ce7\r\n> \r\n> > Have you compared or contrasted CMake with Meson?\r\n> \r\n> From the PR description:\r\n> \r\n> > * https://www.qt.io/blog/qt-6-build-system:\r\n> > \r\n> > > CMake is the build system for Qt 6\r\n\r\nI believe the QT module for meson supports Qt 6 also: https://github.com/mesonbuild/meson/blob/master/mesonbuild/modules/qt.py\r\n\r\nIn many ways I think that the ideals of meson align closer than cmake for bitcoin. (light-weight, more auditable, and faster, while still being activity maintained and popular).\r\n",
      "created_at" : "2022-08-28T22:49:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1229570387",
      "id" : 1229570387,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585JScFT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229570387/reactions"
      },
      "updated_at" : "2022-08-28T22:49:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229570387",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/691439?v=4",
         "events_url" : "https://api.github.com/users/da2ce7/events{/privacy}",
         "followers_url" : "https://api.github.com/users/da2ce7/followers",
         "following_url" : "https://api.github.com/users/da2ce7/following{/other_user}",
         "gists_url" : "https://api.github.com/users/da2ce7/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/da2ce7",
         "id" : 691439,
         "login" : "da2ce7",
         "node_id" : "MDQ6VXNlcjY5MTQzOQ==",
         "organizations_url" : "https://api.github.com/users/da2ce7/orgs",
         "received_events_url" : "https://api.github.com/users/da2ce7/received_events",
         "repos_url" : "https://api.github.com/users/da2ce7/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/da2ce7/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/da2ce7/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/da2ce7"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "meson is annoying to me as a user (for other software). I have to re-patch it every release.\r\n\r\nBut in any case, other build systems seem off-topic here. Suggest opening a new issue if you really want to push meson.",
      "created_at" : "2022-08-28T23:09:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1229573836",
      "id" : 1229573836,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585JSc7M",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229573836/reactions"
      },
      "updated_at" : "2022-08-28T23:09:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229573836",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> meson is annoying to me as a user (for other software). I have to re-patch it every release.\r\n\r\nAside: Why would you need to patch *any* software \"every release\"? If you're maintaining a private rolling patchset on top of Meson, shouldn't this be contributed upstream?",
      "created_at" : "2022-08-28T23:27:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1229579376",
      "id" : 1229579376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585JSeRw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229579376/reactions"
      },
      "updated_at" : "2022-08-28T23:27:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1229579376",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6551424?v=4",
         "events_url" : "https://api.github.com/users/eli-schwartz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eli-schwartz/followers",
         "following_url" : "https://api.github.com/users/eli-schwartz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eli-schwartz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eli-schwartz",
         "id" : 6551424,
         "login" : "eli-schwartz",
         "node_id" : "MDQ6VXNlcjY1NTE0MjQ=",
         "organizations_url" : "https://api.github.com/users/eli-schwartz/orgs",
         "received_events_url" : "https://api.github.com/users/eli-schwartz/received_events",
         "repos_url" : "https://api.github.com/users/eli-schwartz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eli-schwartz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eli-schwartz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eli-schwartz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > As the `crc32c` project modifies the `CMAKE_CXX_FLAGS` variable directly, it must be fixed within the project (a bad CMake practice case -- global compiler flags instead of binding them to targets).\r\n\r\nI was wrong. We _can_ override the `-Werror` option in the `CMAKE_CXX_FLAGS` variable, which is local in the `crc32c` directory scope, with the `-Wno-error` option in the `COMPILE_OPTIONS` property of the `crc32c` directory.\r\n\r\n@theuni \r\n> Any reason not to PR a fix for this upstream?\r\n\r\nA patch doesn't look to be trivial as the `CMAKE_CXX_FLAGS` variable does affect the following `check_cxx_compiler_flag` commands.",
      "created_at" : "2022-08-29T11:40:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1230170736",
      "id" : 1230170736,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585JUupw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230170736/reactions"
      },
      "updated_at" : "2022-08-29T11:40:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230170736",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 99793951bb06819aa626f7813e7d6f0a26ebd205 -> 943e5ceeaaba706560cfbd23023e7cd8be151d6f ([pr25797.10](https://github.com/hebasto/bitcoin/commits/pr25797.10) -> [pr25797.11](https://github.com/hebasto/bitcoin/commits/pr25797.11)):\r\n\r\n- rebased\r\n- added draft implementation for `test_bitcoin` executable\r\n- a few other improvements",
      "created_at" : "2022-08-29T22:30:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1230939301",
      "id" : 1230939301,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585JXqSl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230939301/reactions"
      },
      "updated_at" : "2022-08-29T22:30:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1230939301",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 943e5ceeaaba706560cfbd23023e7cd8be151d6f -> 24dc55b03ce11cc5a51d4973993058bb7b77ae9f ([pr25797.11](https://github.com/hebasto/bitcoin/commits/pr25797.11) -> [pr25797.12](https://github.com/hebasto/bitcoin/commits/pr25797.12)):\r\n\r\n- rebased\r\n- added the `check` target, use as usually -- `make check`\r\n- fixed linter errors\r\n\r\nThe PR description has been updated.",
      "created_at" : "2022-08-30T13:41:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1231687559",
      "id" : 1231687559,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Jag-H",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1231687559/reactions"
      },
      "updated_at" : "2022-08-30T13:41:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1231687559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > > I'm assuming that unit-test build support with CMake is still under construction?\r\n> >   \r\n> > It is, but not as a part of this PR. My intention is to keep the latter more or less digestible for reviewers.\r\n> \r\n> Could you please advise how we can review this without simply testing it on each platform?\r\n\r\n@theStack @theuni \r\n\r\nThe `make check` has been implemented now :tiger2: ",
      "created_at" : "2022-08-30T13:50:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1231697997",
      "id" : 1231697997,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585JajhN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1231697997/reactions"
      },
      "updated_at" : "2022-08-30T13:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1231697997",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 24dc55b03ce11cc5a51d4973993058bb7b77ae9f -> efe98def733c39e18dc2b0032787fe6dda503ab5 ([pr25797.12](https://github.com/hebasto/bitcoin/commits/pr25797.12) -> [pr25797.13](https://github.com/hebasto/bitcoin/commits/pr25797.13)):\r\n\r\n- rebased on top of the recent [changes](https://github.com/bitcoin/bitcoin/pull/25717) in the build system\r\n- fixed linking on macOS",
      "created_at" : "2022-08-30T18:59:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1232046479",
      "id" : 1232046479,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Jb4mP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232046479/reactions"
      },
      "updated_at" : "2022-08-30T18:59:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232046479",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@adam2k \r\n> Although, I am running into errors during the second step in the process when I get to the `Linking CXX executable bitcoin-qt`.\r\n\r\nThank you for testing! Linking on macOS should be [fixed](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1232046479) now.",
      "created_at" : "2022-08-30T19:01:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1232049220",
      "id" : 1232049220,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Jb5RE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232049220/reactions"
      },
      "updated_at" : "2022-08-30T19:01:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232049220",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   }
]
