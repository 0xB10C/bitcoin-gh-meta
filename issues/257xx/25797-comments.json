[
   {
      "author_association" : "MEMBER",
      "body" : "concept ack",
      "created_at" : "2022-08-08T06:51:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1207736528",
      "id" : 1207736528,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585H_JjQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1207736528/reactions"
      },
      "updated_at" : "2022-08-08T06:51:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1207736528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 485bd54f26c061ff3aa21587f8d8fd6ca86b5980 -> 1d09ef577b2b5e6d13b83f5241bad037a0a8f7b8 ([pr25797.01](https://github.com/hebasto/bitcoin/commits/pr25797.01) -> [pr25797.02](https://github.com/hebasto/bitcoin/commits/pr25797.02)):\r\n\r\n- fixed Berkeley DB detection on OpenBSD.\r\n- improved all `cmake/modules/Find<Package>.cmake` modules.\r\n\r\n@theStack \r\n> I retested on OpenBSD 7.1 with the instructions from the PR description and unfortunately still have a BDB issue\r\n\r\nThank you for sorrow testing. The issue should be fixed now.",
      "created_at" : "2022-08-08T22:54:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1208700569",
      "id" : 1208700569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IC06Z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1208700569/reactions"
      },
      "updated_at" : "2022-08-08T22:54:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1208700569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 1d09ef577b2b5e6d13b83f5241bad037a0a8f7b8 -> 66c4ce440021004149779bb74207ce0c8bc93b2f ([pr25797.02](https://github.com/hebasto/bitcoin/commits/pr25797.02) -> [pr25797.03](https://github.com/hebasto/bitcoin/commits/pr25797.03)):\r\n\r\n- the `leveldbutil` target removed from \"all targets\" being built by default; thanks to @theStack for [pointing](https://github.com/bitcoin/bitcoin/pull/25797#pullrequestreview-1066634807) it out\r\n\r\n@theStack \r\n>  I'm assuming that unit-test build support with CMake is still under construction?\r\n\r\nIt is, but not as a part of this PR. My intention is to keep the latter more or less digestible for reviewers.",
      "created_at" : "2022-08-09T14:22:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1209449253",
      "id" : 1209449253,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IFrsl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1209449253/reactions"
      },
      "updated_at" : "2022-08-09T14:22:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1209449253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept NACK. Our autotools build system is a mess, but this doesn't appear to significantly improve it. I don't think the benefits are worth the costs.\r\n\r\n(I realise this PR doesn't remove autotools, but AIUI that's the eventual intention.)\r\n\r\n>an opportunity to drop the build_msvc subdirectory from the repo altogether\r\n\r\nI don't see why CMake changes the situation around build_msvc. We could drop it today and tell Windows builders to use autotools just as well.\r\n\r\n>Also there is a non-technical/social benefit. Over time, the Autotools community shrinks, but CMake community grows. New contributors, who join this project in the future, will readily support a CMake-based system rather an Autotools-based one.\r\n\r\nDo you have evidence of this? Autotools is fairly standard, and mostly just standard sh and make stuff (and m4, but that's admittedly more of a downside). CMake breaks from the norm, and requires a domain-specific language.",
      "created_at" : "2022-08-10T01:26:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210049309",
      "id" : 1210049309,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IH-Md",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210049309/reactions"
      },
      "updated_at" : "2022-08-10T01:26:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210049309",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 66c4ce440021004149779bb74207ce0c8bc93b2f -> e098ba80b6ec0debc62c32c65b72a518b126ed54 ([pr25797.03](https://github.com/hebasto/bitcoin/commits/pr25797.03) -> [pr25797.04](https://github.com/hebasto/bitcoin/commits/pr25797.04)):\r\n\r\n- in-subtree [bugfix](https://github.com/bitcoin-core/crc32c-subtree/pull/5) been replaced with out-subtree workaround\r\n- fixed white spaces\r\n\r\nAll changes above made the linter CI task happy now :tiger2: ",
      "created_at" : "2022-08-10T07:45:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210290174",
      "id" : 1210290174,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585II4_-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210290174/reactions"
      },
      "updated_at" : "2022-08-10T07:45:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210290174",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > an opportunity to drop the build_msvc subdirectory from the repo altogether\r\n> \r\n> I don't see why CMake changes the situation around build_msvc. We could drop it today and tell Windows builders to use autotools just as well.\r\n\r\nYou are talking about \"to build on Windows\". But the idea is \"to build with MSVC\". Being a cross-platform tool, CMake is able to [create](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html) input files for a wide range of build systems, including Unix Makefiles and Visual Studio project files.\r\n\r\n@sipsorcery What do you think about this stuff?",
      "created_at" : "2022-08-10T08:03:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210309203",
      "id" : 1210309203,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585II9pT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210309203/reactions"
      },
      "updated_at" : "2022-08-10T09:05:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210309203",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > Also there is a non-technical/social benefit. Over time, the Autotools community shrinks, but CMake community grows. New contributors, who join this project in the future, will readily support a CMake-based system rather an Autotools-based one.\r\n> \r\n> Do you have evidence of this?\r\n\r\nI do. There are open-source projects which have [dropped](https://lists.freedesktop.org/archives/wayland-devel/2019-October/040962.html) Autotools, and there are no ones which do the opposite. Also we could ask people who graduated CS recently whether their curriculums encompassed Autotools and/or CMake (not an evidence, rather a hint).\r\n\r\n> Autotools is fairly standard, and mostly just standard sh and make stuff (and m4, but that's admittedly more of a downside). \r\n\r\nMoving \"Autotools --> CMake\" is very similar to \"shell --> Python\" which we have [done](https://github.com/bitcoin/bitcoin/issues/24783) recently.\r\n\r\n> CMake breaks from the norm\r\n\r\nWhich \"the norm\"?\r\n\r\n> and requires a domain-specific language.\r\n\r\nUsing a domain-specific language which serves its purpose much better than a general macro language is a benefit for reviewing and maintaining.",
      "created_at" : "2022-08-10T08:42:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210353660",
      "id" : 1210353660,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IJIf8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210353660/reactions"
      },
      "updated_at" : "2022-08-10T09:07:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210353660",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> You are talking about \"to build on Windows\". But the idea is \"to build with MSVC\". Being a cross-platform tool, CMake is able to [create](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html) input files for a wide range of build systems, including Unix Makefiles and Visual Studio project files.\r\n> \r\n> @sipsorcery What do you think about this stuff?\r\n\r\nThe Visual Studio project files produced by CMake aren't as clean as the hand rolled ones but in my experience they still build well (note the vcpkg dependecies generally use cmake).\r\n\r\nIMHO it's worth having less clean VS project files if the eventual goal is to have a single build system.\r\n\r\nConcept ACK.",
      "created_at" : "2022-08-10T09:01:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210376728",
      "id" : 1210376728,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IJOIY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210376728/reactions"
      },
      "updated_at" : "2022-08-10T09:01:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210376728",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/197660?v=4",
         "events_url" : "https://api.github.com/users/sipsorcery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipsorcery/followers",
         "following_url" : "https://api.github.com/users/sipsorcery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipsorcery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipsorcery",
         "id" : 197660,
         "login" : "sipsorcery",
         "node_id" : "MDQ6VXNlcjE5NzY2MA==",
         "organizations_url" : "https://api.github.com/users/sipsorcery/orgs",
         "received_events_url" : "https://api.github.com/users/sipsorcery/received_events",
         "repos_url" : "https://api.github.com/users/sipsorcery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipsorcery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipsorcery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipsorcery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@luke-jr \r\n> Concept NACK. Our autotools build system is a mess, but this doesn't appear to significantly improve it. I don't think the benefits are worth the costs.\r\n\r\nAnd this mess is going to get bigger:\r\n- we are about introducing the [4th](https://github.com/bitcoin/bitcoin/issues/25008#issuecomment-1113964111) hack to the Libtool\r\n- more [hacks](https://github.com/bitcoin/bitcoin/pull/24798#discussion_r854001982) are required to bring Qt 6 support\r\n\r\nAs you are a developer who is involved into the GUI development, could you share your vision of Qt 6 integration without migration to CMake?",
      "created_at" : "2022-08-10T09:34:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210415595",
      "id" : 1210415595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IJXnr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210415595/reactions"
      },
      "updated_at" : "2022-08-10T09:34:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210415595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@dongcarl @fanquake @ryanofsky @theuni \r\n\r\nYour conceptual assessments of this PR will be much appreciated. ",
      "created_at" : "2022-08-10T13:52:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210706815",
      "id" : 1210706815,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IKet_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210706815/reactions"
      },
      "updated_at" : "2022-08-10T13:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210706815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Also we could ask people who graduated CS recently whether their curriculums encompassed Autotools and/or CMake (not an evidence, rather a hint).\r\n\r\nWe handmade our Makefiles...",
      "created_at" : "2022-08-10T14:52:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210789206",
      "id" : 1210789206,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IKy1W",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 1,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210789206/reactions"
      },
      "updated_at" : "2022-08-10T14:52:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210789206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24798](https://github.com/bitcoin/bitcoin/pull/24798) ([POC] build: Hello Qt 6 by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-08-10T16:57:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1210993232",
      "id" : 1210993232,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ILkpQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210993232/reactions"
      },
      "updated_at" : "2022-08-10T16:57:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210993232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">You are talking about \"to build on Windows\". But the idea is \"to build with MSVC\". Being a cross-platform tool, CMake is able to create input files for a wide range of build systems, including Unix Makefiles and Visual Studio project files.\r\n\r\n[autotools can be used with the MSVC compiler](https://github.com/swig/cccl)\r\n\r\n> There are open-source projects which have dropped Autotools, and there are no ones which do the opposite.\r\n\r\n\"No ones\"? There are lots which adopt autotools. Otherwise it wouldn't even exist...\r\n\r\n>Also we could ask people who graduated CS recently whether their curriculums encompassed Autotools and/or CMake\r\n\r\nPeople to ask would be experienced open source developers, not novices who got scammed by colleges.\r\n\r\n>Which \"the norm\"?\r\n\r\nMost open source software uses autotools.\r\n\r\n> As you are a developer who is involved into the GUI development, could you share your vision of Qt 6 integration without migration to CMake?\r\n\r\nSeems easy enough to just do it the same as Qt 5 already is? pkg-config support was fixed in Qt 6.2.5.\r\n\r\n",
      "created_at" : "2022-08-10T20:26:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1211231175",
      "id" : 1211231175,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IMevH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211231175/reactions"
      },
      "updated_at" : "2022-08-10T20:26:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211231175",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > There are open-source projects which have dropped Autotools, and there are no ones which do the opposite.\r\n> \r\n> \"No ones\"? There are lots which adopt autotools. Otherwise it wouldn't even exist...\r\n\r\nI mean, there are no projects which _moved_ from non-Autotools to Autotools recent decade.",
      "created_at" : "2022-08-10T20:37:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1211243726",
      "id" : 1211243726,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IMhzO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211243726/reactions"
      },
      "updated_at" : "2022-08-10T20:46:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211243726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> pkg-config support was fixed in Qt 6.2.5.\r\n\r\nNot for [static](https://codereview.qt-project.org/c/qt/qtbase/+/381127) builds:\r\n> Although it has some limitations, with qt_internal_add_qml_module if it specifies non-public deps these won't be listed and with non-Qt requirements, notably in _static_ builds, not being appended to the PkgConfig file.",
      "created_at" : "2022-08-10T20:39:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1211246020",
      "id" : 1211246020,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IMiXE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211246020/reactions"
      },
      "updated_at" : "2022-08-10T20:44:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211246020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Static builds are abnormal and only need to be supported for depends-based builds, where we can trivially patch it.",
      "created_at" : "2022-08-10T21:02:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1211268464",
      "id" : 1211268464,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IMn1w",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211268464/reactions"
      },
      "updated_at" : "2022-08-10T21:02:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211268464",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Static builds are abnormal and only need to be supported for depends-based builds...\r\n\r\n\"abnormal\"? We deliver users static builds.\r\n\r\n> we can trivially patch it\r\n\r\nI doubt about \"trivially\". Anyway, your patch for Qt code will be much appreciated.",
      "created_at" : "2022-08-10T21:08:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1211275465",
      "id" : 1211275465,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IMpjJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211275465/reactions"
      },
      "updated_at" : "2022-08-10T21:09:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211275465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> dongcarlvfanquake ryanofsky theuni\r\n> Your conceptual assessments of this PR will be much appreciated.\r\n\r\nI am a Concept ~0/ACK for CMake.\r\n\r\nHowever I think if we are going to break every existing piece of Bitcoin Core related build infrastracture (build scripts, docker files, downstream projects, package managers etc), as well as obselete (external) build guides & documentation, we should be able to enumerate some more benefits to doing so. \r\n\r\n> Here are some benefits of using [CMake](https://cmake.org/) in the Bitcoin Core project:\r\n\r\nLooking at this list, there's nothing interesting here for anyone that doesn't care about the GUI, or Windows `DEBUG` depends builds; and given that this is the group which will more-than-likely be most impacted by this change, i.e compiling bitcoind + utils on Linux, we should be able to better justify a migration. Even starting with some rationale from something like [\"Why CMake?\"](https://cmake.org/cmake/help/book/mastering-cmake/chapter/Why%20CMake.html).\r\n\r\n> The plan is to have it in the repo shortly after branching 24.x off, and make CMake-based build system a drop-in replacement of Autotools-based one during the next 2 or 3 release cycles.\r\n\r\nConcept NACK on any approach that has as maintaining multiple build systems over multiple, or even a single release. That will be a maintainability / developer nightmare. If we are going to switch, we should just switch. CMake in, Autotools out, over a short period, ideally just after a branch off, so there is plenty of time for changes to settle and issues to be fixed before the next release.",
      "created_at" : "2022-08-12T11:51:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1213030359",
      "id" : 1213030359,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ITV_X",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213030359/reactions"
      },
      "updated_at" : "2022-08-12T11:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213030359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Looking at this list, there's nothing interesting here for anyone that doesn't care about the GUI...\r\n\r\nThe GUI _is_ a part of the Bitcoin Core project. Not caring about any part of the project won't be helpful for it.",
      "created_at" : "2022-08-12T12:41:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1213070838",
      "id" : 1213070838,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585ITf32",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213070838/reactions"
      },
      "updated_at" : "2022-08-12T12:41:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213070838",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept ACK e098ba80b6ec0debc62c32c65b72a518b126ed54\r\n\r\nI'm testing on macOS 12.5 M1 MacBook Pro and running into errors.  It's possible this is an issue with my system, but I exhausted any possibilities that I could think of.\r\n\r\nAre there additional setup steps to proceed these steps during your macOS testing?\r\n\r\n```\r\n$ cmake -S . -B build\r\n\r\n-- Found Qt, version 5.15.5\r\n\r\n\r\nConfigure summary\r\n=================\r\nBuild type ......................... RelHardened\r\nPreprocessor defined macros: MAC_OSX;OBJC_OLD_DISPATCH_PROTOTYPES=0\r\nCXX: /opt/homebrew/bin/ccache /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++\r\nCompile options:\r\nUtility binaries:\r\n  bitcoin-cli ...................... ON\r\n  bitcoin-tx ....................... ON\r\n  bitcoin-util ..................... ON\r\nWallet functionality ............... yes\r\n  SQLite, descriptor wallets ....... yes\r\n  Berkeley DB, legacy wallets ...... yes\r\n  wallet tool ...................... ON\r\nOptional packages:\r\n  GUI .............................. Qt5\r\n  QR code (GUI) .................... yes\r\n  external signer .................. no\r\n  NAT-PMP .......................... yes\r\n  UPNP ............................. yes\r\n  ZeroMQ ........................... yes\r\n  USDT tracing ..................... no\r\n  experimental syscall sandbox ..... no\r\n\r\n\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/adam2k/Documents/bitcoin/build\r\n adam2k@Adams-MacBook-Pro î° ~/Documents/bitcoin î° î  220807-cmake Â± î°\r\n adam2k@Adams-MacBook-Pro î° ~/Documents/bitcoin î° î  220807-cmake Â± î° cmake --build build\r\nConsolidate compiler generated dependencies of target univalue\r\n[  0%] Building CXX object src/univalue/CMakeFiles/univalue.dir/lib/univalue.cpp.o\r\nerror: option 'cf-protection=return' cannot be specified on this target\r\nerror: option 'cf-protection=branch' cannot be specified on this target\r\n2 errors generated.\r\nmake[2]: *** [src/univalue/CMakeFiles/univalue.dir/lib/univalue.cpp.o] Error 1\r\nmake[1]: *** [src/univalue/CMakeFiles/univalue.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```",
      "created_at" : "2022-08-12T20:25:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1213486854",
      "id" : 1213486854,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IVFcG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213486854/reactions"
      },
      "updated_at" : "2022-08-12T20:25:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213486854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/749118?v=4",
         "events_url" : "https://api.github.com/users/adam2k/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adam2k/followers",
         "following_url" : "https://api.github.com/users/adam2k/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adam2k/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adam2k",
         "id" : 749118,
         "login" : "adam2k",
         "node_id" : "MDQ6VXNlcjc0OTExOA==",
         "organizations_url" : "https://api.github.com/users/adam2k/orgs",
         "received_events_url" : "https://api.github.com/users/adam2k/received_events",
         "repos_url" : "https://api.github.com/users/adam2k/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adam2k/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adam2k/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adam2k"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "There seems to be [long running resistance](https://github.com/bitcoin/bitcoin/issues/19693) to this in this repo and continued resistance expressed in the comments of this PR.\r\n\r\nDoes libsecp256k1 (potentially, certainly seems [less resistance](https://github.com/bitcoin-core/secp256k1/pull/1113) there currently) adding CMake support have any impact on this discussion? A case of seeing if it gets merged in libsecp256k1, seeing if there are any problems with it, contributors getting comfortable with it etc? Or are they entirely separate discussions? i.e. libsecp256k1 could merge in CMake support, it could work fine but it would have no impact on the discussion here? Also would there be opposition to libsecp256k1 maintaining a different build system to this main Core repo or is that a non-issue?",
      "created_at" : "2022-08-13T09:21:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1214078906",
      "id" : 1214078906,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IXV-6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214078906/reactions"
      },
      "updated_at" : "2022-08-13T09:21:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214078906",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've updated the PR description with the following Qt-specific details.\r\n\r\n## What happened before?\r\n\r\n- https://www.qt.io/blog/qt-6-build-system:\r\n> CMake is the build system for Qt 6\r\n\r\n- https://www.qt.io/blog/qt-and-cmake-the-past-the-present-and-the-future:\r\n> We made a big decision to start using CMake to build Qt 6 one and a half years ago.\r\n\r\n- https://doc.qt.io/qt-6/qt6-buildsystem.html:\r\n> The Qt 5 build system was built on top of [qmake](https://doc.qt.io/qt-6.2/qtquick-deployment.html#qmake). In Qt 6, we ported the build system to CMake.\r\n\r\nIt is important to note that CMake has extensive [support](https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html) for Qt, including Qt-specific tools such as MOC, RCC, UIC.\r\n\r\n## Why Qt 6 build system does matter if the Bitcoin Core GUI uses Qt 5?\r\n\r\nFor release builds we use Qt 5.15.5 LTS, the latest Qt 5 version available under a free-software license.\r\n\r\nFor dynamic linking users can use Qt 5.11.3+, which allows them to use packages provided in Debian Buster and Ubuntu Focal.\r\n\r\nOn the other hand, Qt 6 packages are available in the following systems/package managers:\r\n- [Ubuntu Jammy](https://packages.ubuntu.com/jammy/qt6-base-dev)+\r\n- [Debian Bullseye](https://packages.debian.org/bullseye-backports/qt6-base-dev)+\r\n- [Fedora 35](https://packages.fedoraproject.org/pkgs/qt6-qtbase/qt6-qtbase/)+\r\n- [Homebrew](https://formulae.brew.sh/formula/qt)\r\n\r\nAs long as Qt GUI is a part of Bitcoin Core, it is inevitable to embrace Qt 6 support, sooner or later.\r\n\r\n## Can we just adjust our current build system to handle Qt 6?\r\n\r\nThe main problem with integration of Qt 6 into the current build system is lacking of pkg-config `*.pc` files for static builds (please note that a patch from [QTBUG-86080](https://bugreports.qt.io/browse/QTBUG-86080) works for non-static builds only).\r\n\r\nTo handle Qt 6 with our current build system we need to:\r\n- patch Qt, which looks like a non-trivial task, or\r\n- apply some [nasty hacks](https://github.com/bitcoin/bitcoin/pull/24798#discussion_r854001982) to our own build system\r\n- keep in our repo the required `*.pc` files\r\n- check Qt libraries manually\r\n\r\nAll approaches imply maintaining burden for a long time. And last three are pretty ugly :)",
      "created_at" : "2022-08-14T11:23:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1214344789",
      "id" : 1214344789,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IYW5V",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214344789/reactions"
      },
      "updated_at" : "2022-08-14T11:28:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214344789",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated e098ba80b6ec0debc62c32c65b72a518b126ed54 -> 88d797f926cb0d874a30aa732dcc0221f78b007a ([pr25797.04](https://github.com/hebasto/bitcoin/commits/pr25797.04) -> [pr25797.05](https://github.com/hebasto/bitcoin/commits/pr25797.05)):\r\n\r\n- fixed a bug pointed out in https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1213486854\r\n- small improvements regarding advanced variables\r\n\r\n@adam2k \r\n> I'm testing on macOS 12.5 M1 MacBook Pro and running into errors.\r\n\r\nThank you for testing! Should be fixed now :tiger2: ",
      "created_at" : "2022-08-14T16:33:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1214411508",
      "id" : 1214411508,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IYnL0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214411508/reactions"
      },
      "updated_at" : "2022-08-14T16:33:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214411508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Updated [e098ba8](https://github.com/bitcoin/bitcoin/commit/e098ba80b6ec0debc62c32c65b72a518b126ed54) -> [88d797f](https://github.com/bitcoin/bitcoin/commit/88d797f926cb0d874a30aa732dcc0221f78b007a) ([pr25797.04](https://github.com/hebasto/bitcoin/commits/pr25797.04) -> [pr25797.05](https://github.com/hebasto/bitcoin/commits/pr25797.05)):\r\n> \r\n> * fixed a bug pointed out in [build: Add CMake-based build systemÂ #25797 (comment)](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1213486854)\r\n> * small improvements regarding advanced variables\r\n> \r\n> @adam2k\r\n> \r\n> > I'm testing on macOS 12.5 M1 MacBook Pro and running into errors.\r\n> \r\n> Thank you for testing! Should be fixed now ð\r\n\r\nConcept ACK 88d797f926cb0d874a30aa732dcc0221f78b007a\r\n\r\nAgain, I'm testing on macOS 12.5 M1 MacBook Pro and the previous errors seem to be resolved.\r\n\r\n```\r\n$ cmake -S . -B build\r\n-- Performing Test HAS_CXX_-pipe_FLAG\r\n-- Performing Test HAS_CXX_-pipe_FLAG - Success\r\n-- Performing Test HAS_CXX_-O2_FLAG\r\n-- Performing Test HAS_CXX_-O2_FLAG - Success\r\n-- Performing Test HAS_CXX_-g_FLAG\r\n-- Performing Test HAS_CXX_-g_FLAG - Success\r\n-- Performing Test HAS_CXX_-Wstack-protector_FLAG\r\n-- Performing Test HAS_CXX_-Wstack-protector_FLAG - Success\r\n-- Performing Test HAS_CXX_-fstack-protector-all_FLAG\r\n-- Performing Test HAS_CXX_-fstack-protector-all_FLAG - Success\r\n-- Performing Test HAS_CXX_-fcf-protection=full_FLAG\r\n-- Performing Test HAS_CXX_-fcf-protection=full_FLAG - Failed\r\n-- Found Qt, version 5.15.5\r\n\r\n\r\nConfigure summary\r\n=================\r\nBuild type ......................... RelHardened\r\nPreprocessor defined macros ........ MAC_OSX;OBJC_OLD_DISPATCH_PROTOTYPES=0\r\nC++ compiler ....................... /opt/homebrew/bin/ccache /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++\r\nCompile options ....................\r\nUtility binaries:\r\n  bitcoin-cli ...................... ON\r\n  bitcoin-tx ....................... ON\r\n  bitcoin-util ..................... ON\r\nWallet functionality ............... yes\r\n  SQLite, descriptor wallets ....... yes\r\n  Berkeley DB, legacy wallets ...... yes\r\n  wallet tool ...................... ON\r\nOptional packages:\r\n  GUI .............................. Qt5\r\n  QR code (GUI) .................... yes\r\n  external signer .................. no\r\n  NAT-PMP .......................... yes\r\n  UPNP ............................. yes\r\n  ZeroMQ ........................... yes\r\n  USDT tracing ..................... no\r\n  experimental syscall sandbox ..... no\r\n\r\n\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/adam2k/Documents/bitcoin/build\r\n```\r\n\r\nAlthough, I am running into errors during the second step in the process when I get to the `Linking CXX executable bitcoin-qt`.  I added the `-v` to gather more debug logs.\r\n\r\n```\r\n$ cmake --build build -v\r\n...\r\nConsolidate compiler generated dependencies of target bitcoin-qt\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  -f src/qt/CMakeFiles/bitcoin-qt.dir/build.make src/qt/CMakeFiles/bitcoin-qt.dir/build\r\n[ 98%] Linking CXX executable bitcoin-qt\r\ncd /Users/adam2k/Documents/bitcoin/build/src/qt && /opt/homebrew/Cellar/cmake/3.24.0/bin/cmake -E cmake_link_script CMakeFiles/bitcoin-qt.dir/link.txt --verbose=1\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -pipe -O2 -g -Wstack-protector -fstack-protector-all -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names -L/opt/homebrew/opt/llvm/lib \"CMakeFiles/bitcoin-qt.dir/bitcoin-qt_autogen/mocs_compilation.cpp.o\" \"CMakeFiles/bitcoin-qt.dir/main.cpp.o\" \"CMakeFiles/bitcoin-qt.dir/__/init/bitcoin-qt.cpp.o\" -o bitcoin-qt -F/opt/homebrew/opt/qt@5/lib  -Wl,-headerpad_max_install_names libbitcoinqt.a ../libbitcoin_node.a ../libbitcoin_common.a ../libbitcoin_consensus.a ../util/libbitcoin_util.a ../crypto/libbitcoin_crypto.a /opt/homebrew/opt/qt@5/lib/QtWidgets.framework/QtWidgets /opt/homebrew/opt/qt@5/lib/QtGui.framework/QtGui ../librpc_client.a /opt/homebrew/Cellar/qrencode/4.1.1/lib/libqrencode.dylib ../wallet/libbitcoin_wallet.a ../libbitcoin_common.a /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/usr/lib/libsqlite3.tbd /opt/homebrew/opt/qt@5/lib/QtNetwork.framework/QtNetwork /opt/homebrew/opt/qt@5/lib/QtCore.framework/QtCore /opt/homebrew/opt/libnatpmp/lib/libnatpmp.dylib /opt/homebrew/lib/libminiupnpc.dylib /opt/homebrew/opt/berkeley-db@4/lib/libdb_cxx-4.8.dylib ../../libminisketch.a /opt/homebrew/Cellar/libevent/2.1.12/lib/libevent_pthreads.dylib ../zmq/libbitcoin_zmq.a ../leveldb/libleveldb.a ../crc32c/libcrc32c.a /opt/homebrew/Cellar/zeromq/4.3.4/lib/libzmq.dylib ../crypto/libbitcoin_crypto.a ../../libsecp256k1.a ../univalue/libunivalue.a -Wl,-headerpad_max_install_names /opt/homebrew/Cellar/libevent/2.1.12/lib/libevent.dylib\r\nUndefined symbols for architecture arm64:\r\n  \"_NSClassFromString\", referenced from:\r\n      MacNotificationHandler::hasUserNotificationCenterSupport() in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_OBJC_CLASS_$_NSApplication\", referenced from:\r\n      objc-class-ref in libbitcoinqt.a(macdockiconhandler.mm.o)\r\n  \"_OBJC_CLASS_$_NSBundle\", referenced from:\r\n      objc-class-ref in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n      __OBJC_$_CATEGORY_NSBundle_$_returnCorrectIdentifier in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_OBJC_CLASS_$_NSProcessInfo\", referenced from:\r\n      objc-class-ref in libbitcoinqt.a(macos_appnap.mm.o)\r\n  \"_OBJC_CLASS_$_NSUserNotification\", referenced from:\r\n      objc-class-ref in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_OBJC_CLASS_$_NSUserNotificationCenter\", referenced from:\r\n      objc-class-ref in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"___CFConstantStringClassReference\", referenced from:\r\n      CFString in libbitcoinqt.a(macos_appnap.mm.o)\r\n      CFString in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n      CFString in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_class_getInstanceMethod\", referenced from:\r\n      MacNotificationHandler::instance() in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_class_replaceMethod\", referenced from:\r\n      setupDockClickHandler() in libbitcoinqt.a(macdockiconhandler.mm.o)\r\n  \"_method_exchangeImplementations\", referenced from:\r\n      MacNotificationHandler::instance() in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_objc_alloc_init\", referenced from:\r\n      MacNotificationHandler::showNotification(QString const&, QString const&) in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_objc_autoreleasePoolPop\", referenced from:\r\n      CAppNapInhibitor::CAppNapImpl::disableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      CAppNapInhibitor::CAppNapImpl::enableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n  \"_objc_autoreleasePoolPush\", referenced from:\r\n      CAppNapInhibitor::CAppNapImpl::disableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      CAppNapInhibitor::CAppNapImpl::enableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n  \"_objc_getClass\", referenced from:\r\n      MacNotificationHandler::instance() in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_objc_msgSend\", referenced from:\r\n      setupDockClickHandler() in libbitcoinqt.a(macdockiconhandler.mm.o)\r\n      ForceActivation() in libbitcoinqt.a(macdockiconhandler.mm.o)\r\n      CAppNapInhibitor::CAppNapImpl::disableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      CAppNapInhibitor::CAppNapImpl::enableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      -[NSBundle(returnCorrectIdentifier) __bundleIdentifier] in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n      MacNotificationHandler::showNotification(QString const&, QString const&) in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_objc_opt_class\", referenced from:\r\n      setupDockClickHandler() in libbitcoinqt.a(macdockiconhandler.mm.o)\r\n  \"_objc_opt_respondsToSelector\", referenced from:\r\n      CAppNapInhibitor::CAppNapImpl::disableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      CAppNapInhibitor::CAppNapImpl::enableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n  \"_objc_release\", referenced from:\r\n      CAppNapInhibitor::CAppNapImpl::enableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n      MacNotificationHandler::showNotification(QString const&, QString const&) in libbitcoinqt.a(macnotificationhandler.mm.o)\r\n  \"_objc_retain\", referenced from:\r\n      CAppNapInhibitor::CAppNapImpl::disableAppNap() in libbitcoinqt.a(macos_appnap.mm.o)\r\n  \"_sel_registerName\", referenced from:\r\n      setupDockClickHandler() in libbitcoinqt.a(macdockiconhandler.mm.o)\r\nld: symbol(s) not found for architecture arm64\r\nclang-14: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[2]: *** [src/qt/bitcoin-qt] Error 1\r\nmake[1]: *** [src/qt/CMakeFiles/bitcoin-qt.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```\r\n",
      "created_at" : "2022-08-15T15:55:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1215224500",
      "id" : 1215224500,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Ibtq0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215224500/reactions"
      },
      "updated_at" : "2022-08-15T15:55:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215224500",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/749118?v=4",
         "events_url" : "https://api.github.com/users/adam2k/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adam2k/followers",
         "following_url" : "https://api.github.com/users/adam2k/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adam2k/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adam2k",
         "id" : 749118,
         "login" : "adam2k",
         "node_id" : "MDQ6VXNlcjc0OTExOA==",
         "organizations_url" : "https://api.github.com/users/adam2k/orgs",
         "received_events_url" : "https://api.github.com/users/adam2k/received_events",
         "repos_url" : "https://api.github.com/users/adam2k/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adam2k/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adam2k/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adam2k"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 88d797f926cb0d874a30aa732dcc0221f78b007a -> 6e1dcc2ae5096dde327b71efb6bfa0bf120227e5 ([pr25797.05](https://github.com/hebasto/bitcoin/commits/pr25797.05) -> [pr25797.06](https://github.com/hebasto/bitcoin/commits/pr25797.06)):\r\n\r\n- rebased on top of the #25836\r\n- fixed native building on Windows (MSVC + vcpkg). No longer needed to pre-build Qt :tiger2: \r\n\r\nInstructions for native building on Windows (MSVC + vcpkg) added to the PR description.\r\n\r\ncc @sipsorcery ",
      "created_at" : "2022-08-15T23:32:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1215983238",
      "id" : 1215983238,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585Iem6G",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215983238/reactions"
      },
      "updated_at" : "2022-08-15T23:32:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215983238",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@hebasto Could you give us an idea of the diff between the new CMake and the old autotools build systems from a user's perspective? Have we achieved feature-parity yet?",
      "created_at" : "2022-08-16T17:29:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1216939762",
      "id" : 1216939762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IiQby",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1216939762/reactions"
      },
      "updated_at" : "2022-08-16T17:29:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1216939762",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@dongcarl \r\n> Could you give us an idea of the diff between the new CMake and the old autotools build systems from a user's perspective? \r\n\r\n1. The main difference is a directory structure. While the current Autotools-based build system (AT) supports out-of-source builds, most users make in-source builds. The new CMake-based build system (CM) does not support in-source builds. I consider this as a [benefit](https://cmake.org/cmake/help/book/mastering-cmake/chapter/Getting%20Started.html#directory-structure). As a consequence, there is no `make distclean` in CM.\r\n\r\n2. Most of AT configure options are mapped to CM cache variable, for example:\r\n- `--with-daemon` --> `-DBUILD_DAEMON`\r\n- `--enable-zmq` --> `-DWITH_ZMQ`\r\n\r\n3. Some of AT configure options are implemented as custom [build types](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html?highlight=build%20type#build-configurations) in CM, for example:\r\n- `--enable-hardening` --> `-DCMAKE_BUILD_TYPE=RelHardened`\r\n\r\n4. User provided `CC`, `CXX`, `CFLAGS`, `CXXFLAGS`, `LDFLAGS` are supported by CM perfectly out of the box.\r\n\r\n5. Integration with our depends build subsystem has been implemented already:\r\n- `CONFIG_SITE=$PWD/depends/<HOST>/share/config.site` --> `--toolchain depends/<HOST>/share/toolchain.cmake`\r\n\r\n6. With CM users are able to use the same build system natively on a wider range of platforms, e.g., on Windows with MSVC.\r\n\r\n7. With CM the GUI users get Qt 6 support finally :tiger2:\r\n\r\n> Have we achieved feature-parity yet?\r\n\r\nNot in this PR, to [keep](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1209449253) it in reviewable state. The full feature-parity is achievable with a couple follow ups.",
      "created_at" : "2022-08-17T06:06:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1217500839",
      "id" : 1217500839,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
      "node_id" : "IC_kwDOABII585IkZan",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217500839/reactions"
      },
      "updated_at" : "2022-08-17T06:06:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217500839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947594259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947594259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We don't currently suppress this in configure, why is it being added here?",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:18:29Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947594259",
      "id" : 947594259,
      "line" : 139,
      "node_id" : "PRRC_kwDOABII5844eyQT",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 139,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 139,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947594259/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947594259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947595141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947595141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We don't currently add linker optimisation flags in configure, why are they being added here?",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:19:23Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947595141",
      "id" : 947595141,
      "line" : 141,
      "node_id" : "PRRC_kwDOABII5844eyeF",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 141,
      "original_position" : 141,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 141,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947595141/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947595141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947598982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947598982"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't this link flag also be used when cross-compiling?",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:23:11Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947598982",
      "id" : 947598982,
      "line" : 162,
      "node_id" : "PRRC_kwDOABII5844ezaG",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 162,
      "original_position" : 162,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 162,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947598982/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947598982",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947606178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947606178"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Cross-compiling for macOS, the \"C++ compiler\" output is `/usr/bin/ccache /usr/bin/env`. Not super helpful.",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:29:05Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)\n+endif()\n+\n+if(CMAKE_CROSSCOMPILING)\n+  add_definitions(${CPPFLAGS_FROM_DEPENDS})\n+  foreach(c_flag ${CFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:C>:${c_flag}>)\n+  endforeach()\n+  foreach(cxx_flag ${CXXFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${cxx_flag}>)\n+  endforeach()\n+  link_libraries(${LDFLAGS_FROM_DEPENDS})\n+endif()\n+\n+include(cmake/introspection.cmake)\n+\n+include(cmake/subtree-minisketch.cmake)\n+include(cmake/subtree-secp256k1.cmake)\n+\n+include(cmake/optional_qt.cmake)\n+include(cmake/optional.cmake)\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR BUILD_TX OR BUILD_BITCOINKERNEL_LIB OR BUILD_WALLET_TOOL OR NOT WITH_GUI STREQUAL no)\n+  # Find Boost headers only.\n+  find_package(Boost 1.64.0 REQUIRED)\n+\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+endif()\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR NOT WITH_GUI STREQUAL no)\n+  include(FindPkgConfig)\n+  pkg_check_modules(libevent REQUIRED libevent>=2.1.8 IMPORTED_TARGET)\n+  if(CMAKE_SYSTEM_NAME STREQUAL Windows AND TARGET PkgConfig::libevent)\n+    target_link_libraries(PkgConfig::libevent INTERFACE iphlpapi ws2_32)\n+  endif()\n+endif()\n+\n+if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows AND (BUILD_DAEMON OR NOT WITH_GUI STREQUAL no))\n+  pkg_check_modules(libevent_pthreads REQUIRED libevent_pthreads>=2.1.8 IMPORTED_TARGET)\n+endif()\n+\n+add_subdirectory(src)\n+\n+set(abs_top_srcdir ${CMAKE_SOURCE_DIR})\n+set(abs_top_builddir ${CMAKE_BINARY_DIR})\n+set(EXEEXT ${CMAKE_EXECUTABLE_SUFFIX})\n+if(NOT ENABLE_WALLET)\n+  set(ENABLE_WALLET_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_SQLITE)\n+  set(USE_SQLITE_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_BDB)\n+  set(USE_BDB_TRUE \\#)\n+endif()\n+if(NOT BUILD_CLI)\n+  set(BUILD_BITCOIN_CLI_TRUE \\#)\n+endif()\n+if(NOT BUILD_UTIL)\n+  set(BUILD_BITCOIN_UTIL_TRUE \\#)\n+endif()\n+if(NOT BUILD_WALLET_TOOL)\n+  set(BUILD_BITCOIN_WALLET_TRUE \\#)\n+endif()\n+if(NOT BUILD_DAEMON)\n+  set(BUILD_BITCOIND_TRUE \\#)\n+endif()\n+if(NOT WITH_ZMQ)\n+  set(ENABLE_ZMQ_TRUE \\#)\n+endif()\n+if(NOT ENABLE_EXTERNAL_SIGNER)\n+  set(ENABLE_EXTERNAL_SIGNER_TRUE \\#)\n+endif()\n+if(NOT USE_SYSCALL_SANDBOX)\n+  set(ENABLE_SYSCALL_SANDBOX_TRUE \\#)\n+endif()\n+if(NOT ENABLE_TRACING)\n+  set(ENABLE_USDT_TRACEPOINTS_TRUE \\#)\n+endif()\n+configure_file(test/config.ini.in test/config.ini @ONLY)\n+execute_process(COMMAND mkdir -p ${CMAKE_BINARY_DIR}/test/functional)\n+execute_process(COMMAND rm -f ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+execute_process(COMMAND ln -s ${CMAKE_SOURCE_DIR}/test/functional/test_runner.py ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+\n+message(\"\\n\")\n+message(\"Configure summary\")\n+message(\"=================\")\n+if(cached_cmake_build_type)\n+  message(\"Build type ......................... ${CMAKE_BUILD_TYPE}\")\n+else()\n+  message(\"Available configurations ........... ${CMAKE_CONFIGURATION_TYPES}\")\n+endif()\n+if(CMAKE_CROSSCOMPILING)\n+  message(\"Cross compiling for ................ ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}\")\n+endif()\n+get_directory_property(definitions COMPILE_DEFINITIONS)\n+message(\"Preprocessor defined macros ........ ${definitions}\")\n+message(\"C++ compiler ....................... ${CMAKE_CXX_COMPILER_LAUNCHER} ${CMAKE_CXX_COMPILER}\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947606178",
      "id" : 947606178,
      "line" : 260,
      "node_id" : "PRRC_kwDOABII5844e1Ki",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 260,
      "original_position" : 260,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 260,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947606178/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947606178",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947607265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947607265"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Cross-compiling for macOS/Windows, the \"Compile options\" output is something like `$<$<COMPILE_LANGUAGE:C>:-pipe>;$<$<COMPILE_LANGUAGE:C>:-std=c11>;$<$<COMPILE_LANGUAGE:C>:-O2>;$<$<COMPILE_LANGUAGE:CXX>:-pipe>;$<$<COMPILE_LANGUAGE:CXX>:-std=c++17>;$<$<COMPILE_LANGUAGE:CXX>:-O2>`. Which isn't readable.",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:29:55Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")\n+endif()\n+set(CMAKE_EXE_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used for linking binaries during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+set(CMAKE_SHARED_LINKER_FLAGS_RELHARDENED \"${hardened_linker_flags}\" CACHE STRING\n+  \"Flags used by the shared libraries linker during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+mark_as_advanced(\n+  CMAKE_CXX_FLAGS_RELWITHASSERTS\n+  CMAKE_CXX_FLAGS_RELHARDENED\n+  CMAKE_EXE_LINKER_FLAGS_RELHARDENED\n+  CMAKE_SHARED_LINKER_FLAGS_RELHARDENED\n+)\n+get_property(cached_cmake_build_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\n+if(cached_cmake_build_type)\n+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n+    STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\" \"RelWithAsserts\" \"RelHardened\"\n+  )\n+endif()\n+set(default_build_type \"RelHardened\")\n+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n+  message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n+  set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n+endif()\n+\n+set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n+\n+if(REDUCE_EXPORTS)\n+  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n+  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n+  if(NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n+    link_libraries(-Wl,--exclude-libs,ALL)\n+  endif()\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)\n+    add_compile_options(-Wno-psabi)\n+  endif()\n+  link_libraries(-Wl,-O2)\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  add_definitions(-D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN)\n+  if(MSVC)\n+    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n+    add_definitions(\n+      /utf-8\n+      /Zc:__cplusplus\n+      /DNOMINMAX\n+      /D_CRT_SECURE_NO_WARNINGS\n+      /D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n+      /D_SILENCE_CXX20_U8PATH_DEPRECATION_WARNING\n+    )\n+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4273 /wd4334 /wd4805 /wd4715 /wd4834)\n+  else()\n+    link_libraries(-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1)\n+  endif()\n+endif()\n+if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n+  add_definitions(-DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0)\n+  link_libraries(-Wl,-headerpad_max_install_names)\n+endif()\n+\n+if(CMAKE_CROSSCOMPILING)\n+  add_definitions(${CPPFLAGS_FROM_DEPENDS})\n+  foreach(c_flag ${CFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:C>:${c_flag}>)\n+  endforeach()\n+  foreach(cxx_flag ${CXXFLAGS_FROM_DEPENDS})\n+    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${cxx_flag}>)\n+  endforeach()\n+  link_libraries(${LDFLAGS_FROM_DEPENDS})\n+endif()\n+\n+include(cmake/introspection.cmake)\n+\n+include(cmake/subtree-minisketch.cmake)\n+include(cmake/subtree-secp256k1.cmake)\n+\n+include(cmake/optional_qt.cmake)\n+include(cmake/optional.cmake)\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR BUILD_TX OR BUILD_BITCOINKERNEL_LIB OR BUILD_WALLET_TOOL OR NOT WITH_GUI STREQUAL no)\n+  # Find Boost headers only.\n+  find_package(Boost 1.64.0 REQUIRED)\n+\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+endif()\n+\n+if(BUILD_DAEMON OR BUILD_CLI OR NOT WITH_GUI STREQUAL no)\n+  include(FindPkgConfig)\n+  pkg_check_modules(libevent REQUIRED libevent>=2.1.8 IMPORTED_TARGET)\n+  if(CMAKE_SYSTEM_NAME STREQUAL Windows AND TARGET PkgConfig::libevent)\n+    target_link_libraries(PkgConfig::libevent INTERFACE iphlpapi ws2_32)\n+  endif()\n+endif()\n+\n+if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows AND (BUILD_DAEMON OR NOT WITH_GUI STREQUAL no))\n+  pkg_check_modules(libevent_pthreads REQUIRED libevent_pthreads>=2.1.8 IMPORTED_TARGET)\n+endif()\n+\n+add_subdirectory(src)\n+\n+set(abs_top_srcdir ${CMAKE_SOURCE_DIR})\n+set(abs_top_builddir ${CMAKE_BINARY_DIR})\n+set(EXEEXT ${CMAKE_EXECUTABLE_SUFFIX})\n+if(NOT ENABLE_WALLET)\n+  set(ENABLE_WALLET_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_SQLITE)\n+  set(USE_SQLITE_TRUE \\#)\n+endif()\n+if(NOT ENABLE_WALLET OR NOT WITH_BDB)\n+  set(USE_BDB_TRUE \\#)\n+endif()\n+if(NOT BUILD_CLI)\n+  set(BUILD_BITCOIN_CLI_TRUE \\#)\n+endif()\n+if(NOT BUILD_UTIL)\n+  set(BUILD_BITCOIN_UTIL_TRUE \\#)\n+endif()\n+if(NOT BUILD_WALLET_TOOL)\n+  set(BUILD_BITCOIN_WALLET_TRUE \\#)\n+endif()\n+if(NOT BUILD_DAEMON)\n+  set(BUILD_BITCOIND_TRUE \\#)\n+endif()\n+if(NOT WITH_ZMQ)\n+  set(ENABLE_ZMQ_TRUE \\#)\n+endif()\n+if(NOT ENABLE_EXTERNAL_SIGNER)\n+  set(ENABLE_EXTERNAL_SIGNER_TRUE \\#)\n+endif()\n+if(NOT USE_SYSCALL_SANDBOX)\n+  set(ENABLE_SYSCALL_SANDBOX_TRUE \\#)\n+endif()\n+if(NOT ENABLE_TRACING)\n+  set(ENABLE_USDT_TRACEPOINTS_TRUE \\#)\n+endif()\n+configure_file(test/config.ini.in test/config.ini @ONLY)\n+execute_process(COMMAND mkdir -p ${CMAKE_BINARY_DIR}/test/functional)\n+execute_process(COMMAND rm -f ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+execute_process(COMMAND ln -s ${CMAKE_SOURCE_DIR}/test/functional/test_runner.py ${CMAKE_BINARY_DIR}/test/functional/test_runner.py)\n+\n+message(\"\\n\")\n+message(\"Configure summary\")\n+message(\"=================\")\n+if(cached_cmake_build_type)\n+  message(\"Build type ......................... ${CMAKE_BUILD_TYPE}\")\n+else()\n+  message(\"Available configurations ........... ${CMAKE_CONFIGURATION_TYPES}\")\n+endif()\n+if(CMAKE_CROSSCOMPILING)\n+  message(\"Cross compiling for ................ ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}\")\n+endif()\n+get_directory_property(definitions COMPILE_DEFINITIONS)\n+message(\"Preprocessor defined macros ........ ${definitions}\")\n+message(\"C++ compiler ....................... ${CMAKE_CXX_COMPILER_LAUNCHER} ${CMAKE_CXX_COMPILER}\")\n+get_directory_property(compile_options COMPILE_OPTIONS)\n+message(\"Compile options .................... ${compile_options}\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947607265",
      "id" : 947607265,
      "line" : 262,
      "node_id" : "PRRC_kwDOABII5844e1bh",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 262,
      "original_position" : 262,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 262,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947607265/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947607265",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947627848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947627848"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't we check these flags are available, rather than assuming the user has as certain version of binutils?",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:45:11Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947627848",
      "id" : 947627848,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII5844e6dI",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 97,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 97,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947627848/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947627848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947628207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947628207"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here.",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T08:45:31Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")\n+try_append_cxxflag(hardened_cxx_flags \"-fcf-protection=full\")\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  try_append_cxxflag(hardened_cxx_flags \"-fstack-clash-protection\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELHARDENED \"${release_cxx_flags} ${hardened_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelHardened\\\" builds.\"\n+  FORCE\n+)\n+if(CMAKE_SYSTEM_NAME STREQUAL Linux)\n+  set(hardened_linker_flags \"-Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code\")\n+elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)\n+  set(hardened_linker_flags \"-Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947628207",
      "id" : 947628207,
      "line" : 99,
      "node_id" : "PRRC_kwDOABII5844e6iv",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 99,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 99,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947628207/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947628207",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947668248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947668248"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This test fails when cross-compiling for Windows, and we end up building without `-fstack-protector-all`.\r\n```bash\r\n/usr/lib/gcc/x86_64-w64-mingw32/11.2.1/../../../../x86_64-w64-mingw32/bin/ld: CMakeFiles/cmTC_c6384.dir/objects.a(src.cxx.obj):src.cxx:(.text+0x35): undefined reference to `__stack_chk_fail'\r\n/usr/lib/gcc/x86_64-w64-mingw32/11.2.1/../../../../x86_64-w64-mingw32/bin/ld: CMakeFiles/cmTC_c6384.dir/objects.a(src.cxx.obj):src.cxx:(.rdata$.refptr.__stack_chk_guard[.refptr.__stack_chk_guard]+0x0): undefined reference to `__stack_chk_guard'\r\n```",
      "commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "created_at" : "2022-08-17T09:23:49Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# We are able to build on Ubuntu Bionic.\n+# On the other hand, some useful features lack:\n+#  - 3.11: add_library() and add_executable() commands can now be called without any sources\n+#          and will not complain as long as sources are added later via the target_sources()\n+#          command.\n+#  - 3.11: The target_*() commands learned to set the INTERFACE properties on Imported Targets.\n+#  - 3.12: The add_compile_definitions() command was added to set preprocessor definitions\n+#          at directory level. This supersedes add_definitions().\n+#  - 3.12: If the CONFIGURE_DEPENDS flag is specified, CMake will add logic to the main\n+#          build system check target to rerun the flagged GLOB commands at build time.\n+#  - 3.12: Object libraries can be linked to with target_link_libraries().\n+#  - 3.12: A new $<TARGET_NAME_IF_EXISTS:...> generator expression has been added.\n+#  - 3.13: The target_link_options() command was created to specify link options for targets\n+#          and their dependents.\n+#  - 3.13: The target_link_libraries() command may now be called to modify targets created\n+#          outside the current directory.\n+#  - 3.14: The FindSQLite3 module was added to find the SQLite v3.x library.\n+#  - 3.15: A new imported target Boost::headers is now defined (same as Boost::boost).\n+#  - 3.18: The CheckLinkerFlag module has been added to provide a facility to check validity\n+#          of link flags.\n+cmake_minimum_required(VERSION 3.10)\n+\n+project(\"Bitcoin Core\"\n+  VERSION 23.0.0\n+  DESCRIPTION \"Bitcoin client software\"\n+  LANGUAGES CXX C ASM\n+)\n+\n+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n+\n+set(PACKAGE_NAME ${PROJECT_NAME})\n+set(PACKAGE_VERSION ${PROJECT_VERSION})\n+set(CLIENT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\n+set(CLIENT_VERSION_MINOR ${PROJECT_VERSION_MINOR})\n+set(CLIENT_VERSION_BUILD ${PROJECT_VERSION_PATCH})\n+set(CLIENT_VERSION_IS_RELEASE \"false\")\n+set(PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n+set(PACKAGE_URL \"https://bitcoincore.org/\")\n+set(COPYRIGHT_YEAR \"2022\")\n+set(COPYRIGHT_HOLDERS \"The %s developers\")\n+set(COPYRIGHT_HOLDERS_SUBSTITUTION ${PROJECT_NAME})\n+set(COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\")\n+\n+if(MSVC)\n+  set(CMAKE_CXX_STANDARD 20)\n+else()\n+  set(CMAKE_CXX_STANDARD 17)\n+endif()\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+set(CMAKE_CXX_EXTENSIONS OFF)\n+include(cmake/check_filesystem.cmake)\n+\n+# Configurable options.\n+option(BUILD_DAEMON \"Build bitcoind\" ON)\n+option(BUILD_CLI \"Build bitcoin-cli\" ON)\n+option(BUILD_TX \"Build bitcoin-tx\" ON)\n+option(BUILD_UTIL \"Build bitcoin-util\" ON)\n+option(BUILD_BITCOINCONSENSUS_LIB \"Build bitcoinconsensus shared library\" ON)\n+option(BUILD_BITCOINKERNEL_LIB \"Build experimental bitcoinkernel shared library\" ON)\n+option(ENABLE_WALLET \"Enable wallet\" ON)\n+option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool\" ${ENABLE_WALLET})\n+option(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables\" OFF)\n+\n+include(cmake/try_append_cxxflag.cmake)\n+# Define custom \"RelWithAsserts\" build type\n+set(release_cxx_flags \"\")\n+try_append_cxxflag(release_cxx_flags \"-pipe\")\n+try_append_cxxflag(release_cxx_flags \"-O2\")\n+try_append_cxxflag(release_cxx_flags \"-g\")\n+if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n+  # All versions of gcc that we commonly use for building are subject to bug\n+  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+  # -fstack-reuse=none for all gcc builds.\n+  try_append_cxxflag(release_cxx_flags \"-fstack-reuse=none\")\n+endif()\n+set(CMAKE_CXX_FLAGS_RELWITHASSERTS \"${release_cxx_flags}\" CACHE STRING\n+  \"Flags used by the C++ compiler during \\\"RelWithAsserts\\\" builds.\"\n+  FORCE\n+)\n+# Define custom \"RelHardened\" build type\n+set(hardened_cxx_flags \"\")\n+try_append_cxxflag(hardened_cxx_flags \"-Wstack-protector\")\n+try_append_cxxflag(hardened_cxx_flags \"-fstack-protector-all\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797#discussion_r947668248",
      "id" : 947668248,
      "line" : 87,
      "node_id" : "PRRC_kwDOABII5844fEUY",
      "original_commit_id" : "6e1dcc2ae5096dde327b71efb6bfa0bf120227e5",
      "original_line" : 87,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "CMakeLists.txt",
      "position" : 87,
      "pull_request_review_id" : 1075245330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947668248/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-17T09:29:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/947668248",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
