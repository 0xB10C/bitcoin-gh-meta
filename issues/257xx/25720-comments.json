[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r933304616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/933304616"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n        assert_equal(count, 1)\r\n```\r\n\r\nBecause of #23119",
      "commit_id" : "4a3376376c774cb95dc633624ad92a2002378178",
      "created_at" : "2022-07-29T14:00:25Z",
      "diff_hunk" : "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, 1<<256 - 1))])\n+        [ p.send_message(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_until(lambda: \"getheaders\" in peer1.last_message, timeout=30)\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        time.sleep(5)\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_until(lambda: \"getheaders\" in peer1.last_message, timeout=30)\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Check that exactly 1 of {peer2, peer3} received a getheaders in response\")\n+        time.sleep(5)\n+        count = 0\n+        peer_receiving_headers = None\n+        for p in [peer2, peer3]:\n+            with p2p_lock:\n+                if \"getheaders\" in p.last_message:\n+                    count += 1\n+                    peer_receiving_headers = p\n+                    p.last_message.pop(\"getheaders\", None)\n+                    p.send_message(msg_headers()) # Send empty response\n+\n+        assert count == 1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r933304616",
      "id" : 933304616,
      "line" : 81,
      "node_id" : "PRRC_kwDOABII5843oRko",
      "original_commit_id" : "4a3376376c774cb95dc633624ad92a2002378178",
      "original_line" : 81,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "test/functional/p2p_initial_headers_sync.py",
      "position" : 81,
      "pull_request_review_id" : 1055615149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/933304616/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-29T14:00:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/933304616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   }
]
