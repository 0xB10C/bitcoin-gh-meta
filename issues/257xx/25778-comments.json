[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r937542523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/937542523"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Now the fuzz target has some shallow bugs. For example, `GetAmount` fail to get coin value. I guess that's because I simply add newly constructed tx out to outpoints, so `CCoinsViewMemPool::GetCoin` cannot find the outpoint in mempool.\r\n\r\n```log\r\ntest/fuzz/tx_pool.cpp:164 operator(): Assertion `amount_view.GetCoin(outpoint, c)' failed.\r\n==3026798== ERROR: libFuzzer: deadly signal\r\n    #0 0x5609ccdba680 in __sanitizer_print_stack_trace (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xfd7680)\r\n    #1 0x5609ccd66988 in fuzzer::PrintStackTrace() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf83988)\r\n    #2 0x5609ccd4bad3 in fuzzer::Fuzzer::CrashCallback() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf68ad3)\r\n    #3 0x7f173207341f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1441f)\r\n    #4 0x7f1731cd900a in __libc_signal_restore_set /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/internal-signals.h:86:3\r\n    #5 0x7f1731cd900a in raise /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:48:3\r\n    #6 0x7f1731cb8858 in abort /build/glibc-SzIz7B/glibc-2.31/stdlib/abort.c:79:7\r\n    #7 0x5609cf0fa49d in assertion_fail(char const*, int, char const*, char const*) src/util/check.cpp:13:5\r\n    #8 0x5609cd319c02 in bool&& inline_assertion_check<true, bool>(bool&&, char const*, int, char const*, char const*) src/./util/check.h:67:13\r\n    #9 0x5609cd5cbdda in (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>)::$_4::operator()(COutPoint const&) const src/test/fuzz/tx_pool.cpp:164:9\r\n    #10 0x5609cd5cc62a in (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>)::$_5::operator()() const src/test/fuzz/tx_pool.cpp:198:34\r\n```\r\n\r\nThere are at least two different ways to fix the assert:\r\n * extend the outpoints_* datastructures with the amount and use that directly\r\n * add a new datastructure to keep track of amounts and modify GetAmount to use that",
      "commit_id" : "dfad3761565180f020eb160f78ae541f156be9c9",
      "created_at" : "2022-08-04T09:10:44Z",
      "diff_hunk" : "@@ -177,45 +178,54 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         Assert(!outpoints_supply.empty());\n \n         // Create transaction to add to the mempool\n-        const CTransactionRef tx = [&] {\n-            CMutableTransaction tx_mut;\n-            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n-            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n-            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n-\n-            CAmount amount_in{0};\n-            for (int i = 0; i < num_in; ++i) {\n-                // Pop random outpoint\n-                auto pop = outpoints_rbf.begin();\n-                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n-                const auto outpoint = *pop;\n-                outpoints_rbf.erase(pop);\n-                amount_in += GetAmount(outpoint);\n-\n-                // Create input\n-                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n-                const auto script_sig = CScript{};\n-                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n-                CTxIn in;\n-                in.prevout = outpoint;\n-                in.nSequence = sequence;\n-                in.scriptSig = script_sig;\n-                in.scriptWitness.stack = script_wit_stack;\n-\n-                tx_mut.vin.push_back(in);\n-            }\n-            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n-            const auto amount_out = (amount_in - amount_fee) / num_out;\n-            for (int i = 0; i < num_out; ++i) {\n-                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n-            }\n-            const auto tx = MakeTransactionRef(tx_mut);\n-            // Restore previously removed outpoints\n-            for (const auto& in : tx->vin) {\n-                Assert(outpoints_rbf.insert(in.prevout).second);\n+        const Package package = [&] {\n+            auto n_tx = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1, MAX_PACKAGE_COUNT + 5);\n+            Package txs;\n+            while (n_tx--) {\n+                CMutableTransaction tx_mut;\n+                tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+                tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+                const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+                CAmount amount_in{0};\n+                for (int i = 0; i < num_in; ++i) {\n+                    // Pop random outpoint\n+                    auto pop = outpoints_rbf.begin();\n+                    std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                    const auto outpoint = *pop;\n+                    outpoints_rbf.erase(pop);\n+                    amount_in += GetAmount(outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r937542523",
      "id" : 937542523,
      "line" : 198,
      "node_id" : "PRRC_kwDOABII58434cN7",
      "original_commit_id" : "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "original_line" : 198,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 75,
      "pull_request_review_id" : 1061550477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/937542523/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-04T14:51:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/937542523",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24590067?v=4",
         "events_url" : "https://api.github.com/users/chinggg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/chinggg/followers",
         "following_url" : "https://api.github.com/users/chinggg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/chinggg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/chinggg",
         "id" : 24590067,
         "login" : "chinggg",
         "node_id" : "MDQ6VXNlcjI0NTkwMDY3",
         "organizations_url" : "https://api.github.com/users/chinggg/orgs",
         "received_events_url" : "https://api.github.com/users/chinggg/received_events",
         "repos_url" : "https://api.github.com/users/chinggg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/chinggg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/chinggg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/chinggg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r938398224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938398224"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I find changing `amount_view` to be non-const and calling `amount_view.PackageAddTransaction(tx);` after each tx is constructed can also fix the assert.",
      "commit_id" : "dfad3761565180f020eb160f78ae541f156be9c9",
      "created_at" : "2022-08-05T02:47:29Z",
      "diff_hunk" : "@@ -177,45 +178,54 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         Assert(!outpoints_supply.empty());\n \n         // Create transaction to add to the mempool\n-        const CTransactionRef tx = [&] {\n-            CMutableTransaction tx_mut;\n-            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n-            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n-            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n-\n-            CAmount amount_in{0};\n-            for (int i = 0; i < num_in; ++i) {\n-                // Pop random outpoint\n-                auto pop = outpoints_rbf.begin();\n-                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n-                const auto outpoint = *pop;\n-                outpoints_rbf.erase(pop);\n-                amount_in += GetAmount(outpoint);\n-\n-                // Create input\n-                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n-                const auto script_sig = CScript{};\n-                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n-                CTxIn in;\n-                in.prevout = outpoint;\n-                in.nSequence = sequence;\n-                in.scriptSig = script_sig;\n-                in.scriptWitness.stack = script_wit_stack;\n-\n-                tx_mut.vin.push_back(in);\n-            }\n-            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n-            const auto amount_out = (amount_in - amount_fee) / num_out;\n-            for (int i = 0; i < num_out; ++i) {\n-                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n-            }\n-            const auto tx = MakeTransactionRef(tx_mut);\n-            // Restore previously removed outpoints\n-            for (const auto& in : tx->vin) {\n-                Assert(outpoints_rbf.insert(in.prevout).second);\n+        const Package package = [&] {\n+            auto n_tx = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1, MAX_PACKAGE_COUNT + 5);\n+            Package txs;\n+            while (n_tx--) {\n+                CMutableTransaction tx_mut;\n+                tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+                tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+                const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+                CAmount amount_in{0};\n+                for (int i = 0; i < num_in; ++i) {\n+                    // Pop random outpoint\n+                    auto pop = outpoints_rbf.begin();\n+                    std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                    const auto outpoint = *pop;\n+                    outpoints_rbf.erase(pop);\n+                    amount_in += GetAmount(outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r938398224",
      "id" : 938398224,
      "in_reply_to_id" : 937542523,
      "line" : 198,
      "node_id" : "PRRC_kwDOABII58437tIQ",
      "original_commit_id" : "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "original_line" : 198,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 75,
      "pull_request_review_id" : 1062783428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938398224/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-05T02:47:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938398224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24590067?v=4",
         "events_url" : "https://api.github.com/users/chinggg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/chinggg/followers",
         "following_url" : "https://api.github.com/users/chinggg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/chinggg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/chinggg",
         "id" : 24590067,
         "login" : "chinggg",
         "node_id" : "MDQ6VXNlcjI0NTkwMDY3",
         "organizations_url" : "https://api.github.com/users/chinggg/orgs",
         "received_events_url" : "https://api.github.com/users/chinggg/received_events",
         "repos_url" : "https://api.github.com/users/chinggg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/chinggg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/chinggg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/chinggg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r938403815"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938403815"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Another bug assert violation happens in `insert_tx`.\r\n\r\n```log\r\ntest/fuzz/tx_pool.cpp:308 operator(): Assertion `set.get().emplace(tx.GetHash(), i).second' failed.\r\n==3192931== ERROR: libFuzzer: deadly signal\r\n    #0 0x55c5a9cbf680 in __sanitizer_print_stack_trace (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xfd7680)\r\n    #1 0x55c5a9c6b988 in fuzzer::PrintStackTrace() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf83988)\r\n    #2 0x55c5a9c50ad3 in fuzzer::Fuzzer::CrashCallback() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf68ad3)\r\n    #3 0x7f666ad8a41f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1441f)\r\n    #4 0x7f666a9f000a in __libc_signal_restore_set /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/internal-signals.h:86:3\r\n    #5 0x7f666a9f000a in raise /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:48:3\r\n    #6 0x7f666a9cf858 in abort /build/glibc-SzIz7B/glibc-2.31/stdlib/abort.c:79:7\r\n    #7 0x55c5abfff51d in assertion_fail(char const*, int, char const*, char const*) src/util/check.cpp:13:5\r\n    #8 0x55c5aa21ec02 in bool&& inline_assertion_check<true, bool>(bool&&, char const*, int, char const*, char const*) src/./util/check.h:67:13\r\n    #9 0x55c5aa4d3759 in auto (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>)::$_1::operator()<CTransaction>(std::vector<std::reference_wrapper<std::set<COutPoint, std::less<COutPoint>, std::allocator<COutPoint> > >, std::allocator<std::reference_wrapper<std::set<COutPoint, std::less<COutPoint>, std::allocator<COutPoint> > > > >, std::vector<std::reference_wrapper<std::set<COutPoint, std::less<COutPoint>, std::allocator<COutPoint> > >, std::allocator<std::reference_wrapper<std::set<COutPoint, std::less<COutPoint>, std::allocator<COutPoint> > > > >, CTransaction const&) const src/test/fuzz/tx_pool.cpp:308:21\r\n    #10 0x55c5aa4cdf0a in (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>) src/test/fuzz/tx_pool.cpp:327:17\r\n```\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/tx_pool.cpp#L271-L296\r\n\r\nI am not sure about what the loops are doing. Maybe `outpoint_rbf` should not be modified when constructing transactions.",
      "commit_id" : "dfad3761565180f020eb160f78ae541f156be9c9",
      "created_at" : "2022-08-05T03:03:24Z",
      "diff_hunk" : "@@ -239,33 +251,52 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n \n-        // Make sure ProcessNewPackage on one transaction works.\n-        // The result is not guaranteed to be the same as what is returned by ATMP.\n-        const auto result_package = WITH_LOCK(::cs_main,\n-                                    return ProcessNewPackage(chainstate, tx_pool, {tx}, true));\n-        // If something went wrong due to a package-specific policy, it might not return a\n-        // validation result for the transaction.\n-        if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n-            auto it = result_package.m_tx_results.find(tx->GetWitnessHash());\n-            Assert(it != result_package.m_tx_results.end());\n-            Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n-                   it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+\n+        bool accepted{true};\n+        for (const auto& tx : package) {\n+            const bool submit_standalone{\n+                // A package must have at least 2 txs, so size-1 packages can only be submitted standalone\n+                package.size() == 1 ||\n+                fuzzed_data_provider.ConsumeBool()};\n+            if (submit_standalone) {\n+                const auto result_single{WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false))};\n+                const bool accepted_single{result_single.m_result_type == MempoolAcceptResult::ResultType::VALID};\n+                accepted &= accepted_single;\n+            }\n         }\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false));\n-        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        if (package.size() >= 2) {\n+            // Submit the remainder of the package.\n+            // For now, every package has only one tx , so this submits the whole\n+            // package again.\n+            const auto result_package{WITH_LOCK(::cs_main, return ProcessNewPackage(chainstate, tx_pool, package, /*test_accept=*/false))};\n+            accepted = result_package.m_state.IsValid();\n+            Assert(accepted != result_package.m_state.IsInvalid());\n+            // If something went wrong due to a package-specific policy, it might not return a\n+            // validation result for the transaction.\n+            if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+                           tx_res.second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+                }\n+            }\n+            if (accepted) {\n+                Assert(result_package.m_tx_results.size() == package.size());\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+                }\n+            }\n+        }\n         SyncWithValidationInterfaceQueue();\n         UnregisterSharedValidationInterface(txr);\n-\n         Assert(accepted != added.empty());\n-        Assert(accepted == res.m_state.IsValid());\n-        Assert(accepted != res.m_state.IsInvalid());\n         if (accepted) {\n-            Assert(added.size() == 1); // For now, no package acceptance\n-            Assert(tx == *added.begin());\n+            Assert(Package(added.begin(), added.end()) == package);\n         } else {\n-            // Do not consider rejected transaction removed\n-            removed.erase(tx);\n+            // Do not consider rejected transactions removed\n+            for (const auto& tx : package) {\n+                removed.erase(tx);\n+            }\n         }\n \n         // Helper to insert spent and created outpoints of a tx into collections",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r938403815",
      "id" : 938403815,
      "line" : 303,
      "node_id" : "PRRC_kwDOABII58437ufn",
      "original_commit_id" : "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "original_line" : 303,
      "original_position" : 194,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 204,
      "pull_request_review_id" : 1062790474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938403815/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-05T03:09:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/938403815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24590067?v=4",
         "events_url" : "https://api.github.com/users/chinggg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/chinggg/followers",
         "following_url" : "https://api.github.com/users/chinggg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/chinggg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/chinggg",
         "id" : 24590067,
         "login" : "chinggg",
         "node_id" : "MDQ6VXNlcjI0NTkwMDY3",
         "organizations_url" : "https://api.github.com/users/chinggg/orgs",
         "received_events_url" : "https://api.github.com/users/chinggg/received_events",
         "repos_url" : "https://api.github.com/users/chinggg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/chinggg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/chinggg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/chinggg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r939467868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939467868"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The assertion `result_package.m_tx_results.size() == package.size()` failed. I debug the testcase and it seems results.size() < package.size().\r\n\r\n```\r\ntest/fuzz/tx_pool.cpp:286 tx_pool_standard_fuzz_target: Assertion `result_package.m_tx_results.size() == package.size()' failed.\r\n==3398073== ERROR: libFuzzer: deadly signal\r\n    #0 0x55e1fcaec680 in __sanitizer_print_stack_trace (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xfd8680)\r\n    #1 0x55e1fca98988 in fuzzer::PrintStackTrace() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf84988)\r\n    #2 0x55e1fca7dad3 in fuzzer::Fuzzer::CrashCallback() (/home/ubuntu/bitcoin/src/test/fuzz/fuzz+0xf69ad3)\r\n    #3 0x7ff789c3741f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1441f)\r\n    #4 0x7ff78989d00a in __libc_signal_restore_set /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/internal-signals.h:86:3\r\n    #5 0x7ff78989d00a in raise /build/glibc-SzIz7B/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:48:3\r\n    #6 0x7ff78987c858 in abort /build/glibc-SzIz7B/glibc-2.31/stdlib/abort.c:79:7\r\n    #7 0x55e1fee2dc3d in assertion_fail(char const*, int, char const*, char const*) src/util/check.cpp:13:5\r\n    #8 0x55e1fd04bc02 in bool&& inline_assertion_check<true, bool>(bool&&, char const*, int, char const*, char const*) src/./util/check.h:67:13\r\n    #9 0x55e1fd2f9f0b in (anonymous namespace)::tx_pool_standard_fuzz_target(Span<unsigned char const>) src/test/fuzz/tx_pool.cpp:286:17\r\n```",
      "commit_id" : "6ca7fcf2247ed7067ebaf3ee8dc325d49142d666",
      "created_at" : "2022-08-06T02:11:23Z",
      "diff_hunk" : "@@ -239,33 +253,52 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n \n-        // Make sure ProcessNewPackage on one transaction works.\n-        // The result is not guaranteed to be the same as what is returned by ATMP.\n-        const auto result_package = WITH_LOCK(::cs_main,\n-                                    return ProcessNewPackage(chainstate, tx_pool, {tx}, true));\n-        // If something went wrong due to a package-specific policy, it might not return a\n-        // validation result for the transaction.\n-        if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n-            auto it = result_package.m_tx_results.find(tx->GetWitnessHash());\n-            Assert(it != result_package.m_tx_results.end());\n-            Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n-                   it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+\n+        bool accepted{true};\n+        for (const auto& tx : package) {\n+            const bool submit_standalone{\n+                // A package must have at least 2 txs, so size-1 packages can only be submitted standalone\n+                package.size() == 1 ||\n+                fuzzed_data_provider.ConsumeBool()};\n+            if (submit_standalone) {\n+                const auto result_single{WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false))};\n+                const bool accepted_single{result_single.m_result_type == MempoolAcceptResult::ResultType::VALID};\n+                accepted &= accepted_single;\n+            }\n         }\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false));\n-        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        if (package.size() >= 2) {\n+            // Submit the remainder of the package.\n+            // For now, every package has only one tx , so this submits the whole\n+            // package again.\n+            const auto result_package{WITH_LOCK(::cs_main, return ProcessNewPackage(chainstate, tx_pool, package, /*test_accept=*/false))};\n+            accepted = result_package.m_state.IsValid();\n+            Assert(accepted != result_package.m_state.IsInvalid());\n+            // If something went wrong due to a package-specific policy, it might not return a\n+            // validation result for the transaction.\n+            if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+                           tx_res.second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+                }\n+            }\n+            if (accepted) {\n+                Assert(result_package.m_tx_results.size() == package.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r939467868",
      "id" : 939467868,
      "line" : 286,
      "node_id" : "PRRC_kwDOABII5843_yRc",
      "original_commit_id" : "6ca7fcf2247ed7067ebaf3ee8dc325d49142d666",
      "original_line" : 286,
      "original_position" : 180,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 180,
      "pull_request_review_id" : 1064253935,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939467868/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-06T02:11:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939467868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24590067?v=4",
         "events_url" : "https://api.github.com/users/chinggg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/chinggg/followers",
         "following_url" : "https://api.github.com/users/chinggg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/chinggg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/chinggg",
         "id" : 24590067,
         "login" : "chinggg",
         "node_id" : "MDQ6VXNlcjI0NTkwMDY3",
         "organizations_url" : "https://api.github.com/users/chinggg/orgs",
         "received_events_url" : "https://api.github.com/users/chinggg/received_events",
         "repos_url" : "https://api.github.com/users/chinggg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/chinggg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/chinggg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/chinggg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r939467929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939467929"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is solved in https://github.com/bitcoin/bitcoin/commit/6ca7fcf2247ed7067ebaf3ee8dc325d49142d666 by use a new copy of `outpoint_rbf` in the loop.",
      "commit_id" : "6ca7fcf2247ed7067ebaf3ee8dc325d49142d666",
      "created_at" : "2022-08-06T02:12:24Z",
      "diff_hunk" : "@@ -239,33 +251,52 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n \n-        // Make sure ProcessNewPackage on one transaction works.\n-        // The result is not guaranteed to be the same as what is returned by ATMP.\n-        const auto result_package = WITH_LOCK(::cs_main,\n-                                    return ProcessNewPackage(chainstate, tx_pool, {tx}, true));\n-        // If something went wrong due to a package-specific policy, it might not return a\n-        // validation result for the transaction.\n-        if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n-            auto it = result_package.m_tx_results.find(tx->GetWitnessHash());\n-            Assert(it != result_package.m_tx_results.end());\n-            Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n-                   it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+\n+        bool accepted{true};\n+        for (const auto& tx : package) {\n+            const bool submit_standalone{\n+                // A package must have at least 2 txs, so size-1 packages can only be submitted standalone\n+                package.size() == 1 ||\n+                fuzzed_data_provider.ConsumeBool()};\n+            if (submit_standalone) {\n+                const auto result_single{WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false))};\n+                const bool accepted_single{result_single.m_result_type == MempoolAcceptResult::ResultType::VALID};\n+                accepted &= accepted_single;\n+            }\n         }\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false));\n-        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        if (package.size() >= 2) {\n+            // Submit the remainder of the package.\n+            // For now, every package has only one tx , so this submits the whole\n+            // package again.\n+            const auto result_package{WITH_LOCK(::cs_main, return ProcessNewPackage(chainstate, tx_pool, package, /*test_accept=*/false))};\n+            accepted = result_package.m_state.IsValid();\n+            Assert(accepted != result_package.m_state.IsInvalid());\n+            // If something went wrong due to a package-specific policy, it might not return a\n+            // validation result for the transaction.\n+            if (result_package.m_state.GetResult() != PackageValidationResult::PCKG_POLICY) {\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+                           tx_res.second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+                }\n+            }\n+            if (accepted) {\n+                Assert(result_package.m_tx_results.size() == package.size());\n+                for (const auto& tx_res : result_package.m_tx_results) {\n+                    Assert(tx_res.second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+                }\n+            }\n+        }\n         SyncWithValidationInterfaceQueue();\n         UnregisterSharedValidationInterface(txr);\n-\n         Assert(accepted != added.empty());\n-        Assert(accepted == res.m_state.IsValid());\n-        Assert(accepted != res.m_state.IsInvalid());\n         if (accepted) {\n-            Assert(added.size() == 1); // For now, no package acceptance\n-            Assert(tx == *added.begin());\n+            Assert(Package(added.begin(), added.end()) == package);\n         } else {\n-            // Do not consider rejected transaction removed\n-            removed.erase(tx);\n+            // Do not consider rejected transactions removed\n+            for (const auto& tx : package) {\n+                removed.erase(tx);\n+            }\n         }\n \n         // Helper to insert spent and created outpoints of a tx into collections",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25778#discussion_r939467929",
      "id" : 939467929,
      "in_reply_to_id" : 938403815,
      "line" : 304,
      "node_id" : "PRRC_kwDOABII5843_ySZ",
      "original_commit_id" : "c157a6ca57cd4c1392ad82b85d4b1df0b7d23e11",
      "original_line" : 304,
      "original_position" : 194,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 205,
      "pull_request_review_id" : 1064254021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939467929/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-06T02:12:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939467929",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24590067?v=4",
         "events_url" : "https://api.github.com/users/chinggg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/chinggg/followers",
         "following_url" : "https://api.github.com/users/chinggg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/chinggg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/chinggg",
         "id" : 24590067,
         "login" : "chinggg",
         "node_id" : "MDQ6VXNlcjI0NTkwMDY3",
         "organizations_url" : "https://api.github.com/users/chinggg/orgs",
         "received_events_url" : "https://api.github.com/users/chinggg/received_events",
         "repos_url" : "https://api.github.com/users/chinggg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/chinggg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/chinggg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/chinggg"
      }
   }
]
