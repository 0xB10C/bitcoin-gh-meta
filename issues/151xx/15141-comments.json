[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15151](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15151.html) ([Consensus] [P2P] [Utils and libraries] Cleanup by DesWurstes)\n* [#14897](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14897.html) (randomize GETDATA(tx) request order and introduce bias toward outbound by naumenkogs)\n* [#14837](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14837.html) (Stricter & More Performant Invariant Checking in CheckBlock by JeremyRubin)\n* [#14696](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14696.html) (qa: Add explicit references to related CVE's in p2p_invalid_block test. by lucash-dev)\n* [#13868](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13868.html) (Remove unused fScriptChecks parameter from CheckInputs by Empact)\n* [#13525](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13525.html) (Report reason inputs are nonstandard from AreInputsStandard by Empact)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-01-10T18:31:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-453203439",
      "id" : 453203439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15141",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MzIwMzQzOQ==",
      "updated_at" : "2019-01-15T21:26:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/453203439",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-01-10T18:34:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-453204363",
      "id" : 453204363,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15141",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MzIwNDM2Mw==",
      "updated_at" : "2019-01-10T18:34:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/453204363",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247050770"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247050770"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Very small nit: `if (!message.empty()) {` instead? :-)",
      "commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "created_at" : "2019-01-11T09:30:13Z",
      "diff_hunk" : "@@ -816,6 +816,91 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n+/**\n+ * Returns true if the given validation state result may result in us banning/disconnecting a peer\n+ * which provided such an object. This is used to determine whether to relay transactions to\n+ * whitelisted peers, preventing us from relaying things which would result in them disconnecting\n+ * us.\n+ */\n+static bool MayResultInDisconnect(const CValidationState& state, bool via_compact_block) {\n+    switch (state.GetReason()) {\n+    case ValidationInvalidReason::NONE:\n+        return false;\n+    // The node is providing invalid data:\n+    case ValidationInvalidReason::CONSENSUS:\n+    case ValidationInvalidReason::BLOCK_MUTATED:\n+    case ValidationInvalidReason::CACHED_INVALID:\n+        // Blocks (or headers) invalid for one of the above reasons may not be\n+        // knowable to a high-bandwidth compact block peer, prior to relay.\n+        // Headers that are invalid for reasons that should be known prior to\n+        // block validation -- such as bad proof of work, too-early-time, or\n+        // building off an invalid or missing block -- are punished regardless\n+        // (see below).\n+        return !via_compact_block;\n+    case ValidationInvalidReason::BLOCK_INVALID_HEADER:\n+    case ValidationInvalidReason::BLOCK_CHECKPOINT:\n+    case ValidationInvalidReason::BLOCK_INVALID_PREV:\n+    case ValidationInvalidReason::BLOCK_MISSING_PREV:\n+        return true;\n+    // Conflicting (but not necessarily invalid) data or different policy:\n+    case ValidationInvalidReason::RECENT_CONSENSUS_CHANGE:\n+    case ValidationInvalidReason::BLOCK_BAD_TIME:\n+    case ValidationInvalidReason::TX_NOT_STANDARD:\n+    case ValidationInvalidReason::TX_MISSING_INPUTS:\n+    case ValidationInvalidReason::TX_WITNESS_MUTATED:\n+    case ValidationInvalidReason::TX_CONFLICT:\n+    case ValidationInvalidReason::TX_MEMPOOL_POLICY:\n+        return false;\n+    }\n+    return false;\n+}\n+\n+//! Returns true if the peer was punished (probably disconnected)\n+static bool MaybePunishNode(NodeId nodeid, const CValidationState& state, bool via_compact_block, const std::string& message = \"\") {\n+    switch (state.GetReason()) {\n+    case ValidationInvalidReason::NONE:\n+        break;\n+    // The node is providing invalid data:\n+    case ValidationInvalidReason::CONSENSUS:\n+    case ValidationInvalidReason::BLOCK_MUTATED:\n+    case ValidationInvalidReason::CACHED_INVALID:\n+        if (!via_compact_block) {\n+            LOCK(cs_main);\n+            Misbehaving(nodeid, 100, message);\n+            return true;\n+        }\n+        break;\n+    case ValidationInvalidReason::BLOCK_INVALID_HEADER:\n+    case ValidationInvalidReason::BLOCK_CHECKPOINT:\n+    case ValidationInvalidReason::BLOCK_INVALID_PREV:\n+        {\n+            LOCK(cs_main);\n+            Misbehaving(nodeid, 100, message);\n+        }\n+        return true;\n+    // Conflicting (but not necessarily invalid) data or different policy:\n+    case ValidationInvalidReason::BLOCK_MISSING_PREV:\n+        {\n+            // TODO: Handle this much more gracefully (10 DoS points is super arbitrary)\n+            LOCK(cs_main);\n+            Misbehaving(nodeid, 10, message);\n+        }\n+        return true;\n+    case ValidationInvalidReason::RECENT_CONSENSUS_CHANGE:\n+    case ValidationInvalidReason::BLOCK_BAD_TIME:\n+    case ValidationInvalidReason::TX_NOT_STANDARD:\n+    case ValidationInvalidReason::TX_MISSING_INPUTS:\n+    case ValidationInvalidReason::TX_WITNESS_MUTATED:\n+    case ValidationInvalidReason::TX_CONFLICT:\n+    case ValidationInvalidReason::TX_MEMPOOL_POLICY:\n+        break;\n+    }\n+    if (message != \"\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247050770",
      "id" : 247050770,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzA1MDc3MA==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 83,
      "path" : "src/net_processing.cpp",
      "position" : 83,
      "pull_request_review_id" : 191577024,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-11T09:30:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247050770",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK; I'll review for changes in behavior for specific validation reasons later.",
      "created_at" : "2019-01-11T18:17:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-453608761",
      "id" : 453608761,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15141",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MzYwODc2MQ==",
      "updated_at" : "2019-01-11T18:17:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/453608761",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-01-14T14:23:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#issuecomment-454021358",
      "id" : 454021358,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15141",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NDAyMTM1OA==",
      "updated_at" : "2019-01-14T14:23:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454021358",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247634533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247634533"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: change to `m_reason` and avoid all the non-shadowing naming tricks below (`reasonIn` and `_reason`)",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-14T19:52:06Z",
      "diff_hunk" : "@@ -30,32 +74,24 @@ class CValidationState {\n         MODE_INVALID, //!< network rule violation (DoS value may be set)\n         MODE_ERROR,   //!< run-time error\n     } mode;\n-    int nDoS;\n+    ValidationInvalidReason reason;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247634533",
      "id" : 247634533,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzYzNDUzMw==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 56,
      "path" : "src/consensus/validation.h",
      "position" : 56,
      "pull_request_review_id" : 192332892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247634533",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247638591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247638591"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: s/conflicts with a tx in the chain/conflicts with a confirmed transaction. Same comment below for \"exists in the mempool or on chain\"",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-14T20:03:52Z",
      "diff_hunk" : "@@ -22,6 +22,50 @@ static const unsigned char REJECT_NONSTANDARD = 0x40;\n static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n static const unsigned char REJECT_CHECKPOINT = 0x43;\n \n+/** A \"reason\" why something was invalid, suitable for determining whether the\n+  * provider of the object should be banned/ignored/disconnected/etc.\n+  * These are much more granular than the rejection codes, which may be more\n+  * useful for some other use-cases.\n+  */\n+enum class ValidationInvalidReason {\n+    // txn and blocks:\n+    NONE,                    //!< not actually invalid\n+    CONSENSUS,               //!< invalid by consensus rules (excluding any below reasons)\n+    /**\n+     * Invalid by a change to consensus rules more recent than SegWit.\n+     * Currently unused as there are no such consensus rule changes, and any download\n+     * sources realistically need to support SegWit in order to provide useful data,\n+     * so differentiating between always-invalid and invalid-by-pre-SegWit-soft-fork\n+     * is uninteresting.\n+     */\n+    RECENT_CONSENSUS_CHANGE,\n+    CACHED_INVALID,          //!< this object was cached as being invalid, but we don't know why\n+    // Only blocks (or headers):\n+    BLOCK_INVALID_HEADER,    //!< invalid proof of work or time too old\n+    BLOCK_MUTATED,           //!< the block's data didn't match the data committed to by the PoW\n+    BLOCK_MISSING_PREV,      //!< We don't have the previous block the checked one is built on\n+    BLOCK_INVALID_PREV,      //!< A block this one builds on is invalid\n+    BLOCK_BAD_TIME,          //!< block timestamp was > 2 hours in the future (or our clock is bad)\n+    BLOCK_CHECKPOINT,        //!< the block failed to meet one of our checkpoints\n+    // Only loose txn:\n+    TX_NOT_STANDARD,          //!< didn't meet our local policy rules\n+    TX_MISSING_INPUTS,        //!< a transaction was missing some of its inputs (or its inputs were spent at < coinbase maturity height)\n+    /**\n+     * Transaction might be missing a witness, have a witness prior to SegWit\n+     * activation, or witness may have been malleated (which includes\n+     * non-standard witnesses).\n+     */\n+    TX_WITNESS_MUTATED,\n+    /**\n+     * Tx already in mempool or conflicts with a tx in the chain",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247638591",
      "id" : 247638591,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzYzODU5MQ==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 39,
      "path" : "src/consensus/validation.h",
      "position" : 39,
      "pull_request_review_id" : 192332892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247638591",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247678436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247678436"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems entirely obvious and not requiring a comment to me, which makes me think there's some subtlety I've missed. Is this just saying that if we receive a block with witness data, it should be valid-according-to-BIP141?\r\n\r\nPedantic nit: I'd also avoid talking about 'data-providers' in validation.cpp. After this PR, validation should be unconcerned with data-providers and only be validating blocks based on the block data.",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-14T22:09:50Z",
      "diff_hunk" : "@@ -3333,7 +3341,9 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n     if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n+        // We can call this a consensus failure as any data-providers who provided",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247678436",
      "id" : 247678436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY3ODQzNg==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 494,
      "path" : "src/validation.cpp",
      "position" : 494,
      "pull_request_review_id" : 192332892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247678436",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247688022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247688022"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's unclear to me whether peers should always be punished for `BLOCK_INVALID_PREV`. For example, if the previous block was invalid because of `RECENT_CONSENSUS_CHANGE` and the peer wasn't punished, should it be punished for relaying this descendant block?\r\n\r\nShould compact block peers be punished for relaying the block if its parent is invalid? My reading of https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki#pre-validation-relay-and-consistency-considerations is that the answer is no.\r\n\r\nSame question for `MaybePunishNode()` below.",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-14T22:42:35Z",
      "diff_hunk" : "@@ -816,6 +816,91 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n+/**\n+ * Returns true if the given validation state result may result in us banning/disconnecting a peer\n+ * which provided such an object. This is used to determine whether to relay transactions to\n+ * whitelisted peers, preventing us from relaying things which would result in them disconnecting\n+ * us.\n+ */\n+static bool MayResultInDisconnect(const CValidationState& state, bool via_compact_block) {\n+    switch (state.GetReason()) {\n+    case ValidationInvalidReason::NONE:\n+        return false;\n+    // The node is providing invalid data:\n+    case ValidationInvalidReason::CONSENSUS:\n+    case ValidationInvalidReason::BLOCK_MUTATED:\n+    case ValidationInvalidReason::CACHED_INVALID:\n+        // Blocks (or headers) invalid for one of the above reasons may not be\n+        // knowable to a high-bandwidth compact block peer, prior to relay.\n+        // Headers that are invalid for reasons that should be known prior to\n+        // block validation -- such as bad proof of work, too-early-time, or\n+        // building off an invalid or missing block -- are punished regardless\n+        // (see below).\n+        return !via_compact_block;\n+    case ValidationInvalidReason::BLOCK_INVALID_HEADER:\n+    case ValidationInvalidReason::BLOCK_CHECKPOINT:\n+    case ValidationInvalidReason::BLOCK_INVALID_PREV:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247688022",
      "id" : 247688022,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY4ODAyMg==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 27,
      "path" : "src/net_processing.cpp",
      "position" : 54,
      "pull_request_review_id" : 192332892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247688022",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247736063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247736063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe this comment is contrasting a CONSENSUS failure from a RECENT_CONSENSUS_CHANGE -- I think in @TheBlueMatt's original PR he had some validation failures marked as RECENT_CONSENSUS_CHANGE, but eventually we decided to switch them all out (and reserve RECENT_CONSENSUS_CHANGE as something we might do in the future).\r\n\r\nI think I agree with you philosophically that validation ought not be very concerned with 'data providers', but I think the ValidationReasons interface is also driven by the needs of net_processing, so sometimes we may need to explain reasons that maybe don't make sense in a totally neutral validation library because our application requires it.  RECENT_CONSENSUS_CHANGE is one such possible example (though we're not using it in this PR and I am not sure we ever will); the BLOCK_INVALID_HEADER enum I added is another (net_processing needs to be able to distinguish some headers failures from others, in order to maintain the current ban behavior).\r\n\r\nAnyway I'll update this comment to be clearer.",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T01:23:21Z",
      "diff_hunk" : "@@ -3333,7 +3341,9 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n     if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n+        // We can call this a consensus failure as any data-providers who provided",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247736063",
      "id" : 247736063,
      "in_reply_to_id" : 247678436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzczNjA2Mw==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 494,
      "path" : "src/validation.cpp",
      "position" : 494,
      "pull_request_review_id" : 192453150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247736063",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247737022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247737022"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Self-review: I think adding this line here may be a bug.  At any rate, there is a serious confusion between the hacky punish_invalid bool in the existing code and the introduction of MaybePunishNode in this PR that ought to be cleaned up.",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T01:29:26Z",
      "diff_hunk" : "@@ -1453,6 +1529,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                 // etc), and not just the duplicate-invalid case.\n                 pfrom->fDisconnect = true;\n             }\n+            MaybePunishNode(pfrom->GetId(), state, /*via_compact_block*/ false, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247737022",
      "id" : 247737022,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzczNzAyMg==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 131,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 192454315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247737022",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247768943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247768943"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this comment is justifying upgrading the (at the time recent) segwit test from a RECENT_CONSENSUS_CHANGE to just CONSENSUS_CHANGE, the reason being that either you've got an old client that didn't provide segwit data -- in which case this test won't trigger because the `bad-blk-length` test will already have failed -- or it is providing segwit data but doing it wrong, in which case there's no reason to use the more forgiving `RECENT` version. So I think just dropping the comment (now that segwit isn't recent) is fine, fwiw.",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T05:31:44Z",
      "diff_hunk" : "@@ -3333,7 +3341,9 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n     if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n+        // We can call this a consensus failure as any data-providers who provided",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247768943",
      "id" : 247768943,
      "in_reply_to_id" : 247678436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Nzc2ODk0Mw==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 494,
      "path" : "src/validation.cpp",
      "position" : 494,
      "pull_request_review_id" : 192491512,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247768943",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247771578"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247771578"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If miners have mostly upgraded then building on top of a `RECENT_CONSENSUS_CHANGE` block should be rare enough for this not to be a huge problem.\r\n\r\nIf not, and we want to cope with a moderately controversial consensus upgrade, then we probably want to track whether blocks failed due to `RECENT_CONSENSUS_CHANGE` and mark their children as also failing due to `RECENT_CONSENSUS_CHANGE` (after checking PoW at least). Working all that out doesn't seem necessary for this patchset to me though.",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T05:56:37Z",
      "diff_hunk" : "@@ -816,6 +816,91 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n+/**\n+ * Returns true if the given validation state result may result in us banning/disconnecting a peer\n+ * which provided such an object. This is used to determine whether to relay transactions to\n+ * whitelisted peers, preventing us from relaying things which would result in them disconnecting\n+ * us.\n+ */\n+static bool MayResultInDisconnect(const CValidationState& state, bool via_compact_block) {\n+    switch (state.GetReason()) {\n+    case ValidationInvalidReason::NONE:\n+        return false;\n+    // The node is providing invalid data:\n+    case ValidationInvalidReason::CONSENSUS:\n+    case ValidationInvalidReason::BLOCK_MUTATED:\n+    case ValidationInvalidReason::CACHED_INVALID:\n+        // Blocks (or headers) invalid for one of the above reasons may not be\n+        // knowable to a high-bandwidth compact block peer, prior to relay.\n+        // Headers that are invalid for reasons that should be known prior to\n+        // block validation -- such as bad proof of work, too-early-time, or\n+        // building off an invalid or missing block -- are punished regardless\n+        // (see below).\n+        return !via_compact_block;\n+    case ValidationInvalidReason::BLOCK_INVALID_HEADER:\n+    case ValidationInvalidReason::BLOCK_CHECKPOINT:\n+    case ValidationInvalidReason::BLOCK_INVALID_PREV:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247771578",
      "id" : 247771578,
      "in_reply_to_id" : 247688022,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Nzc3MTU3OA==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 27,
      "path" : "src/net_processing.cpp",
      "position" : 54,
      "pull_request_review_id" : 192494788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247771578",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247772868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247772868"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe having `inline bool CorruptionPossible() const { return reason == BLOCK_MUTATED; }` would make for nicer code elsewhere?",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T06:07:14Z",
      "diff_hunk" : "@@ -117,14 +107,7 @@ class CValidationState {\n     bool IsError() const {\n         return mode == MODE_ERROR;\n     }\n-    bool CorruptionPossible() const {\n-        return corruptionPossible;\n-    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247772868",
      "id" : 247772868,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Nzc3Mjg2OA==",
      "original_commit_id" : "6ee2c4551d055dd3c7bf28ed4bde7c566d75dfef",
      "original_position" : 42,
      "path" : "src/consensus/validation.h",
      "position" : 101,
      "pull_request_review_id" : 192495960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247772868",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247881222"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247881222"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This change isn't a clean refactor -- `!state.CorruptionPossible()` would have returned false after this, but its replacement in this commit (ie, `state.GetReason() != BLOCK_MUTATED`) will return true. I think this is okay though, since `CorruptionPossible()` is only checked for block updates, and this just deals with mempool tx's, and the uses of `state.CorruptionPossible()` that this would have effected were already changed to `state.GetReason() != TX_WITNESS_MUTATED` in an earlier commit. ",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T12:57:07Z",
      "diff_hunk" : "@@ -889,7 +889,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 // Only the witness is missing, so the transaction itself may be fine.\n                 state.Invalid(ValidationInvalidReason::TX_WITNESS_MUTATED, false,\n                           state.GetRejectCode(), state.GetRejectReason(), state.GetDebugMessage());\n-                state.SetCorruptionPossible();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247881222",
      "id" : 247881222,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Nzg4MTIyMg==",
      "original_commit_id" : "6ee2c4551d055dd3c7bf28ed4bde7c566d75dfef",
      "original_position" : 4,
      "path" : "src/validation.cpp",
      "position" : 180,
      "pull_request_review_id" : 192495960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247881222",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247908811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247908811"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems like this change could be squashed into \"Remove references to CValidationState's DoS and CorruptionPossible\" ?",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T14:18:58Z",
      "diff_hunk" : "@@ -203,7 +203,7 @@ ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<\n         // but that is expensive, and CheckBlock caches a block's\n         // \"checked-status\" (in the CBlock?). CBlock should be able to\n         // check its own merkle root and cache that check.\n-        if (state.CorruptionPossible())\n+        if (state.GetReason() == ValidationInvalidReason::BLOCK_MUTATED)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247908811",
      "id" : 247908811,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzkwODgxMQ==",
      "original_commit_id" : "963699d1316f6b14c98a4624f766393379db85e1",
      "original_position" : 5,
      "path" : "src/blockencodings.cpp",
      "position" : 5,
      "pull_request_review_id" : 192495960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247908811",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247920759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247920759"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This replaces the `Misbehaving(.., \"invalid header received\");` from earlier; shouldn't be introducing a bug (unless the move to below the `if` introduces one)?",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T14:48:25Z",
      "diff_hunk" : "@@ -1453,6 +1529,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                 // etc), and not just the duplicate-invalid case.\n                 pfrom->fDisconnect = true;\n             }\n+            MaybePunishNode(pfrom->GetId(), state, /*via_compact_block*/ false, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247920759",
      "id" : 247920759,
      "in_reply_to_id" : 247737022,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzkyMDc1OQ==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 131,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 192682212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247920759",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247998223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247998223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe there is an unintended behavior change here -- previously, \"duplicate invalid\" headers were not assigned DoS points.  We added a bunch of logic (just above this line of code) to punish outbound peers for providing invalid headers.\r\n\r\nAfter the rewrite in this PR, CACHED_INVALID is a bannable offense from any peer (other than in HB compact block relay).\r\n\r\nI'll rework this...",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T17:54:52Z",
      "diff_hunk" : "@@ -1453,6 +1529,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                 // etc), and not just the duplicate-invalid case.\n                 pfrom->fDisconnect = true;\n             }\n+            MaybePunishNode(pfrom->GetId(), state, /*via_compact_block*/ false, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r247998223",
      "id" : 247998223,
      "in_reply_to_id" : 247737022,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Nzk5ODIyMw==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 131,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 192781251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247998223",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248002976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248002976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "With respect to the issue you're bringing up, I believe the behavior in this PR matches existing behavior, in which case I'd prefer to defer improvement to a future PR.  If I'm missing some way that we've made things different or worse though let me know.\r\n\r\nAs for BIP 152:\r\n\r\n>A node MUST NOT send a cmpctblock message without having validated that the header properly commits to each transaction in the block, and properly builds on top of the existing, fully-validated chain with a valid proof-of-work either as a part of the current most-work valid chain, or building directly on top of it. A node MAY send a cmpctblock before validating that each transaction in the block validly spends existing UTXO set entries.\r\n",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T18:07:57Z",
      "diff_hunk" : "@@ -816,6 +816,91 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n+/**\n+ * Returns true if the given validation state result may result in us banning/disconnecting a peer\n+ * which provided such an object. This is used to determine whether to relay transactions to\n+ * whitelisted peers, preventing us from relaying things which would result in them disconnecting\n+ * us.\n+ */\n+static bool MayResultInDisconnect(const CValidationState& state, bool via_compact_block) {\n+    switch (state.GetReason()) {\n+    case ValidationInvalidReason::NONE:\n+        return false;\n+    // The node is providing invalid data:\n+    case ValidationInvalidReason::CONSENSUS:\n+    case ValidationInvalidReason::BLOCK_MUTATED:\n+    case ValidationInvalidReason::CACHED_INVALID:\n+        // Blocks (or headers) invalid for one of the above reasons may not be\n+        // knowable to a high-bandwidth compact block peer, prior to relay.\n+        // Headers that are invalid for reasons that should be known prior to\n+        // block validation -- such as bad proof of work, too-early-time, or\n+        // building off an invalid or missing block -- are punished regardless\n+        // (see below).\n+        return !via_compact_block;\n+    case ValidationInvalidReason::BLOCK_INVALID_HEADER:\n+    case ValidationInvalidReason::BLOCK_CHECKPOINT:\n+    case ValidationInvalidReason::BLOCK_INVALID_PREV:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248002976",
      "id" : 248002976,
      "in_reply_to_id" : 247688022,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAwMjk3Ng==",
      "original_commit_id" : "94874ddfdf4ae9c4b10f3f91d5e3280e2c24c371",
      "original_position" : 27,
      "path" : "src/net_processing.cpp",
      "position" : 54,
      "pull_request_review_id" : 192787164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T20:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248002976",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248032542"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248032542"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add useful-for-dos \"reason\" field to CValidationState\" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\r\n\r\nNote: word-diff is useful here to review new function arguments:\r\n\r\n```bash\r\ngit log -p -n1 -U0 --word-diff-regex=. a5415e85caaf2f5a77d6bae9574bb6d21139ee34\r\n```",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T19:30:40Z",
      "diff_hunk" : "@@ -160,24 +160,24 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n+        return state.DoS(10, ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"bad-txns-vin-empty\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248032542",
      "id" : 248032542,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAzMjU0Mg==",
      "original_commit_id" : "a5415e85caaf2f5a77d6bae9574bb6d21139ee34",
      "original_position" : 5,
      "path" : "src/consensus/tx_verify.cpp",
      "position" : null,
      "pull_request_review_id" : 192824459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T21:27:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248032542",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248034524"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248034524"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add useful-for-dos \"reason\" field to CValidationState\" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34):\r\n\r\nWhy remove this comment?",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T19:36:28Z",
      "diff_hunk" : "@@ -716,27 +716,22 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                               fSpendsCoinbase, nSigOpsCost, lp);\n         unsigned int nSize = entry.GetTxSize();\n \n-        // Check that the transaction doesn't have an excessive number of",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248034524",
      "id" : 248034524,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAzNDUyNA==",
      "original_commit_id" : "a5415e85caaf2f5a77d6bae9574bb6d21139ee34",
      "original_position" : 79,
      "path" : "src/validation.cpp",
      "position" : 79,
      "pull_request_review_id" : 192824459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T21:27:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248034524",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248036953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248036953"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add useful-for-dos \"reason\" field to CValidationState\" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\r\n\r\nThis seems like it is doubling the state.nDoS level, in addition to updating the reason enum:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/a5415e85caaf2f5a77d6bae9574bb6d21139ee34/src/consensus/validation.h#L96\r\n\r\nWould suggest replacing this change something more straightforward like `state.UpdateReason(ValidationInvalidReason::CONSENSUS)`",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T19:44:08Z",
      "diff_hunk" : "@@ -1988,11 +1988,17 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         {\n             CAmount txfee = 0;\n             if (!Consensus::CheckTxInputs(tx, state, view, pindex->nHeight, txfee)) {\n+                if (state.GetReason() == ValidationInvalidReason::TX_MISSING_INPUTS) {\n+                    // CheckTxInputs may return MISSING_INPUTS but we can't return that, as\n+                    // it's not defined for a block, so we reset the reason flag to CONSENSUS here.\n+                    state.DoS(state.GetDoS(), ValidationInvalidReason::CONSENSUS, false,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248036953",
      "id" : 248036953,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAzNjk1Mw==",
      "original_commit_id" : "a5415e85caaf2f5a77d6bae9574bb6d21139ee34",
      "original_position" : 232,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 192824459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T21:27:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248036953",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248037437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248037437"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add useful-for-dos \"reason\" field to CValidationState\" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\r\n\r\nExtra space on this line",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T19:45:33Z",
      "diff_hunk" : "@@ -2016,17 +2022,29 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         // * witness (when witness enabled in flags and excludes coinbase)\n         nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n         if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST)\n-            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n+            return state.DoS(100, ValidationInvalidReason::CONSENSUS, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n         txdata.emplace_back(tx);\n         if (!tx.IsCoinBase())\n         {\n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : nullptr))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : nullptr)) {\n+                if (state.GetReason() == ValidationInvalidReason::TX_NOT_STANDARD) {\n+                    // CheckInputs may return NOT_STANDARD for extra flags we passed,\n+                    // but we can't return that, as it's not defined for a block, so\n+                    // we reset the reason flag to CONSENSUS here.\n+                    // (note that this may not be the case until we add additional\n+                    // soft-fork flags to our script flags, in which case we  need to",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248037437",
      "id" : 248037437,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAzNzQzNw==",
      "original_commit_id" : "a5415e85caaf2f5a77d6bae9574bb6d21139ee34",
      "original_position" : 273,
      "path" : "src/validation.cpp",
      "position" : 310,
      "pull_request_review_id" : 192824459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T21:27:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248037437",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248038062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248038062"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add useful-for-dos \"reason\" field to CValidationState\" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\r\n\r\nThis also seems to double state.nDoS.",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T19:47:21Z",
      "diff_hunk" : "@@ -2016,17 +2022,29 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         // * witness (when witness enabled in flags and excludes coinbase)\n         nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n         if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST)\n-            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n+            return state.DoS(100, ValidationInvalidReason::CONSENSUS, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n         txdata.emplace_back(tx);\n         if (!tx.IsCoinBase())\n         {\n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : nullptr))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : nullptr)) {\n+                if (state.GetReason() == ValidationInvalidReason::TX_NOT_STANDARD) {\n+                    // CheckInputs may return NOT_STANDARD for extra flags we passed,\n+                    // but we can't return that, as it's not defined for a block, so\n+                    // we reset the reason flag to CONSENSUS here.\n+                    // (note that this may not be the case until we add additional\n+                    // soft-fork flags to our script flags, in which case we  need to\n+                    // be careful to differentiate RECENT_CONSENSUS_CHANGE and\n+                    // CONSENSUS)\n+                    state.DoS(state.GetDoS(), ValidationInvalidReason::CONSENSUS, false,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248038062",
      "id" : 248038062,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAzODA2Mg==",
      "original_commit_id" : "a5415e85caaf2f5a77d6bae9574bb6d21139ee34",
      "original_position" : 276,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 192824459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T21:27:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248038062",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248039678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248039678"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add useful-for-dos \"reason\" field to CValidationState\" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\r\n\r\nIs there a check for the requirement that MISSING_INPUTS is not used for a block? I would expect to see an assert(reason != MISSING_INPUTS) or assert(ValidForBlock(reason)) or something like that somewhere.",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T19:52:30Z",
      "diff_hunk" : "@@ -1988,11 +1988,17 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         {\n             CAmount txfee = 0;\n             if (!Consensus::CheckTxInputs(tx, state, view, pindex->nHeight, txfee)) {\n+                if (state.GetReason() == ValidationInvalidReason::TX_MISSING_INPUTS) {\n+                    // CheckTxInputs may return MISSING_INPUTS but we can't return that, as\n+                    // it's not defined for a block, so we reset the reason flag to CONSENSUS here.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248039678",
      "id" : 248039678,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAzOTY3OA==",
      "original_commit_id" : "a5415e85caaf2f5a77d6bae9574bb6d21139ee34",
      "original_position" : 231,
      "path" : "src/validation.cpp",
      "position" : 268,
      "pull_request_review_id" : 192824459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T21:27:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248039678",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248041505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248041505"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add useful-for-dos \"reason\" field to CValidationState\" (a5415e85caaf2f5a77d6bae9574bb6d21139ee34)\r\n\r\nNote: I guess this line used to set state.corruptionPossible = false but no longer does.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/cebe910718ae4f099f292736192a4e725ad02b94/src/consensus/validation.h#L54-L58\r\n\r\nNew way seems better.",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T19:57:17Z",
      "diff_hunk" : "@@ -3106,28 +3124,30 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n+        return state.DoS(100, ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0]->IsCoinBase())\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\", false, \"first tx is not coinbase\");\n+        return state.DoS(100, ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"bad-cb-missing\", false, \"first tx is not coinbase\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i]->IsCoinBase())\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\", false, \"more than one coinbase\");\n+            return state.DoS(100, ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"bad-cb-multiple\", false, \"more than one coinbase\");\n \n     // Check transactions\n-    for (const auto& tx : block.vtx)\n-        if (!CheckTransaction(*tx, state, true))\n-            return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248041505",
      "id" : 248041505,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODA0MTUwNQ==",
      "original_commit_id" : "a5415e85caaf2f5a77d6bae9574bb6d21139ee34",
      "original_position" : 345,
      "path" : "src/validation.cpp",
      "position" : 391,
      "pull_request_review_id" : 192824459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T21:27:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248041505",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248048711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248048711"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Use state reason field to check for collisions in cmpctblocks\" (963699d1316f6b14c98a4624f766393379db85e1)\r\n\r\nSince the `mapBlockSource` bool is now being passed as `!via_compact_block`, it seems like the field description should mention something about setting it based on whether the source was a compact or full block:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/6bdc4491e06433eb380ca3b8bc3e7c15f06aee8b/src/net_processing.cpp#L104-L105",
      "commit_id" : "a642744cc55816e3d816231fbe9352685ea72edb",
      "created_at" : "2019-01-15T20:21:21Z",
      "diff_hunk" : "@@ -1077,14 +1077,12 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n     const uint256 hash(block.GetHash());\n     std::map<uint256, std::pair<NodeId, bool>>::iterator it = mapBlockSource.find(hash);\n \n-    int nDoS = 0;\n-    if (state.IsInvalid(nDoS)) {\n+    if (state.IsInvalid()) {\n         // Don't send reject message with code 0 or an internal reject code.\n         if (it != mapBlockSource.end() && State(it->second.first) && state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) {\n             CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), hash};\n             State(it->second.first)->rejects.push_back(reject);\n-            if (nDoS > 0 && it->second.second)\n-                Misbehaving(it->second.first, nDoS);\n+            MaybePunishNode(/*nodeid=*/ it->second.first, state, /*via_compact_block=*/ !it->second.second);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15141#discussion_r248048711",
      "id" : 248048711,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODA0ODcxMQ==",
      "original_commit_id" : "6bdc4491e06433eb380ca3b8bc3e7c15f06aee8b",
      "original_position" : 13,
      "path" : "src/net_processing.cpp",
      "position" : 147,
      "pull_request_review_id" : 192824459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15141",
      "updated_at" : "2019-01-15T21:27:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248048711",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
