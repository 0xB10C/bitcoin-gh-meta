[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nFWIW -- C string function usage:\r\n\r\n```\r\n$ man 3 string | tr \" *()<>.,\" \"\\n\" | grep ^str | grep -v ^string | \\\r\n      sort -u | tr \"\\n\" \"|\" | sed 's/|$//g'; echo\r\nstrcasecmp|strcat|strchr|strcmp|strcoll|strcpy|strcspn|strdup|strfry|strlen|strncasecmp|strncat|strncmp|strncpy|strpbrk|strrchr|strsep|strspn|strstr|strtok|strxfrm\r\n$ git grep -E $(man 3 string | tr \" *()<>.,\" \"\\n\" | grep ^str | \\\r\n      grep -v ^string | sort -u | tr \"\\n\" \"|\" | sed 's/|$//g') -- \"*.cpp\" \"*.h\" \\\r\n      \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\"\r\nsrc/base58.cpp:    int size = strlen(psz) * 733 / 1000 + 1; // log(58) / log(256), rounded up.\r\nsrc/chainparams.cpp:    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\r\nsrc/core_read.cpp:            if (strcmp(name, \"OP_UNKNOWN\") == 0)\r\nsrc/net.cpp:            if (strcmp(ifa->ifa_name, \"lo\") == 0) continue;\r\nsrc/net.cpp:            if (strcmp(ifa->ifa_name, \"lo0\") == 0) continue;\r\nsrc/protocol.cpp:    strncpy(pchCommand, pszCommand, COMMAND_SIZE);\r\nsrc/randomenv.cpp:        hasher.Write((const unsigned char*)path, strlen(path) + 1);\r\nsrc/randomenv.cpp:    hasher.Write((const unsigned char*)COMPILER_VERSION, strlen(COMPILER_VERSION) + 1);\r\nsrc/randomenv.cpp:    if (platform_str) hasher.Write((const unsigned char*)platform_str, strlen(platform_str) + 1);\r\nsrc/randomenv.cpp:    if (exec_str) hasher.Write((const unsigned char*)exec_str, strlen(exec_str) + 1);\r\nsrc/randomenv.cpp:        hasher.Write((const unsigned char*)ifit->ifa_name, strlen(ifit->ifa_name) + 1);\r\nsrc/randomenv.cpp:        hasher.Write((const unsigned char*)&name.sysname, strlen(name.sysname) + 1);\r\nsrc/randomenv.cpp:        hasher.Write((const unsigned char*)&name.nodename, strlen(name.nodename) + 1);\r\nsrc/randomenv.cpp:        hasher.Write((const unsigned char*)&name.release, strlen(name.release) + 1);\r\nsrc/randomenv.cpp:        hasher.Write((const unsigned char*)&name.version, strlen(name.version) + 1);\r\nsrc/randomenv.cpp:        hasher.Write((const unsigned char*)&name.machine, strlen(name.machine) + 1);\r\nsrc/randomenv.cpp:            hasher.Write((const unsigned char*)environ[i], strlen(environ[i]));\r\nsrc/rest.cpp:        if (strlen(rf_names[i].name) > 0) {\r\nsrc/test/serialize_tests.cpp:                strcmp(charstrval, rhs.charstrval) == 0 && \\\r\nsrc/test/serialize_tests.cpp:    return strcmp(expectedException.what(), ex.what()) == 0;\r\nsrc/test/streams_tests.cpp:        BOOST_CHECK(strstr(e.what(),\r\nsrc/test/streams_tests.cpp:        BOOST_CHECK(strstr(e.what(),\r\nsrc/test/streams_tests.cpp:        BOOST_CHECK(strstr(e.what(),\r\nsrc/util/strencodings.cpp:    val.reserve(strlen(p));\r\nsrc/util/strencodings.cpp:    val.reserve(strlen(p));\r\nsrc/util/string.h:    return str.size() == strlen(str.c_str());\r\nsrc/util/system.cpp:    if (pszHome == nullptr || strlen(pszHome) == 0)\r\nsrc/wallet/db.cpp:    fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\r\nsrc/wallet/db.cpp:    bool fCreate = strchr(pszMode, 'c') != nullptr;\r\nsrc/wallet/db.cpp:                                strncmp(ssKey.data(), pszSkip, std::min(ssKey.size(), strlen(pszSkip))) == 0)\r\nsrc/wallet/db.cpp:                            if (strncmp(ssKey.data(), \"\\x07version\", 8) == 0) {\r\nsrc/zmq/zmqpublishnotifier.cpp:    int rc = zmq_send_multipart(psocket, command, strlen(command), data, size, msgseq, (size_t)sizeof(uint32_t), nullptr);\r\n```",
      "created_at" : "2020-03-17T22:38:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18367#issuecomment-600334783",
      "id" : 600334783,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18367",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDMzNDc4Mw==",
      "updated_at" : "2020-03-17T23:08:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600334783",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
