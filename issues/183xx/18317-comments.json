[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #16463 ([BIP 174] Implement serialization support for GLOBAL_XPUB field. by achow101)\n* #14053 (Add address-based index (attempt 4?) by marcinja)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-03-11T17:43:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18317#issuecomment-597773325",
      "id" : 597773325,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18317",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5Nzc3MzMyNQ==",
      "updated_at" : "2020-03-11T17:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597773325",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18317#discussion_r398625457"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18317"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398625457"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert everything except wallet/qt to new serialization\" (4a185971f495ab89d869a4744d36aa1a8c9aea3f)\r\n\r\nIs it safe to drop the Init call here? It seems needed to avoid leaving nTime uninitialized if READWRITE(obj.nTime) is skipped below.\r\n\r\nI was experimenting a little bit with how to be able to bring back `if (ser_action.ForRead())` ability in the new framework now that the object type can vary and may be const.\r\n\r\nOne option might be to have `SER_READ` / `SER_WRITE` macros that contain code (similar to `WITH_LOCK`) and only execute when reading or writing:\r\n\r\n```diff\r\n--- a/src/protocol.h\r\n+++ b/src/protocol.h\r\n@@ -316,6 +316,7 @@ public:\r\n \r\n     SERIALIZE_METHODS(CAddress, obj)\r\n     {\r\n+        SER_READ(obj, obj.Init());\r\n         int nVersion = s.GetVersion();\r\n         if (s.GetType() & SER_DISK) {\r\n             READWRITE(nVersion);\r\ndiff --git a/src/serialize.h b/src/serialize.h\r\nindex 43f35f7ebe6..ae6a028ce97 100644\r\n--- a/src/serialize.h\r\n+++ b/src/serialize.h\r\n@@ -179,6 +179,7 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\r\n \r\n #define READWRITE(...) (::SerReadWriteMany(s, ser_action, __VA_ARGS__))\r\n #define READWRITEAS(type, obj) (::SerReadWriteMany(s, ser_action, ReadWriteAsHelper<type>(obj)))\r\n+#define SER_READ(obj, code) ::SerRead(s, ser_action, obj, [&](Stream& s, typename std::remove_const<Type>::type& obj) { code; })\r\n \r\n /**\r\n  * Implement three methods for serializable objects. These are actually wrappers over\r\n@@ -1089,6 +1090,17 @@ inline void SerReadWriteMany(Stream& s, CSerActionUnserialize ser_action, Args&&\r\n     ::UnserializeMany(s, args...);\r\n }\r\n \r\n+template<typename Stream, typename Type, typename Fn>\r\n+inline void SerRead(Stream& s, CSerActionSerialize ser_action, Type&&, Fn&&)\r\n+{\r\n+}\r\n+\r\n+template<typename Stream, typename Type, typename Fn>\r\n+inline void SerRead(Stream& s, CSerActionUnserialize ser_action, Type&& obj, Fn&& fn)\r\n+{\r\n+    fn(s, std::forward<Type>(obj));\r\n+}\r\n+\r\n template<typename I>\r\n inline void WriteVarInt(CSizeComputer &s, I n)\r\n {\r\n```",
      "commit_id" : "4a185971f495ab89d869a4744d36aa1a8c9aea3f",
      "created_at" : "2020-03-26T14:40:22Z",
      "diff_hunk" : "@@ -323,23 +314,18 @@ class CAddress : public CService\n \n     void Init();\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+    SERIALIZE_METHODS(CAddress, obj)\n     {\n-        if (ser_action.ForRead())\n-            Init();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18317#discussion_r398625457",
      "id" : 398625457,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNTQ1Nw==",
      "original_commit_id" : "4a185971f495ab89d869a4744d36aa1a8c9aea3f",
      "original_position" : 29,
      "path" : "src/protocol.h",
      "position" : 29,
      "pull_request_review_id" : 382075974,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18317",
      "updated_at" : "2020-03-26T19:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398625457",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18317#discussion_r398770856"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18317"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398770856"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add ConvertFormatter\" (7c5a0c7c53c7cec8f4f6d074d90c5e8988f61c15)\r\n\r\nI think it would be better not to have this class, or maybe expose it less widely:\r\n\r\n- It only seems to be used one place currently, and I think CustomUintFormatter could be used there instead.\r\n- It seems easy to confuse with `READWRITEAS`, and not obvious when you'd use `READWRITEAS` vs `READWRITE` with `ConvertFormatter`\r\n- Haven't thought about it too much, but just based on how this is implemented, there could be cases where using it would do unexpected temporary creation or copying or derived-base truncation.",
      "commit_id" : "4a185971f495ab89d869a4744d36aa1a8c9aea3f",
      "created_at" : "2020-03-26T17:47:44Z",
      "diff_hunk" : "@@ -540,6 +540,26 @@ struct CustomUintFormatter\n     }\n };\n \n+/** Formatter that (de)serializes a type as another type it's convertible to/from. */\n+template<typename F> struct ConvertFormatter",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18317#discussion_r398770856",
      "id" : 398770856,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3MDg1Ng==",
      "original_commit_id" : "7c5a0c7c53c7cec8f4f6d074d90c5e8988f61c15",
      "original_position" : 5,
      "path" : "src/serialize.h",
      "position" : 90,
      "pull_request_review_id" : 382075974,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18317",
      "updated_at" : "2020-03-26T19:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398770856",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18317#discussion_r398817741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18317"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398817741"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert everything except wallet/qt to new serialization\" (4a185971f495ab89d869a4744d36aa1a8c9aea3f)\r\n\r\nLast commit is mostly repetitive changes of this form. Maybe a big regex in a scripted diff could be used to do the boilerplate subtitutions in a separate commit, so the more complicated changes here stand out.",
      "commit_id" : "4a185971f495ab89d869a4744d36aa1a8c9aea3f",
      "created_at" : "2020-03-26T18:57:18Z",
      "diff_hunk" : "@@ -66,15 +66,7 @@ class CBloomFilter\n     CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweak, unsigned char nFlagsIn);\n     CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vData);\n-        READWRITE(nHashFuncs);\n-        READWRITE(nTweak);\n-        READWRITE(nFlags);\n-    }\n+    SERIALIZE_METHODS(CBloomFilter, obj) { READWRITE(obj.vData, obj.nHashFuncs, obj.nTweak, obj.nFlags); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18317#discussion_r398817741",
      "id" : 398817741,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNzc0MQ==",
      "original_commit_id" : "4a185971f495ab89d869a4744d36aa1a8c9aea3f",
      "original_position" : 13,
      "path" : "src/bloom.h",
      "position" : 13,
      "pull_request_review_id" : 382075974,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18317",
      "updated_at" : "2020-03-26T19:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398817741",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18317#discussion_r398821936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18317"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398821936"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert everything except wallet/qt to new serialization\" (4a185971f495ab89d869a4744d36aa1a8c9aea3f)\r\n\r\nI suggested dropping ConvertFormatter in another comment for a few reasons. CustomUintFormatter could be used instead here if extended to support enums:\r\n\r\n```diff\r\ndiff --git a/src/protocol.h b/src/protocol.h\r\nindex c1a21264705..901471e110d 100644\r\n--- a/src/protocol.h\r\n+++ b/src/protocol.h\r\n@@ -324,7 +324,7 @@ public:\r\n             (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH))) {\r\n             READWRITE(obj.nTime);\r\n         }\r\n-        READWRITE(Using<ConvertFormatter<uint64_t>>(obj.nServices));\r\n+        READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\r\n         READWRITEAS(CService, obj);\r\n     }\r\n \r\ndiff --git a/src/serialize.h b/src/serialize.h\r\nindex 51d270d7976..718bdea90a6 100644\r\n--- a/src/serialize.h\r\n+++ b/src/serialize.h\r\n@@ -527,14 +527,15 @@ struct CustomUintFormatter\r\n \r\n     template <typename Stream, typename I> void Unser(Stream& s, I& v)\r\n     {\r\n-        static_assert(std::numeric_limits<I>::max() >= MAX && std::numeric_limits<I>::min() <= 0, \"CustomUintFormatter type too small\");\r\n+        using U = typename std::conditional<std::is_enum<I>::value, std::underlying_type<I>, std::common_type<I>>::type::type;\r\n+        static_assert(std::numeric_limits<U>::max() >= MAX && std::numeric_limits<U>::min() <= 0, \"Assigned type too small\");\r\n         uint64_t raw = 0;\r\n         if (BigEndian) {\r\n             s.read(((char*)&raw) + 8 - Bytes, Bytes);\r\n-            v = be64toh(raw);\r\n+            v = static_cast<I>(be64toh(raw));\r\n         } else {\r\n             s.read((char*)&raw, Bytes);\r\n-            v = le64toh(raw);\r\n+            v = static_cast<I>(le64toh(raw));\r\n         }\r\n     }\r\n };\r\n```",
      "commit_id" : "4a185971f495ab89d869a4744d36aa1a8c9aea3f",
      "created_at" : "2020-03-26T19:04:02Z",
      "diff_hunk" : "@@ -323,23 +314,18 @@ class CAddress : public CService\n \n     void Init();\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+    SERIALIZE_METHODS(CAddress, obj)\n     {\n-        if (ser_action.ForRead())\n-            Init();\n         int nVersion = s.GetVersion();\n-        if (s.GetType() & SER_DISK)\n+        if (s.GetType() & SER_DISK) {\n             READWRITE(nVersion);\n+        }\n         if ((s.GetType() & SER_DISK) ||\n-            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH)))\n-            READWRITE(nTime);\n-        uint64_t nServicesInt = nServices;\n-        READWRITE(nServicesInt);\n-        nServices = static_cast<ServiceFlags>(nServicesInt);\n-        READWRITEAS(CService, *this);\n+            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            READWRITE(obj.nTime);\n+        }\n+        READWRITE(Using<ConvertFormatter<uint64_t>>(obj.nServices));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18317#discussion_r398821936",
      "id" : 398821936,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyMTkzNg==",
      "original_commit_id" : "4a185971f495ab89d869a4744d36aa1a8c9aea3f",
      "original_position" : 45,
      "path" : "src/protocol.h",
      "position" : 45,
      "pull_request_review_id" : 382075974,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18317",
      "updated_at" : "2020-03-26T19:17:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398821936",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18317#discussion_r399518137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18317"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399518137"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert merkleblock to new serialization\" (25bfbbeb63eca1f1c8852a8a08844069d9e06776)\r\n\r\nMaybe better to keep constructor below private and just declare SERIALIZE_METHODS before it, assuming there's a valid reason for the constructor to be private.",
      "commit_id" : "4a185971f495ab89d869a4744d36aa1a8c9aea3f",
      "created_at" : "2020-03-27T20:21:13Z",
      "diff_hunk" : "@@ -157,17 +161,10 @@ class CMerkleBlock\n \n     CMerkleBlock() {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(txn);\n-    }\n-\n-private:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18317#discussion_r399518137",
      "id" : 399518137,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxODEzNw==",
      "original_commit_id" : "25bfbbeb63eca1f1c8852a8a08844069d9e06776",
      "original_position" : 62,
      "path" : "src/merkleblock.h",
      "position" : 62,
      "pull_request_review_id" : 383174750,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18317",
      "updated_at" : "2020-03-27T20:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399518137",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
