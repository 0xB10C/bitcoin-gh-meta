[
   {
      "author_association" : "NONE",
      "body" : "@practicalswift This is very informative. ð \r\n\r\nAfter reading https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md, I was still a bit unclear what that `AFL` really is. Maybe add http://lcamtuf.coredump.cx/afl/ URL to make it super clear that it's just another fuzzer (\"american fuzzy lop\")?\r\n",
      "created_at" : "2020-03-13T14:22:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#issuecomment-598744620",
      "id" : 598744620,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18342",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5ODc0NDYyMA==",
      "updated_at" : "2020-03-13T14:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598744620",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392280515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392280515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "should mention that this only works on linux",
      "commit_id" : "8ee0f3b47b6a05b782a4a4f78f4dcaf56507c707",
      "created_at" : "2020-03-13T14:58:29Z",
      "diff_hunk" : "@@ -1,9 +1,98 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n+## Quickstart guide\n+\n+To quickly get started with fuzzing Bitcoin Core:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392280515",
      "id" : 392280515,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MDUxNQ==",
      "original_commit_id" : "1ef9506b7a05ff3fb9e107db8502a314e39d0ef7",
      "original_position" : 9,
      "path" : "doc/fuzzing.md",
      "position" : 7,
      "pull_request_review_id" : 374368737,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342",
      "updated_at" : "2020-03-14T13:03:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392280515",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392283012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392283012"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Pretty sure that throwing arbitrary bytes at `bash` will lead to random code execution; E.g. sends all your bitcoins to whoever created the seed",
      "commit_id" : "8ee0f3b47b6a05b782a4a4f78f4dcaf56507c707",
      "created_at" : "2020-03-13T15:02:31Z",
      "diff_hunk" : "@@ -1,9 +1,98 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n+## Quickstart guide\n+\n+To quickly get started with fuzzing Bitcoin Core:\n+\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ ./autogen.sh\n+$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n+$ make\n+$ src/test/fuzz/process_message\n+INFO: Seed: 1099769803\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e6cd236ab8, 0x55e6cd29e3a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e6cd29e3a8,0x55e6cd917288),\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#41     NEW    cov: 96 ft: 98 corp: 3/5b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 InsertByte-EraseBytes-ChangeBinInt-\n+#55     NEW    cov: 96 ft: 100 corp: 4/8b lim: 4 exec/s: 0 rss: 150Mb L: 3/3 MS: 4 ChangeBit-ChangeByte-ShuffleBytes-CrossOver-\n+#78     REDUCE cov: 96 ft: 100 corp: 4/7b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 CrossOver-ShuffleBytes-EraseBytes-\n+#154    REDUCE cov: 96 ft: 100 corp: 4/6b lim: 4 exec/s: 0 rss: 150Mb L: 1/2 MS: 1 EraseBytes-\n+#399    NEW    cov: 101 ft: 105 corp: 5/11b lim: 6 exec/s: 0 rss: 150Mb L: 5/5 MS: 5 CrossOver-CrossOver-ShuffleBytes-CopyPart-EraseBytes-\n+# abort using ^C\n+```\n+\n+[`process_message`](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/process_message.cpp) is a fuzzing harness for the [`ProcessMessage(...)` function (`net_processing`)](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp). The available fuzzing harnesses are found in [`src/test/fuzz/`](https://github.com/bitcoin/bitcoin/tree/master/src/test/fuzz).\n+\n+The fuzzer will output `NEW` every time it has created a test input that covers new areas of the code under test. For more information on how to interpret the fuzzer output, see the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html).\n+\n+If you specify a corpus directory then any new coverage increasing inputs will be saved there:\n+\n+```sh\n+$ mkdir -p process_message-seeded-from-thin-air/\n+$ src/test/fuzz/process_message process_message-seeded-from-thin-air/\n+INFO: Seed: 840522292\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),\n+INFO:        0 files found in process_message-seeded-from-thin-air/\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#4      NEW    cov: 96 ft: 98 corp: 3/7b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 1 CrossOver-\n+#21     NEW    cov: 96 ft: 100 corp: 4/11b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 2 ChangeBit-CrossOver-\n+#324    NEW    cov: 101 ft: 105 corp: 5/12b lim: 6 exec/s: 0 rss: 150Mb L: 6/6 MS: 5 CrossOver-ChangeBit-CopyPart-ChangeBit-ChangeBinInt-\n+#1239   REDUCE cov: 102 ft: 106 corp: 6/24b lim: 14 exec/s: 0 rss: 150Mb L: 13/13 MS: 5 ChangeBit-CrossOver-EraseBytes-ChangeBit-InsertRepeatedBytes-\n+#1272   REDUCE cov: 102 ft: 106 corp: 6/23b lim: 14 exec/s: 0 rss: 150Mb L: 12/12 MS: 3 ChangeBinInt-ChangeBit-EraseBytes-\n+        NEW_FUNC[1/677]: 0x55e11f456690 in std::_Function_base::~_Function_base() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:255\n+        NEW_FUNC[2/677]: 0x55e11f465800 in CDataStream::CDataStream(std::vector<unsigned char, std::allocator<unsigned char> > const&, int, int) src/./streams.h:248\n+#2125   REDUCE cov: 4820 ft: 4867 corp: 7/29b lim: 21 exec/s: 0 rss: 155Mb L: 6/12 MS: 2 CopyPart-CMP- DE: \"block\"-\n+        NEW_FUNC[1/9]: 0x55e11f64d790 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::~_Rb_tree() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:972\n+        NEW_FUNC[2/9]: 0x55e11f64d870 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::_M_erase(std::_Rb_tree_node<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >*) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:1875\n+#2228   NEW    cov: 4898 ft: 4971 corp: 8/35b lim: 21 exec/s: 0 rss: 156Mb L: 6/12 MS: 3 EraseBytes-CopyPart-PersAutoDict- DE: \"block\"-\n+        NEW_FUNC[1/5]: 0x55e11f46df70 in std::enable_if<__and_<std::allocator_traits<zero_after_free_allocator<char> >::__construct_helper<char, unsigned char const&>::type>::value, void>::type std::allocator_traits<zero_after_free_allocator<char> >::_S_construct<char, unsigned char const&>(zero_after_free_allocator<char>&, char*, unsigned char const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:243\n+        NEW_FUNC[2/5]: 0x55e11f477390 in std::vector<unsigned char, std::allocator<unsigned char> >::data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:1056\n+#2456   NEW    cov: 4933 ft: 5042 corp: 9/55b lim: 21 exec/s: 0 rss: 160Mb L: 20/20 MS: 3 ChangeByte-InsertRepeatedBytes-PersAutoDict- DE: \"block\"-\n+#2467   NEW    cov: 4933 ft: 5043 corp: 10/76b lim: 21 exec/s: 0 rss: 161Mb L: 21/21 MS: 1 InsertByte-\n+#4215   NEW    cov: 4941 ft: 5129 corp: 17/205b lim: 29 exec/s: 4215 rss: 350Mb L: 29/29 MS: 5 InsertByte-ChangeBit-CopyPart-InsertRepeatedBytes-CrossOver-\n+#4567   REDUCE cov: 4941 ft: 5129 corp: 17/204b lim: 29 exec/s: 4567 rss: 404Mb L: 24/29 MS: 2 ChangeByte-EraseBytes-\n+#6642   NEW    cov: 4941 ft: 5138 corp: 18/244b lim: 43 exec/s: 2214 rss: 450Mb L: 43/43 MS: 3 CopyPart-CMP-CrossOver- DE: \"verack\"-\n+# abort using ^C after fuzzing a few seconds\n+$ ls process_message-seeded-from-thin-air/\n+349ac589fc66a09abc0b72bb4ae445a7a19e2cd8 4df479f1f421f2ea64b383cd4919a272604087a7\n+a640312c98dcc55d6744730c33e41c5168c55f09 b135de16e4709558c0797c15f86046d31c5d86d7\n+c000f7b41b05139de8b63f4cbf7d1ad4c6e2aa7f fc52cc00ec1eb1c08470e69f809ae4993fa70082\n+$ cat -v process_message-seeded-from-thin-air/349ac589fc66a09abc0b72bb4ae445a7a19e2cd8",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392283012",
      "id" : 392283012,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MzAxMg==",
      "original_commit_id" : "1ef9506b7a05ff3fb9e107db8502a314e39d0ef7",
      "original_position" : 73,
      "path" : "doc/fuzzing.md",
      "position" : null,
      "pull_request_review_id" : 374368737,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342",
      "updated_at" : "2020-03-14T13:03:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392283012",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392285297"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392285297"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure I follow at all TBH. Who would throw arbitrary bytes at `bash` and why? :)",
      "commit_id" : "8ee0f3b47b6a05b782a4a4f78f4dcaf56507c707",
      "created_at" : "2020-03-13T15:06:13Z",
      "diff_hunk" : "@@ -1,9 +1,98 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n+## Quickstart guide\n+\n+To quickly get started with fuzzing Bitcoin Core:\n+\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ ./autogen.sh\n+$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n+$ make\n+$ src/test/fuzz/process_message\n+INFO: Seed: 1099769803\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e6cd236ab8, 0x55e6cd29e3a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e6cd29e3a8,0x55e6cd917288),\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#41     NEW    cov: 96 ft: 98 corp: 3/5b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 InsertByte-EraseBytes-ChangeBinInt-\n+#55     NEW    cov: 96 ft: 100 corp: 4/8b lim: 4 exec/s: 0 rss: 150Mb L: 3/3 MS: 4 ChangeBit-ChangeByte-ShuffleBytes-CrossOver-\n+#78     REDUCE cov: 96 ft: 100 corp: 4/7b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 CrossOver-ShuffleBytes-EraseBytes-\n+#154    REDUCE cov: 96 ft: 100 corp: 4/6b lim: 4 exec/s: 0 rss: 150Mb L: 1/2 MS: 1 EraseBytes-\n+#399    NEW    cov: 101 ft: 105 corp: 5/11b lim: 6 exec/s: 0 rss: 150Mb L: 5/5 MS: 5 CrossOver-CrossOver-ShuffleBytes-CopyPart-EraseBytes-\n+# abort using ^C\n+```\n+\n+[`process_message`](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/process_message.cpp) is a fuzzing harness for the [`ProcessMessage(...)` function (`net_processing`)](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp). The available fuzzing harnesses are found in [`src/test/fuzz/`](https://github.com/bitcoin/bitcoin/tree/master/src/test/fuzz).\n+\n+The fuzzer will output `NEW` every time it has created a test input that covers new areas of the code under test. For more information on how to interpret the fuzzer output, see the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html).\n+\n+If you specify a corpus directory then any new coverage increasing inputs will be saved there:\n+\n+```sh\n+$ mkdir -p process_message-seeded-from-thin-air/\n+$ src/test/fuzz/process_message process_message-seeded-from-thin-air/\n+INFO: Seed: 840522292\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),\n+INFO:        0 files found in process_message-seeded-from-thin-air/\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#4      NEW    cov: 96 ft: 98 corp: 3/7b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 1 CrossOver-\n+#21     NEW    cov: 96 ft: 100 corp: 4/11b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 2 ChangeBit-CrossOver-\n+#324    NEW    cov: 101 ft: 105 corp: 5/12b lim: 6 exec/s: 0 rss: 150Mb L: 6/6 MS: 5 CrossOver-ChangeBit-CopyPart-ChangeBit-ChangeBinInt-\n+#1239   REDUCE cov: 102 ft: 106 corp: 6/24b lim: 14 exec/s: 0 rss: 150Mb L: 13/13 MS: 5 ChangeBit-CrossOver-EraseBytes-ChangeBit-InsertRepeatedBytes-\n+#1272   REDUCE cov: 102 ft: 106 corp: 6/23b lim: 14 exec/s: 0 rss: 150Mb L: 12/12 MS: 3 ChangeBinInt-ChangeBit-EraseBytes-\n+        NEW_FUNC[1/677]: 0x55e11f456690 in std::_Function_base::~_Function_base() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:255\n+        NEW_FUNC[2/677]: 0x55e11f465800 in CDataStream::CDataStream(std::vector<unsigned char, std::allocator<unsigned char> > const&, int, int) src/./streams.h:248\n+#2125   REDUCE cov: 4820 ft: 4867 corp: 7/29b lim: 21 exec/s: 0 rss: 155Mb L: 6/12 MS: 2 CopyPart-CMP- DE: \"block\"-\n+        NEW_FUNC[1/9]: 0x55e11f64d790 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::~_Rb_tree() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:972\n+        NEW_FUNC[2/9]: 0x55e11f64d870 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::_M_erase(std::_Rb_tree_node<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >*) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:1875\n+#2228   NEW    cov: 4898 ft: 4971 corp: 8/35b lim: 21 exec/s: 0 rss: 156Mb L: 6/12 MS: 3 EraseBytes-CopyPart-PersAutoDict- DE: \"block\"-\n+        NEW_FUNC[1/5]: 0x55e11f46df70 in std::enable_if<__and_<std::allocator_traits<zero_after_free_allocator<char> >::__construct_helper<char, unsigned char const&>::type>::value, void>::type std::allocator_traits<zero_after_free_allocator<char> >::_S_construct<char, unsigned char const&>(zero_after_free_allocator<char>&, char*, unsigned char const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:243\n+        NEW_FUNC[2/5]: 0x55e11f477390 in std::vector<unsigned char, std::allocator<unsigned char> >::data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:1056\n+#2456   NEW    cov: 4933 ft: 5042 corp: 9/55b lim: 21 exec/s: 0 rss: 160Mb L: 20/20 MS: 3 ChangeByte-InsertRepeatedBytes-PersAutoDict- DE: \"block\"-\n+#2467   NEW    cov: 4933 ft: 5043 corp: 10/76b lim: 21 exec/s: 0 rss: 161Mb L: 21/21 MS: 1 InsertByte-\n+#4215   NEW    cov: 4941 ft: 5129 corp: 17/205b lim: 29 exec/s: 4215 rss: 350Mb L: 29/29 MS: 5 InsertByte-ChangeBit-CopyPart-InsertRepeatedBytes-CrossOver-\n+#4567   REDUCE cov: 4941 ft: 5129 corp: 17/204b lim: 29 exec/s: 4567 rss: 404Mb L: 24/29 MS: 2 ChangeByte-EraseBytes-\n+#6642   NEW    cov: 4941 ft: 5138 corp: 18/244b lim: 43 exec/s: 2214 rss: 450Mb L: 43/43 MS: 3 CopyPart-CMP-CrossOver- DE: \"verack\"-\n+# abort using ^C after fuzzing a few seconds\n+$ ls process_message-seeded-from-thin-air/\n+349ac589fc66a09abc0b72bb4ae445a7a19e2cd8 4df479f1f421f2ea64b383cd4919a272604087a7\n+a640312c98dcc55d6744730c33e41c5168c55f09 b135de16e4709558c0797c15f86046d31c5d86d7\n+c000f7b41b05139de8b63f4cbf7d1ad4c6e2aa7f fc52cc00ec1eb1c08470e69f809ae4993fa70082\n+$ cat -v process_message-seeded-from-thin-air/349ac589fc66a09abc0b72bb4ae445a7a19e2cd8",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392285297",
      "id" : 392285297,
      "in_reply_to_id" : 392283012,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NTI5Nw==",
      "original_commit_id" : "1ef9506b7a05ff3fb9e107db8502a314e39d0ef7",
      "original_position" : 73,
      "path" : "doc/fuzzing.md",
      "position" : null,
      "pull_request_review_id" : 374374922,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342",
      "updated_at" : "2020-03-14T13:03:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392285297",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392289102"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392289102"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have only tested this under Linux. What part is Linux specific? I would assume these instructions should work for all users with a working and not too ancient Clang/LLVM installation?\r\n\r\nAre you referring to the \"macOS hints for libFuzzer\" instructions later on in the document?",
      "commit_id" : "8ee0f3b47b6a05b782a4a4f78f4dcaf56507c707",
      "created_at" : "2020-03-13T15:12:16Z",
      "diff_hunk" : "@@ -1,9 +1,98 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n+## Quickstart guide\n+\n+To quickly get started with fuzzing Bitcoin Core:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392289102",
      "id" : 392289102,
      "in_reply_to_id" : 392280515,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4OTEwMg==",
      "original_commit_id" : "1ef9506b7a05ff3fb9e107db8502a314e39d0ef7",
      "original_position" : 9,
      "path" : "doc/fuzzing.md",
      "position" : 7,
      "pull_request_review_id" : 374381226,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342",
      "updated_at" : "2020-03-14T13:03:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392289102",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392295263"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392295263"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://unix.stackexchange.com/questions/283732/safe-execution-of-cat-command-without-executing-arbitrary-code",
      "commit_id" : "8ee0f3b47b6a05b782a4a4f78f4dcaf56507c707",
      "created_at" : "2020-03-13T15:21:42Z",
      "diff_hunk" : "@@ -1,9 +1,98 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n+## Quickstart guide\n+\n+To quickly get started with fuzzing Bitcoin Core:\n+\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ ./autogen.sh\n+$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n+$ make\n+$ src/test/fuzz/process_message\n+INFO: Seed: 1099769803\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e6cd236ab8, 0x55e6cd29e3a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e6cd29e3a8,0x55e6cd917288),\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#41     NEW    cov: 96 ft: 98 corp: 3/5b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 InsertByte-EraseBytes-ChangeBinInt-\n+#55     NEW    cov: 96 ft: 100 corp: 4/8b lim: 4 exec/s: 0 rss: 150Mb L: 3/3 MS: 4 ChangeBit-ChangeByte-ShuffleBytes-CrossOver-\n+#78     REDUCE cov: 96 ft: 100 corp: 4/7b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 CrossOver-ShuffleBytes-EraseBytes-\n+#154    REDUCE cov: 96 ft: 100 corp: 4/6b lim: 4 exec/s: 0 rss: 150Mb L: 1/2 MS: 1 EraseBytes-\n+#399    NEW    cov: 101 ft: 105 corp: 5/11b lim: 6 exec/s: 0 rss: 150Mb L: 5/5 MS: 5 CrossOver-CrossOver-ShuffleBytes-CopyPart-EraseBytes-\n+# abort using ^C\n+```\n+\n+[`process_message`](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/process_message.cpp) is a fuzzing harness for the [`ProcessMessage(...)` function (`net_processing`)](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp). The available fuzzing harnesses are found in [`src/test/fuzz/`](https://github.com/bitcoin/bitcoin/tree/master/src/test/fuzz).\n+\n+The fuzzer will output `NEW` every time it has created a test input that covers new areas of the code under test. For more information on how to interpret the fuzzer output, see the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html).\n+\n+If you specify a corpus directory then any new coverage increasing inputs will be saved there:\n+\n+```sh\n+$ mkdir -p process_message-seeded-from-thin-air/\n+$ src/test/fuzz/process_message process_message-seeded-from-thin-air/\n+INFO: Seed: 840522292\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),\n+INFO:        0 files found in process_message-seeded-from-thin-air/\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#4      NEW    cov: 96 ft: 98 corp: 3/7b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 1 CrossOver-\n+#21     NEW    cov: 96 ft: 100 corp: 4/11b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 2 ChangeBit-CrossOver-\n+#324    NEW    cov: 101 ft: 105 corp: 5/12b lim: 6 exec/s: 0 rss: 150Mb L: 6/6 MS: 5 CrossOver-ChangeBit-CopyPart-ChangeBit-ChangeBinInt-\n+#1239   REDUCE cov: 102 ft: 106 corp: 6/24b lim: 14 exec/s: 0 rss: 150Mb L: 13/13 MS: 5 ChangeBit-CrossOver-EraseBytes-ChangeBit-InsertRepeatedBytes-\n+#1272   REDUCE cov: 102 ft: 106 corp: 6/23b lim: 14 exec/s: 0 rss: 150Mb L: 12/12 MS: 3 ChangeBinInt-ChangeBit-EraseBytes-\n+        NEW_FUNC[1/677]: 0x55e11f456690 in std::_Function_base::~_Function_base() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:255\n+        NEW_FUNC[2/677]: 0x55e11f465800 in CDataStream::CDataStream(std::vector<unsigned char, std::allocator<unsigned char> > const&, int, int) src/./streams.h:248\n+#2125   REDUCE cov: 4820 ft: 4867 corp: 7/29b lim: 21 exec/s: 0 rss: 155Mb L: 6/12 MS: 2 CopyPart-CMP- DE: \"block\"-\n+        NEW_FUNC[1/9]: 0x55e11f64d790 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::~_Rb_tree() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:972\n+        NEW_FUNC[2/9]: 0x55e11f64d870 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::_M_erase(std::_Rb_tree_node<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >*) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:1875\n+#2228   NEW    cov: 4898 ft: 4971 corp: 8/35b lim: 21 exec/s: 0 rss: 156Mb L: 6/12 MS: 3 EraseBytes-CopyPart-PersAutoDict- DE: \"block\"-\n+        NEW_FUNC[1/5]: 0x55e11f46df70 in std::enable_if<__and_<std::allocator_traits<zero_after_free_allocator<char> >::__construct_helper<char, unsigned char const&>::type>::value, void>::type std::allocator_traits<zero_after_free_allocator<char> >::_S_construct<char, unsigned char const&>(zero_after_free_allocator<char>&, char*, unsigned char const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:243\n+        NEW_FUNC[2/5]: 0x55e11f477390 in std::vector<unsigned char, std::allocator<unsigned char> >::data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:1056\n+#2456   NEW    cov: 4933 ft: 5042 corp: 9/55b lim: 21 exec/s: 0 rss: 160Mb L: 20/20 MS: 3 ChangeByte-InsertRepeatedBytes-PersAutoDict- DE: \"block\"-\n+#2467   NEW    cov: 4933 ft: 5043 corp: 10/76b lim: 21 exec/s: 0 rss: 161Mb L: 21/21 MS: 1 InsertByte-\n+#4215   NEW    cov: 4941 ft: 5129 corp: 17/205b lim: 29 exec/s: 4215 rss: 350Mb L: 29/29 MS: 5 InsertByte-ChangeBit-CopyPart-InsertRepeatedBytes-CrossOver-\n+#4567   REDUCE cov: 4941 ft: 5129 corp: 17/204b lim: 29 exec/s: 4567 rss: 404Mb L: 24/29 MS: 2 ChangeByte-EraseBytes-\n+#6642   NEW    cov: 4941 ft: 5138 corp: 18/244b lim: 43 exec/s: 2214 rss: 450Mb L: 43/43 MS: 3 CopyPart-CMP-CrossOver- DE: \"verack\"-\n+# abort using ^C after fuzzing a few seconds\n+$ ls process_message-seeded-from-thin-air/\n+349ac589fc66a09abc0b72bb4ae445a7a19e2cd8 4df479f1f421f2ea64b383cd4919a272604087a7\n+a640312c98dcc55d6744730c33e41c5168c55f09 b135de16e4709558c0797c15f86046d31c5d86d7\n+c000f7b41b05139de8b63f4cbf7d1ad4c6e2aa7f fc52cc00ec1eb1c08470e69f809ae4993fa70082\n+$ cat -v process_message-seeded-from-thin-air/349ac589fc66a09abc0b72bb4ae445a7a19e2cd8",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392295263",
      "id" : 392295263,
      "in_reply_to_id" : 392283012,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5NTI2Mw==",
      "original_commit_id" : "1ef9506b7a05ff3fb9e107db8502a314e39d0ef7",
      "original_position" : 73,
      "path" : "doc/fuzzing.md",
      "position" : null,
      "pull_request_review_id" : 374388994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342",
      "updated_at" : "2020-03-14T13:03:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392295263",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392296912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392296912"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, I meant to say that this doesn't work on mac, even with the latest clang installed",
      "commit_id" : "8ee0f3b47b6a05b782a4a4f78f4dcaf56507c707",
      "created_at" : "2020-03-13T15:24:30Z",
      "diff_hunk" : "@@ -1,9 +1,98 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n+## Quickstart guide\n+\n+To quickly get started with fuzzing Bitcoin Core:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392296912",
      "id" : 392296912,
      "in_reply_to_id" : 392280515,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5NjkxMg==",
      "original_commit_id" : "1ef9506b7a05ff3fb9e107db8502a314e39d0ef7",
      "original_position" : 9,
      "path" : "doc/fuzzing.md",
      "position" : 7,
      "pull_request_review_id" : 374391102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342",
      "updated_at" : "2020-03-14T13:03:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392296912",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392298362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392298362"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, sorry. I missed the `-v`. Maybe make it more clear that `--show-nonprinting` must be passed when looking at fuzz seeds?",
      "commit_id" : "8ee0f3b47b6a05b782a4a4f78f4dcaf56507c707",
      "created_at" : "2020-03-13T15:26:53Z",
      "diff_hunk" : "@@ -1,9 +1,98 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n+## Quickstart guide\n+\n+To quickly get started with fuzzing Bitcoin Core:\n+\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ ./autogen.sh\n+$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n+$ make\n+$ src/test/fuzz/process_message\n+INFO: Seed: 1099769803\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e6cd236ab8, 0x55e6cd29e3a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e6cd29e3a8,0x55e6cd917288),\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#41     NEW    cov: 96 ft: 98 corp: 3/5b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 InsertByte-EraseBytes-ChangeBinInt-\n+#55     NEW    cov: 96 ft: 100 corp: 4/8b lim: 4 exec/s: 0 rss: 150Mb L: 3/3 MS: 4 ChangeBit-ChangeByte-ShuffleBytes-CrossOver-\n+#78     REDUCE cov: 96 ft: 100 corp: 4/7b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 CrossOver-ShuffleBytes-EraseBytes-\n+#154    REDUCE cov: 96 ft: 100 corp: 4/6b lim: 4 exec/s: 0 rss: 150Mb L: 1/2 MS: 1 EraseBytes-\n+#399    NEW    cov: 101 ft: 105 corp: 5/11b lim: 6 exec/s: 0 rss: 150Mb L: 5/5 MS: 5 CrossOver-CrossOver-ShuffleBytes-CopyPart-EraseBytes-\n+# abort using ^C\n+```\n+\n+[`process_message`](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/process_message.cpp) is a fuzzing harness for the [`ProcessMessage(...)` function (`net_processing`)](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp). The available fuzzing harnesses are found in [`src/test/fuzz/`](https://github.com/bitcoin/bitcoin/tree/master/src/test/fuzz).\n+\n+The fuzzer will output `NEW` every time it has created a test input that covers new areas of the code under test. For more information on how to interpret the fuzzer output, see the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html).\n+\n+If you specify a corpus directory then any new coverage increasing inputs will be saved there:\n+\n+```sh\n+$ mkdir -p process_message-seeded-from-thin-air/\n+$ src/test/fuzz/process_message process_message-seeded-from-thin-air/\n+INFO: Seed: 840522292\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),\n+INFO:        0 files found in process_message-seeded-from-thin-air/\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#4      NEW    cov: 96 ft: 98 corp: 3/7b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 1 CrossOver-\n+#21     NEW    cov: 96 ft: 100 corp: 4/11b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 2 ChangeBit-CrossOver-\n+#324    NEW    cov: 101 ft: 105 corp: 5/12b lim: 6 exec/s: 0 rss: 150Mb L: 6/6 MS: 5 CrossOver-ChangeBit-CopyPart-ChangeBit-ChangeBinInt-\n+#1239   REDUCE cov: 102 ft: 106 corp: 6/24b lim: 14 exec/s: 0 rss: 150Mb L: 13/13 MS: 5 ChangeBit-CrossOver-EraseBytes-ChangeBit-InsertRepeatedBytes-\n+#1272   REDUCE cov: 102 ft: 106 corp: 6/23b lim: 14 exec/s: 0 rss: 150Mb L: 12/12 MS: 3 ChangeBinInt-ChangeBit-EraseBytes-\n+        NEW_FUNC[1/677]: 0x55e11f456690 in std::_Function_base::~_Function_base() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:255\n+        NEW_FUNC[2/677]: 0x55e11f465800 in CDataStream::CDataStream(std::vector<unsigned char, std::allocator<unsigned char> > const&, int, int) src/./streams.h:248\n+#2125   REDUCE cov: 4820 ft: 4867 corp: 7/29b lim: 21 exec/s: 0 rss: 155Mb L: 6/12 MS: 2 CopyPart-CMP- DE: \"block\"-\n+        NEW_FUNC[1/9]: 0x55e11f64d790 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::~_Rb_tree() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:972\n+        NEW_FUNC[2/9]: 0x55e11f64d870 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::_M_erase(std::_Rb_tree_node<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >*) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:1875\n+#2228   NEW    cov: 4898 ft: 4971 corp: 8/35b lim: 21 exec/s: 0 rss: 156Mb L: 6/12 MS: 3 EraseBytes-CopyPart-PersAutoDict- DE: \"block\"-\n+        NEW_FUNC[1/5]: 0x55e11f46df70 in std::enable_if<__and_<std::allocator_traits<zero_after_free_allocator<char> >::__construct_helper<char, unsigned char const&>::type>::value, void>::type std::allocator_traits<zero_after_free_allocator<char> >::_S_construct<char, unsigned char const&>(zero_after_free_allocator<char>&, char*, unsigned char const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:243\n+        NEW_FUNC[2/5]: 0x55e11f477390 in std::vector<unsigned char, std::allocator<unsigned char> >::data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:1056\n+#2456   NEW    cov: 4933 ft: 5042 corp: 9/55b lim: 21 exec/s: 0 rss: 160Mb L: 20/20 MS: 3 ChangeByte-InsertRepeatedBytes-PersAutoDict- DE: \"block\"-\n+#2467   NEW    cov: 4933 ft: 5043 corp: 10/76b lim: 21 exec/s: 0 rss: 161Mb L: 21/21 MS: 1 InsertByte-\n+#4215   NEW    cov: 4941 ft: 5129 corp: 17/205b lim: 29 exec/s: 4215 rss: 350Mb L: 29/29 MS: 5 InsertByte-ChangeBit-CopyPart-InsertRepeatedBytes-CrossOver-\n+#4567   REDUCE cov: 4941 ft: 5129 corp: 17/204b lim: 29 exec/s: 4567 rss: 404Mb L: 24/29 MS: 2 ChangeByte-EraseBytes-\n+#6642   NEW    cov: 4941 ft: 5138 corp: 18/244b lim: 43 exec/s: 2214 rss: 450Mb L: 43/43 MS: 3 CopyPart-CMP-CrossOver- DE: \"verack\"-\n+# abort using ^C after fuzzing a few seconds\n+$ ls process_message-seeded-from-thin-air/\n+349ac589fc66a09abc0b72bb4ae445a7a19e2cd8 4df479f1f421f2ea64b383cd4919a272604087a7\n+a640312c98dcc55d6744730c33e41c5168c55f09 b135de16e4709558c0797c15f86046d31c5d86d7\n+c000f7b41b05139de8b63f4cbf7d1ad4c6e2aa7f fc52cc00ec1eb1c08470e69f809ae4993fa70082\n+$ cat -v process_message-seeded-from-thin-air/349ac589fc66a09abc0b72bb4ae445a7a19e2cd8",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392298362",
      "id" : 392298362,
      "in_reply_to_id" : 392283012,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5ODM2Mg==",
      "original_commit_id" : "1ef9506b7a05ff3fb9e107db8502a314e39d0ef7",
      "original_position" : 73,
      "path" : "doc/fuzzing.md",
      "position" : null,
      "pull_request_review_id" : 374393005,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342",
      "updated_at" : "2020-03-14T13:03:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392298362",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392298481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392298481"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Didn't you see the `-v` flag being passed to `cat`? :)\r\n\r\n```\r\nNAME\r\n       cat - concatenate files and print on the standard output\r\n\r\nSYNOPSIS\r\n       cat [OPTION]... [FILE]...\r\n\r\nDESCRIPTION\r\nâ¦\r\n       -v, --show-nonprinting\r\n              use ^ and M- notation, except for LFD and TAB\r\n```\r\n\r\n:)",
      "commit_id" : "b21d880e25f0849f8cc10d913996999c890d06c2",
      "created_at" : "2020-03-13T15:27:05Z",
      "diff_hunk" : "@@ -1,9 +1,98 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n+## Quickstart guide\n+\n+To quickly get started with fuzzing Bitcoin Core:\n+\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ ./autogen.sh\n+$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n+$ make\n+$ src/test/fuzz/process_message\n+INFO: Seed: 1099769803\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e6cd236ab8, 0x55e6cd29e3a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e6cd29e3a8,0x55e6cd917288),\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#41     NEW    cov: 96 ft: 98 corp: 3/5b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 InsertByte-EraseBytes-ChangeBinInt-\n+#55     NEW    cov: 96 ft: 100 corp: 4/8b lim: 4 exec/s: 0 rss: 150Mb L: 3/3 MS: 4 ChangeBit-ChangeByte-ShuffleBytes-CrossOver-\n+#78     REDUCE cov: 96 ft: 100 corp: 4/7b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 CrossOver-ShuffleBytes-EraseBytes-\n+#154    REDUCE cov: 96 ft: 100 corp: 4/6b lim: 4 exec/s: 0 rss: 150Mb L: 1/2 MS: 1 EraseBytes-\n+#399    NEW    cov: 101 ft: 105 corp: 5/11b lim: 6 exec/s: 0 rss: 150Mb L: 5/5 MS: 5 CrossOver-CrossOver-ShuffleBytes-CopyPart-EraseBytes-\n+# abort using ^C\n+```\n+\n+[`process_message`](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/process_message.cpp) is a fuzzing harness for the [`ProcessMessage(...)` function (`net_processing`)](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp). The available fuzzing harnesses are found in [`src/test/fuzz/`](https://github.com/bitcoin/bitcoin/tree/master/src/test/fuzz).\n+\n+The fuzzer will output `NEW` every time it has created a test input that covers new areas of the code under test. For more information on how to interpret the fuzzer output, see the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html).\n+\n+If you specify a corpus directory then any new coverage increasing inputs will be saved there:\n+\n+```sh\n+$ mkdir -p process_message-seeded-from-thin-air/\n+$ src/test/fuzz/process_message process_message-seeded-from-thin-air/\n+INFO: Seed: 840522292\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),\n+INFO:        0 files found in process_message-seeded-from-thin-air/\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#4      NEW    cov: 96 ft: 98 corp: 3/7b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 1 CrossOver-\n+#21     NEW    cov: 96 ft: 100 corp: 4/11b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 2 ChangeBit-CrossOver-\n+#324    NEW    cov: 101 ft: 105 corp: 5/12b lim: 6 exec/s: 0 rss: 150Mb L: 6/6 MS: 5 CrossOver-ChangeBit-CopyPart-ChangeBit-ChangeBinInt-\n+#1239   REDUCE cov: 102 ft: 106 corp: 6/24b lim: 14 exec/s: 0 rss: 150Mb L: 13/13 MS: 5 ChangeBit-CrossOver-EraseBytes-ChangeBit-InsertRepeatedBytes-\n+#1272   REDUCE cov: 102 ft: 106 corp: 6/23b lim: 14 exec/s: 0 rss: 150Mb L: 12/12 MS: 3 ChangeBinInt-ChangeBit-EraseBytes-\n+        NEW_FUNC[1/677]: 0x55e11f456690 in std::_Function_base::~_Function_base() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:255\n+        NEW_FUNC[2/677]: 0x55e11f465800 in CDataStream::CDataStream(std::vector<unsigned char, std::allocator<unsigned char> > const&, int, int) src/./streams.h:248\n+#2125   REDUCE cov: 4820 ft: 4867 corp: 7/29b lim: 21 exec/s: 0 rss: 155Mb L: 6/12 MS: 2 CopyPart-CMP- DE: \"block\"-\n+        NEW_FUNC[1/9]: 0x55e11f64d790 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::~_Rb_tree() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:972\n+        NEW_FUNC[2/9]: 0x55e11f64d870 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::_M_erase(std::_Rb_tree_node<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >*) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:1875\n+#2228   NEW    cov: 4898 ft: 4971 corp: 8/35b lim: 21 exec/s: 0 rss: 156Mb L: 6/12 MS: 3 EraseBytes-CopyPart-PersAutoDict- DE: \"block\"-\n+        NEW_FUNC[1/5]: 0x55e11f46df70 in std::enable_if<__and_<std::allocator_traits<zero_after_free_allocator<char> >::__construct_helper<char, unsigned char const&>::type>::value, void>::type std::allocator_traits<zero_after_free_allocator<char> >::_S_construct<char, unsigned char const&>(zero_after_free_allocator<char>&, char*, unsigned char const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:243\n+        NEW_FUNC[2/5]: 0x55e11f477390 in std::vector<unsigned char, std::allocator<unsigned char> >::data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:1056\n+#2456   NEW    cov: 4933 ft: 5042 corp: 9/55b lim: 21 exec/s: 0 rss: 160Mb L: 20/20 MS: 3 ChangeByte-InsertRepeatedBytes-PersAutoDict- DE: \"block\"-\n+#2467   NEW    cov: 4933 ft: 5043 corp: 10/76b lim: 21 exec/s: 0 rss: 161Mb L: 21/21 MS: 1 InsertByte-\n+#4215   NEW    cov: 4941 ft: 5129 corp: 17/205b lim: 29 exec/s: 4215 rss: 350Mb L: 29/29 MS: 5 InsertByte-ChangeBit-CopyPart-InsertRepeatedBytes-CrossOver-\n+#4567   REDUCE cov: 4941 ft: 5129 corp: 17/204b lim: 29 exec/s: 4567 rss: 404Mb L: 24/29 MS: 2 ChangeByte-EraseBytes-\n+#6642   NEW    cov: 4941 ft: 5138 corp: 18/244b lim: 43 exec/s: 2214 rss: 450Mb L: 43/43 MS: 3 CopyPart-CMP-CrossOver- DE: \"verack\"-\n+# abort using ^C after fuzzing a few seconds\n+$ ls process_message-seeded-from-thin-air/\n+349ac589fc66a09abc0b72bb4ae445a7a19e2cd8 4df479f1f421f2ea64b383cd4919a272604087a7\n+a640312c98dcc55d6744730c33e41c5168c55f09 b135de16e4709558c0797c15f86046d31c5d86d7\n+c000f7b41b05139de8b63f4cbf7d1ad4c6e2aa7f fc52cc00ec1eb1c08470e69f809ae4993fa70082\n+$ cat -v process_message-seeded-from-thin-air/349ac589fc66a09abc0b72bb4ae445a7a19e2cd8",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392298481",
      "id" : 392298481,
      "in_reply_to_id" : 392283012,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5ODQ4MQ==",
      "original_commit_id" : "1ef9506b7a05ff3fb9e107db8502a314e39d0ef7",
      "original_position" : 73,
      "path" : "doc/fuzzing.md",
      "position" : 63,
      "pull_request_review_id" : 374393160,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342",
      "updated_at" : "2020-03-13T15:55:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392298481",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392303366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392303366"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added:\r\n\r\n```\r\n# macOS X users: If you have problem with this step then make sure to read \"macOS hints for\r\n# libFuzzer\" on https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md#macos-hints-for-libfuzzer\r\n```\r\n\r\nSee below :)",
      "commit_id" : "8ee0f3b47b6a05b782a4a4f78f4dcaf56507c707",
      "created_at" : "2020-03-13T15:35:11Z",
      "diff_hunk" : "@@ -1,9 +1,98 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n+## Quickstart guide\n+\n+To quickly get started with fuzzing Bitcoin Core:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392303366",
      "id" : 392303366,
      "in_reply_to_id" : 392280515,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMzM2Ng==",
      "original_commit_id" : "1ef9506b7a05ff3fb9e107db8502a314e39d0ef7",
      "original_position" : 9,
      "path" : "doc/fuzzing.md",
      "position" : 7,
      "pull_request_review_id" : 374399529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342",
      "updated_at" : "2020-03-14T13:03:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392303366",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18300 (fuzz: Add option to merge input dir to test runner by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-03-13T17:34:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#issuecomment-598835702",
      "id" : 598835702,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18342",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5ODgzNTcwMg==",
      "updated_at" : "2020-03-13T17:34:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598835702",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392586554"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392586554"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea! Replaced `-v` with `--show-nonprinting` to make it super clear :)",
      "commit_id" : "8ee0f3b47b6a05b782a4a4f78f4dcaf56507c707",
      "created_at" : "2020-03-14T12:56:40Z",
      "diff_hunk" : "@@ -1,9 +1,98 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n+## Quickstart guide\n+\n+To quickly get started with fuzzing Bitcoin Core:\n+\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ ./autogen.sh\n+$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n+$ make\n+$ src/test/fuzz/process_message\n+INFO: Seed: 1099769803\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e6cd236ab8, 0x55e6cd29e3a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e6cd29e3a8,0x55e6cd917288),\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#41     NEW    cov: 96 ft: 98 corp: 3/5b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 InsertByte-EraseBytes-ChangeBinInt-\n+#55     NEW    cov: 96 ft: 100 corp: 4/8b lim: 4 exec/s: 0 rss: 150Mb L: 3/3 MS: 4 ChangeBit-ChangeByte-ShuffleBytes-CrossOver-\n+#78     REDUCE cov: 96 ft: 100 corp: 4/7b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 3 CrossOver-ShuffleBytes-EraseBytes-\n+#154    REDUCE cov: 96 ft: 100 corp: 4/6b lim: 4 exec/s: 0 rss: 150Mb L: 1/2 MS: 1 EraseBytes-\n+#399    NEW    cov: 101 ft: 105 corp: 5/11b lim: 6 exec/s: 0 rss: 150Mb L: 5/5 MS: 5 CrossOver-CrossOver-ShuffleBytes-CopyPart-EraseBytes-\n+# abort using ^C\n+```\n+\n+[`process_message`](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/process_message.cpp) is a fuzzing harness for the [`ProcessMessage(...)` function (`net_processing`)](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp). The available fuzzing harnesses are found in [`src/test/fuzz/`](https://github.com/bitcoin/bitcoin/tree/master/src/test/fuzz).\n+\n+The fuzzer will output `NEW` every time it has created a test input that covers new areas of the code under test. For more information on how to interpret the fuzzer output, see the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html).\n+\n+If you specify a corpus directory then any new coverage increasing inputs will be saved there:\n+\n+```sh\n+$ mkdir -p process_message-seeded-from-thin-air/\n+$ src/test/fuzz/process_message process_message-seeded-from-thin-air/\n+INFO: Seed: 840522292\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),\n+INFO:        0 files found in process_message-seeded-from-thin-air/\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#4      NEW    cov: 96 ft: 98 corp: 3/7b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 1 CrossOver-\n+#21     NEW    cov: 96 ft: 100 corp: 4/11b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 2 ChangeBit-CrossOver-\n+#324    NEW    cov: 101 ft: 105 corp: 5/12b lim: 6 exec/s: 0 rss: 150Mb L: 6/6 MS: 5 CrossOver-ChangeBit-CopyPart-ChangeBit-ChangeBinInt-\n+#1239   REDUCE cov: 102 ft: 106 corp: 6/24b lim: 14 exec/s: 0 rss: 150Mb L: 13/13 MS: 5 ChangeBit-CrossOver-EraseBytes-ChangeBit-InsertRepeatedBytes-\n+#1272   REDUCE cov: 102 ft: 106 corp: 6/23b lim: 14 exec/s: 0 rss: 150Mb L: 12/12 MS: 3 ChangeBinInt-ChangeBit-EraseBytes-\n+        NEW_FUNC[1/677]: 0x55e11f456690 in std::_Function_base::~_Function_base() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:255\n+        NEW_FUNC[2/677]: 0x55e11f465800 in CDataStream::CDataStream(std::vector<unsigned char, std::allocator<unsigned char> > const&, int, int) src/./streams.h:248\n+#2125   REDUCE cov: 4820 ft: 4867 corp: 7/29b lim: 21 exec/s: 0 rss: 155Mb L: 6/12 MS: 2 CopyPart-CMP- DE: \"block\"-\n+        NEW_FUNC[1/9]: 0x55e11f64d790 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::~_Rb_tree() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:972\n+        NEW_FUNC[2/9]: 0x55e11f64d870 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::_M_erase(std::_Rb_tree_node<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >*) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:1875\n+#2228   NEW    cov: 4898 ft: 4971 corp: 8/35b lim: 21 exec/s: 0 rss: 156Mb L: 6/12 MS: 3 EraseBytes-CopyPart-PersAutoDict- DE: \"block\"-\n+        NEW_FUNC[1/5]: 0x55e11f46df70 in std::enable_if<__and_<std::allocator_traits<zero_after_free_allocator<char> >::__construct_helper<char, unsigned char const&>::type>::value, void>::type std::allocator_traits<zero_after_free_allocator<char> >::_S_construct<char, unsigned char const&>(zero_after_free_allocator<char>&, char*, unsigned char const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:243\n+        NEW_FUNC[2/5]: 0x55e11f477390 in std::vector<unsigned char, std::allocator<unsigned char> >::data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:1056\n+#2456   NEW    cov: 4933 ft: 5042 corp: 9/55b lim: 21 exec/s: 0 rss: 160Mb L: 20/20 MS: 3 ChangeByte-InsertRepeatedBytes-PersAutoDict- DE: \"block\"-\n+#2467   NEW    cov: 4933 ft: 5043 corp: 10/76b lim: 21 exec/s: 0 rss: 161Mb L: 21/21 MS: 1 InsertByte-\n+#4215   NEW    cov: 4941 ft: 5129 corp: 17/205b lim: 29 exec/s: 4215 rss: 350Mb L: 29/29 MS: 5 InsertByte-ChangeBit-CopyPart-InsertRepeatedBytes-CrossOver-\n+#4567   REDUCE cov: 4941 ft: 5129 corp: 17/204b lim: 29 exec/s: 4567 rss: 404Mb L: 24/29 MS: 2 ChangeByte-EraseBytes-\n+#6642   NEW    cov: 4941 ft: 5138 corp: 18/244b lim: 43 exec/s: 2214 rss: 450Mb L: 43/43 MS: 3 CopyPart-CMP-CrossOver- DE: \"verack\"-\n+# abort using ^C after fuzzing a few seconds\n+$ ls process_message-seeded-from-thin-air/\n+349ac589fc66a09abc0b72bb4ae445a7a19e2cd8 4df479f1f421f2ea64b383cd4919a272604087a7\n+a640312c98dcc55d6744730c33e41c5168c55f09 b135de16e4709558c0797c15f86046d31c5d86d7\n+c000f7b41b05139de8b63f4cbf7d1ad4c6e2aa7f fc52cc00ec1eb1c08470e69f809ae4993fa70082\n+$ cat -v process_message-seeded-from-thin-air/349ac589fc66a09abc0b72bb4ae445a7a19e2cd8",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18342#discussion_r392586554",
      "id" : 392586554,
      "in_reply_to_id" : 392283012,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU4NjU1NA==",
      "original_commit_id" : "1ef9506b7a05ff3fb9e107db8502a314e39d0ef7",
      "original_position" : 73,
      "path" : "doc/fuzzing.md",
      "position" : null,
      "pull_request_review_id" : 374725573,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18342",
      "updated_at" : "2020-03-14T13:03:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392586554",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
