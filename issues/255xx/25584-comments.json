[
   {
      "author_association" : "MEMBER",
      "body" : "My thoughts:\r\n\r\nDefining \"validation\":\r\n- If thinking about \"validation\" as management of chainstate, applying consensus rules to blocks and block transactions, etc., there is definitely no reason for validation to even know what a mempool is.\r\n- If thinking about \"validation\" as what is currently housed in validation.{h, cpp}, it's really block + mempool validation. It houses `MemPoolAccept`, `ChainstateManager` has a reference to the mempool to call ATMP, etc. So it naturally has a dependency on txmempool.\r\n\r\nDefining \"txmempool\":\r\nSimilarly, I think there's a difference between what we think of conceptually vs where code is located.\r\nI think of these as tightly related but distinct mempool \"modules\":\r\n-  `CTxMemPool`  + `CTxMemPoolEntry` data structures which store transactions but aren't responsible for validation, policy, etc.\r\n- Policy logic and constants (e.g. RBF signals, standard script policy flags, default ancestor limits) and runtime settings (e.g. configured min relay feerate)\r\n- Mempool validation, i.e. `MemPoolAccept`\r\n- Fee estimator, which needs to know when transactions enter/leave the mempool\r\n- Miner `BlockAssembler` (i.e. the ancestor feerate algo which operates on the contents of the mempool, not the PoW part)\r\n- Others?\r\n\r\nI'm not sure if this should all be in txmempool.{h,cpp} (my philosophy in #22677 was that it should just have `CTxMemPool`  + `CTxMemPoolEntry` data structures, and thought it was weird to have `removeForReorg()`  calling `CheckSequenceLocks()`, which is why I went with the direction of passing in a callable). In the future, perhaps we want to move towards having a `MempoolManager` responsible for mempool validation, policy settings, fee estimator, miner/block template building, etc. I imagine replacing `ChainstateManager` and `PeerManager`'s references to `CTxMemPool` with a reference to `MempoolManager`.\r\n\r\nSpoke to @dongcarl about mempool vs validation previously (in the context of what it would look like to remove mempool from libbitcoinkernel), and a few ideas were discussed:\r\n- Have mempool be a client of `CValidationInterface`. This would require quite a few changes, including separating `TransactionAddedToMempool()` and `TransactionRemovedFromMempool` into a separate interface and iirc change the interface for transactions removed for block. I think #11775 does this somewhat?\r\n- As a less invasive step in the direction of making validation not require txmempool, pass callbacks to validation functions doing mempool things synchronously.",
      "created_at" : "2022-07-11T09:23:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25584#issuecomment-1180166083",
      "id" : 1180166083,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25584",
      "node_id" : "IC_kwDOABII585GV-fD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1180166083/reactions"
      },
      "updated_at" : "2022-07-11T09:23:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1180166083",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not sure it is possible to come up with a grand plan here, but doesn't hurt to try. Validation code is a big monolith, and mempool code is somewhat monolithic too, so I think any time you can pull pieces of validation code or mempool code out of their respective monoliths into smaller modules which are coherent (block managers, chain states, fee estimators, utxo databases, etc), you are probably doing a good thing. When we see the opportunities to pull things out of `src/validation.cpp` and `src/txmempool.cpp` and move them into smaller files in `src/kernel/`[1], we should generally take them, and I think if we do that, the questions about what should depend on what will be simpler. It's easier to figure out what dependencies should be between small focused modules than big blobby modules.\r\n\r\n[1] Before introduction of the kernel library, it would have made sense to put new modules in `src/node/` not `src/kernel/`, but now most things in `src/node/` should actually move to `src/kernel/`.",
      "created_at" : "2022-07-11T16:16:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25584#issuecomment-1180607148",
      "id" : 1180607148,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25584",
      "node_id" : "IC_kwDOABII585GXqKs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1180607148/reactions"
      },
      "updated_at" : "2022-07-11T16:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1180607148",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Regarding https://github.com/bitcoin/bitcoin/pull/11775, i'm not sure. After #25380, we can't just make the fee estimator only a client of the validation interface: it needs an access to `CTxMemPool`. I also think it's natural for the fee estimator to be connected to `CTxMemPool`, and we'll need it if we want to give accurate estimates for packages.",
      "created_at" : "2022-07-14T10:45:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/25584#issuecomment-1184289153",
      "id" : 1184289153,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25584",
      "node_id" : "IC_kwDOABII585GltGB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184289153/reactions"
      },
      "updated_at" : "2022-07-14T10:45:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184289153",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   }
]
