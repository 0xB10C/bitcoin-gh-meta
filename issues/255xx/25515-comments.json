[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25572](https://github.com/bitcoin/bitcoin/pull/25572) (refactor: Introduce EvictionManager and use it for the inbound eviction logic by dergoegge)\n* [#24545](https://github.com/bitcoin/bitcoin/pull/24545) (BIP324: Enable v2 P2P encrypted transport by dhruv)\n* [#24170](https://github.com/bitcoin/bitcoin/pull/24170) (p2p, rpc: Manual block-relay-only connections with addnode by mzumsande)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-06-30T19:50:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1171614818",
      "id" : 1171614818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
      "node_id" : "IC_kwDOABII585F1Wxi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1171614818/reactions"
      },
      "updated_at" : "2022-10-06T15:05:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1171614818",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Obvious concept ACK from me. This was one of the big motivators for #19398.",
      "created_at" : "2022-07-04T07:51:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1173474399",
      "id" : 1173474399,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
      "node_id" : "IC_kwDOABII585F8cxf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173474399/reactions"
      },
      "updated_at" : "2022-07-04T07:51:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173474399",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-07-04T21:06:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1174361336",
      "id" : 1174361336,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
      "node_id" : "IC_kwDOABII585F_1T4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1174361336/reactions"
      },
      "updated_at" : "2022-07-04T21:06:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1174361336",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Nice, concept ACK",
      "created_at" : "2022-07-05T16:03:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1175229773",
      "id" : 1175229773,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
      "node_id" : "IC_kwDOABII585GDJVN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1175229773/reactions"
      },
      "updated_at" : "2022-07-05T16:03:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1175229773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-07-12T15:14:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1181888851",
      "id" : 1181888851,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
      "node_id" : "IC_kwDOABII585GcjFT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1181888851/reactions"
      },
      "updated_at" : "2022-07-12T15:14:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1181888851",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This PR is ready for review!",
      "created_at" : "2022-07-19T12:26:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1188989697",
      "id" : 1188989697,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
      "node_id" : "IC_kwDOABII585G3osB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1188989697/reactions"
      },
      "updated_at" : "2022-07-19T12:26:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1188989697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, light code review ACK 87fd3609ba87a74fa6ca74c56ffbdb39fd941ebf",
      "created_at" : "2022-08-25T08:10:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1226927000",
      "id" : 1226927000,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
      "node_id" : "IC_kwDOABII585JIWuY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1226927000/reactions"
      },
      "updated_at" : "2022-08-25T08:10:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1226927000",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.",
      "created_at" : "2022-09-14T13:25:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1246762839",
      "id" : 1246762839,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
      "node_id" : "IC_kwDOABII585KUBdX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1246762839/reactions"
      },
      "updated_at" : "2022-09-14T13:25:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1246762839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2022-10-04T12:40:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1266933218",
      "id" : 1266933218,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
      "node_id" : "IC_kwDOABII585Lg93i",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266933218/reactions"
      },
      "updated_at" : "2022-10-04T12:40:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266933218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2022-10-14T14:05:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#issuecomment-1279056559",
      "id" : 1279056559,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25515",
      "node_id" : "IC_kwDOABII585MPNqv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1279056559/reactions"
      },
      "updated_at" : "2022-10-14T14:05:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1279056559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r996975101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996975101"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe I am missing something, but shouldn't this be `sending message %s to peer %d`?? ",
      "commit_id" : "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "created_at" : "2022-10-17T12:03:30Z",
      "diff_hunk" : "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"received message %s from peer %d\", msg.m_type, pnode->GetId()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r996975101",
      "id" : 996975101,
      "line" : 87,
      "node_id" : "PRRC_kwDOABII5847bKH9",
      "original_commit_id" : "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "original_line" : 87,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/test/peerman_tests.cpp",
      "position" : 87,
      "pull_request_review_id" : 1144030805,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996975101/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-17T12:30:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996975101",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r996987379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996987379"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n```suggestion\r\n    // Ping metrics have not been updated on the CNode object, and there is a ping outstanding\r\n```",
      "commit_id" : "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "created_at" : "2022-10-17T12:17:05Z",
      "diff_hunk" : "@@ -0,0 +1,307 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <span.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <timedata.h>\n+#include <validation.h>\n+\n+#include <array>\n+#include <optional>\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static CService ip(uint32_t i)\n+{\n+    struct in_addr s;\n+    s.s_addr = i;\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n+}\n+\n+static void AdvanceMockTime(int64_t delta)\n+{\n+    auto time_before{GetMockTime()};\n+    SetMockTime(time_before + std::chrono::seconds(delta));\n+}\n+\n+/** Mock the connections interface. */\n+class ConnectionsInterfaceMock : public ConnectionsInterface\n+{\n+public:\n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func) override { return true; };\n+    using NodeFn = std::function<void(CNode*)>;\n+    void ForEachNode(const NodeFn& func) override {};\n+    void ForEachNode(const NodeFn& func) const override {};\n+    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg) override;\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const override { return {0, 0}; };\n+    void WakeMessageHandler() override {};\n+    bool OutboundTargetReached(bool historicalBlockServingLimit) const override { return true; };\n+    std::vector<CAddress> GetAddresses(size_t max_addresses,\n+                                       size_t max_pct,\n+                                       std::optional<Network> network) const override { return {}; };\n+    std::vector<CAddress> GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct) override { return {}; };\n+    bool DisconnectNode(const CNetAddr& addr) override { return true; };\n+    unsigned int GetReceiveFloodSize() const override { return 0; };\n+    int GetExtraFullOutboundCount() const override { return 0; };\n+    int GetExtraBlockRelayCount() const override { return 0; };\n+    void SetTryNewOutboundPeer(bool flag) override {};\n+    bool GetTryNewOutboundPeer() const override { return true; };\n+    bool GetNetworkActive() const override { return true; };\n+    bool GetUseAddrmanOutgoing() const override { return true; };\n+    void StartExtraBlockRelayPeers() override {};\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const override { return true; };\n+    bool CheckIncomingNonce(uint64_t nonce) override { return true; };\n+\n+    void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+    void OnPing(CDataStream& data);\n+\n+    virtual ~ConnectionsInterfaceMock() {}\n+\n+    /** Count of number of each message type sent */\n+    std::map<std::string, uint64_t> m_message_types_sent;\n+    /** Most recent ping nonce received. */\n+    uint64_t m_ping_nonce{0};\n+\n+};\n+\n+void ConnectionsInterfaceMock::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n+{\n+    BOOST_TEST_MESSAGE(strprintf(\"received message %s from peer %d\", msg.m_type, pnode->GetId()));\n+    m_message_types_sent[msg.m_type]++;\n+\n+    CDataStream data{msg.data, SER_NETWORK, PROTOCOL_VERSION};\n+    if (msg.m_type == NetMsgType::PING) OnPing(data);\n+}\n+\n+void ConnectionsInterfaceMock::OnPing(CDataStream& data)\n+{\n+    data >> m_ping_nonce;\n+    BOOST_TEST_MESSAGE(strprintf(\"received ping. Nonce:%d\", m_ping_nonce));\n+}\n+\n+void ConnectionsInterfaceMock::NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(msg_bytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+        }\n+    }\n+}\n+\n+bool ConnectionsInterfaceMock::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const\n+{\n+    std::vector<uint8_t> ser_msg_header;\n+    node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n+\n+    bool complete;\n+    NodeReceiveMsgBytes(node, ser_msg_header, complete);\n+    NodeReceiveMsgBytes(node, ser_msg.data, complete);\n+    return complete;\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(peerman_tests, TestingSetup)\n+\n+static void SendMessage(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node, CSerializedNetMsg& msg)\n+{\n+    std::atomic<bool> interrupt{false};\n+    (void)connman.ReceiveMsgFrom(node, msg);\n+    node.fPauseSend = false;\n+    LOCK(NetEventsInterface::g_msgproc_mutex);\n+    peerman.ProcessMessages(&node, interrupt);\n+    peerman.SendMessages(&node);\n+}\n+\n+using HandshakeHookFn = std::function<void(ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node)>;\n+static void Handshake(\n+    ConnectionsInterfaceMock& connman, PeerManager& peerman,\n+    CNode& node, ServiceFlags their_services,\n+    HandshakeHookFn pre_verack_hook = [](ConnectionsInterfaceMock& connman, PeerManager& peerman, CNode& node) {}) noexcept\n+{\n+    // Send version message\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_version{\n+        mm.Make(NetMsgType::VERSION,\n+                PROTOCOL_VERSION,                              // current p2p version\n+                Using<CustomUintFormatter<8>>(their_services), // their service flags\n+                GetTime(),                                     // dummy time\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // dummy\n+                int64_t{},                                     // ignored service bits\n+                CService{},                                    // ignored\n+                uint64_t{1},                                   // dummy nonce\n+                std::string{},                                 // dummy subver\n+                int32_t{},                                     // dummy starting_height\n+                true),                                         // fRelay\n+    };\n+    SendMessage(connman, peerman, node, msg_version);\n+    BOOST_CHECK(!node.fDisconnect);\n+    BOOST_CHECK_EQUAL(node.nVersion, PROTOCOL_VERSION);\n+    BOOST_CHECK_EQUAL(node.GetCommonVersion(), PROTOCOL_VERSION);\n+    CNodeStateStats stats;\n+    bool ret = peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(ret, true);\n+    BOOST_CHECK_EQUAL(stats.their_services, their_services);\n+\n+    pre_verack_hook(connman, peerman, node);\n+\n+    // Send verack message\n+    CSerializedNetMsg msg_verack{mm.Make(NetMsgType::VERACK)};\n+    SendMessage(connman, peerman, node, msg_verack);\n+    BOOST_CHECK_EQUAL(node.fSuccessfullyConnected, true);\n+\n+    TestOnlyResetTimeData();\n+}\n+\n+BOOST_AUTO_TEST_CASE(version_handshake)\n+{\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    CNode node{/*id=*/0, /*sock=*/nullptr, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERSION], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::WTXIDRELAY], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDADDRV2], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::VERACK], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETADDR], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::SENDCMPCT], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::GETHEADERS], 1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::FEEFILTER], 1);\n+\n+    peerman->FinalizeNode(node);\n+}\n+\n+static void CheckPingTimes(CNode& node, PeerManager& peerman,\n+                           std::chrono::microseconds min_ping_time, std::chrono::microseconds last_ping_time, std::chrono::microseconds ping_wait)\n+{\n+    // Check min and last ping times\n+    BOOST_CHECK_EQUAL(node.m_min_ping_time.load().count(), min_ping_time.count());\n+    BOOST_CHECK_EQUAL(node.m_last_ping_time.load().count(), last_ping_time.count());\n+\n+    // Check if and how long current ping has been pending\n+    CNodeStateStats stats;\n+    peerman.GetNodeStateStats(node.GetId(), stats);\n+    BOOST_CHECK_EQUAL(stats.m_ping_wait.count(), ping_wait.count());\n+}\n+\n+static void SendPong(CNode& node, ConnectionsInterfaceMock& connman,\n+                     PeerManager& peerman, std::optional<int64_t> nonce = {})\n+{\n+    const CNetMsgMaker mm{0};\n+    CSerializedNetMsg msg_pong = nonce ? mm.Make(NetMsgType::PONG, nonce.value()) : mm.Make(NetMsgType::PONG);\n+    SendMessage(connman, peerman, node, msg_pong);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ping)\n+{\n+    // See PING_INTERVAL in net_processing.cpp\n+    constexpr int64_t PING_INTERVAL{2 * 60};\n+\n+    auto connman = std::make_unique<ConnectionsInterfaceMock>();\n+    auto peerman = PeerManager::make(*connman, *m_node.addrman, nullptr,\n+                                     *m_node.chainman, *m_node.mempool, false);\n+\n+    // Mock an outbound peer\n+    CNode node{/*id=*/0, /*sock=*/nullptr, CAddress(), /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(),\n+               /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n+\n+    peerman->InitializeNode(node, /*our_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    // Use mock time to control pings from node\n+    SetMockTime(GetTime());\n+\n+    Handshake(*connman, *peerman, node, /*their_services=*/ServiceFlags(NODE_NETWORK | NODE_WITNESS));\n+\n+    BOOST_TEST_MESSAGE(\"Advanced mocktime and check that ping is sent after connection is established\");\n+    AdvanceMockTime(1);\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::PING], 1);\n+\n+    // The ping nonce should be non-zero\n+    BOOST_CHECK(connman->m_ping_nonce != 0);\n+\n+    // No pong response has been received yet, and current ping is outstanding\n+    CheckPingTimes(node, *peerman, std::chrono::microseconds::max(), 0us, 1s);\n+\n+    BOOST_TEST_MESSAGE(\"Reply without nonce cancels ping\");\n+    SendPong(node, *connman, *peerman, std::nullopt);\n+\n+    // Ping metrics have not been updated on the CNode object, and there is no ping outstanding\n+    CheckPingTimes(node, *peerman, std::chrono::microseconds::max(), 0us, 0us);\n+\n+    BOOST_TEST_MESSAGE(\"Reply without ping\");\n+    SendPong(node, *connman, *peerman, 0);\n+\n+    // Ping metrics have not been updated on the CNode object, and there is no ping outstanding\n+    CheckPingTimes(node, *peerman, std::chrono::microseconds::max(), 0us, 0us);\n+\n+    // Wait for next ping\n+    AdvanceMockTime(PING_INTERVAL + 1);\n+    connman->m_message_types_sent[NetMsgType::PING] = 0;\n+    WITH_LOCK(NetEventsInterface::g_msgproc_mutex, peerman->SendMessages(&node));\n+    BOOST_CHECK_EQUAL(connman->m_message_types_sent[NetMsgType::PING], 1);\n+\n+    BOOST_TEST_MESSAGE(\"Reply with wrong nonce does not cancel ping\");\n+    SendPong(node, *connman, *peerman, connman->m_ping_nonce + 1);\n+    AdvanceMockTime(1);\n+\n+    // Ping metrics have not been updated on the CNode object, and there is a ping outstandgin",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25515#discussion_r996987379",
      "id" : 996987379,
      "line" : 282,
      "node_id" : "PRRC_kwDOABII5847bNHz",
      "original_commit_id" : "f98a4e8d891dd7374ef7dc4c723797bf0705075f",
      "original_line" : 282,
      "original_position" : 282,
      "original_start_line" : null,
      "path" : "src/test/peerman_tests.cpp",
      "position" : 282,
      "pull_request_review_id" : 1144030805,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25515",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996987379/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-17T12:30:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996987379",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   }
]
