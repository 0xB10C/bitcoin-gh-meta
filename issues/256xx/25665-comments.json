[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926651294"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926651294"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This pull changes both the interface, as well as the internal representation. I wonder if changing the interface and renames can be done separate from the restructuring.\r\n\r\nHopefully those would be uncontroversial and could be reviewed easier/faster, so that less silent merge conflicts arise as the class gets used more and more. Also, less code will need to be changes if the interface changes are made earlier rather than later.",
      "commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "created_at" : "2022-07-21T13:05:47Z",
      "diff_hunk" : "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926651294",
      "id" : 926651294,
      "line" : 49,
      "node_id" : "PRRC_kwDOABII5843O5Oe",
      "original_commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "original_line" : 49,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/bench/wallet_loading.cpp",
      "position" : 5,
      "pull_request_review_id" : 1046496463,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926651294/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-21T13:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926651294",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926658150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926658150"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> This pull changes both the interface, as well as the internal representation. I wonder if changing the interface and renames can be done separate from the restructuring.\r\n\r\nOnly the third commit drops BResult usages, so the answer should be yes. IMO std::optional has a nice interface and it is a shame to reinvent it with stranger HasRes GetObj ReleaseObj methods.",
      "commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "created_at" : "2022-07-21T13:12:19Z",
      "diff_hunk" : "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926658150",
      "id" : 926658150,
      "in_reply_to_id" : 926651294,
      "line" : 49,
      "node_id" : "PRRC_kwDOABII5843O65m",
      "original_commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "original_line" : 49,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/bench/wallet_loading.cpp",
      "position" : 5,
      "pull_request_review_id" : 1046506217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926658150/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-21T13:12:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926658150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926660730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926660730"
         }
      },
      "author_association" : "MEMBER",
      "body" : "With separate I meant separate pulls :sweat_smile: ",
      "commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "created_at" : "2022-07-21T13:14:54Z",
      "diff_hunk" : "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926660730",
      "id" : 926660730,
      "in_reply_to_id" : 926651294,
      "line" : 49,
      "node_id" : "PRRC_kwDOABII5843O7h6",
      "original_commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "original_line" : 49,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/bench/wallet_loading.cpp",
      "position" : 5,
      "pull_request_review_id" : 1046510212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926660730/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-21T13:14:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926660730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Draft PR since I want to add a commit taking advantages of ability to return chain results and return warnings.",
      "created_at" : "2022-07-21T13:18:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1191475306",
      "id" : 1191475306,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
      "node_id" : "IC_kwDOABII585HBHhq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191475306/reactions"
      },
      "updated_at" : "2022-07-21T13:18:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191475306",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926667440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926667440"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> With separate I meant separate pulls sweat_smile\r\n\r\nOh sorry, I thought you were asking literally if it is possible",
      "commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "created_at" : "2022-07-21T13:20:49Z",
      "diff_hunk" : "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r926667440",
      "id" : 926667440,
      "in_reply_to_id" : 926651294,
      "line" : 49,
      "node_id" : "PRRC_kwDOABII5843O9Kw",
      "original_commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "original_line" : 49,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/bench/wallet_loading.cpp",
      "position" : 5,
      "pull_request_review_id" : 1046519522,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926667440/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-21T13:20:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926667440",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25781](https://github.com/bitcoin/bitcoin/pull/25781) (Remove almost all blockstorage globals by MarcoFalke)\n* [#25756](https://github.com/bitcoin/bitcoin/pull/25756) (rest: Remove support for a number of `-deprecatedrest` options by stickies-v)\n* [#25755](https://github.com/bitcoin/bitcoin/pull/25755) (rest: Use from_blockhash and txdetails query parameters by stickies-v)\n* [#25754](https://github.com/bitcoin/bitcoin/pull/25754) (rest: Extend HTTPRequest interface to support querying path (parameters) by stickies-v)\n* [#25753](https://github.com/bitcoin/bitcoin/pull/25753) (rest: Move format string from path-like parameter to query parameter by stickies-v)\n* [#25721](https://github.com/bitcoin/bitcoin/pull/25721) (refactor: Replace BResult with util::Result by ryanofsky)\n* [#25623](https://github.com/bitcoin/bitcoin/pull/25623) ([kernel 3e/n] Decouple `CDBWrapper` and its kernel users from `ArgsManager` by dongcarl)\n* [#25499](https://github.com/bitcoin/bitcoin/pull/25499) (Use steady clock for all millis bench logging by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-07-21T18:24:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1191801425",
      "id" : 1191801425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
      "node_id" : "IC_kwDOABII585HCXJR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191801425/reactions"
      },
      "updated_at" : "2022-08-05T06:19:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191801425",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-07-22T07:54:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1192291131",
      "id" : 1192291131,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
      "node_id" : "IC_kwDOABII585HEOs7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1192291131/reactions"
      },
      "updated_at" : "2022-07-22T07:54:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1192291131",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927648344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927648344"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the stuff that can be split out:\r\n\r\n* Makes Result class provide same operators and methods as std::optional\r\n* Puts src/util/ code in the util:: namespace so naming reflects code organization and it is obvious where the class is coming from. Drops \"B\" from name because it is undocumented what it stands for (bilingual?)\r\n* Supports Result<bilingual_str> return values. Drops ambiguous and potentially misleading BResult constructor that treats any bilingual string as an error, and any other type as a non-error. Adds util::Error constructor so errors have to be explicitly constructed and not any bilingual_str will be turned into one.\r\n",
      "commit_id" : "358e0fe5f205048333a728df3a67041c1b2e5bd1",
      "created_at" : "2022-07-22T13:23:40Z",
      "diff_hunk" : "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927648344",
      "id" : 927648344,
      "in_reply_to_id" : 926651294,
      "line" : 49,
      "node_id" : "PRRC_kwDOABII5843SspY",
      "original_commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "original_line" : 49,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/bench/wallet_loading.cpp",
      "position" : 5,
      "pull_request_review_id" : 1047899737,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927648344/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-22T13:23:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927648344",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927703509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927703509"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think these things are already split out. The first two commits do not change the interface or naming or functionality of BResult in any way. If you want me to move the last commit to another, PR I can do that.",
      "commit_id" : "358e0fe5f205048333a728df3a67041c1b2e5bd1",
      "created_at" : "2022-07-22T14:22:33Z",
      "diff_hunk" : "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927703509",
      "id" : 927703509,
      "in_reply_to_id" : 926651294,
      "line" : 49,
      "node_id" : "PRRC_kwDOABII5843S6HV",
      "original_commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "original_line" : 49,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/bench/wallet_loading.cpp",
      "position" : 5,
      "pull_request_review_id" : 1047980709,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927703509/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-22T14:22:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927703509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927707935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927707935"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, I think that makes sense, so that we can first figure out the interface, and then start using it more widely, not the other way round.",
      "commit_id" : "358e0fe5f205048333a728df3a67041c1b2e5bd1",
      "created_at" : "2022-07-22T14:27:20Z",
      "diff_hunk" : "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927707935",
      "id" : 927707935,
      "in_reply_to_id" : 926651294,
      "line" : 49,
      "node_id" : "PRRC_kwDOABII5843S7Mf",
      "original_commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "original_line" : 49,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/bench/wallet_loading.cpp",
      "position" : 5,
      "pull_request_review_id" : 1047987255,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927707935/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-22T14:27:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/927707935",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r930446676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/930446676"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927707935\r\n\r\n> Yeah, I think that makes sense, so that we can first figure out the interface, and then start using it more widely, not the other way round.\r\n\r\nThanks, moved to #25721 now and rewrote PR description\r\n",
      "commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "created_at" : "2022-07-26T21:58:03Z",
      "diff_hunk" : "@@ -46,10 +46,10 @@ static void BenchUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n static void AddTx(CWallet& wallet)\n {\n     const auto& dest = wallet.GetNewDestination(OutputType::BECH32, \"\");\n-    assert(dest.HasRes());\n+    assert(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r930446676",
      "id" : 930446676,
      "in_reply_to_id" : 926651294,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5843dX1U",
      "original_commit_id" : "6a06a7c3ad264c0ddf4904949839be1ade8011a5",
      "original_line" : 49,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/bench/wallet_loading.cpp",
      "position" : null,
      "pull_request_review_id" : 1051660331,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/930446676/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-27T19:29:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/930446676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Moved out of draft, since result interface is more complete now and there's more code using it",
      "created_at" : "2022-07-27T19:32:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1197277837",
      "id" : 1197277837,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
      "node_id" : "IC_kwDOABII585HXQKN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197277837/reactions"
      },
      "updated_at" : "2022-07-27T19:32:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197277837",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "As said on the previous pull, I'd prefer if the order of the changes was inversed: First, change the existing interface methods and names, then change the internal class implementation. Otherwise we'll end up with the odd state of two classes that do the same thing but have a different name and people will continue to add more used of the \"deprecated\" class. I'd also find it easier to review an incremental diff than having a full separate implementation. But no strong opinion, if you and the other reviewers prefer it as-is now.\r\n\r\nEdit: My comment was https://github.com/bitcoin/bitcoin/pull/25665#discussion_r927707935 and I just realized that it was ambiguous and could be interpreted the opposite of what I meant.",
      "created_at" : "2022-07-27T19:44:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1197289390",
      "id" : 1197289390,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
      "node_id" : "IC_kwDOABII585HXS-u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197289390/reactions"
      },
      "updated_at" : "2022-07-27T19:51:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197289390",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, Marco! I will just tweak #25721 to be a standalone PR instead of depending on this PR",
      "created_at" : "2022-07-27T20:13:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1197317760",
      "id" : 1197317760,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
      "node_id" : "IC_kwDOABII585HXZ6A",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197317760/reactions"
      },
      "updated_at" : "2022-07-27T20:13:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197317760",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Thanks, Marco! I will just tweak #25721 to be a standalone PR instead of depending on this PR\r\n\r\nThis is done now",
      "created_at" : "2022-07-27T21:39:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1197397362",
      "id" : 1197397362,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
      "node_id" : "IC_kwDOABII585HXtVy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197397362/reactions"
      },
      "updated_at" : "2022-07-27T21:39:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197397362",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-08-05T13:55:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1206486304",
      "id" : 1206486304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
      "node_id" : "IC_kwDOABII585H6YUg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206486304/reactions"
      },
      "updated_at" : "2022-08-05T13:55:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206486304",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-08-05T13:55:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1206486310",
      "id" : 1206486310,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
      "node_id" : "IC_kwDOABII585H6YUm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206486310/reactions"
      },
      "updated_at" : "2022-08-05T13:55:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206486310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased c2dc8a8a747d639acfa4a26db2c61c25b6f82571 -> 590bc615a3120a8f11712220546f9654058b82f0 ([`pr/bresult2.10`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.10) -> [`pr/bresult2.11`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult2.11), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult2.10-rebase..pr/bresult2.11)) due to conflicts with #25721",
      "created_at" : "2022-08-05T18:48:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#issuecomment-1206754307",
      "id" : 1206754307,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25665",
      "node_id" : "IC_kwDOABII585H7ZwD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206754307/reactions"
      },
      "updated_at" : "2022-08-05T18:48:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206754307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r944367210"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944367210"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could probably make sense to split this up and use it there: https://github.com/bitcoin/bitcoin/pull/25616#discussion_r942704207",
      "commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "created_at" : "2022-08-12T11:18:55Z",
      "diff_hunk" : "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r944367210",
      "id" : 944367210,
      "line" : 83,
      "node_id" : "PRRC_kwDOABII5844SeZq",
      "original_commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "original_line" : 83,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 76,
      "pull_request_review_id" : 1070947229,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944367210/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-12T11:18:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944367210",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945167440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945167440"
         }
      },
      "author_association" : "NONE",
      "body" : "What is the difference between when the `this->m_info` is `true` and when it is `false`? While as far as I understand in both cases the `this->m_info` is destroyed and replaced by `other.m_info`.  Am I correct? So why bother to check `other.m_info && !this->m_info` and  `other.m_info && this->m_info`?",
      "commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "created_at" : "2022-08-13T16:42:21Z",
      "diff_hunk" : "@@ -31,54 +148,84 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([this](auto&&... x) { this->InitFailure(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n+    {\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        Construct([this](auto&&... x) { this->InitValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945167440",
      "id" : 945167440,
      "line" : 219,
      "node_id" : "PRRC_kwDOABII5844VhxQ",
      "original_commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "original_line" : 219,
      "original_position" : 232,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 232,
      "pull_request_review_id" : 1071979503,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945167440/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-13T16:47:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945167440",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/54557628?v=4",
         "events_url" : "https://api.github.com/users/Riahiamirreza/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Riahiamirreza/followers",
         "following_url" : "https://api.github.com/users/Riahiamirreza/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Riahiamirreza/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Riahiamirreza",
         "id" : 54557628,
         "login" : "Riahiamirreza",
         "node_id" : "MDQ6VXNlcjU0NTU3NjI4",
         "organizations_url" : "https://api.github.com/users/Riahiamirreza/orgs",
         "received_events_url" : "https://api.github.com/users/Riahiamirreza/received_events",
         "repos_url" : "https://api.github.com/users/Riahiamirreza/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Riahiamirreza/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Riahiamirreza/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Riahiamirreza"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945184751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945184751"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> What is the difference between when the `this->m_info` is `true` and when it is `false`?\r\n\r\nThe implementation is optimized for the \"happy path\" where a success value is set and there is no failure value and no error or warning message strings. In the happy path case, `m_info` is null and no allocation is needed. Otherwise, if there has been any kind of error or warning `m_info` will be non-null.\r\n\r\n> While as far as I understand in both cases the `this->m_info` is destroyed and replaced by `other.m_info`.  Am I correct?\r\n\r\nNo that's not really correct. As the comment \"Operator moving warning and error messages from one result to another\" says, only warning and error strings are moved from `other` to `*this`. The success and value statuses of `other` and `*this` objects are unchanged, and the success and failure values of both objects (if any) are also unchanged. Existing warning and error strings in `*this` are also not affected, the new errors and warnings just get appended and don't replace existing one.\r\n\r\n> So why bother to check `other.m_info && !this->m_info` and `other.m_info && this->m_info`?\r\n\r\nI'm not sure what other code you might expect to see here, but in both cases this is just moving `other.m_info->errors` strings to `this->m_info->errors` and moving `other.m_info->warnings` strings to `this->m_info->warnings` while not deleting any existing strings and not changing `other.m_info->failure` and `this->m_info->failure` values.",
      "commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "created_at" : "2022-08-13T20:02:49Z",
      "diff_hunk" : "@@ -31,54 +148,84 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([this](auto&&... x) { this->InitFailure(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n+    {\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        Construct([this](auto&&... x) { this->InitValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945184751",
      "id" : 945184751,
      "in_reply_to_id" : 945167440,
      "line" : 219,
      "node_id" : "PRRC_kwDOABII5844Vl_v",
      "original_commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "original_line" : 219,
      "original_position" : 232,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 232,
      "pull_request_review_id" : 1071993521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945184751/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-13T20:03:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945184751",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945529940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945529940"
         }
      },
      "author_association" : "NONE",
      "body" : "I don't understand why the `m_value` is in a `union` while there is only one member in the `union`? Would you explain why?",
      "commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "created_at" : "2022-08-15T08:39:35Z",
      "diff_hunk" : "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }\n+};\n+\n+//! Result base class for T value type. Holds value and provides accessor methods.\n+template <typename T, typename F>\n+class ResultBase : public ResultBase<void, F>\n+{\n+protected:\n+    union { T m_value; };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945529940",
      "id" : 945529940,
      "line" : 91,
      "node_id" : "PRRC_kwDOABII5844W6RU",
      "original_commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "original_line" : 91,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 84,
      "pull_request_review_id" : 1072373197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945529940/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-15T08:51:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945529940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/54557628?v=4",
         "events_url" : "https://api.github.com/users/Riahiamirreza/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Riahiamirreza/followers",
         "following_url" : "https://api.github.com/users/Riahiamirreza/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Riahiamirreza/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Riahiamirreza",
         "id" : 54557628,
         "login" : "Riahiamirreza",
         "node_id" : "MDQ6VXNlcjU0NTU3NjI4",
         "organizations_url" : "https://api.github.com/users/Riahiamirreza/orgs",
         "received_events_url" : "https://api.github.com/users/Riahiamirreza/received_events",
         "repos_url" : "https://api.github.com/users/Riahiamirreza/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Riahiamirreza/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Riahiamirreza/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Riahiamirreza"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945536621"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945536621"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks for your explanation. My wrong assumption was that by replacing the warnings and errors the `this` is completely like the `other`, so why checking whether `this->m_info` is null or not. \r\nBut as you mentioned the success and value statuses remained unchanged.",
      "commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "created_at" : "2022-08-15T08:49:22Z",
      "diff_hunk" : "@@ -31,54 +148,84 @@ struct Error {\n //! `std::optional<T>` can be updated to return `util::Result<T>` and return\n //! error strings usually just replacing `return std::nullopt;` with `return\n //! util::Error{error_string};`.\n-template <class T>\n-class Result\n+template <typename T, typename F = void>\n+class Result : public detail::ResultBase<T, F>\n {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+protected:\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Args&&... args)\n+    {\n+        fn(std::forward<Args>(args)...);\n+    }\n \n-    template <typename FT>\n-    friend bilingual_str ErrorString(const Result<FT>& result);\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Error error, Args&&... args)\n+    {\n+        this->AddError(std::move(error.message));\n+        Construct([this](auto&&... x) { this->InitFailure(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n+    }\n \n-public:\n-    Result(T obj) : m_variant{std::in_place_index_t<1>{}, std::move(obj)} {}\n-    Result(Error error) : m_variant{std::in_place_index_t<0>{}, std::move(error.message)} {}\n+    template <typename Fn, typename... Args>\n+    void Construct(const Fn& fn, Warning warning, Args&&... args)\n+    {\n+        this->AddWarning(std::move(warning.message));\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n \n-    //! std::optional methods, so functions returning optional<T> can change to\n-    //! return Result<T> with minimal changes to existing code, and vice versa.\n-    bool has_value() const noexcept { return m_variant.index() == 1; }\n-    const T& value() const LIFETIMEBOUND\n+    template <typename Fn, typename OT, typename OF, typename... Args>\n+    void Construct(const Fn& fn, Result<OT, OF>&& other, Args&&... args)\n+    {\n+        *this << std::move(other);\n+        Construct(fn, std::forward<Args>(args)...);\n+    }\n+\n+    template <typename OT, typename OF>\n+    void MoveConstruct(Result<OT, OF>& other)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        *this << std::move(other);\n+        if (other) this->MoveValue(other); else if (other.m_info) this->m_info->failure = std::move(other.m_info->failure);\n     }\n-    T& value() LIFETIMEBOUND\n+\n+    template <typename FT, typename FF>\n+    friend class Result;\n+\n+public:\n+    //! Constructors, destructor, and assignment operator.\n+    template <typename... Args>\n+    Result(Args&&... args)\n     {\n-        assert(has_value());\n-        return std::get<1>(m_variant);\n+        Construct([this](auto&&... x) { this->InitValue(std::forward<decltype(x)>(x)...); }, std::forward<Args>(args)...);\n     }\n-    template <class U>\n-    T value_or(U&& default_value) const&\n+    template <typename OT, typename OF>\n+    Result(Result<OT, OF>&& other) { MoveConstruct(other); }\n+    Result& operator=(Result&& other)\n     {\n-        return has_value() ? value() : std::forward<U>(default_value);\n+        if (*this) this->DestroyValue(); else this->m_info->failure.reset();\n+        MoveConstruct(other);\n+        return *this;\n     }\n-    template <class U>\n-    T value_or(U&& default_value) &&\n+    ~Result() { if (*this) this->DestroyValue(); }\n+\n+    //! Operator moving warning and error messages from one result to another.\n+    template <typename OT, typename OF>\n+    Result<OT, OF>&& operator<<(Result<OT, OF>&& other)\n     {\n-        return has_value() ? std::move(value()) : std::forward<U>(default_value);\n+        if (other.m_info && !this->m_info) {\n+            this->m_info.reset(new detail::ErrorInfo<F>{.errors = std::move(other.m_info->errors),\n+                                                        .warnings = std::move(other.m_info->warnings)});\n+        } else if (other.m_info && this->m_info) {\n+            detail::MoveElements(other.m_info->errors, this->m_info->errors);\n+            detail::MoveElements(other.m_info->warnings, this->m_info->warnings);\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945536621",
      "id" : 945536621,
      "in_reply_to_id" : 945167440,
      "line" : 219,
      "node_id" : "PRRC_kwDOABII5844W75t",
      "original_commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "original_line" : 219,
      "original_position" : 232,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 232,
      "pull_request_review_id" : 1072373197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945536621/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-15T08:49:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945536621",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/54557628?v=4",
         "events_url" : "https://api.github.com/users/Riahiamirreza/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Riahiamirreza/followers",
         "following_url" : "https://api.github.com/users/Riahiamirreza/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Riahiamirreza/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Riahiamirreza",
         "id" : 54557628,
         "login" : "Riahiamirreza",
         "node_id" : "MDQ6VXNlcjU0NTU3NjI4",
         "organizations_url" : "https://api.github.com/users/Riahiamirreza/orgs",
         "received_events_url" : "https://api.github.com/users/Riahiamirreza/received_events",
         "repos_url" : "https://api.github.com/users/Riahiamirreza/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Riahiamirreza/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Riahiamirreza/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Riahiamirreza"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945688134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945688134"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I don't understand why the `m_value` is in a `union` while there is only one member in the `union`? Would you explain why?\r\n\r\nI'll add a code comment, but using a union avoids `m_value` getting constructor and destructor being called automatically, so in the failure case `m_value` is never constructed.",
      "commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "created_at" : "2022-08-15T12:47:28Z",
      "diff_hunk" : "@@ -8,16 +8,133 @@\n #include <attributes.h>\n #include <util/translation.h>\n \n+#include <memory>\n+#include <optional>\n+#include <tuple>\n #include <variant>\n+#include <vector>\n \n namespace util {\n+namespace detail {\n+//! Empty string list\n+const std::vector<bilingual_str> EMPTY_LIST{};\n \n+//! Helper to move elements from one container to another.\n+template <typename T>\n+void MoveElements(T& src, T& dest)\n+{\n+    dest.insert(dest.end(), std::make_move_iterator(src.begin()), std::make_move_iterator(src.end()));\n+    src.clear();\n+}\n+\n+//! Error information only allocated if there are errors or warnings.\n+template <typename F>\n+struct ErrorInfo {\n+    std::optional<std::conditional_t<std::is_same<F, void>::value, std::monostate, F>> failure;\n+    std::vector<bilingual_str> errors;\n+    std::vector<bilingual_str> warnings;\n+};\n+\n+//! Result base class which is inherited by Result<T, F>.\n+template <typename T, typename F>\n+class ResultBase;\n+\n+//! Result base specialization for empty (T=void) value type. Holds error\n+//! information and provides accessor methods.\n+template <typename F>\n+class ResultBase<void, F>\n+{\n+protected:\n+    std::unique_ptr<ErrorInfo<F>> m_info;\n+\n+    template <typename... Args>\n+    void InitFailure(Args&&... args)\n+    {\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->failure.emplace(std::forward<Args>(args)...);\n+    }\n+    void InitValue() {}\n+    template <typename O>\n+    void MoveValue(O& other) {}\n+    void DestroyValue() {}\n+\n+public:\n+    void AddError(bilingual_str error)\n+    {\n+        if (error.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->errors.emplace_back(std::move(error));\n+    }\n+\n+    void AddWarning(bilingual_str warning)\n+    {\n+        if (warning.empty()) return;\n+        if (!m_info) m_info = std::make_unique<ErrorInfo<F>>();\n+        m_info->warnings.emplace_back(std::move(warning));\n+    }\n+\n+    //! Success check.\n+    operator bool() const { return !m_info || !m_info->failure; }\n+\n+    //! Error retrieval.\n+    template <typename _F = F>\n+    std::enable_if_t<!std::is_same<_F, void>::value, const _F&> GetFailure() const { assert(!*this); return *m_info->failure; }\n+    const std::vector<bilingual_str>& GetErrors() const { return m_info ? m_info->errors : EMPTY_LIST; }\n+    const std::vector<bilingual_str>& GetWarnings() const { return m_info ? m_info->warnings : EMPTY_LIST; }\n+};\n+\n+//! Result base class for T value type. Holds value and provides accessor methods.\n+template <typename T, typename F>\n+class ResultBase : public ResultBase<void, F>\n+{\n+protected:\n+    union { T m_value; };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25665#discussion_r945688134",
      "id" : 945688134,
      "in_reply_to_id" : 945529940,
      "line" : 91,
      "node_id" : "PRRC_kwDOABII5844Xg5G",
      "original_commit_id" : "590bc615a3120a8f11712220546f9654058b82f0",
      "original_line" : 91,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 84,
      "pull_request_review_id" : 1072625079,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25665",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945688134/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-15T12:48:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945688134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
