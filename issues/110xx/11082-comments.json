[
   {
      "author_association" : "MEMBER",
      "body" : "I'm not a big fan of multiple config files. I would prefer if QT just edited `bitcoin.conf` and tells the user to do so manually if things gets too complicated. See also #6461.",
      "created_at" : "2018-03-17T15:33:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-373928998",
      "id" : 373928998,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11082",
      "updated_at" : "2018-03-17T15:33:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/373928998",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I tried just making `bitcoin.conf` writeable instead of having two files in #12833, but that seems to raise some objections. So in that case: Concept ACK. \r\n\r\nCan you rebase this? From my experience with the other PR that should be easy and it worked quite well.",
      "created_at" : "2018-03-30T15:09:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-377545481",
      "id" : 377545481,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11082",
      "updated_at" : "2018-03-30T15:09:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377545481",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2018-03-31T21:24:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-377724496",
      "id" : 377724496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11082",
      "updated_at" : "2018-03-31T21:24:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377724496",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "tACK aac0501 (tested through #12833)",
      "created_at" : "2018-04-03T10:56:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-378210193",
      "id" : 378210193,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11082",
      "updated_at" : "2018-04-03T10:56:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378210193",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs another rebase due to #11862. Perhaps not worth the effort without more Concept ACKs.",
      "created_at" : "2018-05-15T11:10:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#issuecomment-389129606",
      "id" : 389129606,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11082",
      "updated_at" : "2018-05-15T11:10:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389129606",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r192556713"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/192556713"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Wouldn't it be better for `ReadRWConfigFile` not to throw exceptions in any normal case? If there's a weird setting, that's fine it will just get over-written later; if the file is read-only though that error should at least be reported to the user; and if there's some other unexpected sort of error that throws an exception, then that shouldn't be ignored?",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-06-02T10:51:56Z",
      "diff_hunk" : "@@ -118,6 +118,12 @@ bool AppInit(int argc, char* argv[])\n             return false;\n         }\n \n+        try {\n+            gArgs.ReadRWConfigFile(gArgs.GetArg(\"-confrw\", BITCOIN_RW_CONF_FILENAME));\n+        } catch (const std::exception& e) {\n+            // Ignore problems here, since we are responsible for this file",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r192556713",
      "id" : 192556713,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1NjcxMw==",
      "original_commit_id" : "aac05011480f10a0feea490474e4308ad123a644",
      "original_position" : 7,
      "path" : "src/bitcoind.cpp",
      "position" : null,
      "pull_request_review_id" : 125362873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/192556713",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r192556745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/192556745"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\"rwconfig\" is an implementation detail; it might be better to describe it via it's purpose instead. \"confui -- Specify configuration file that stores settings set in the UI\" or something?",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-06-02T10:53:27Z",
      "diff_hunk" : "@@ -332,6 +332,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME));\n+    strUsage += HelpMessageOpt(\"-confrw=<file>\", strprintf(_(\"Specify read/write configuration file. Relative paths will be prefixed by the network-specific datadir location. (default: %s)\"), BITCOIN_RW_CONF_FILENAME));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r192556745",
      "id" : 192556745,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU1Njc0NQ==",
      "original_commit_id" : "aac05011480f10a0feea490474e4308ad123a644",
      "original_position" : 4,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 125362873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/192556745",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r192841999"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/192841999"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> \"rwconfig\" is an implementation detail; it might be better to describe it via it's purpose instead. \"confui -- Specify configuration file that stores settings set in the UI\" or something?\r\n\r\nIMO, rwconf is nice because it would let us an add an RPC interface for updating settings and persisting them. ",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-06-04T18:43:26Z",
      "diff_hunk" : "@@ -332,6 +332,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME));\n+    strUsage += HelpMessageOpt(\"-confrw=<file>\", strprintf(_(\"Specify read/write configuration file. Relative paths will be prefixed by the network-specific datadir location. (default: %s)\"), BITCOIN_RW_CONF_FILENAME));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r192841999",
      "id" : 192841999,
      "in_reply_to_id" : 192556745,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mjg0MTk5OQ==",
      "original_commit_id" : "aac05011480f10a0feea490474e4308ad123a644",
      "original_position" : 4,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 125696261,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/192841999",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231615397"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231615397"
         }
      },
      "author_association" : "MEMBER",
      "body" : "An integer wraparound will occur here in the case of `n == 0`.",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:01:24Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));\n+        while (i != '\\n') {\n+            i = streamIn.get();\n+            if (i == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            s.push_back(char(i));\n+        }\n+        return true;\n+    }\n+\n+    static const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";\n+\n+    static void ModifyRWConfigFile_SanityCheck(const std::string& s)\n+    {\n+        if (s.empty()) {\n+            // Dereferencing .begin or .rbegin below is invalid unless the string has at least one character.\n+            return;\n+        }\n+\n+        static const char * const newline_chars = \"\\r\\n\";\n+        static std::string ws_chars(ModifyRWConfigFile_ws_chars);\n+        if (s.find_first_of(newline_chars) != std::string::npos) {\n+            throw std::invalid_argument(\"New-line in config name/value\");\n+        }\n+        if (ws_chars.find(*s.begin()) != std::string::npos || ws_chars.find(*s.rbegin()) != std::string::npos) {\n+            throw std::invalid_argument(\"Config name/value has leading/trailing whitespace\");\n+        }\n+    }\n+\n+    static void ModifyRWConfigFile_WriteRemaining(std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change, std::set<std::string>& setFound)\n+    {\n+        for (const auto& pairSetting : settings_to_change) {\n+            const std::string& key = pairSetting.first;\n+            const std::string& val = pairSetting.second;\n+            if (setFound.find(key) != setFound.end()) {\n+                continue;\n+            }\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            stream_out << key << \"=\" << val << \"\\n\";\n+        }\n+    }\n+}\n+\n+void ModifyRWConfigStream(std::istream& stream_in, std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change)\n+{\n+    static const char * const ws_chars = ModifyRWConfigFile_ws_chars;\n+    std::set<std::string> setFound;\n+    std::string s, lineend, linebegin, key;\n+    std::string::size_type n, n2;\n+    bool inside_group = false, have_eof_nl = true, has_comment;\n+    std::map<std::string, std::string>::const_iterator iterCS;\n+    size_t lineno = 0;\n+    while (getline_with_eol(stream_in, s)) {\n+        ++lineno;\n+\n+        have_eof_nl = (!s.empty()) && (*s.rbegin() == '\\n');\n+        n = s.find('#');\n+        has_comment = (n != std::string::npos);\n+        if (!has_comment) {\n+            n = s.size();\n+        }\n+        n2 = s.find_last_not_of(ws_chars, n - 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231615397",
      "id" : 231615397,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYxNTM5Nw==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 188,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 172622306,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231615397",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231616863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231616863"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Make sure parameters name match between declaration and definition :-)",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:05:32Z",
      "diff_hunk" : "@@ -162,6 +169,10 @@ class ArgsManager\n     bool ParseParameters(int argc, const char* const argv[], std::string& error);\n     bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n \n+    void ModifyRWConfigFile(const std::map<std::string, std::string>& settings_to_change);\n+    void ModifyRWConfigFile(const std::string& setting_to_change, const std::string& new_value);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231616863",
      "id" : 231616863,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYxNjg2Mw==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 42,
      "path" : "src/util/system.h",
      "position" : 42,
      "pull_request_review_id" : 172624178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231616863",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231617006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231617006"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`static` is redundant here",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:06:03Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231617006",
      "id" : 231617006,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYxNzAwNg==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 116,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 172624380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231617006",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231617074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231617074"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`static` is redundant here.",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:06:18Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));\n+        while (i != '\\n') {\n+            i = streamIn.get();\n+            if (i == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            s.push_back(char(i));\n+        }\n+        return true;\n+    }\n+\n+    static const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231617074",
      "id" : 231617074,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYxNzA3NA==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 135,
      "path" : "src/util/system.cpp",
      "position" : 135,
      "pull_request_review_id" : 172624470,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231617074",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231617121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231617121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here :-)",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:06:29Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));\n+        while (i != '\\n') {\n+            i = streamIn.get();\n+            if (i == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            s.push_back(char(i));\n+        }\n+        return true;\n+    }\n+\n+    static const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";\n+\n+    static void ModifyRWConfigFile_SanityCheck(const std::string& s)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231617121",
      "id" : 231617121,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYxNzEyMQ==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 137,
      "path" : "src/util/system.cpp",
      "position" : 137,
      "pull_request_review_id" : 172624541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231617121",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231617147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231617147"
         }
      },
      "author_association" : "MEMBER",
      "body" : "And here :-)",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:06:37Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));\n+        while (i != '\\n') {\n+            i = streamIn.get();\n+            if (i == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            s.push_back(char(i));\n+        }\n+        return true;\n+    }\n+\n+    static const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";\n+\n+    static void ModifyRWConfigFile_SanityCheck(const std::string& s)\n+    {\n+        if (s.empty()) {\n+            // Dereferencing .begin or .rbegin below is invalid unless the string has at least one character.\n+            return;\n+        }\n+\n+        static const char * const newline_chars = \"\\r\\n\";\n+        static std::string ws_chars(ModifyRWConfigFile_ws_chars);\n+        if (s.find_first_of(newline_chars) != std::string::npos) {\n+            throw std::invalid_argument(\"New-line in config name/value\");\n+        }\n+        if (ws_chars.find(*s.begin()) != std::string::npos || ws_chars.find(*s.rbegin()) != std::string::npos) {\n+            throw std::invalid_argument(\"Config name/value has leading/trailing whitespace\");\n+        }\n+    }\n+\n+    static void ModifyRWConfigFile_WriteRemaining(std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change, std::set<std::string>& setFound)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231617147",
      "id" : 231617147,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYxNzE0Nw==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 154,
      "path" : "src/util/system.cpp",
      "position" : 154,
      "pull_request_review_id" : 172624588,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231617147",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231617641"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231617641"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: End anonymous namespace with `// namespace`",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:08:08Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));\n+        while (i != '\\n') {\n+            i = streamIn.get();\n+            if (i == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            s.push_back(char(i));\n+        }\n+        return true;\n+    }\n+\n+    static const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";\n+\n+    static void ModifyRWConfigFile_SanityCheck(const std::string& s)\n+    {\n+        if (s.empty()) {\n+            // Dereferencing .begin or .rbegin below is invalid unless the string has at least one character.\n+            return;\n+        }\n+\n+        static const char * const newline_chars = \"\\r\\n\";\n+        static std::string ws_chars(ModifyRWConfigFile_ws_chars);\n+        if (s.find_first_of(newline_chars) != std::string::npos) {\n+            throw std::invalid_argument(\"New-line in config name/value\");\n+        }\n+        if (ws_chars.find(*s.begin()) != std::string::npos || ws_chars.find(*s.rbegin()) != std::string::npos) {\n+            throw std::invalid_argument(\"Config name/value has leading/trailing whitespace\");\n+        }\n+    }\n+\n+    static void ModifyRWConfigFile_WriteRemaining(std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change, std::set<std::string>& setFound)\n+    {\n+        for (const auto& pairSetting : settings_to_change) {\n+            const std::string& key = pairSetting.first;\n+            const std::string& val = pairSetting.second;\n+            if (setFound.find(key) != setFound.end()) {\n+                continue;\n+            }\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            stream_out << key << \"=\" << val << \"\\n\";\n+        }\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231617641",
      "id" : 231617641,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYxNzY0MQ==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 168,
      "path" : "src/util/system.cpp",
      "position" : 168,
      "pull_request_review_id" : 172625234,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231617641",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231619701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231619701"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: Avoid extra allocations by doing:\r\n\r\n```\r\ns = s.substr(0, n2);\r\ns += val;\r\n```",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:14:18Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));\n+        while (i != '\\n') {\n+            i = streamIn.get();\n+            if (i == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            s.push_back(char(i));\n+        }\n+        return true;\n+    }\n+\n+    static const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";\n+\n+    static void ModifyRWConfigFile_SanityCheck(const std::string& s)\n+    {\n+        if (s.empty()) {\n+            // Dereferencing .begin or .rbegin below is invalid unless the string has at least one character.\n+            return;\n+        }\n+\n+        static const char * const newline_chars = \"\\r\\n\";\n+        static std::string ws_chars(ModifyRWConfigFile_ws_chars);\n+        if (s.find_first_of(newline_chars) != std::string::npos) {\n+            throw std::invalid_argument(\"New-line in config name/value\");\n+        }\n+        if (ws_chars.find(*s.begin()) != std::string::npos || ws_chars.find(*s.rbegin()) != std::string::npos) {\n+            throw std::invalid_argument(\"Config name/value has leading/trailing whitespace\");\n+        }\n+    }\n+\n+    static void ModifyRWConfigFile_WriteRemaining(std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change, std::set<std::string>& setFound)\n+    {\n+        for (const auto& pairSetting : settings_to_change) {\n+            const std::string& key = pairSetting.first;\n+            const std::string& val = pairSetting.second;\n+            if (setFound.find(key) != setFound.end()) {\n+                continue;\n+            }\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            stream_out << key << \"=\" << val << \"\\n\";\n+        }\n+    }\n+}\n+\n+void ModifyRWConfigStream(std::istream& stream_in, std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change)\n+{\n+    static const char * const ws_chars = ModifyRWConfigFile_ws_chars;\n+    std::set<std::string> setFound;\n+    std::string s, lineend, linebegin, key;\n+    std::string::size_type n, n2;\n+    bool inside_group = false, have_eof_nl = true, has_comment;\n+    std::map<std::string, std::string>::const_iterator iterCS;\n+    size_t lineno = 0;\n+    while (getline_with_eol(stream_in, s)) {\n+        ++lineno;\n+\n+        have_eof_nl = (!s.empty()) && (*s.rbegin() == '\\n');\n+        n = s.find('#');\n+        has_comment = (n != std::string::npos);\n+        if (!has_comment) {\n+            n = s.size();\n+        }\n+        n2 = s.find_last_not_of(ws_chars, n - 1);\n+        if (n2 != std::string::npos) {\n+            n = n2 + 1;\n+        }\n+        n2 = s.find_first_not_of(ws_chars);\n+        if (n2 == std::string::npos || n2 >= n) {\n+            // Blank or comment-only line\n+            stream_out << s;\n+            continue;\n+        }\n+        lineend = s.substr(n);\n+        linebegin = s.substr(0, n2);\n+        s = s.substr(n2, n - n2);\n+\n+        // It is impossible for s to be empty here, due to the blank line check above\n+        if (*s.begin() == '[' && *s.rbegin() == ']') {\n+            // We don't use sections, so we could possibly just write out the rest of the file - but we need to check for unparsable lines, so we just set a flag to ignore settings from here on\n+            ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+            inside_group = true;\n+            key.clear();\n+\n+            stream_out << linebegin << s << lineend;\n+            continue;\n+        }\n+\n+        n = s.find('=');\n+        if (n == std::string::npos) {\n+            // Bad line; this causes boost to throw an exception when parsing, so we comment out the entire file\n+            stream_in.seekg(0, std::ios_base::beg);\n+            stream_out.seekp(0, std::ios_base::beg);\n+            if (!(stream_in.good() && stream_out.good())) {\n+                throw std::ios_base::failure(\"Failed to rewind (to comment out existing file)\");\n+            }\n+            // First, write out all the settings we intend to set\n+            setFound.clear();\n+            ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+            // We then define a category to ensure new settings get added before the invalid stuff\n+            stream_out << \"[INVALID]\\n\";\n+            // Then, describe the problem in a comment\n+            stream_out << \"# Error parsing line \" << lineno << \": \" << s << \"\\n\";\n+            // Finally, dump the rest of the file commented out\n+            while (getline_with_eol(stream_in, s)) {\n+                stream_out << \"#\" << s;\n+            }\n+            return;\n+        }\n+\n+        if (!inside_group) {\n+            // We don't support/use groups, so once we're inside key is always null to avoid setting anything\n+            n2 = s.find_last_not_of(ws_chars, n - 1);\n+            if (n2 == std::string::npos) {\n+                n2 = n - 1;\n+            } else {\n+                ++n2;\n+            }\n+            key = s.substr(0, n2);\n+        }\n+        if ((!key.empty()) && (iterCS = settings_to_change.find(key)) != settings_to_change.end() && setFound.find(key) == setFound.end()) {\n+            // This is the key we want to change\n+            const std::string& val = iterCS->second;\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            if (has_comment) {\n+                // Rather than change a commented line, comment it out entirely (the existing comment may relate to the value) and replace it\n+                stream_out << key << \"=\" << val << \"\\n\";\n+                linebegin.insert(linebegin.begin(), '#');\n+            } else {\n+                // Just modify the value in-line otherwise\n+                n2 = s.find_first_not_of(ws_chars, n + 1);\n+                if (n2 == std::string::npos) {\n+                    n2 = n + 1;\n+                }\n+                s = s.substr(0, n2) + val;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231619701",
      "id" : 231619701,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYxOTcwMQ==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 260,
      "path" : "src/util/system.cpp",
      "position" : 262,
      "pull_request_review_id" : 172627756,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231619701",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231622905"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231622905"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The scope of `has_comment` can be reduced?",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:23:52Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));\n+        while (i != '\\n') {\n+            i = streamIn.get();\n+            if (i == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            s.push_back(char(i));\n+        }\n+        return true;\n+    }\n+\n+    static const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";\n+\n+    static void ModifyRWConfigFile_SanityCheck(const std::string& s)\n+    {\n+        if (s.empty()) {\n+            // Dereferencing .begin or .rbegin below is invalid unless the string has at least one character.\n+            return;\n+        }\n+\n+        static const char * const newline_chars = \"\\r\\n\";\n+        static std::string ws_chars(ModifyRWConfigFile_ws_chars);\n+        if (s.find_first_of(newline_chars) != std::string::npos) {\n+            throw std::invalid_argument(\"New-line in config name/value\");\n+        }\n+        if (ws_chars.find(*s.begin()) != std::string::npos || ws_chars.find(*s.rbegin()) != std::string::npos) {\n+            throw std::invalid_argument(\"Config name/value has leading/trailing whitespace\");\n+        }\n+    }\n+\n+    static void ModifyRWConfigFile_WriteRemaining(std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change, std::set<std::string>& setFound)\n+    {\n+        for (const auto& pairSetting : settings_to_change) {\n+            const std::string& key = pairSetting.first;\n+            const std::string& val = pairSetting.second;\n+            if (setFound.find(key) != setFound.end()) {\n+                continue;\n+            }\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            stream_out << key << \"=\" << val << \"\\n\";\n+        }\n+    }\n+}\n+\n+void ModifyRWConfigStream(std::istream& stream_in, std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change)\n+{\n+    static const char * const ws_chars = ModifyRWConfigFile_ws_chars;\n+    std::set<std::string> setFound;\n+    std::string s, lineend, linebegin, key;\n+    std::string::size_type n, n2;\n+    bool inside_group = false, have_eof_nl = true, has_comment;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231622905",
      "id" : 231622905,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYyMjkwNQ==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 176,
      "path" : "src/util/system.cpp",
      "position" : 176,
      "pull_request_review_id" : 172631857,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231622905",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231623141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231623141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use `(char)i` to get it consistent with the rest of the code base :-)",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:24:33Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231623141",
      "id" : 231623141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYyMzE0MQ==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 124,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 172632166,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231623141",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231623188"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231623188"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here :-)",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T18:24:45Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));\n+        while (i != '\\n') {\n+            i = streamIn.get();\n+            if (i == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            s.push_back(char(i));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231623188",
      "id" : 231623188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTYyMzE4OA==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 130,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 172632247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231623188",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231662854"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231662854"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the current style is more readable.",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T20:19:55Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));\n+        while (i != '\\n') {\n+            i = streamIn.get();\n+            if (i == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            s.push_back(char(i));\n+        }\n+        return true;\n+    }\n+\n+    static const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";\n+\n+    static void ModifyRWConfigFile_SanityCheck(const std::string& s)\n+    {\n+        if (s.empty()) {\n+            // Dereferencing .begin or .rbegin below is invalid unless the string has at least one character.\n+            return;\n+        }\n+\n+        static const char * const newline_chars = \"\\r\\n\";\n+        static std::string ws_chars(ModifyRWConfigFile_ws_chars);\n+        if (s.find_first_of(newline_chars) != std::string::npos) {\n+            throw std::invalid_argument(\"New-line in config name/value\");\n+        }\n+        if (ws_chars.find(*s.begin()) != std::string::npos || ws_chars.find(*s.rbegin()) != std::string::npos) {\n+            throw std::invalid_argument(\"Config name/value has leading/trailing whitespace\");\n+        }\n+    }\n+\n+    static void ModifyRWConfigFile_WriteRemaining(std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change, std::set<std::string>& setFound)\n+    {\n+        for (const auto& pairSetting : settings_to_change) {\n+            const std::string& key = pairSetting.first;\n+            const std::string& val = pairSetting.second;\n+            if (setFound.find(key) != setFound.end()) {\n+                continue;\n+            }\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            stream_out << key << \"=\" << val << \"\\n\";\n+        }\n+    }\n+}\n+\n+void ModifyRWConfigStream(std::istream& stream_in, std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change)\n+{\n+    static const char * const ws_chars = ModifyRWConfigFile_ws_chars;\n+    std::set<std::string> setFound;\n+    std::string s, lineend, linebegin, key;\n+    std::string::size_type n, n2;\n+    bool inside_group = false, have_eof_nl = true, has_comment;\n+    std::map<std::string, std::string>::const_iterator iterCS;\n+    size_t lineno = 0;\n+    while (getline_with_eol(stream_in, s)) {\n+        ++lineno;\n+\n+        have_eof_nl = (!s.empty()) && (*s.rbegin() == '\\n');\n+        n = s.find('#');\n+        has_comment = (n != std::string::npos);\n+        if (!has_comment) {\n+            n = s.size();\n+        }\n+        n2 = s.find_last_not_of(ws_chars, n - 1);\n+        if (n2 != std::string::npos) {\n+            n = n2 + 1;\n+        }\n+        n2 = s.find_first_not_of(ws_chars);\n+        if (n2 == std::string::npos || n2 >= n) {\n+            // Blank or comment-only line\n+            stream_out << s;\n+            continue;\n+        }\n+        lineend = s.substr(n);\n+        linebegin = s.substr(0, n2);\n+        s = s.substr(n2, n - n2);\n+\n+        // It is impossible for s to be empty here, due to the blank line check above\n+        if (*s.begin() == '[' && *s.rbegin() == ']') {\n+            // We don't use sections, so we could possibly just write out the rest of the file - but we need to check for unparsable lines, so we just set a flag to ignore settings from here on\n+            ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+            inside_group = true;\n+            key.clear();\n+\n+            stream_out << linebegin << s << lineend;\n+            continue;\n+        }\n+\n+        n = s.find('=');\n+        if (n == std::string::npos) {\n+            // Bad line; this causes boost to throw an exception when parsing, so we comment out the entire file\n+            stream_in.seekg(0, std::ios_base::beg);\n+            stream_out.seekp(0, std::ios_base::beg);\n+            if (!(stream_in.good() && stream_out.good())) {\n+                throw std::ios_base::failure(\"Failed to rewind (to comment out existing file)\");\n+            }\n+            // First, write out all the settings we intend to set\n+            setFound.clear();\n+            ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+            // We then define a category to ensure new settings get added before the invalid stuff\n+            stream_out << \"[INVALID]\\n\";\n+            // Then, describe the problem in a comment\n+            stream_out << \"# Error parsing line \" << lineno << \": \" << s << \"\\n\";\n+            // Finally, dump the rest of the file commented out\n+            while (getline_with_eol(stream_in, s)) {\n+                stream_out << \"#\" << s;\n+            }\n+            return;\n+        }\n+\n+        if (!inside_group) {\n+            // We don't support/use groups, so once we're inside key is always null to avoid setting anything\n+            n2 = s.find_last_not_of(ws_chars, n - 1);\n+            if (n2 == std::string::npos) {\n+                n2 = n - 1;\n+            } else {\n+                ++n2;\n+            }\n+            key = s.substr(0, n2);\n+        }\n+        if ((!key.empty()) && (iterCS = settings_to_change.find(key)) != settings_to_change.end() && setFound.find(key) == setFound.end()) {\n+            // This is the key we want to change\n+            const std::string& val = iterCS->second;\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            if (has_comment) {\n+                // Rather than change a commented line, comment it out entirely (the existing comment may relate to the value) and replace it\n+                stream_out << key << \"=\" << val << \"\\n\";\n+                linebegin.insert(linebegin.begin(), '#');\n+            } else {\n+                // Just modify the value in-line otherwise\n+                n2 = s.find_first_not_of(ws_chars, n + 1);\n+                if (n2 == std::string::npos) {\n+                    n2 = n + 1;\n+                }\n+                s = s.substr(0, n2) + val;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231662854",
      "id" : 231662854,
      "in_reply_to_id" : 231619701,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTY2Mjg1NA==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 260,
      "path" : "src/util/system.cpp",
      "position" : 262,
      "pull_request_review_id" : 172681240,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231662854",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231663311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231663311"
         }
      },
      "author_association" : "MEMBER",
      "body" : "C-style casts aren't good practice in C++.",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T20:21:37Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231663311",
      "id" : 231663311,
      "in_reply_to_id" : 231623141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTY2MzMxMQ==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 124,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 172681888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231663311",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231666685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231666685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agreed. `static_cast<char>(i)` then?\r\n\r\nThe reasons I personally prefer `static_cast<char>(i)`:\r\n* https://isocpp.org/wiki/faq/style-and-techniques#static-cast\r\n* https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es49-if-you-must-use-a-cast-use-a-named-cast\r\n* https://www.aristeia.com/EC3E/3E_item27.pdf\r\n",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T20:33:24Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231666685",
      "id" : 231666685,
      "in_reply_to_id" : 231623141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTY2NjY4NQ==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 124,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 172686222,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:56:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231666685",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231667115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231667115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I see your point and readability is probably more important than allocation efficiency in this case :-)",
      "commit_id" : "aecf63062314773b3bc903454210506be07c8af0",
      "created_at" : "2018-11-07T20:34:52Z",
      "diff_hunk" : "@@ -979,6 +1028,215 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n+namespace {\n+\n+    // Like std::getline, but includes the EOL character in the result\n+    static bool getline_with_eol(std::istream& streamIn, std::string& s)\n+    {\n+        int i;\n+        i = streamIn.get();\n+        if (i == std::char_traits<char>::eof()) {\n+            return false;\n+        }\n+        s.clear();\n+        s.push_back(char(i));\n+        while (i != '\\n') {\n+            i = streamIn.get();\n+            if (i == std::char_traits<char>::eof()) {\n+                break;\n+            }\n+            s.push_back(char(i));\n+        }\n+        return true;\n+    }\n+\n+    static const char * const ModifyRWConfigFile_ws_chars = \" \\t\\r\\n\";\n+\n+    static void ModifyRWConfigFile_SanityCheck(const std::string& s)\n+    {\n+        if (s.empty()) {\n+            // Dereferencing .begin or .rbegin below is invalid unless the string has at least one character.\n+            return;\n+        }\n+\n+        static const char * const newline_chars = \"\\r\\n\";\n+        static std::string ws_chars(ModifyRWConfigFile_ws_chars);\n+        if (s.find_first_of(newline_chars) != std::string::npos) {\n+            throw std::invalid_argument(\"New-line in config name/value\");\n+        }\n+        if (ws_chars.find(*s.begin()) != std::string::npos || ws_chars.find(*s.rbegin()) != std::string::npos) {\n+            throw std::invalid_argument(\"Config name/value has leading/trailing whitespace\");\n+        }\n+    }\n+\n+    static void ModifyRWConfigFile_WriteRemaining(std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change, std::set<std::string>& setFound)\n+    {\n+        for (const auto& pairSetting : settings_to_change) {\n+            const std::string& key = pairSetting.first;\n+            const std::string& val = pairSetting.second;\n+            if (setFound.find(key) != setFound.end()) {\n+                continue;\n+            }\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            stream_out << key << \"=\" << val << \"\\n\";\n+        }\n+    }\n+}\n+\n+void ModifyRWConfigStream(std::istream& stream_in, std::ostream& stream_out, const std::map<std::string, std::string>& settings_to_change)\n+{\n+    static const char * const ws_chars = ModifyRWConfigFile_ws_chars;\n+    std::set<std::string> setFound;\n+    std::string s, lineend, linebegin, key;\n+    std::string::size_type n, n2;\n+    bool inside_group = false, have_eof_nl = true, has_comment;\n+    std::map<std::string, std::string>::const_iterator iterCS;\n+    size_t lineno = 0;\n+    while (getline_with_eol(stream_in, s)) {\n+        ++lineno;\n+\n+        have_eof_nl = (!s.empty()) && (*s.rbegin() == '\\n');\n+        n = s.find('#');\n+        has_comment = (n != std::string::npos);\n+        if (!has_comment) {\n+            n = s.size();\n+        }\n+        n2 = s.find_last_not_of(ws_chars, n - 1);\n+        if (n2 != std::string::npos) {\n+            n = n2 + 1;\n+        }\n+        n2 = s.find_first_not_of(ws_chars);\n+        if (n2 == std::string::npos || n2 >= n) {\n+            // Blank or comment-only line\n+            stream_out << s;\n+            continue;\n+        }\n+        lineend = s.substr(n);\n+        linebegin = s.substr(0, n2);\n+        s = s.substr(n2, n - n2);\n+\n+        // It is impossible for s to be empty here, due to the blank line check above\n+        if (*s.begin() == '[' && *s.rbegin() == ']') {\n+            // We don't use sections, so we could possibly just write out the rest of the file - but we need to check for unparsable lines, so we just set a flag to ignore settings from here on\n+            ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+            inside_group = true;\n+            key.clear();\n+\n+            stream_out << linebegin << s << lineend;\n+            continue;\n+        }\n+\n+        n = s.find('=');\n+        if (n == std::string::npos) {\n+            // Bad line; this causes boost to throw an exception when parsing, so we comment out the entire file\n+            stream_in.seekg(0, std::ios_base::beg);\n+            stream_out.seekp(0, std::ios_base::beg);\n+            if (!(stream_in.good() && stream_out.good())) {\n+                throw std::ios_base::failure(\"Failed to rewind (to comment out existing file)\");\n+            }\n+            // First, write out all the settings we intend to set\n+            setFound.clear();\n+            ModifyRWConfigFile_WriteRemaining(stream_out, settings_to_change, setFound);\n+            // We then define a category to ensure new settings get added before the invalid stuff\n+            stream_out << \"[INVALID]\\n\";\n+            // Then, describe the problem in a comment\n+            stream_out << \"# Error parsing line \" << lineno << \": \" << s << \"\\n\";\n+            // Finally, dump the rest of the file commented out\n+            while (getline_with_eol(stream_in, s)) {\n+                stream_out << \"#\" << s;\n+            }\n+            return;\n+        }\n+\n+        if (!inside_group) {\n+            // We don't support/use groups, so once we're inside key is always null to avoid setting anything\n+            n2 = s.find_last_not_of(ws_chars, n - 1);\n+            if (n2 == std::string::npos) {\n+                n2 = n - 1;\n+            } else {\n+                ++n2;\n+            }\n+            key = s.substr(0, n2);\n+        }\n+        if ((!key.empty()) && (iterCS = settings_to_change.find(key)) != settings_to_change.end() && setFound.find(key) == setFound.end()) {\n+            // This is the key we want to change\n+            const std::string& val = iterCS->second;\n+            setFound.insert(key);\n+            ModifyRWConfigFile_SanityCheck(val);\n+            if (has_comment) {\n+                // Rather than change a commented line, comment it out entirely (the existing comment may relate to the value) and replace it\n+                stream_out << key << \"=\" << val << \"\\n\";\n+                linebegin.insert(linebegin.begin(), '#');\n+            } else {\n+                // Just modify the value in-line otherwise\n+                n2 = s.find_first_not_of(ws_chars, n + 1);\n+                if (n2 == std::string::npos) {\n+                    n2 = n + 1;\n+                }\n+                s = s.substr(0, n2) + val;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11082#discussion_r231667115",
      "id" : 231667115,
      "in_reply_to_id" : 231619701,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTY2NzExNQ==",
      "original_commit_id" : "2d2de023a4e2e00ed56f13eb22fd92dbd0836d1a",
      "original_position" : 260,
      "path" : "src/util/system.cpp",
      "position" : 262,
      "pull_request_review_id" : 172686767,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11082",
      "updated_at" : "2018-11-07T20:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231667115",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
