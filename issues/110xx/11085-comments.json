[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914169"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914169"
         }
      },
      "body" : "I think this should be called `DeriveNewMasterHDKey()`",
      "commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "created_at" : "2017-08-18T09:13:30Z",
      "diff_hunk" : "@@ -1410,7 +1410,11 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n {\n     CKey key;\n     key.MakeNewKey(true);\n+    return GenerateNewHDMasterKey(key);\n+}\n \n+CPubKey CWallet::GenerateNewHDMasterKey(CKey key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914169",
      "id" : 133914169,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 7,
      "path" : "src/wallet/wallet.cpp",
      "position" : 7,
      "pull_request_review_id" : 57149450,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-18T09:19:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914169",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914700"
         }
      },
      "body" : "What does prevent from setting a new seed in an existing HD wallet? Or do we want to allow that? If so, we should at least warn in the help text or even add an additional boolean to make sure the user is aware of the implications (hopefully). ",
      "commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "created_at" : "2017-08-18T09:16:02Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914700",
      "id" : 133914700,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 53,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 53,
      "pull_request_review_id" : 57149450,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-18T09:19:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914700",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914953"
         }
      },
      "body" : "Not flushing the pool may lead to unrecoverable funds. If one sets an HD seed without flushing, backup directly, he may miss `-keypoolsize` keys (maybe 100, maybe 1000).\r\nI'd say a flush is mandatory.",
      "commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "created_at" : "2017-08-18T09:17:25Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();\n+\n+    if (!pwallet->SetHDMasterKey(masterPubKey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+\n+    if (fFlushKeyPool)\n+        pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914953",
      "id" : 133914953,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 59,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 59,
      "pull_request_review_id" : 57149450,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-18T09:19:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914953",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916455"
         }
      },
      "body" : "It allows you to replace your existing HD seed with a new one, for example if you are worried that your old seed was exposed to a third party, you can switch to a new one without having to lose transaction history.",
      "commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "created_at" : "2017-08-18T09:25:24Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916455",
      "id" : 133916455,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 53,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 53,
      "pull_request_review_id" : 57152076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-18T09:25:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916455",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916778"
         }
      },
      "body" : "I don't understand. How do old un-flushed keys in the mempool cause loss of funds if the HD seed is changed but not if it isn't? They're either backed up or they're not.",
      "commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "created_at" : "2017-08-18T09:27:14Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();\n+\n+    if (!pwallet->SetHDMasterKey(masterPubKey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+\n+    if (fFlushKeyPool)\n+        pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916778",
      "id" : 133916778,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 59,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 59,
      "pull_request_review_id" : 57152495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-18T09:27:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916778",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916814"
         }
      },
      "body" : "Good point.",
      "commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "created_at" : "2017-08-18T09:27:25Z",
      "diff_hunk" : "@@ -1410,7 +1410,11 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n {\n     CKey key;\n     key.MakeNewKey(true);\n+    return GenerateNewHDMasterKey(key);\n+}\n \n+CPubKey CWallet::GenerateNewHDMasterKey(CKey key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916814",
      "id" : 133916814,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 7,
      "path" : "src/wallet/wallet.cpp",
      "position" : 7,
      "pull_request_review_id" : 57152539,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-18T09:27:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916814",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916837"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916837"
         }
      },
      "body" : "But shouldn't that worry (compromised seed key or compromised sub-key) lead to moving the funds to a new seed? It may hurts privacy is done in a single N-to-1.",
      "commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "created_at" : "2017-08-18T09:27:31Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916837",
      "id" : 133916837,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 53,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 53,
      "pull_request_review_id" : 57152561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-18T09:27:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916837",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> IMO multiwallet would provide a more sane path to run HD and nonHD side a side\r\n\r\nI wasn't aware of 'multiwallet' until I merged my changes to the master branch, and still haven't looked into it in any detail. If it allows me to see my pre-HD and post-HD transactions in a single unified list then I agree.",
      "created_at" : "2017-08-18T09:28:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#issuecomment-323306235",
      "id" : 323306235,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11085",
      "updated_at" : "2017-08-18T09:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/323306235",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133917780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133917780"
         }
      },
      "body" : "Your right. It would only be a problem if the user considers only backing up the seed (user may thinks I just need to backup the 64 char hex string) at this point.",
      "commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "created_at" : "2017-08-18T09:31:52Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();\n+\n+    if (!pwallet->SetHDMasterKey(masterPubKey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+\n+    if (fFlushKeyPool)\n+        pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133917780",
      "id" : 133917780,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 59,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 59,
      "pull_request_review_id" : 57153657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-18T09:31:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133917780",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
