[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914169"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914169"
         }
      },
      "body" : "I think this should be called `DeriveNewMasterHDKey()`",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-18T09:13:30Z",
      "diff_hunk" : "@@ -1410,7 +1410,11 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n {\n     CKey key;\n     key.MakeNewKey(true);\n+    return GenerateNewHDMasterKey(key);\n+}\n \n+CPubKey CWallet::GenerateNewHDMasterKey(CKey key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914169",
      "id" : 133914169,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 7,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 57149450,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-19T22:35:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914169",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914700"
         }
      },
      "body" : "What does prevent from setting a new seed in an existing HD wallet? Or do we want to allow that? If so, we should at least warn in the help text or even add an additional boolean to make sure the user is aware of the implications (hopefully). ",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-18T09:16:02Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914700",
      "id" : 133914700,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 53,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 57149450,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-19T22:35:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914700",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914953"
         }
      },
      "body" : "Not flushing the pool may lead to unrecoverable funds. If one sets an HD seed without flushing, backup directly, he may miss `-keypoolsize` keys (maybe 100, maybe 1000).\r\nI'd say a flush is mandatory.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-18T09:17:25Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();\n+\n+    if (!pwallet->SetHDMasterKey(masterPubKey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+\n+    if (fFlushKeyPool)\n+        pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133914953",
      "id" : 133914953,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 59,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 59,
      "pull_request_review_id" : 57149450,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-19T22:35:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133914953",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916455"
         }
      },
      "body" : "It allows you to replace your existing HD seed with a new one, for example if you are worried that your old seed was exposed to a third party, you can switch to a new one without having to lose transaction history.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-18T09:25:24Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916455",
      "id" : 133916455,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 53,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 57152076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-19T22:35:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916455",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916778"
         }
      },
      "body" : "I don't understand. How do old un-flushed keys in the mempool cause loss of funds if the HD seed is changed but not if it isn't? They're either backed up or they're not.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-18T09:27:14Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();\n+\n+    if (!pwallet->SetHDMasterKey(masterPubKey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+\n+    if (fFlushKeyPool)\n+        pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916778",
      "id" : 133916778,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 59,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 59,
      "pull_request_review_id" : 57152495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-19T22:35:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916778",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916814"
         }
      },
      "body" : "Good point.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-18T09:27:25Z",
      "diff_hunk" : "@@ -1410,7 +1410,11 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n {\n     CKey key;\n     key.MakeNewKey(true);\n+    return GenerateNewHDMasterKey(key);\n+}\n \n+CPubKey CWallet::GenerateNewHDMasterKey(CKey key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916814",
      "id" : 133916814,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 7,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 57152539,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-19T22:35:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916814",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916837"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916837"
         }
      },
      "body" : "But shouldn't that worry (compromised seed key or compromised sub-key) lead to moving the funds to a new seed? It may hurts privacy is done in a single N-to-1.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-18T09:27:31Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133916837",
      "id" : 133916837,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 53,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 57152561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-19T22:35:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133916837",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> IMO multiwallet would provide a more sane path to run HD and nonHD side a side\r\n\r\nI wasn't aware of 'multiwallet' until I merged my changes to the master branch, and still haven't looked into it in any detail. If it allows me to see my pre-HD and post-HD transactions in a single unified list then I agree.",
      "created_at" : "2017-08-18T09:28:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#issuecomment-323306235",
      "id" : 323306235,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11085",
      "updated_at" : "2017-08-18T09:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/323306235",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133917780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133917780"
         }
      },
      "body" : "Your right. It would only be a problem if the user considers only backing up the seed (user may thinks I just need to backup the 64 char hex string) at this point.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-18T09:31:52Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();\n+\n+    if (!pwallet->SetHDMasterKey(masterPubKey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+\n+    if (fFlushKeyPool)\n+        pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r133917780",
      "id" : 133917780,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 59,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 59,
      "pull_request_review_id" : 57153657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-19T22:35:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133917780",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134007614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134007614"
         }
      },
      "body" : "Yes, you would want to move funds from keys you suspect are compromised. The user is responsible for deciding how and when to move the funds. This pull request simply makes it possible to switch to a new uncompromised set of addresses.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-18T17:03:55Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134007614",
      "id" : 134007614,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 53,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 57257395,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-19T22:35:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134007614",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134008134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134008134"
         }
      },
      "body" : "If he only backs up the seed, he loses all his funds in pre-HD addresses whether we flush the keypool or not.\r\n\r\nWe default to flushing the keypool. If a user chooses not to flush the pool I think he likely understands what he's doing.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-18T17:06:51Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->GenerateNewHDMasterKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();\n+\n+    if (!pwallet->SetHDMasterKey(masterPubKey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+\n+    if (fFlushKeyPool)\n+        pwallet->NewKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134008134",
      "id" : 134008134,
      "original_commit_id" : "8152462f5836c2ff76ca7a5313a96fa0c7ff9844",
      "original_position" : 59,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 59,
      "pull_request_review_id" : 57258022,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-19T22:35:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134008134",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "body" : "This RPC should probably also bump the version number to at 139900 so that HD chain split is supported as well.",
      "created_at" : "2017-08-19T00:03:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#issuecomment-323485619",
      "id" : 323485619,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11085",
      "updated_at" : "2017-08-19T00:03:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/323485619",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "@jonasschnelli hmm, multiwallet has a rather significant usability burden (eg not being able to spend from both sides) vs just allowing people to add an HD master key to their wallet. I'm not sure why we wouldn't allow people to upgrade their wallet using the same -upgradewallet path.\r\n\r\nIndependantly, I do think we need the option to allow someone to rotate their HD master key if they desire (with appropriate backup warnings).",
      "created_at" : "2017-08-21T01:17:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#issuecomment-323625446",
      "id" : 323625446,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11085",
      "updated_at" : "2017-08-21T01:17:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/323625446",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134132858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134132858"
         }
      },
      "body" : "Needs way more documentation here (note it keeps old keys, you probably want to backup immediately after using this and before otherwise using your wallet, etc).",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T01:21:08Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134132858",
      "id" : 134132858,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 15,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 15,
      "pull_request_review_id" : 57389219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T01:21:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134132858",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@TheBlueMatt > I'm not sure why we wouldn't allow people to upgrade their wallet using the same -upgradewallet path.\r\n\r\nI don't think -upgradewallet should invalidate old backups, whereas setting the HD wallet seed *does* invalidate old backups if it flushes the keypool, which it does do by default. Perhaps that's an argument for keeping the seed-setting code separate from -upgradewallet, especially since a user may want to change his HD seed after setting it.\r\n\r\nIt would make sense to have -upgradewallet set an HD seed if it's not already set, but *not* flush the keypool. In that way the old backup isn't invalidated, and the user's old strategy of \"make new backup every 100 transactions\" remains safe.",
      "created_at" : "2017-08-21T20:19:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#issuecomment-323842576",
      "id" : 323842576,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11085",
      "updated_at" : "2017-08-21T20:19:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/323842576",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "body" : "@dooglus hmm, well if we dont want to use the same system (we could, of course, call the argument something different for this upgrade), then we've horribly fucked up (we used a wallet version number for HD support, so if we dont allow upgrade using the same version number stuff then we're left without any good options to add any other future features, eg segwit support).\r\n\r\nI'm fine with, eg, refusing to upgrade past HD unless you use -upgradetohd, and also it seems perfectly reasonable to not flush keypool with the HD upgrade (why tie them together? The user can flush separately if they want).\r\n\r\nI do think we need the ability to rotate the HD key before we add any other features past HD (cause we shouldnt force users into HD unless they can still use it as before by rotating their HD seed), so thanks for this.",
      "created_at" : "2017-08-21T20:52:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#issuecomment-323849809",
      "id" : 323849809,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11085",
      "updated_at" : "2017-08-21T20:52:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/323849809",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339046"
         }
      },
      "body" : "```cpp\r\nif (!request.params[1].isNull()) {\r\n```",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:44:03Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339046",
      "id" : 134339046,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 39,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 39,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339046",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339166"
         }
      },
      "body" : "```cpp\r\nif (!request.params[0].isNull()) {\r\n```",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:44:49Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339166",
      "id" : 134339166,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 35,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 35,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339166",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339248"
         }
      },
      "body" : "```cpp\r\nbool flush_key_pool = true;\r\n```",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:45:15Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339248",
      "id" : 134339248,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 34,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 34,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339248",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339354"
         }
      },
      "body" : "Missing `{ }`.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:45:55Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339354",
      "id" : 134339354,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 42,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 42,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339354",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339420"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339420"
         }
      },
      "body" : "Remove space before `<`.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:46:18Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339420",
      "id" : 134339420,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 45,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 45,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339420",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339462"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339462"
         }
      },
      "body" : "Missing `{ }`.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:46:32Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339462",
      "id" : 134339462,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 48,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 48,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339462",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339677"
         }
      },
      "body" : "Missing `{ }`.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:47:48Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->DeriveNewMasterHDKey(key);\n+    } else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339677",
      "id" : 134339677,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 52,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 52,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339677",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339692"
         }
      },
      "body" : "Missing `{ }`.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:47:55Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->DeriveNewMasterHDKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();\n+\n+    if (!pwallet->SetHDMasterKey(masterPubKey))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339692",
      "id" : 134339692,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 55,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 55,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339692",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339730"
         }
      },
      "body" : "Missing `{ }`.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:48:04Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");\n+\n+        masterPubKey = pwallet->DeriveNewMasterHDKey(key);\n+    } else\n+        masterPubKey = pwallet->GenerateNewHDMasterKey();\n+\n+    if (!pwallet->SetHDMasterKey(masterPubKey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+\n+    if (fFlushKeyPool)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339730",
      "id" : 134339730,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 58,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 58,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339730",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339965"
         }
      },
      "body" : "`const CKey& key`?",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:49:10Z",
      "diff_hunk" : "@@ -1410,7 +1410,11 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n {\n     CKey key;\n     key.MakeNewKey(true);\n+    return DeriveNewMasterHDKey(key);\n+}\n \n+CPubKey CWallet::DeriveNewMasterHDKey(CKey key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134339965",
      "id" : 134339965,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 7,
      "path" : "src/wallet/wallet.cpp",
      "position" : 7,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134339965",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134340183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134340183"
         }
      },
      "body" : "Remove space before `*`.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:50:21Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134340183",
      "id" : 134340183,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 6,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 6,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134340183",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134340913"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134340913"
         }
      },
      "body" : "`master_pub_key`?",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:54:31Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134340913",
      "id" : 134340913,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 38,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 38,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134340913",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134341868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134341868"
         }
      },
      "body" : "Similar error in https://github.com/bitcoin/bitcoin/blame/master/src/wallet/rpcdump.cpp#L825.",
      "commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "created_at" : "2017-08-21T21:59:39Z",
      "diff_hunk" : "@@ -3132,6 +3132,66 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) A 64 character hex string to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool fFlushKeyPool = true;\n+    if (request.params.size() > 0)\n+        fFlushKeyPool = request.params[0].get_bool();\n+\n+    CPubKey masterPubKey;\n+    if (request.params.size() > 1) {\n+        CKey key;\n+        std::string strKey = AccountFromValue(request.params[1]);\n+        if (strKey.length() != 64 || !IsHex(strKey))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Key should be 64 hex characters\");\n+\n+        std::vector <unsigned char> vch = ParseHex(strKey);\n+        key.Set(vch.begin(), vch.end(), true);\n+\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Key already exists in wallet\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11085#discussion_r134341868",
      "id" : 134341868,
      "original_commit_id" : "81c1d0cb25fe04fb9a17e413300321363d419427",
      "original_position" : 49,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 49,
      "pull_request_review_id" : 57619033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11085",
      "updated_at" : "2017-08-21T22:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134341868",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   }
]
