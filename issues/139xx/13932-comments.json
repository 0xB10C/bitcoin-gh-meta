[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14678](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14678.html) ([wallet] remove redundant KeyOriginInfo access, already done in CreateSig by instagibbs)\n* [#14505](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14505.html) (Make all single parameter constructors explicit (C++11). Add explicit constructor linter. by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-08-09T22:37:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-411919967",
      "id" : 411919967,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxMTkxOTk2Nw==",
      "updated_at" : "2018-11-17T03:59:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/411919967",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  It only works with witness UTXOs because full transactions (as would be needed for non-witness UTXOs) are not available unless txindex is enabled.\r\n\r\nIt doesn't look in the wallet?",
      "created_at" : "2018-08-10T05:53:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-411982919",
      "id" : 411982919,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxMTk4MjkxOQ==",
      "updated_at" : "2018-08-10T05:53:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/411982919",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@gmaxwell `walletprocesspsbt` already exists for that. This is a node RPC that works without a wallet.",
      "created_at" : "2018-08-10T06:07:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-411984826",
      "id" : 411984826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxMTk4NDgyNg==",
      "updated_at" : "2018-08-10T06:07:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/411984826",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2018-08-14T20:48:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-413010930",
      "id" : 413010930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxMzAxMDkzMA==",
      "updated_at" : "2018-08-14T20:48:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/413010930",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2018-08-28T21:53:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-416753468",
      "id" : 416753468,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNjc1MzQ2OA==",
      "updated_at" : "2018-08-28T21:53:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/416753468",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213502647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213502647"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could reduce indentation?",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-08-28T23:19:40Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213502647",
      "id" : 213502647,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUwMjY0Nw==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 16,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 150353114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213502647",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213504242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213504242"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be more informative?",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-08-28T23:29:53Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213504242",
      "id" : 213504242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUwNDI0Mg==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 118,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 123,
      "pull_request_review_id" : 150353114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213504242",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213504324"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213504324"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should allow duplicate outputs? Or should sum values into one output?",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-08-28T23:30:27Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213504324",
      "id" : 213504324,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUwNDMyNA==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 122,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 127,
      "pull_request_review_id" : 150353114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213504324",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213505237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213505237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So this is necessary because the first is a copy and the remaining psbt inputs are cleared because of `AddInput`. Maybe remove this \"optimization\" and merge all psbts to an empty psbt?",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-08-28T23:36:08Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213505237",
      "id" : 213505237,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUwNTIzNw==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 111,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 116,
      "pull_request_review_id" : 150353114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213505237",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213507178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213507178"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should force `txs.size() > 1`?",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-08-28T23:48:17Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r213507178",
      "id" : 213507178,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUwNzE3OA==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 98,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 103,
      "pull_request_review_id" : 150353114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213507178",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r215157287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215157287"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The scope of `size` could be reduced?",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-09-05T07:11:16Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"analyzepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                            \"    {\\n\"\n+                            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                            \"        ]\\n\"\n+                            \"        \\\"signatures\\\" : [          (array)\\n\"\n+                            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                            \"        ]\\n\"\n+                            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                            \"      }\\n\"\n+                            \"    }\\n\"\n+                            \"    ,...\\n\"\n+                            \"  ]\\n\"\n+                            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, i, 1, &missing_pubkeys, &missing_sigs, &missing_redeem_script, &missing_witness_script);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(missing_redeem_script));\n+                }\n+                if (!missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(missing_witness_script));\n+                }\n+                if (!missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (missing_pubkeys.empty() && missing_redeem_script.IsNull() && missing_witness_script.IsNull() && !missing_sigs.empty()) {\n+                    only_missing_sigs = true;\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else {\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = 0;\n+        for (const CTxOut& out : psbtx.tx->vout) {\n+            out_amt += out.nValue;\n+        }\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+\n+        // Estimate the size\n+        size_t size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r215157287",
      "id" : 215157287,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE1NzI4Nw==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 276,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 152360007,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215157287",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-09-10T18:22:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-420011756",
      "id" : 420011756,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMDAxMTc1Ng==",
      "updated_at" : "2018-09-10T18:22:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/420011756",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217562904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217562904"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What else could be said?",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-09-13T23:21:44Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217562904",
      "id" : 217562904,
      "in_reply_to_id" : 213504242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2MjkwNA==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 118,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 123,
      "pull_request_review_id" : 155307683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217562904",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217563202"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217563202"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Duplicate outputs should be allowed. The idea is that there are two distinct transactions with separate inputs and outputs. They are just being combined into one transaction. Thus you can have duplicate outputs as outputs are still unique. However the inputs must be enforced to be unique.",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-09-13T23:23:15Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217563202",
      "id" : 217563202,
      "in_reply_to_id" : 213504324,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2MzIwMg==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 122,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 127,
      "pull_request_review_id" : 155307998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217563202",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217563440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217563440"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't see how that is better.",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-09-13T23:24:42Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217563440",
      "id" : 217563440,
      "in_reply_to_id" : 213505237,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2MzQ0MA==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 111,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 116,
      "pull_request_review_id" : 155308261,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217563440",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-09-13T23:51:39Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567515",
      "id" : 217567515,
      "in_reply_to_id" : 213502647,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2NzUxNQ==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 16,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 155312917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567515",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567536"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567536"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-09-13T23:51:46Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567536",
      "id" : 217567536,
      "in_reply_to_id" : 213507178,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2NzUzNg==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 98,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 103,
      "pull_request_review_id" : 155312935,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567536",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567543"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567543"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-09-13T23:51:50Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"analyzepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                            \"    {\\n\"\n+                            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                            \"        ]\\n\"\n+                            \"        \\\"signatures\\\" : [          (array)\\n\"\n+                            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                            \"        ]\\n\"\n+                            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                            \"      }\\n\"\n+                            \"    }\\n\"\n+                            \"    ,...\\n\"\n+                            \"  ]\\n\"\n+                            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, i, 1, &missing_pubkeys, &missing_sigs, &missing_redeem_script, &missing_witness_script);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(missing_redeem_script));\n+                }\n+                if (!missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(missing_witness_script));\n+                }\n+                if (!missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (missing_pubkeys.empty() && missing_redeem_script.IsNull() && missing_witness_script.IsNull() && !missing_sigs.empty()) {\n+                    only_missing_sigs = true;\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else {\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = 0;\n+        for (const CTxOut& out : psbtx.tx->vout) {\n+            out_amt += out.nValue;\n+        }\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+\n+        // Estimate the size\n+        size_t size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r217567543",
      "id" : 217567543,
      "in_reply_to_id" : 215157287,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzU2NzU0Mw==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 276,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 155312949,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217567543",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2018-09-13T23:51:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-421187586",
      "id" : 421187586,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTE4NzU4Ng==",
      "updated_at" : "2018-09-13T23:51:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421187586",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r221827004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/221827004"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: Sort imports :-)",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-10-02T05:14:10Z",
      "diff_hunk" : "@@ -7,6 +7,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, find_output\n+from decimal import Decimal",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r221827004",
      "id" : 221827004,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTgyNzAwNA==",
      "original_commit_id" : "9004ce4969eb2e9ca255a5508fd0dcab180b0d31",
      "original_position" : 4,
      "path" : "test/functional/rpc_psbt.py",
      "position" : 6,
      "pull_request_review_id" : 160568659,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/221827004",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-11-01T16:05:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-435091165",
      "id" : 435091165,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNTA5MTE2NQ==",
      "updated_at" : "2018-11-01T16:05:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/435091165",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r230893599"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230893599"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unused?",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-11-05T20:06:27Z",
      "diff_hunk" : "@@ -1693,6 +1694,324 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+            \"    [\\n\"\n+            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"analyzepsbt \\\"psbt\\\"\\n\"\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"      }\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r230893599",
      "id" : 230893599,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDg5MzU5OQ==",
      "original_commit_id" : "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "original_position" : 218,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 218,
      "pull_request_review_id" : 171736107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230893599",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r230893649"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230893649"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unused?",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-11-05T20:06:36Z",
      "diff_hunk" : "@@ -1693,6 +1694,324 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+            \"    [\\n\"\n+            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"analyzepsbt \\\"psbt\\\"\\n\"\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"      }\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, i, 1, &missing_pubkeys, &missing_sigs, &missing_redeem_script, &missing_witness_script);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(missing_redeem_script));\n+                }\n+                if (!missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(missing_witness_script));\n+                }\n+                if (!missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (missing_pubkeys.empty() && missing_redeem_script.IsNull() && missing_witness_script.IsNull() && !missing_sigs.empty()) {\n+                    only_missing_sigs = true;\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else {\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = 0;\n+        for (const CTxOut& out : psbtx.tx->vout) {\n+            out_amt += out.nValue;\n+        }\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+\n+        // Estimate the size\n+        CMutableTransaction mtx(*psbtx.tx);\n+        CCoinsView view_dummy;\n+        CCoinsViewCache view(&view_dummy);\n+        bool success = true;\n+\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs[i];\n+            SignatureData sigdata;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r230893649",
      "id" : 230893649,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDg5MzY0OQ==",
      "original_commit_id" : "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "original_position" : 288,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 288,
      "pull_request_review_id" : 171736165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230893649",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r232174511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232174511"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could use `std::accumulate`? :-)",
      "commit_id" : "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "created_at" : "2018-11-09T08:36:36Z",
      "diff_hunk" : "@@ -1693,6 +1694,324 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+            \"    [\\n\"\n+            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"analyzepsbt \\\"psbt\\\"\\n\"\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"      }\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, i, 1, &missing_pubkeys, &missing_sigs, &missing_redeem_script, &missing_witness_script);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(missing_redeem_script));\n+                }\n+                if (!missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(missing_witness_script));\n+                }\n+                if (!missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (missing_pubkeys.empty() && missing_redeem_script.IsNull() && missing_witness_script.IsNull() && !missing_sigs.empty()) {\n+                    only_missing_sigs = true;\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else {\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = 0;\n+        for (const CTxOut& out : psbtx.tx->vout) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r232174511",
      "id" : 232174511,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjE3NDUxMQ==",
      "original_commit_id" : "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "original_position" : 273,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 273,
      "pull_request_review_id" : 173313725,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-09T08:36:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232174511",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r232348313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232348313"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: Looks like a case for `std::accumulate` perhaps? :-)",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-11-09T18:27:27Z",
      "diff_hunk" : "@@ -1693,6 +1694,324 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+            \"    [\\n\"\n+            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"analyzepsbt \\\"psbt\\\"\\n\"\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+            \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+            \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+            \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"signatures\\\" : [          (array)\\n\"\n+            \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+            \"        ]\\n\"\n+            \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+            \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+            \"        \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+            \"      }\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+            \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+            \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = false;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (input.GetUTXO(utxo, psbtx.tx->vin[i].prevout.n)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (input.final_script_sig.empty() && input.final_script_witness.IsNull()) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            std::vector<CKeyID> missing_pubkeys;\n+            std::vector<CKeyID> missing_sigs;\n+            uint160 missing_redeem_script;\n+            uint256 missing_witness_script;\n+            SignatureData sigdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, i, 1, &missing_pubkeys, &missing_sigs, &missing_redeem_script, &missing_witness_script);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(missing_redeem_script));\n+                }\n+                if (!missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(missing_witness_script));\n+                }\n+                if (!missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (missing_pubkeys.empty() && missing_redeem_script.IsNull() && missing_witness_script.IsNull() && !missing_sigs.empty()) {\n+                    only_missing_sigs = true;\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else {\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = 0;\n+        for (const CTxOut& out : psbtx.tx->vout) {\n+            out_amt += out.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r232348313",
      "id" : 232348313,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjM0ODMxMw==",
      "original_commit_id" : "ba5f9058f6c874cd1a76b5fa468b2e9c58e4604a",
      "original_position" : 274,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 274,
      "pull_request_review_id" : 173533990,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-17T01:36:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232348313",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-11-10T04:42:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-437557927",
      "id" : 437557927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNzU1NzkyNw==",
      "updated_at" : "2018-11-10T04:42:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/437557927",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2018-11-17T01:38:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#issuecomment-439576833",
      "id" : 439576833,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13932",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTU3NjgzMw==",
      "updated_at" : "2018-11-17T01:38:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439576833",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234827979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234827979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Like the conflicting input index?",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-11-20T00:06:37Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234827979",
      "id" : 234827979,
      "in_reply_to_id" : 213504242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgyNzk3OQ==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 118,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 123,
      "pull_request_review_id" : 176554059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-20T00:06:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234827979",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234828603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234828603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@achow101 could you ack/nack on #12419, esp @MeshCollider https://github.com/bitcoin/bitcoin/pull/12419#issuecomment-437636604",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-11-20T00:09:48Z",
      "diff_hunk" : "@@ -1791,6 +1792,320 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+                            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+                            \"joinpsbts [\\\"psbt\\\",...]\\n\"\n+                            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+                            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txs\\\"                   (string) A json array of base64 strings of partially signed transactions\\n\"\n+                            \"    [\\n\"\n+                            \"      \\\"psbt\\\"             (string) A base64 string of a PSBT\\n\"\n+                            \"      ,...\\n\"\n+                            \"    ]\\n\"\n+\n+                            \"\\nResult:\\n\"\n+                            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+                            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+    }\n+\n+    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n+\n+    // Clear signatures from all inputs\n+    for (auto& input : merged_psbt.inputs) {\n+        input.partial_sigs.clear();\n+    }\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        for (unsigned int i = 0; i < it->tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(it->tx->vin[i], it->inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"An input exists in multiple PSBTs\");\n+            }\n+        }\n+        for (unsigned int i = 0; i < it->tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(it->tx->vout[i], it->outputs[i]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234828603",
      "id" : 234828603,
      "in_reply_to_id" : 213504324,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgyODYwMw==",
      "original_commit_id" : "f29d03c08e587b9eddb4d205b46eff7cb01f0328",
      "original_position" : 122,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 127,
      "pull_request_review_id" : 176554765,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-20T00:09:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234828603",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234829077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234829077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should use `RPCHelpMan` from #14530.",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-11-20T00:12:20Z",
      "diff_hunk" : "@@ -1773,6 +1773,67 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234829077",
      "id" : 234829077,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgyOTA3Nw==",
      "original_commit_id" : "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "original_position" : 8,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 16,
      "pull_request_review_id" : 176555323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-20T00:22:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234829077",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234830911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234830911"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could add test for this error.",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-11-20T00:22:00Z",
      "diff_hunk" : "@@ -1773,6 +1773,67 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"utxoupdatepsbt \\\"psbt\\\"\\n\"\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"psbt\\\"                 (string) A base64 string of a PSBT\\n\"\n+            \"\\nResult:\\n\"\n+            \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234830911",
      "id" : 234830911,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgzMDkxMQ==",
      "original_commit_id" : "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "original_position" : 24,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 32,
      "pull_request_review_id" : 176555323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-20T00:22:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234830911",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234830933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234830933"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, `{`",
      "commit_id" : "afdec9a0ef6c2d77e0a92650d8800e6be56d8950",
      "created_at" : "2018-11-20T00:22:07Z",
      "diff_hunk" : "@@ -1773,6 +1773,67 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13932#discussion_r234830933",
      "id" : 234830933,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDgzMDkzMw==",
      "original_commit_id" : "f2a2f06fed01829e1f1ae574f50cce841fdcbbff",
      "original_position" : 6,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 14,
      "pull_request_review_id" : 176555323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13932",
      "updated_at" : "2018-11-20T00:22:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234830933",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   }
]
