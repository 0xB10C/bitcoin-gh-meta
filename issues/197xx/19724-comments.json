[
   {
      "author_association" : "MEMBER",
      "body" : "I'm not 100% convinced about replacing `IsAddrRelayPeer()` with `RelayAddrsWithConn()`  9345f9c9d47a88987606d1421823914a4c48dbf9. \r\n\r\nPros: \r\n- It is more direct to check the connection type instead of a (missing) data structure based on the connection type.\r\n- Easy to update logic in the future \r\n- Less mental overhead, less code touch points to glean intention. \r\n\r\nCons: \r\n- We are now checking the same conditional in two places- [[1](https://github.com/bitcoin/bitcoin/pull/19724/commits/9345f9c9d47a88987606d1421823914a4c48dbf9#diff-1a8b9d1ad0a6fda5e751286c73102fc2R867)] & [[2](https://github.com/bitcoin/bitcoin/blob/master/src/net.cpp#L2783)], and need to manually ensure they do not fall out of sync. \r\n\r\nCurious to hear what other reviewers think is preferable. ",
      "created_at" : "2020-08-14T22:32:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-674298044",
      "id" : 674298044,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19724",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDI5ODA0NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-14T22:59:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674298044",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@amitiuttarwar I think it makes sense to make the addr-relay decision depend on the connection type. That should be the most authoritative information about the connection. Sure, it's duplication, but if we accidentally forget to create the necessary data structures, test will fail; if we accidentally create them if they're not needed, at worst we've wasted a bit of memory we're already ok with for other nodes.",
      "created_at" : "2020-08-14T23:53:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-674314573",
      "id" : 674314573,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19724",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDMxNDU3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-14T23:53:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674314573",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r470950246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470950246"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style-nit:\r\n\r\n```suggestion\r\n                switch (pnode->m_conn_type) {\r\n```\r\n\r\nif you decide to do style-fixups, it would probably be good to do all of them in one go or not at all. Maybe with clang-format-diff?   https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy ",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-15T07:38:46Z",
      "diff_hunk" : "@@ -1841,11 +1841,11 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 // but inbound and manual peers do not use our outbound slots. Inbound peers\n                 // also have the added issue that they could be attacker controlled and used\n                 // to prevent us from connecting to particular hosts if we used them here.\n-                switch(pnode->m_conn_type){\n+                switch (pnode->m_conn_type){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r470950246",
      "id" : 470950246,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1MDI0Ng==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 1844,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 467955141,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470950246",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r470962473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470962473"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If we're cleaning this up, we should really clean it up and move the `connman.MarkAddressGood()` out of this if statement, since it's not related to address advertising at all. Having it in the same conditional is a trap for developers to fall into.\r\n\r\n(specifically, a developer might think \"we don't need to advertise our address to FEELER connections, since we disconnect before we actually send the ADDR or GETADDR messages, so we can remove FEELER from AdvertiseAddressToConn\", but doing that breaks our FEELER connection logic, because `MarkAddressGood()` needs to be called to mark the address as good)\r\n\r\ncc @sdaftuar ",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-15T10:16:06Z",
      "diff_hunk" : "@@ -2433,9 +2433,8 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())\n+        if (pfrom.AdvertiseAddressToConn())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r470962473",
      "id" : 470962473,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MjQ3Mw==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 2436,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 467962627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470962473",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Strong strong concept ACK.\r\n\r\nI think it'd be good to extract everything in the `while (!interruptNet)` in `ThreadOpenConnections()` into its own function since deeply nested while/for/if blocks obscure control flow and are very often the sources of bugs. Doing that might be scope creep for this PR though.",
      "created_at" : "2020-08-15T10:18:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-674379263",
      "id" : 674379263,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19724",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDM3OTI2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-15T10:18:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674379263",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r471019849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471019849"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I was looking at this more and I believe we should leave the MarkAddressGood call in the if-block, though it needs an explanationâ the reason (I think) is that we donât want block-relay connections to leave a trace in the addrman that could be leaked by an attacker sniffing our addr responses.\r\n\r\nSo this just needs a comment explaining why itâs in here.\r\n",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-15T18:08:07Z",
      "diff_hunk" : "@@ -2433,9 +2433,8 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())\n+        if (pfrom.AdvertiseAddressToConn())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r471019849",
      "id" : 471019849,
      "in_reply_to_id" : 470962473,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxOTg0OQ==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 2436,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 468009053,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471019849",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r471090087"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471090087"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you explain this a bit? I think you're saying that if we connect out to a peer that we use for block-relay-only we don't want to mark it as good (essentially move it from New to Tried and update the last successful connect time) because then another peer might be able to tell that we've connected to them?\r\n\r\nMy understanding of how we respond to `getaddr` messages is that we'll respond with (up to) 1000 records taken at random from all records, regardless of whether they're in New or Tried, so marking a peer as good won't change whether we include it in `addr` responses.",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-16T09:38:35Z",
      "diff_hunk" : "@@ -2433,9 +2433,8 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())\n+        if (pfrom.AdvertiseAddressToConn())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r471090087",
      "id" : 471090087,
      "in_reply_to_id" : 470962473,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDA4Nw==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 2436,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 468049187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471090087",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r471131850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471131850"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't have a great understanding of the details of how addrman works or how we interact with it -- so possibly the fear was unfounded.  It used to be the case that you could trivially download a listening node's addrman though, and it also used to be the case (perhaps only long ago?) that we'd leak information about current connections based on time stamps stored in our addrman, so when I worked on #15759 I tried to [leave the addrman state unchanged](https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-480398802) when making block-relay-only connections.\r\n\r\nI'm not sure that I fully succeeded in not leaking information, or that the concern is correct to begin with given how addrman already works.  So it's possible that with some analysis we could make improvements here.  Maybe not appropriate for this pr though...",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-16T16:29:01Z",
      "diff_hunk" : "@@ -2433,9 +2433,8 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())\n+        if (pfrom.AdvertiseAddressToConn())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r471131850",
      "id" : 471131850,
      "in_reply_to_id" : 470962473,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzMTg1MA==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 2436,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 468077363,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471131850",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r472084750"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472084750"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe there are three ways that a peer's record is updated in addrman when we're connected to them:\r\n\r\n1. when we receive a `version` message from them, we'll mark their address good. That moves the address from the new table to the tried table, and updates the `nLastSuccess`/`nLastTry`/`nAttempts` fields. We only do this if the peer isn't inbound and isn't block-relay-only. I don't believe this change can easily be detected by a peer sending us `getaddr` messages.\r\n2. if a peer self-advertises to us, we'll call `AddAddressKnown()`, which could update the `nTime`, which is included in the address record that we send to a peer in response to a `getaddr` request.\r\n3. when we disconnect from the peer, we'll update the `nTime`, as long as the peer was marked as `fCurrentlyConnected`. That happens when we receive a `verack` from a peer which is not inbound. This doesn't include feeler peers, since we disconnect from them as soon as we receive a `version` message from them. The `nTime` is only updated during disconnection so spies can't find out who we're currently connected to (https://github.com/bitcoin/bitcoin/pull/5860#issuecomment-78397140).\r\n\r\nIn summary, I think block-relay-only peers _should_ have their address marked good when we connect to them (1). If we don't, then we'll update the `nLastTry` and `nAttempts` fields when we attempt to connect to them, but not update the `nLastSuccess`.\r\n\r\nThe reason it's important in this PR is that placing `MarkAddressGood()` behind a conditional `if (AdvertiseAddressToConn())` is very confusing for anyone reading the code, and makes it easy to introduce subtle bugs.",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-18T10:42:50Z",
      "diff_hunk" : "@@ -2433,9 +2433,8 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())\n+        if (pfrom.AdvertiseAddressToConn())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r472084750",
      "id" : 472084750,
      "in_reply_to_id" : 470962473,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA4NDc1MA==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 2436,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 469203968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472084750",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r473793235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473793235"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I really dislike these functions being inside `CNode` (same as https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464526492). This is very specific net_processing logic, rather than a general property of the CNode. Having the logic inside net.h rather than at the point it's needed makes it less readable.",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-20T09:06:51Z",
      "diff_hunk" : "@@ -838,37 +838,89 @@ class CNode\n         assert(false);\n     }\n \n+    /* These are the default connections that we use to connect with the\n+     * network. There is no restriction on the inventory relayed- by default we\n+     * relay blocks, addresses & transactions. We attempt to open\n+     * MAX_OUTBOUND_FULL_RELAY_CONNECTIONS using addresses from our AddrMan.\n+     */\n     bool IsFullOutboundConn() const {\n-        return m_conn_type == ConnectionType::OUTBOUND;\n+        return m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY;\n     }\n \n+    /* We open manual connections to addresses that users explicitly inputted\n+     * via the addnode RPC, or the -connect command line argument. Even if a\n+     * manual connection is misbehaving, we do not automatically disconnect or\n+     * add it to our discouragement filter.\n+     */\n     bool IsManualConn() const {\n         return m_conn_type == ConnectionType::MANUAL;\n     }\n \n+    /* After meeting our quota for full outbound connections, we attempt to\n+     * open MAX_BLOCK_RELAY_ONLY_CONNECTIONS to help prevent against partition\n+     * attacks. By not relaying transactions or addresses, these connections\n+     * are harder to detect by a third party, thus helping obfuscate the\n+     * network topology.\n+     */\n     bool IsBlockOnlyConn() const {\n         return m_conn_type == ConnectionType::BLOCK_RELAY;\n     }\n \n+    /* Feeler connections are short lived connections used to increase the\n+     * number of connectable addresses in our AddrMan. Approximately every\n+     * FEELER_INTERVAL, we attempt to connect to a random address from the new\n+     * table. If successful, we add it to the tried table.\n+     */\n     bool IsFeelerConn() const {\n         return m_conn_type == ConnectionType::FEELER;\n     }\n \n+    /* AddrFetch connections are short lived connections used to solicit\n+     * addresses from peers. These are initiated to addresses submitted via the\n+     * -seednode command line argument, or under certain conditions when the\n+     * AddrMan is empty.\n+     */\n     bool IsAddrFetchConn() const {\n         return m_conn_type == ConnectionType::ADDR_FETCH;\n     }\n \n+    /* Inbound connections are those initiated by a peer. This is the only\n+     * property we know at the time of connection, until P2P messages are\n+     * exchanged.\n+     */\n     bool IsInboundConn() const {\n         return m_conn_type == ConnectionType::INBOUND;\n     }\n \n+    /* Whether we send addr messages over this connection */\n+    bool RelayAddrsWithConn() const {\n+        return m_conn_type != ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    /* Whether we attempt to advertise our own address to the peer when\n+     * processing their VERSION message */\n+    bool AdvertiseAddressToConn() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r473793235",
      "id" : 473793235,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5MzIzNQ==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 902,
      "original_position" : 95,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 471403773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473793235",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r473802643"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473802643"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Format these as doxygen comments (start with `/**`) https://www.doxygen.nl/manual/docblocks.html",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-20T09:18:16Z",
      "diff_hunk" : "@@ -838,37 +838,89 @@ class CNode\n         assert(false);\n     }\n \n+    /* These are the default connections that we use to connect with the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r473802643",
      "id" : 473802643,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwMjY0Mw==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 841,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 471403773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473802643",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r473805346"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473805346"
         }
      },
      "author_association" : "MEMBER",
      "body" : "These are great comments. Thank you! Should they be merged with the comments above on the enum members?",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-20T09:21:36Z",
      "diff_hunk" : "@@ -838,37 +838,89 @@ class CNode\n         assert(false);\n     }\n \n+    /* These are the default connections that we use to connect with the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r473805346",
      "id" : 473805346,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwNTM0Ng==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 841,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 471403773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473805346",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474161665"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474161665"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yeah I felt very indecisive when trying to figure out the best spots for the comments. here what I've gone for is having the enum comments be a more concise description of the nature of the connection, and the function provide more context around design goals, capacity, etc. \r\n\r\nI don't think the split is super clear though, so yeah, maybe it would be more helpful to consolidate it all into the enum member comments. is that what you're advocating for? or just trying to weigh like me? âï¸  ð",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-20T17:40:42Z",
      "diff_hunk" : "@@ -838,37 +838,89 @@ class CNode\n         assert(false);\n     }\n \n+    /* These are the default connections that we use to connect with the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474161665",
      "id" : 474161665,
      "in_reply_to_id" : 473805346,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MTY2NQ==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 841,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 471843142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474161665",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474184122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474184122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yes, consolidate them to one place. I think the enum is the right place for them.",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-20T18:22:03Z",
      "diff_hunk" : "@@ -838,37 +838,89 @@ class CNode\n         assert(false);\n     }\n \n+    /* These are the default connections that we use to connect with the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474184122",
      "id" : 474184122,
      "in_reply_to_id" : 473805346,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NDEyMg==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 841,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 471872069,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T02:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474184122",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19763 (net: don't try to relay to the address' originator by vasild)\n* #19725 ([RPC] Add connection type to getpeerinfo, improve logs by amitiuttarwar)\n* #19704 (Net processing: move ProcessMessage() to PeerLogicValidation by jnewbery)\n* #17194 (p2p: Avoid forwarding ADDR messages to SPV nodes by naumenkogs)\n* #15606 ([experimental] UTXO snapshots by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-08-20T20:24:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-677884934",
      "id" : 677884934,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19724",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3Nzg4NDkzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-20T20:24:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677884934",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474383770"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474383770"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done! ",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-21T03:09:31Z",
      "diff_hunk" : "@@ -838,37 +838,89 @@ class CNode\n         assert(false);\n     }\n \n+    /* These are the default connections that we use to connect with the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474383770",
      "id" : 474383770,
      "in_reply_to_id" : 473805346,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4Mzc3MA==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 841,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 472117367,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T03:09:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474383770",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474384238"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474384238"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oof. so many options and yet I still missed the mark ð . moved the comments to the enum, but fixed this problem. thanks! ",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-21T03:11:23Z",
      "diff_hunk" : "@@ -838,37 +838,89 @@ class CNode\n         assert(false);\n     }\n \n+    /* These are the default connections that we use to connect with the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474384238",
      "id" : 474384238,
      "in_reply_to_id" : 473802643,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4NDIzOA==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 841,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 472117871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T03:11:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474384238",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474385471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474385471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yeah, I agree. this is why I initially opted for having `m_conn_type` as a public member var, but feedback on #19316 led me to switching to private. anyway, given the current state, its a bit unfortunate we don't get the additional guarantee of a switch, but I agree with you & incorporated this feedback so it can be more understandable from the call site. ",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-21T03:16:30Z",
      "diff_hunk" : "@@ -838,37 +838,89 @@ class CNode\n         assert(false);\n     }\n \n+    /* These are the default connections that we use to connect with the\n+     * network. There is no restriction on the inventory relayed- by default we\n+     * relay blocks, addresses & transactions. We attempt to open\n+     * MAX_OUTBOUND_FULL_RELAY_CONNECTIONS using addresses from our AddrMan.\n+     */\n     bool IsFullOutboundConn() const {\n-        return m_conn_type == ConnectionType::OUTBOUND;\n+        return m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY;\n     }\n \n+    /* We open manual connections to addresses that users explicitly inputted\n+     * via the addnode RPC, or the -connect command line argument. Even if a\n+     * manual connection is misbehaving, we do not automatically disconnect or\n+     * add it to our discouragement filter.\n+     */\n     bool IsManualConn() const {\n         return m_conn_type == ConnectionType::MANUAL;\n     }\n \n+    /* After meeting our quota for full outbound connections, we attempt to\n+     * open MAX_BLOCK_RELAY_ONLY_CONNECTIONS to help prevent against partition\n+     * attacks. By not relaying transactions or addresses, these connections\n+     * are harder to detect by a third party, thus helping obfuscate the\n+     * network topology.\n+     */\n     bool IsBlockOnlyConn() const {\n         return m_conn_type == ConnectionType::BLOCK_RELAY;\n     }\n \n+    /* Feeler connections are short lived connections used to increase the\n+     * number of connectable addresses in our AddrMan. Approximately every\n+     * FEELER_INTERVAL, we attempt to connect to a random address from the new\n+     * table. If successful, we add it to the tried table.\n+     */\n     bool IsFeelerConn() const {\n         return m_conn_type == ConnectionType::FEELER;\n     }\n \n+    /* AddrFetch connections are short lived connections used to solicit\n+     * addresses from peers. These are initiated to addresses submitted via the\n+     * -seednode command line argument, or under certain conditions when the\n+     * AddrMan is empty.\n+     */\n     bool IsAddrFetchConn() const {\n         return m_conn_type == ConnectionType::ADDR_FETCH;\n     }\n \n+    /* Inbound connections are those initiated by a peer. This is the only\n+     * property we know at the time of connection, until P2P messages are\n+     * exchanged.\n+     */\n     bool IsInboundConn() const {\n         return m_conn_type == ConnectionType::INBOUND;\n     }\n \n+    /* Whether we send addr messages over this connection */\n+    bool RelayAddrsWithConn() const {\n+        return m_conn_type != ConnectionType::BLOCK_RELAY;\n+    }\n+\n+    /* Whether we attempt to advertise our own address to the peer when\n+     * processing their VERSION message */\n+    bool AdvertiseAddressToConn() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474385471",
      "id" : 474385471,
      "in_reply_to_id" : 473793235,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4NTQ3MQ==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 902,
      "original_position" : 95,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 472119188,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T03:16:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474385471",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474387266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474387266"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree that having `MarkAddressGood` in this conditional is surprising & that changing to `AdvertiseAddressToConn` augments the confusion. \r\n\r\nFor this PR- I've updated the conditional to be `!pfrom.IsInboundConn() && !pfrom.IsBlockOnlyConn()` (aka removed the misleading function), and added a comment.\r\n\r\nFor future work- I've noted this down. I've taken an initial look and @jnewbery I believe what you're saying makes sense, but I'll have to spend more time with it to fully convince myself. The fact that I missed this behavior in my initial pass affirms that its easy to miss or confuse. I'd like to either (1) understand why it should be in this conditional & comment or (2) understand why it shouldn't be & change it. But I'm leaving this for another PR :) ",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-21T03:24:25Z",
      "diff_hunk" : "@@ -2433,9 +2433,8 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())\n+        if (pfrom.AdvertiseAddressToConn())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474387266",
      "id" : 474387266,
      "in_reply_to_id" : 470962473,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4NzI2Ng==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 2436,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 472121140,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T03:24:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474387266",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474388701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474388701"
         }
      },
      "author_association" : "MEMBER",
      "body" : "heh. thanks for the nudge. I've updated my tooling so I'll pay better attention to the clang-format-diff moving forward. I think I've now cleaned everything up properly in this PR? I'm not sure what exactly you mean by \"all in one go or not at all\"... \r\n\r\n(disclaimer: I didn't take the suggestions to not [IndentCaseBlocks](https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I would much prefer if we turned that format option to true.)",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-21T03:30:47Z",
      "diff_hunk" : "@@ -1841,11 +1841,11 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 // but inbound and manual peers do not use our outbound slots. Inbound peers\n                 // also have the added issue that they could be attacker controlled and used\n                 // to prevent us from connecting to particular hosts if we used them here.\n-                switch(pnode->m_conn_type){\n+                switch (pnode->m_conn_type){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474388701",
      "id" : 474388701,
      "in_reply_to_id" : 470950246,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4ODcwMQ==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 1844,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 472122714,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-21T03:30:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474388701",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "thanks for the feedback! all comments should be addressed. \r\n\r\n@sipa \r\nI agree with this: \r\n> make the addr-relay decision depend on the connection type. That should be the most authoritative information about the connection.\r\n\r\nBut unfortunately I don't think this is true: \r\n>  but if we accidentally forget to create the necessary data structures, test will fail; \r\n\r\nI updated `RelayAddrsWithConn` to always return true, recompiled & ran `test_runner.py` & unit tests. Nothing failed. My concern would be addressed if it did :) I think with #19315, we should be able to add functional tests that would fail if a discrepancy occurs? \r\n\r\nCurrently I think the downside is probably acceptable, but want to highlight since I don't think we have any automatic protection in place. (unless I'm missing something?) \r\n\r\n---\r\n\r\n@jnewbery, RE: \r\n> I think it'd be good to extract everything in the while (!interruptNet) in ThreadOpenConnections() into its own function since deeply nested while/for/if blocks obscure control flow and are very often the sources of bugs. Doing that might be scope creep for this PR though.\r\n\r\nI 100% agree. I spent *so* many hours trying to interpret the exact logic around what types of connections are open, and have gotten very confused by the deeply nested logic flows & nuances of things like where a break / continue that's 4 levels deep will pop you back out to. I've taken a first pass at extracting the outer `while (!interruptNet)` loop here (yes, there are two levels nested): https://github.com/amitiuttarwar/bitcoin/commit/eecc5877c08744c55200846bb7b3b70c922b75ec. However, it needs to be done with great care and I would need to spend a lot more time / build a lot more confidence with these changes before I'd feel comfortable proposing them. Feel free to take a look or further the branch if you're interested :) ",
      "created_at" : "2020-08-21T03:40:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-678020419",
      "id" : 678020419,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19724",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODAyMDQxOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-21T03:55:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678020419",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK c99b26010eaf4d446eb5118e38dbcc03fabba11c\r\n\r\n> have gotten very confused by the deeply nested logic flows & nuances of things like where a break / continue that's 4 levels deep will pop you back out to.\r\n\r\nYes, deeply nested if/while/switch statements hide bugs. If it's possible to factor them out to clarify control flow, we should aim to do that.\r\n\r\n> I've taken a first pass at extracting the outer while (!interruptNet) loop here\r\n\r\nI've had a very quick skim of that branch and it looks like the right direction to me.\r\n\r\n> I would need to spend a lot more time / build a lot more confidence with these changes before I'd feel comfortable proposing them. Feel free to take a look or further the branch if you're interested :)\r\n\r\nI think you're very well positioned to open this PR if you want to. You've already spent hours getting to grips with the logic here :slightly_smiling_face: . I've already got my quota of refactor PRs open, but I can definitely commit to reviewing a PR if you open it. (Equally, we don't need to fix this all at once. We can always leave this for another time).",
      "created_at" : "2020-08-21T10:43:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-678218813",
      "id" : 678218813,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19724",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODIxODgxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-21T10:43:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678218813",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475144532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475144532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "EDIT: We may have already a bug here. I think comment \"Note that block-relay-only peers are already implicitly protected so we only consider setting m_protect for the full-relay peers\" is wrong as block-relay-only peers seems to not be protected from eviction by lagging chain logic and as such we should modify this check to scope them in setting `m_protect==true` (or either modify `ConsiderEviction`'s first check)\r\n\r\n\r\nAFAICT, we have 2 different logics to evict outbound peers : lagging-chain (`ConsiderEviction`) and (`CheckForStaleTipAndEvictPeers`). The former to sanitize out lazy/buggy peers who have never sent us a valid header and are always staying behind our tip, the latter triggered in case of stale tip due to block variance to seek a better chain by rotating our outbound peers if we already reach an outbound limit (`EvictExtraOutboundPeers`).\r\n\r\nWith regards to stale-tip, outbound block-relay-only are protected based on `m_tx_relay==nullptr` : https://github.com/bitcoin/bitcoin/blob/197450f80868fe752c6107955e5da80704212b34/src/net_processing.cpp#L3977\r\n\r\nWith regards to lagging-chain, outbound block-relay-only are protected based on  `m_protect==true` :\r\nhttps://github.com/bitcoin/bitcoin/blob/197450f80868fe752c6107955e5da80704212b34/src/net_processing.cpp#L3909\r\n\r\nSo we may evict them if due to block variance they fulfilled the lagging chain conditions, contrary to the intent of unconditionally conserve them once they announced to us a header.",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T22:26:39Z",
      "diff_hunk" : "@@ -1982,7 +1982,7 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n             }\n         }\n \n-        if (!pfrom.fDisconnect && pfrom.IsOutboundOrBlockRelayConn() && nodestate->pindexBestKnownBlock != nullptr && pfrom.m_tx_relay != nullptr) {\n+        if (!pfrom.fDisconnect && pfrom.IsFullOutboundConn() && nodestate->pindexBestKnownBlock != nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475144532",
      "id" : 475144532,
      "line" : 1985,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0NDUzMg==",
      "original_commit_id" : "5dba7ab2414854f29af5d5e65304c06028111b50",
      "original_line" : 1985,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 23,
      "pull_request_review_id" : 472966059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-23T00:00:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475144532",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475144843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475144843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`block-relay-only` to be consistent with mention of this connection type spread around the codebase.",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T22:30:58Z",
      "diff_hunk" : "@@ -1854,28 +1854,32 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n         }\n \n-        // Feeler Connections\n-        //\n-        // Design goals:\n-        //  * Increase the number of connectable addresses in the tried table.\n-        //\n-        // Method:\n-        //  * Choose a random address from new and attempt to connect to it if we can connect\n-        //    successfully it is added to tried.\n-        //  * Start attempting feeler connections only after node finishes making outbound\n-        //    connections.\n-        //  * Only make a feeler connection once every few minutes.\n-        //\n+        ConnectionType conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+        int64_t nTime = GetTimeMicros();\n         bool fFeeler = false;\n \n-        if (nOutboundFullRelay >= m_max_outbound_full_relay && nOutboundBlockRelay >= m_max_outbound_block_relay && !GetTryNewOutboundPeer()) {\n-            int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n-            if (nTime > nNextFeeler) {\n-                nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n-                fFeeler = true;\n-            } else {\n-                continue;\n-            }\n+        // Determine what type of connection to open. Opening\n+        // OUTBOUND_FULL_RELAY connections gets the highest priority until we\n+        // meet our full-relay capacity. Then we open BLOCK_RELAY connection\n+        // until we hit our block-relay peer limit. GetTryNewOutboundPeer()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475144843",
      "id" : 475144843,
      "line" : 1864,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0NDg0Mw==",
      "original_commit_id" : "51f51813659d26a2e37ce289eab55b496a713363",
      "original_line" : 1864,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 47,
      "pull_request_review_id" : 472966059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-22T23:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475144843",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475145041"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475145041"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/feeler/FEELER/g",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T22:34:13Z",
      "diff_hunk" : "@@ -1854,28 +1854,32 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n         }\n \n-        // Feeler Connections\n-        //\n-        // Design goals:\n-        //  * Increase the number of connectable addresses in the tried table.\n-        //\n-        // Method:\n-        //  * Choose a random address from new and attempt to connect to it if we can connect\n-        //    successfully it is added to tried.\n-        //  * Start attempting feeler connections only after node finishes making outbound\n-        //    connections.\n-        //  * Only make a feeler connection once every few minutes.\n-        //\n+        ConnectionType conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+        int64_t nTime = GetTimeMicros();\n         bool fFeeler = false;\n \n-        if (nOutboundFullRelay >= m_max_outbound_full_relay && nOutboundBlockRelay >= m_max_outbound_block_relay && !GetTryNewOutboundPeer()) {\n-            int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n-            if (nTime > nNextFeeler) {\n-                nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n-                fFeeler = true;\n-            } else {\n-                continue;\n-            }\n+        // Determine what type of connection to open. Opening\n+        // OUTBOUND_FULL_RELAY connections gets the highest priority until we\n+        // meet our full-relay capacity. Then we open BLOCK_RELAY connection\n+        // until we hit our block-relay peer limit. GetTryNewOutboundPeer()\n+        // gets set when a stale tip is detected, so we try opening an\n+        // additional OUTBOUND_FULL_RELAY connection. If none of these\n+        // conditions are met, check the nNextFeeler timer to decide if we\n+        // should open a feeler.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475145041",
      "id" : 475145041,
      "line" : 1868,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0NTA0MQ==",
      "original_commit_id" : "51f51813659d26a2e37ce289eab55b496a713363",
      "original_line" : 1868,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 51,
      "pull_request_review_id" : 472966059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-22T23:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475145041",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475145666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475145666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you can use now `conn_type.IsFeelerConn()` instead of `fFeeler=true` in the feeler-related following checks, semantically they are the same ?",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T22:43:29Z",
      "diff_hunk" : "@@ -1854,28 +1854,32 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n         }\n \n-        // Feeler Connections\n-        //\n-        // Design goals:\n-        //  * Increase the number of connectable addresses in the tried table.\n-        //\n-        // Method:\n-        //  * Choose a random address from new and attempt to connect to it if we can connect\n-        //    successfully it is added to tried.\n-        //  * Start attempting feeler connections only after node finishes making outbound\n-        //    connections.\n-        //  * Only make a feeler connection once every few minutes.\n-        //\n+        ConnectionType conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+        int64_t nTime = GetTimeMicros();\n         bool fFeeler = false;\n \n-        if (nOutboundFullRelay >= m_max_outbound_full_relay && nOutboundBlockRelay >= m_max_outbound_block_relay && !GetTryNewOutboundPeer()) {\n-            int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n-            if (nTime > nNextFeeler) {\n-                nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n-                fFeeler = true;\n-            } else {\n-                continue;\n-            }\n+        // Determine what type of connection to open. Opening\n+        // OUTBOUND_FULL_RELAY connections gets the highest priority until we\n+        // meet our full-relay capacity. Then we open BLOCK_RELAY connection\n+        // until we hit our block-relay peer limit. GetTryNewOutboundPeer()\n+        // gets set when a stale tip is detected, so we try opening an\n+        // additional OUTBOUND_FULL_RELAY connection. If none of these\n+        // conditions are met, check the nNextFeeler timer to decide if we\n+        // should open a feeler.\n+\n+        if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+            // OUTBOUND_FULL_RELAY\n+        } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+            conn_type = ConnectionType::BLOCK_RELAY;\n+        } else if (GetTryNewOutboundPeer()) {\n+            // OUTBOUND_FULL_RELAY\n+        } else if (nTime > nNextFeeler) {\n+            nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n+            conn_type = ConnectionType::FEELER;\n+            fFeeler = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475145666",
      "id" : 475145666,
      "line" : 1879,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0NTY2Ng==",
      "original_commit_id" : "51f51813659d26a2e37ce289eab55b496a713363",
      "original_line" : 1879,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 62,
      "pull_request_review_id" : 472966059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-22T23:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475145666",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475145927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475145927"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`Only attempted after finishing to open other types of outbound connections`, comment on order of connections was dropped from original location in `ThreadOpenConnections`",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T22:47:09Z",
      "diff_hunk" : "@@ -121,12 +121,54 @@ struct CSerializedNetMsg\n  * information we have available at the time of opening or accepting the\n  * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND, /**< peer initiated connections */\n-    OUTBOUND_FULL_RELAY, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n-    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n-    FEELER, /**< short lived connections used to test address validity */\n-    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n-    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */\n+    /**\n+     * Inbound connections are those initiated by a peer. This is the only\n+     * property we know at the time of connection, until P2P messages are\n+     * exchanged.\n+     */\n+    INBOUND,\n+\n+    /**\n+     * These are the default connections that we use to connect with the\n+     * network. There is no restriction on the inventory relayed- by default we\n+     * relay blocks, addresses & transactions. We automatically attempt to open\n+     * MAX_OUTBOUND_FULL_RELAY_CONNECTIONS using addresses from our AddrMan.\n+     */\n+    OUTBOUND_FULL_RELAY,\n+\n+\n+    /**\n+     * We open manual connections to addresses that users explicitly inputted\n+     * via the addnode RPC, or the -connect command line argument. Even if a\n+     * manual connection is misbehaving, we do not automatically disconnect or\n+     * add it to our discouragement filter.\n+     */\n+    MANUAL,\n+\n+    /**\n+     * Feeler connections are short lived connections used to increase the\n+     * number of connectable addresses in our AddrMan. Approximately every\n+     * FEELER_INTERVAL, we attempt to connect to a random address from the new\n+     * table. If successful, we add it to the tried table.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475145927",
      "id" : 475145927,
      "line" : 152,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0NTkyNw==",
      "original_commit_id" : "a2d4fe3d2e05c11ab1a7375b52767929766bc86c",
      "original_line" : 152,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 38,
      "pull_request_review_id" : 472966059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-22T23:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475145927",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475146629"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475146629"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You can mark that addresses for {BLOCK_RELAY,OUTBOUND_FULL_RELAY} are drawn from tried table.\r\n\r\nAlso `block-relay network topology`.",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T22:57:51Z",
      "diff_hunk" : "@@ -121,12 +121,54 @@ struct CSerializedNetMsg\n  * information we have available at the time of opening or accepting the\n  * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND, /**< peer initiated connections */\n-    OUTBOUND_FULL_RELAY, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n-    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n-    FEELER, /**< short lived connections used to test address validity */\n-    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n-    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */\n+    /**\n+     * Inbound connections are those initiated by a peer. This is the only\n+     * property we know at the time of connection, until P2P messages are\n+     * exchanged.\n+     */\n+    INBOUND,\n+\n+    /**\n+     * These are the default connections that we use to connect with the\n+     * network. There is no restriction on the inventory relayed- by default we\n+     * relay blocks, addresses & transactions. We automatically attempt to open\n+     * MAX_OUTBOUND_FULL_RELAY_CONNECTIONS using addresses from our AddrMan.\n+     */\n+    OUTBOUND_FULL_RELAY,\n+\n+\n+    /**\n+     * We open manual connections to addresses that users explicitly inputted\n+     * via the addnode RPC, or the -connect command line argument. Even if a\n+     * manual connection is misbehaving, we do not automatically disconnect or\n+     * add it to our discouragement filter.\n+     */\n+    MANUAL,\n+\n+    /**\n+     * Feeler connections are short lived connections used to increase the\n+     * number of connectable addresses in our AddrMan. Approximately every\n+     * FEELER_INTERVAL, we attempt to connect to a random address from the new\n+     * table. If successful, we add it to the tried table.\n+     */\n+    FEELER,\n+\n+    /**\n+     * After meeting our quota for full outbound connections, we attempt to\n+     * open MAX_BLOCK_RELAY_ONLY_CONNECTIONS to help prevent against partition\n+     * attacks. By not relaying transactions or addresses, these connections\n+     * are harder to detect by a third party, thus helping obfuscate the\n+     * network topology. Addresses are selected from AddrMan.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475146629",
      "id" : 475146629,
      "line" : 161,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0NjYyOQ==",
      "original_commit_id" : "a2d4fe3d2e05c11ab1a7375b52767929766bc86c",
      "original_line" : 161,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 47,
      "pull_request_review_id" : 472966059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-22T23:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475146629",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475146768"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475146768"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For both {ADDR_FETCH, FEELER} you can specify the condition suspending the connection (either VERSION or ADDR reception).",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T23:00:00Z",
      "diff_hunk" : "@@ -121,12 +121,54 @@ struct CSerializedNetMsg\n  * information we have available at the time of opening or accepting the\n  * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND, /**< peer initiated connections */\n-    OUTBOUND_FULL_RELAY, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n-    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n-    FEELER, /**< short lived connections used to test address validity */\n-    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n-    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */\n+    /**\n+     * Inbound connections are those initiated by a peer. This is the only\n+     * property we know at the time of connection, until P2P messages are\n+     * exchanged.\n+     */\n+    INBOUND,\n+\n+    /**\n+     * These are the default connections that we use to connect with the\n+     * network. There is no restriction on the inventory relayed- by default we\n+     * relay blocks, addresses & transactions. We automatically attempt to open\n+     * MAX_OUTBOUND_FULL_RELAY_CONNECTIONS using addresses from our AddrMan.\n+     */\n+    OUTBOUND_FULL_RELAY,\n+\n+\n+    /**\n+     * We open manual connections to addresses that users explicitly inputted\n+     * via the addnode RPC, or the -connect command line argument. Even if a\n+     * manual connection is misbehaving, we do not automatically disconnect or\n+     * add it to our discouragement filter.\n+     */\n+    MANUAL,\n+\n+    /**\n+     * Feeler connections are short lived connections used to increase the\n+     * number of connectable addresses in our AddrMan. Approximately every\n+     * FEELER_INTERVAL, we attempt to connect to a random address from the new\n+     * table. If successful, we add it to the tried table.\n+     */\n+    FEELER,\n+\n+    /**\n+     * After meeting our quota for full outbound connections, we attempt to\n+     * open MAX_BLOCK_RELAY_ONLY_CONNECTIONS to help prevent against partition\n+     * attacks. By not relaying transactions or addresses, these connections\n+     * are harder to detect by a third party, thus helping obfuscate the\n+     * network topology. Addresses are selected from AddrMan.\n+     */\n+    BLOCK_RELAY,\n+\n+    /**\n+     * AddrFetch connections are short lived connections used to solicit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475146768",
      "id" : 475146768,
      "line" : 166,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0Njc2OA==",
      "original_commit_id" : "a2d4fe3d2e05c11ab1a7375b52767929766bc86c",
      "original_line" : 166,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 52,
      "pull_request_review_id" : 472966059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-22T23:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475146768",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475146909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475146909"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`transactions and addresses` to be strict",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T23:02:07Z",
      "diff_hunk" : "@@ -121,12 +121,54 @@ struct CSerializedNetMsg\n  * information we have available at the time of opening or accepting the\n  * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND, /**< peer initiated connections */\n-    OUTBOUND_FULL_RELAY, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n-    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n-    FEELER, /**< short lived connections used to test address validity */\n-    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n-    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */\n+    /**\n+     * Inbound connections are those initiated by a peer. This is the only\n+     * property we know at the time of connection, until P2P messages are\n+     * exchanged.\n+     */\n+    INBOUND,\n+\n+    /**\n+     * These are the default connections that we use to connect with the\n+     * network. There is no restriction on the inventory relayed- by default we\n+     * relay blocks, addresses & transactions. We automatically attempt to open\n+     * MAX_OUTBOUND_FULL_RELAY_CONNECTIONS using addresses from our AddrMan.\n+     */\n+    OUTBOUND_FULL_RELAY,\n+\n+\n+    /**\n+     * We open manual connections to addresses that users explicitly inputted\n+     * via the addnode RPC, or the -connect command line argument. Even if a\n+     * manual connection is misbehaving, we do not automatically disconnect or\n+     * add it to our discouragement filter.\n+     */\n+    MANUAL,\n+\n+    /**\n+     * Feeler connections are short lived connections used to increase the\n+     * number of connectable addresses in our AddrMan. Approximately every\n+     * FEELER_INTERVAL, we attempt to connect to a random address from the new\n+     * table. If successful, we add it to the tried table.\n+     */\n+    FEELER,\n+\n+    /**\n+     * After meeting our quota for full outbound connections, we attempt to\n+     * open MAX_BLOCK_RELAY_ONLY_CONNECTIONS to help prevent against partition\n+     * attacks. By not relaying transactions or addresses, these connections",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475146909",
      "id" : 475146909,
      "line" : 159,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0NjkwOQ==",
      "original_commit_id" : "a2d4fe3d2e05c11ab1a7375b52767929766bc86c",
      "original_line" : 159,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 45,
      "pull_request_review_id" : 472966059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-22T23:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475146909",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475147312"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475147312"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's unclear to me how do you qualify what is a \"third party\" in a P2P network, either another connected peer, a not-directly connected peer to local node or an infrastructure observer ? For the last one it doesn't help at all. So maybe replace by `any other peer, either directly paired with local node or not` ?",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T23:08:34Z",
      "diff_hunk" : "@@ -121,12 +121,54 @@ struct CSerializedNetMsg\n  * information we have available at the time of opening or accepting the\n  * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND, /**< peer initiated connections */\n-    OUTBOUND_FULL_RELAY, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n-    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n-    FEELER, /**< short lived connections used to test address validity */\n-    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n-    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */\n+    /**\n+     * Inbound connections are those initiated by a peer. This is the only\n+     * property we know at the time of connection, until P2P messages are\n+     * exchanged.\n+     */\n+    INBOUND,\n+\n+    /**\n+     * These are the default connections that we use to connect with the\n+     * network. There is no restriction on the inventory relayed- by default we\n+     * relay blocks, addresses & transactions. We automatically attempt to open\n+     * MAX_OUTBOUND_FULL_RELAY_CONNECTIONS using addresses from our AddrMan.\n+     */\n+    OUTBOUND_FULL_RELAY,\n+\n+\n+    /**\n+     * We open manual connections to addresses that users explicitly inputted\n+     * via the addnode RPC, or the -connect command line argument. Even if a\n+     * manual connection is misbehaving, we do not automatically disconnect or\n+     * add it to our discouragement filter.\n+     */\n+    MANUAL,\n+\n+    /**\n+     * Feeler connections are short lived connections used to increase the\n+     * number of connectable addresses in our AddrMan. Approximately every\n+     * FEELER_INTERVAL, we attempt to connect to a random address from the new\n+     * table. If successful, we add it to the tried table.\n+     */\n+    FEELER,\n+\n+    /**\n+     * After meeting our quota for full outbound connections, we attempt to\n+     * open MAX_BLOCK_RELAY_ONLY_CONNECTIONS to help prevent against partition\n+     * attacks. By not relaying transactions or addresses, these connections\n+     * are harder to detect by a third party, thus helping obfuscate the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475147312",
      "id" : 475147312,
      "line" : 160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0NzMxMg==",
      "original_commit_id" : "a2d4fe3d2e05c11ab1a7375b52767929766bc86c",
      "original_line" : 160,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 46,
      "pull_request_review_id" : 472966059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-22T23:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475147312",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475148383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475148383"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know this is likely temporary but comment may be made better like \"Our address sanitization logic (feeler) is less prone to manipulation by outbound connections rather than potentially attacker controlled inbound. We don't sanitize block-relay-only as it might be a leak of their presence\".",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T23:24:15Z",
      "diff_hunk" : "@@ -2454,6 +2452,9 @@ void ProcessMessage(\n             // Get recent addresses\n             connman.PushMessage(&pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::GETADDR));\n             pfrom.fGetAddr = true;\n+\n+            // Moves address from New to Tried table in Addrman\n+            // (unrelated to advertising our address)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475148383",
      "id" : 475148383,
      "line" : 2457,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0ODM4Mw==",
      "original_commit_id" : "652e06117dab566404c79a0d8175507992bf24a1",
      "original_line" : 2457,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 44,
      "pull_request_review_id" : 472966059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-22T23:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475148383",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475148942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475148942"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree with John that block-relay-only peers should have their address marked as good when we receive their `version`. To answer `getaddr` we fetch randomly a list of address from both `vvNew/vvTried` without record bias as far as a quick read of `CAddrMan::GetAddr_` let it think. So moving address from a table to another doesn't change the ability of an attacker to learn about a block-relay-only address.\r\n\r\nMaybe we could improve block-relay-only peers unobservability in future works around AddrMan by filtering out `block-relay-only` address from `getaddr` replies, without introducing an oracle for the original sender of the used address ? @naumenkogs ",
      "commit_id" : "c99b26010eaf4d446eb5118e38dbcc03fabba11c",
      "created_at" : "2020-08-22T23:32:21Z",
      "diff_hunk" : "@@ -2433,9 +2433,8 @@ void ProcessMessage(\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())\n+        if (pfrom.AdvertiseAddressToConn())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475148942",
      "id" : 475148942,
      "in_reply_to_id" : 470962473,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0ODk0Mg==",
      "original_commit_id" : "b672f8d84f8d4562fe8e228abd35c85a66bdbf4c",
      "original_line" : 2436,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 472968449,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19724",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-22T23:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475148942",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
