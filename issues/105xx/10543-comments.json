[
   {
      "body" : "utACK   I prefer this API.  I'll compile it and play with it a bit later today. Thanks for doing this Ã°ÂÂ¥Â ",
      "created_at" : "2017-06-06T17:59:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306567690",
      "id" : 306567690,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-06T18:00:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306567690",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/9326759?v=3",
         "events_url" : "https://api.github.com/users/RHavar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RHavar/followers",
         "following_url" : "https://api.github.com/users/RHavar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RHavar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RHavar",
         "id" : 9326759,
         "login" : "RHavar",
         "organizations_url" : "https://api.github.com/users/RHavar/orgs",
         "received_events_url" : "https://api.github.com/users/RHavar/received_events",
         "repos_url" : "https://api.github.com/users/RHavar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RHavar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RHavar"
      }
   },
   {
      "body" : "My reason for asking this is that it would allow someone to gather information using this RPC, without needing implementation-specific information. Sure, they'll need to understand the details to process the output anyway, but not the just collect.",
      "created_at" : "2017-06-06T18:35:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306577859",
      "id" : 306577859,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-06T18:35:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306577859",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "ACK. Seems to work well, and easier to log/use\r\n\r\n```\r\nbitcoin-cli estimaterawfee 50 0.5\r\n{\r\n  \"short\": {\r\n    \"feerate\": -1\r\n  },\r\n  \"medium\": {\r\n    \"feerate\": -1\r\n  },\r\n  \"long\": {\r\n    \"feerate\": 0.00056300,\r\n    \"decay\": 0.99931,\r\n    \"scale\": 24,\r\n    \"pass\": {\r\n      \"startrange\": 54641,\r\n      \"endrange\": 57374,\r\n      \"withintarget\": 878.66,\r\n      \"totalconfirmed\": 1495.65,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 141.38\r\n    },\r\n    \"fail\": {\r\n      \"startrange\": 52040,\r\n      \"endrange\": 54641,\r\n      \"withintarget\": 959.04,\r\n      \"totalconfirmed\": 4799.12,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 1430.93\r\n    }\r\n  }\r\n}\r\n```",
      "created_at" : "2017-06-06T18:47:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306581006",
      "id" : 306581006,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-06T18:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306581006",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/9326759?v=3",
         "events_url" : "https://api.github.com/users/RHavar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RHavar/followers",
         "following_url" : "https://api.github.com/users/RHavar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RHavar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RHavar",
         "id" : 9326759,
         "login" : "RHavar",
         "organizations_url" : "https://api.github.com/users/RHavar/orgs",
         "received_events_url" : "https://api.github.com/users/RHavar/received_events",
         "repos_url" : "https://api.github.com/users/RHavar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RHavar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RHavar"
      }
   },
   {
      "body" : "Concept ACK",
      "created_at" : "2017-06-07T13:00:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306787276",
      "id" : 306787276,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-07T13:00:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306787276",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "concept ACK as well. ",
      "created_at" : "2017-06-07T13:02:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306787704",
      "id" : 306787704,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-07T13:02:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306787704",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "Concept ACK; this will reduce the number of RPC calls we need to make to get a full picture of the fee market.",
      "created_at" : "2017-06-07T13:39:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-306797506",
      "id" : 306797506,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-07T13:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306797506",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/288011?v=3",
         "events_url" : "https://api.github.com/users/jlopp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jlopp/followers",
         "following_url" : "https://api.github.com/users/jlopp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jlopp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jlopp",
         "id" : 288011,
         "login" : "jlopp",
         "organizations_url" : "https://api.github.com/users/jlopp/orgs",
         "received_events_url" : "https://api.github.com/users/jlopp/received_events",
         "repos_url" : "https://api.github.com/users/jlopp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jlopp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jlopp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jlopp"
      }
   },
   {
      "body" : "rebased due to adjacent line change in src/rpc/client.cpp\r\n\r\n",
      "created_at" : "2017-06-14T19:27:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-308533754",
      "id" : 308533754,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-14T19:27:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308533754",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "I've been running this patch for the last week on https://www.estimatefee.com to come up with estimates for how long a specific transaction will take to confirm. Haven't had any problems, and it works well and offers a nicer API.  So  ACK'ing again",
      "created_at" : "2017-06-14T19:31:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-308534639",
      "id" : 308534639,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-14T19:32:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308534639",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/9326759?v=3",
         "events_url" : "https://api.github.com/users/RHavar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RHavar/followers",
         "following_url" : "https://api.github.com/users/RHavar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RHavar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RHavar",
         "id" : 9326759,
         "login" : "RHavar",
         "organizations_url" : "https://api.github.com/users/RHavar/orgs",
         "received_events_url" : "https://api.github.com/users/RHavar/received_events",
         "repos_url" : "https://api.github.com/users/RHavar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RHavar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RHavar"
      }
   },
   {
      "body" : "```\r\n  \"short\": {\r\n    \"feerate\": -1\r\n  },\r\n```\r\nWhile we're changing the interface anyway, would it make sense to change the \"information absent\" response to something else than `-1`? (according to discussion in #8758)\r\n",
      "created_at" : "2017-06-26T11:02:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-311028530",
      "id" : 311028530,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-26T11:03:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311028530",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> While we're changing the interface anyway, would it make sense to change the \"information absent\" response to something else than -1\r\n\r\nACK",
      "created_at" : "2017-06-27T02:31:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-311235567",
      "id" : 311235567,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-27T02:31:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311235567",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "utACK 7780de8a0f333f9f168eeea2f2227597392034ff irrespective of if the \"information absent\" response is changed.",
      "created_at" : "2017-06-27T23:34:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-311515094",
      "id" : 311515094,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-27T23:34:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311515094",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "OK Updated to change error reporting and information absent\r\nFor a target outside the range:\r\n```\r\nmorcos@queen:~/Projects/bitcoin2$ src/bitcoin-cli -regtest estimaterawfee 1009 \r\nerror code: -8\r\nerror message:\r\nInvalid nblocks\r\n```\r\n\r\nWhen an answer can't be returned due to no fee rate meeting the threshold at the target (pass bucket is omitted but fail bucket still contains useful information):\r\n```\r\nmorcos@queen:~/Projects/bitcoin2$ src/bitcoin-cli -regtest estimaterawfee 1 1\r\n{\r\n  \"short\": {\r\n    \"decay\": 0.962,\r\n    \"scale\": 1,\r\n    \"fail\": {\r\n      \"startrange\": 881683,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 13.45,\r\n      \"totalconfirmed\": 14.96,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"errors\": [\r\n      \"Insufficient data or no feerate found which meets threshold\"\r\n    ]\r\n  },\r\n  \"medium\": {\r\n    \"feerate\": 0.02210603,\r\n    \"decay\": 0.9952,\r\n    \"scale\": 2,\r\n    \"pass\": {\r\n      \"startrange\": 2121876,\r\n      \"endrange\": 3456312,\r\n      \"withintarget\": 40.6,\r\n      \"totalconfirmed\": 40.6,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"fail\": {\r\n      \"startrange\": 1367780,\r\n      \"endrange\": 2121876,\r\n      \"withintarget\": 23.48,\r\n      \"totalconfirmed\": 23.48,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    }\r\n  },\r\n  \"long\": {\r\n    \"feerate\": 0.00128368,\r\n    \"decay\": 0.99931,\r\n    \"scale\": 24,\r\n    \"pass\": {\r\n      \"startrange\": 125239,\r\n      \"endrange\": 131501,\r\n      \"withintarget\": 26652.56,\r\n      \"totalconfirmed\": 26652.56,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"fail\": {\r\n      \"startrange\": 119276,\r\n      \"endrange\": 125239,\r\n      \"withintarget\": 76474.09,\r\n      \"totalconfirmed\": 76474.52,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhen the target is not supported at a given horizon, the result is just omitted.  Also if all feerates pass, the fail bucket is omitted:\r\n```\r\nmorcos@queen:~/Projects/bitcoin2$ src/bitcoin-cli -regtest estimaterawfee 122 0.0001\r\n{\r\n  \"long\": {\r\n    \"feerate\": 0.00001000,\r\n    \"decay\": 0.99931,\r\n    \"scale\": 24,\r\n    \"pass\": {\r\n      \"startrange\": 0,\r\n      \"endrange\": 1000,\r\n      \"withintarget\": 168.05,\r\n      \"totalconfirmed\": 427.14,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 21.99\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhen there is insufficient data to even calculate whether the target is met (pass bucket is omitted but fail bucket still contains useful information): *hacked to require many more data points for med and long horizons\r\n```\r\nmorcos@queen:~/Projects/bitcoin2$ src/bitcoin-cli -regtest estimaterawfee 12\r\n{\r\n  \"short\": {\r\n    \"feerate\": 0.00068495,\r\n    \"decay\": 0.962,\r\n    \"scale\": 1,\r\n    \"pass\": {\r\n      \"startrange\": 66417,\r\n      \"endrange\": 69738,\r\n      \"withintarget\": 346.39,\r\n      \"totalconfirmed\": 357.4,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    },\r\n    \"fail\": {\r\n      \"startrange\": 63254,\r\n      \"endrange\": 66417,\r\n      \"withintarget\": 4365.32,\r\n      \"totalconfirmed\": 6062.21,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 0\r\n    }\r\n  },\r\n  \"medium\": {\r\n    \"decay\": 0.9952,\r\n    \"scale\": 2,\r\n    \"fail\": {\r\n      \"startrange\": 0,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 262932.09,\r\n      \"totalconfirmed\": 301367.03,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 3477.64\r\n    },\r\n    \"errors\": [\r\n      \"Insufficient data or no feerate found which meets threshold\"\r\n    ]\r\n  },\r\n  \"long\": {\r\n    \"decay\": 0.99931,\r\n    \"scale\": 24,\r\n    \"fail\": {\r\n      \"startrange\": 0,\r\n      \"endrange\": 1e+99,\r\n      \"withintarget\": 1852032.93,\r\n      \"totalconfirmed\": 1943598.4,\r\n      \"inmempool\": 0,\r\n      \"leftmempool\": 3236.77\r\n    },\r\n    \"errors\": [\r\n      \"Insufficient data or no feerate found which meets threshold\"\r\n    ]\r\n  }\r\n}\r\n```",
      "created_at" : "2017-06-28T15:35:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-311698254",
      "id" : 311698254,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-06-28T15:35:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311698254",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126025043"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126025043"
         }
      },
      "body" : "Missing space before second `||`.",
      "commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "created_at" : "2017-07-06T21:49:30Z",
      "diff_hunk" : "@@ -876,7 +876,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126025043",
      "id" : 126025043,
      "original_commit_id" : "b63688146e45ea4b25328e9dee11aada30c52ade",
      "original_position" : 5,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 48473219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
      "updated_at" : "2017-07-07T02:33:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126025043",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126025585"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126025585"
         }
      },
      "body" : "Invert condition and switch blocks.",
      "commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "created_at" : "2017-07-06T21:52:19Z",
      "diff_hunk" : "@@ -887,72 +887,92 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+        if ((unsigned int)nBlocks <= ::feeEstimator.HighestTargetTracked(horizon)) {\n+            feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+            UniValue horizonresult(UniValue::VOBJ);\n+            UniValue errors(UniValue::VARR);\n+            UniValue passbucket(UniValue::VOBJ);\n+            passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+            passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+            passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+            UniValue failbucket(UniValue::VOBJ);\n+            failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+            failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+            failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+            if (!(feeRate == CFeeRate(0))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126025585",
      "id" : 126025585,
      "original_commit_id" : "b63688146e45ea4b25328e9dee11aada30c52ade",
      "original_position" : 129,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 48473219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
      "updated_at" : "2017-07-07T02:33:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126025585",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126026402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126026402"
         }
      },
      "body" : "What about early `continue;` to avoid large indentation:\r\n```cpp\r\nif ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\r\n```",
      "commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "created_at" : "2017-07-06T21:56:05Z",
      "diff_hunk" : "@@ -887,72 +887,92 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+        if ((unsigned int)nBlocks <= ::feeEstimator.HighestTargetTracked(horizon)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126026402",
      "id" : 126026402,
      "original_commit_id" : "b63688146e45ea4b25328e9dee11aada30c52ade",
      "original_position" : 111,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 48473219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
      "updated_at" : "2017-07-07T02:33:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126026402",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126056010"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126056010"
         }
      },
      "body" : "I like having the success condition be the first thing you read, but I'll add a comment",
      "commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "created_at" : "2017-07-07T02:05:24Z",
      "diff_hunk" : "@@ -887,72 +887,92 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+        if ((unsigned int)nBlocks <= ::feeEstimator.HighestTargetTracked(horizon)) {\n+            feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+            UniValue horizonresult(UniValue::VOBJ);\n+            UniValue errors(UniValue::VARR);\n+            UniValue passbucket(UniValue::VOBJ);\n+            passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+            passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+            passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+            passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+            UniValue failbucket(UniValue::VOBJ);\n+            failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+            failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+            failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+            failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+            if (!(feeRate == CFeeRate(0))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126056010",
      "id" : 126056010,
      "original_commit_id" : "b63688146e45ea4b25328e9dee11aada30c52ade",
      "original_position" : 129,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 48506274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
      "updated_at" : "2017-07-07T02:33:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126056010",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Addressed nits and squashed\r\n([rawpi.ver2](https://github.com/morcos/bitcoin/commits/rawapi.ver2)) -> 0220261 ([rawapi.ver2.squash](https://github.com/morcos/bitcoin/commits/rawapi.ver2.squash))",
      "created_at" : "2017-07-07T02:36:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#issuecomment-313571587",
      "id" : 313571587,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10543",
      "updated_at" : "2017-07-07T02:36:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313571587",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126101980"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126101980"
         }
      },
      "body" : "Nit, missing comma here and in the following lines.",
      "commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "created_at" : "2017-07-07T09:09:21Z",
      "diff_hunk" : "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126101980",
      "id" : 126101980,
      "original_commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "original_position" : 43,
      "path" : "src/rpc/mining.cpp",
      "position" : 43,
      "pull_request_review_id" : 48554840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
      "updated_at" : "2017-07-07T09:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126101980",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126102532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126102532"
         }
      },
      "body" : "Nit, remove `horizon`.",
      "commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "created_at" : "2017-07-07T09:12:17Z",
      "diff_hunk" : "@@ -876,7 +876,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"estimaterawfee nblocks (threshold horizon)\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126102532",
      "id" : 126102532,
      "original_commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "original_position" : 7,
      "path" : "src/rpc/mining.cpp",
      "position" : 7,
      "pull_request_review_id" : 48554840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
      "updated_at" : "2017-07-07T09:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126102532",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103116"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103116"
         }
      },
      "body" : "Nit, rename `horizon_names`.",
      "commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "created_at" : "2017-07-07T09:15:55Z",
      "diff_hunk" : "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103116",
      "id" : 126103116,
      "original_commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "original_position" : 106,
      "path" : "src/rpc/mining.cpp",
      "position" : 106,
      "pull_request_review_id" : 48554840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
      "updated_at" : "2017-07-07T09:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103116",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103658"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103658"
         }
      },
      "body" : "Maybe for another PR, but IMO `operator!=` would be more expressive, no?",
      "commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "created_at" : "2017-07-07T09:18:40Z",
      "diff_hunk" : "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizonresult(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n+        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        UniValue failbucket(UniValue::VOBJ);\n+        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n+        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n+        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n+        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+\n+        // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n+        if (!(feeRate == CFeeRate(0))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103658",
      "id" : 126103658,
      "original_commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "original_position" : 134,
      "path" : "src/rpc/mining.cpp",
      "position" : 134,
      "pull_request_review_id" : 48554840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
      "updated_at" : "2017-07-07T09:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103658",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103933"
         }
      },
      "body" : "Nit, snake case these multi word variables?",
      "commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "created_at" : "2017-07-07T09:19:50Z",
      "diff_hunk" : "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizonresult(UniValue::VOBJ);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126103933",
      "id" : 126103933,
      "original_commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "original_position" : 116,
      "path" : "src/rpc/mining.cpp",
      "position" : 116,
      "pull_request_review_id" : 48554840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
      "updated_at" : "2017-07-07T09:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126103933",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126105283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126105283"
         }
      },
      "body" : "Should we make these round with 2 decimal places as strings? See https://stackoverflow.com/a/1343925.",
      "commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "created_at" : "2017-07-07T09:26:26Z",
      "diff_hunk" : "@@ -887,72 +887,97 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n-            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n-            \"               Default: 1\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n-            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"  \\\"pass\\\" : {              (json object) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"      \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"      \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"      \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"      \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"      \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"      \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"      }\\n\"\n+            \"      \\\"fail\\\" : { ... }        (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  }\\n\"\n-            \"  \\\"fail\\\" : { ... }        (json object) information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"medium\\\" : { ... }     (json object, optional) estimate for medium time horizon\\n\"\n+            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n             \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     double threshold = 0.95;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n-    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n-    if (!request.params[2].isNull()) {\n-        int horizonInt = request.params[2].get_int();\n-        if (horizonInt < 0 || horizonInt > 2) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n-        } else {\n-            horizon = (FeeEstimateHorizon)horizonInt;\n-        }\n     }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    CFeeRate feeRate;\n-    EstimationResult buckets;\n-    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n \n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n-    result.push_back(Pair(\"decay\", buckets.decay));\n-    result.push_back(Pair(\"scale\", (int)buckets.scale));\n-    UniValue passbucket(UniValue::VOBJ);\n-    passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-    passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-    passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-    passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"pass\", passbucket));\n-    UniValue failbucket(UniValue::VOBJ);\n-    failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-    failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-    failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-    failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n-    result.push_back(Pair(\"fail\", failbucket));\n+    const char* horizonNames[] = {\"short\", \"medium\", \"long\"};\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        UniValue horizonresult(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n+        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n+        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10543#discussion_r126105283",
      "id" : 126105283,
      "original_commit_id" : "022026122f2f6de1b5107427310d72b8d85a9a55",
      "original_position" : 121,
      "path" : "src/rpc/mining.cpp",
      "position" : 121,
      "pull_request_review_id" : 48554840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10543",
      "updated_at" : "2017-07-07T09:28:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126105283",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   }
]
