[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22009 (wallet: Decide which coin selection solution to use based on waste metric by achow101)\n* #21207 (MOVEONLY: CWallet transaction code out of wallet.cpp/.h by ryanofsky)\n* #20640 (wallet, refactor: return out-params of CreateTransaction() as optional struct by theStack)\n* #20205 (wallet: Properly support a wallet id by achow101)\n* #17526 (Use Single Random Draw In addition to knapsack as coin selection fallback by achow101)\n* #17211 (Allow fundrawtransaction and walletcreatefundedpsbt to take external inputs by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-05-21T03:55:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-845634461",
      "id" : 845634461,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22008",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTYzNDQ2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-29T17:04:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845634461",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "With #17331 now merged, this is ready for review.",
      "created_at" : "2021-05-25T15:47:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-847985686",
      "id" : 847985686,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22008",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0Nzk4NTY4Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-25T15:47:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847985686",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-utACK a2dd0dbc91da89a5672d2e578998252b1a3ceabc",
      "created_at" : "2021-05-25T16:13:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-848012016",
      "id" : 848012016,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22008",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0ODAxMjAxNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-25T16:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/848012016",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-26T07:50:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-848549794",
      "id" : 848549794,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22008",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0ODU0OTc5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T07:50:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/848549794",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r639880355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639880355"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "commit d58f1fb0fdd43ed186073f9db477d9afd760c637 Move variable initializations to where they are used;\r\n\r\nNit: the commit message does not mention `m_avoid_partial_spends`, but `m_avoid_reuse`, was this a mix-up?",
      "commit_id" : "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "created_at" : "2021-05-26T16:09:22Z",
      "diff_hunk" : "@@ -2798,6 +2798,12 @@ bool CWallet::CreateTransactionInternal(\n {\n     LOCK(cs_wallet);\n \n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r639880355",
      "id" : 639880355,
      "line" : 2804,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTg4MDM1NQ==",
      "original_commit_id" : "d58f1fb0fdd43ed186073f9db477d9afd760c637",
      "original_line" : 2804,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 78,
      "pull_request_review_id" : 669228402,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T17:56:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639880355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "tACK c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602\r\n\r\nThe rebase ate my most pressing comment. Thanks @instagibbs for https://github.com/bitcoin/bitcoin/pull/22042. :heart: ",
      "created_at" : "2021-05-26T18:10:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849007602",
      "id" : 849007602,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22008",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTAwNzYwMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T18:10:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849007602",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The last rebase broke the fee estimation test on CI, though perhaps a coincidence; I can't reproduce:\r\n\r\n```\r\nself.run_test()\r\nFile \"/tmp/cirrus-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/feature_fee_estimation.py\", line 256, in run_test\r\ncheck_estimates(self.nodes[1], self.fees_per_kb)\r\nFile \"/tmp/cirrus-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/feature_fee_estimation.py\", line 140, in check_estimates\r\ncheck_smart_estimates(node, fees_seen)\r\nFile \"/tmp/cirrus-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/feature_fee_estimation.py\", line 130, in check_smart_estimates\r\n% (feerate, last_feerate))\r\nAssertionError: Estimated fee (0.000565) larger than last fee (0.000479) for lower number of confirms\r\n```\r\n\r\nc2a5bd68ef60d9c64512b205ff6ea4ce7dca8602 looks like a correct rebase",
      "created_at" : "2021-05-26T18:26:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849017814",
      "id" : 849017814,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22008",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTAxNzgxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T18:28:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849017814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code review ACK c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602. I like `inputs_sum` and `recipients_sum`",
      "created_at" : "2021-05-26T18:59:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849039623",
      "id" : 849039623,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22008",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTAzOTYyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T18:59:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849039623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r640957988"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640957988"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops, yes, that's a typo. Will fix if I have to push this again.",
      "commit_id" : "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "created_at" : "2021-05-27T20:52:28Z",
      "diff_hunk" : "@@ -2798,6 +2798,12 @@ bool CWallet::CreateTransactionInternal(\n {\n     LOCK(cs_wallet);\n \n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r640957988",
      "id" : 640957988,
      "in_reply_to_id" : 639880355,
      "line" : 2804,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDk1Nzk4OA==",
      "original_commit_id" : "d58f1fb0fdd43ed186073f9db477d9afd760c637",
      "original_line" : 2804,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 78,
      "pull_request_review_id" : 670629741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-27T20:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640957988",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641457718"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641457718"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In cb81bede9b Move cs_wallet lock in CreateTransactionInternal to top of function and Remove extraneous scope in CreateTransactionInternal\r\n\r\nSeems like curly braces were supposed to limit the scope of the lock (?) but I am unsure why it should be released in the middle of `CreateTransation()`. If the intention is to hold this lock for all of `CreateTransaction()` (I don't see why we'd want to release it in between calls to `CreateTransactionInternal()`), why not grab the lock in `CreateTransation()` and annotate that `CreateTransactionInternal()` requires `cs_wallet`?",
      "commit_id" : "ca46cdc2af4919093a8fce8693c49f874f57d492",
      "created_at" : "2021-05-28T10:51:44Z",
      "diff_hunk" : "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641457718",
      "id" : 641457718,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ1NzcxOA==",
      "original_commit_id" : "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "original_line" : 2798,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 671176599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-28T12:10:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641457718",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641492447"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641492447"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 806c32f6ef Move empty recipients vector check to beginning in CreateTransaction\r\n\r\nI think this check for non-negative amounts should be moved to the beginning of `CreateTransaction()` as well, since it's a sanitization step similar to checking for empty vector. It doesn't need to be checked more than once (and doesn't need the lock).",
      "commit_id" : "ca46cdc2af4919093a8fce8693c49f874f57d492",
      "created_at" : "2021-05-28T11:57:56Z",
      "diff_hunk" : "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        if (recipients_sum < 0 || recipient.nAmount < 0) {\n             error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641492447",
      "id" : 641492447,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ5MjQ0Nw==",
      "original_commit_id" : "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "original_line" : 2814,
      "original_position" : 93,
      "original_start_line" : 2811,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 671176599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-28T12:10:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641492447",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641493935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641493935"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In bc0035a417 Remove extraneous scope in CreateTransactionInternal\r\n\r\n```suggestion\r\n    // Subtract fee from the change output if not subtracting it from recipient outputs\r\n```",
      "commit_id" : "ca46cdc2af4919093a8fce8693c49f874f57d492",
      "created_at" : "2021-05-28T12:00:35Z",
      "diff_hunk" : "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        if (recipients_sum < 0 || recipient.nAmount < 0) {\n             error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }\n-        nValue += recipient.nAmount;\n+        recipients_sum += recipient.nAmount;\n \n-        if (recipient.fSubtractFeeFromAmount)\n-            nSubtractFeeFromAmount++;\n+        if (recipient.fSubtractFeeFromAmount) {\n+            outputs_to_subtract_fee_from++;\n+            coin_selection_params.m_subtract_fee_outputs = true;\n+        }\n     }\n-    if (vecSend.empty())\n-    {\n-        error = _(\"Transaction must have at least one recipient\");\n-        return false;\n+\n+    // Create change script that will be used if we need change\n+    // TODO: pass in scriptChange instead of reservedest so\n+    // change transaction isn't always pay-to-bitcoin-address\n+    CScript scriptChange;\n+\n+    // coin control: send change to custom address\n+    if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n+        scriptChange = GetScriptForDestination(coin_control.destChange);\n+    } else { // no coin control: send change to newly generated address\n+        // Note: We use a new key here to keep it from being obvious which side is the change.\n+        //  The drawback is that by not reusing a previous key, the change may be lost if a\n+        //  backup is restored, if the backup doesn't have the new private key for the change.\n+        //  If we reused the old key, it would be possible to add code to look for and\n+        //  rediscover unknown transactions that were written with keys of ours to recover\n+        //  post-backup change.\n+\n+        // Reserve a new key pair from key pool. If it fails, provide a dummy\n+        // destination in case we don't need change.\n+        CTxDestination dest;\n+        if (!reservedest.GetReservedDestination(dest, true)) {\n+            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        }\n+        scriptChange = GetScriptForDestination(dest);\n+        // A valid destination implies a change script (and\n+        // vice-versa). An empty change script will abort later, if the\n+        // change keypool ran out, but change is required.\n+        CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n+    }\n+    CTxOut change_prototype_txout(0, scriptChange);\n+    coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n+\n+    // Get size of spending the change output\n+    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+    // as lower-bound to allow BnB to do it's thing\n+    if (change_spend_size == -1) {\n+        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+    } else {\n+        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n     }\n \n-    CMutableTransaction txNew;\n+    // Set discard feerate\n+    coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+\n+    // Get the fee rate to use effective values in coin selection\n     FeeCalculation feeCalc;\n-    TxSize tx_sizes;\n-    int nBytes;\n-    {\n-        std::set<CInputCoin> setCoins;\n-        LOCK(cs_wallet);\n-        txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n-        {\n-            std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n-            CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n-            coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n-\n-            // Create change script that will be used if we need change\n-            // TODO: pass in scriptChange instead of reservedest so\n-            // change transaction isn't always pay-to-bitcoin-address\n-            CScript scriptChange;\n-\n-            // coin control: send change to custom address\n-            if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n-                scriptChange = GetScriptForDestination(coin_control.destChange);\n-            } else { // no coin control: send change to newly generated address\n-                // Note: We use a new key here to keep it from being obvious which side is the change.\n-                //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                //  backup is restored, if the backup doesn't have the new private key for the change.\n-                //  If we reused the old key, it would be possible to add code to look for and\n-                //  rediscover unknown transactions that were written with keys of ours to recover\n-                //  post-backup change.\n-\n-                // Reserve a new key pair from key pool. If it fails, provide a dummy\n-                // destination in case we don't need change.\n-                CTxDestination dest;\n-                if (!reservedest.GetReservedDestination(dest, true)) {\n-                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n-                }\n-                scriptChange = GetScriptForDestination(dest);\n-                // A valid destination implies a change script (and\n-                // vice-versa). An empty change script will abort later, if the\n-                // change keypool ran out, but change is required.\n-                CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n-            }\n-            CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n-\n-            // Get size of spending the change output\n-            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-            // as lower-bound to allow BnB to do it's thing\n-            if (change_spend_size == -1) {\n-                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-            } else {\n-                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-            }\n+    coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+    // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+    // provided one\n+    if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+        error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return false;\n+    }\n+    if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+        // eventually allow a fallback fee\n+        error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+        return false;\n+    }\n \n-            // Set discard feerate\n-            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+    // Get long term estimate\n+    CCoinControl cc_temp;\n+    cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+    coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n-            // Get the fee rate to use effective values in coin selection\n-            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n-            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n-            // provided one\n-            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n-                return false;\n-            }\n-            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                // eventually allow a fallback fee\n-                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                return false;\n-            }\n+    // Calculate the cost of change\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n-            // Get long term estimate\n-            CCoinControl cc_temp;\n-            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n-            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+    // vouts to the payees\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+    }\n+    for (const auto& recipient : vecSend)\n+    {\n+        CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-            // Calculate the cost of change\n-            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-            // For creating the change output now, we use the effective feerate.\n-            // For spending the change output in the future, we use the discard feerate for now.\n-            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+        // Include the fee cost for outputs.\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+        }\n \n-            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n+        if (IsDust(txout, chain().relayDustFee()))\n+        {\n+            error = _(\"Transaction amount too small\");\n+            return false;\n+        }\n+        txNew.vout.push_back(txout);\n+    }\n \n-            // vouts to the payees\n-            if (!coin_selection_params.m_subtract_fee_outputs) {\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n-            }\n-            for (const auto& recipient : vecSend)\n-            {\n-                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+    // Include the fees for things that aren't inputs, excluding the change output\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    CAmount selection_target = recipients_sum + not_input_fees;\n \n-                // Include the fee cost for outputs.\n-                if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                }\n+    // Get available coins\n+    std::vector<COutput> vAvailableCoins;\n+    AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n-                if (IsDust(txout, chain().relayDustFee()))\n-                {\n-                    error = _(\"Transaction amount too small\");\n-                    return false;\n-                }\n-                txNew.vout.push_back(txout);\n-            }\n+    // Choose coins to use\n+    CAmount inputs_sum = 0;\n+    std::set<CInputCoin> setCoins;\n+    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n+    {\n+        error = _(\"Insufficient funds\");\n+        return false;\n+    }\n \n-            // Include the fees for things that aren't inputs, excluding the change output\n-            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-            CAmount nValueToSelect = nValue + not_input_fees;\n+    // Always make a change output\n+    // We will reduce the fee from this change output later, and remove the output if it is too small.\n+    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    assert(change_and_fee >= 0);\n+    CTxOut newTxOut(change_and_fee, scriptChange);\n \n-            // Choose coins to use\n-            CAmount inputs_sum = 0;\n-            setCoins.clear();\n-            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, inputs_sum, coin_control, coin_selection_params))\n-            {\n-                error = _(\"Insufficient funds\");\n-                return false;\n-            }\n+    if (nChangePosInOut == -1)\n+    {\n+        // Insert change txn at random position:\n+        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+    }\n+    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+    {\n+        error = _(\"Change index out of range\");\n+        return false;\n+    }\n \n-            // Always make a change output\n-            // We will reduce the fee from this change output later, and remove the output if it is too small.\n-            const CAmount change_and_fee = inputs_sum - nValue;\n-            assert(change_and_fee >= 0);\n-            CTxOut newTxOut(change_and_fee, scriptChange);\n+    assert(nChangePosInOut != -1);\n+    auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n-            if (nChangePosInOut == -1)\n-            {\n-                // Insert change txn at random position:\n-                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-            }\n-            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-            {\n-                error = _(\"Change index out of range\");\n-                return false;\n-            }\n+    // Shuffle selected coins and fill in final vin\n+    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n+    Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n \n-            assert(nChangePosInOut != -1);\n-            auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n+    // Note how the sequence number is set to non-maxint so that\n+    // the nLockTime set above actually works.\n+    //\n+    // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n+    // we use the highest possible value in that range (maxint-2)\n+    // to avoid conflicting with other possible uses of nSequence,\n+    // and in the spirit of \"smallest possible change from prior\n+    // behavior.\"\n+    const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n+    for (const auto& coin : selected_coins) {\n+        txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n+    }\n+\n+    // Calculate the transaction fee\n+    TxSize tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+    int nBytes = tx_sizes.vsize;\n+    if (nBytes < 0) {\n+        error = _(\"Signing transaction failed\");\n+        return false;\n+    }\n+    nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n \n-            // Dummy fill vin for maximum size estimation\n-            //\n-            for (const auto& coin : setCoins) {\n-                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-            }\n+    // Subtract fee from the change output if not subtrating it from recipient outputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641493935",
      "id" : 641493935,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ5MzkzNQ==",
      "original_commit_id" : "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "original_line" : 2979,
      "original_position" : 396,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 671176599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-28T12:13:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641493935",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641497754"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641497754"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It could also be\r\n\r\n```c++\r\nif (std::any_of(vecSend.cbegin(), vecSend.cend(), [](const auto& recipient){ return recipient.nAmount < 0; }))\r\n```",
      "commit_id" : "ca46cdc2af4919093a8fce8693c49f874f57d492",
      "created_at" : "2021-05-28T12:07:35Z",
      "diff_hunk" : "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        if (recipients_sum < 0 || recipient.nAmount < 0) {\n             error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641497754",
      "id" : 641497754,
      "in_reply_to_id" : 641492447,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ5Nzc1NA==",
      "original_commit_id" : "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "original_line" : 2814,
      "original_position" : 93,
      "original_start_line" : 2811,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 671176599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-28T12:10:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641497754",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703339"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "ca46cdc2af4919093a8fce8693c49f874f57d492",
      "created_at" : "2021-05-28T17:22:27Z",
      "diff_hunk" : "@@ -2798,6 +2798,12 @@ bool CWallet::CreateTransactionInternal(\n {\n     LOCK(cs_wallet);\n \n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703339",
      "id" : 641703339,
      "in_reply_to_id" : 639880355,
      "line" : 2804,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTcwMzMzOQ==",
      "original_commit_id" : "d58f1fb0fdd43ed186073f9db477d9afd760c637",
      "original_line" : 2804,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 78,
      "pull_request_review_id" : 671507724,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-28T17:22:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703339",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "ca46cdc2af4919093a8fce8693c49f874f57d492",
      "created_at" : "2021-05-28T17:22:34Z",
      "diff_hunk" : "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703409",
      "id" : 641703409,
      "in_reply_to_id" : 641457718,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTcwMzQwOQ==",
      "original_commit_id" : "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "original_line" : 2798,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 671507826,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-28T17:22:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "ca46cdc2af4919093a8fce8693c49f874f57d492",
      "created_at" : "2021-05-28T17:22:39Z",
      "diff_hunk" : "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        if (recipients_sum < 0 || recipient.nAmount < 0) {\n             error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703449",
      "id" : 641703449,
      "in_reply_to_id" : 641492447,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTcwMzQ0OQ==",
      "original_commit_id" : "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "original_line" : 2814,
      "original_position" : 93,
      "original_start_line" : 2811,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 671507872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-28T17:22:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703449",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703512"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "ca46cdc2af4919093a8fce8693c49f874f57d492",
      "created_at" : "2021-05-28T17:22:46Z",
      "diff_hunk" : "@@ -2795,287 +2795,270 @@ bool CWallet::CreateTransactionInternal(\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n-    CAmount nValue = 0;\n+    LOCK(cs_wallet);\n+\n+    CMutableTransaction txNew; // The resulting transaction that we make\n+    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n+\n+    CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n+    coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n+\n+    CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n-    unsigned int nSubtractFeeFromAmount = 0;\n-    for (const auto& recipient : vecSend)\n-    {\n-        if (nValue < 0 || recipient.nAmount < 0)\n-        {\n+    unsigned int outputs_to_subtract_fee_from = 0; // The number of outputs which we are subtracting the fee from\n+    for (const auto& recipient : vecSend) {\n+        if (recipients_sum < 0 || recipient.nAmount < 0) {\n             error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }\n-        nValue += recipient.nAmount;\n+        recipients_sum += recipient.nAmount;\n \n-        if (recipient.fSubtractFeeFromAmount)\n-            nSubtractFeeFromAmount++;\n+        if (recipient.fSubtractFeeFromAmount) {\n+            outputs_to_subtract_fee_from++;\n+            coin_selection_params.m_subtract_fee_outputs = true;\n+        }\n     }\n-    if (vecSend.empty())\n-    {\n-        error = _(\"Transaction must have at least one recipient\");\n-        return false;\n+\n+    // Create change script that will be used if we need change\n+    // TODO: pass in scriptChange instead of reservedest so\n+    // change transaction isn't always pay-to-bitcoin-address\n+    CScript scriptChange;\n+\n+    // coin control: send change to custom address\n+    if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n+        scriptChange = GetScriptForDestination(coin_control.destChange);\n+    } else { // no coin control: send change to newly generated address\n+        // Note: We use a new key here to keep it from being obvious which side is the change.\n+        //  The drawback is that by not reusing a previous key, the change may be lost if a\n+        //  backup is restored, if the backup doesn't have the new private key for the change.\n+        //  If we reused the old key, it would be possible to add code to look for and\n+        //  rediscover unknown transactions that were written with keys of ours to recover\n+        //  post-backup change.\n+\n+        // Reserve a new key pair from key pool. If it fails, provide a dummy\n+        // destination in case we don't need change.\n+        CTxDestination dest;\n+        if (!reservedest.GetReservedDestination(dest, true)) {\n+            error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+        }\n+        scriptChange = GetScriptForDestination(dest);\n+        // A valid destination implies a change script (and\n+        // vice-versa). An empty change script will abort later, if the\n+        // change keypool ran out, but change is required.\n+        CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n+    }\n+    CTxOut change_prototype_txout(0, scriptChange);\n+    coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n+\n+    // Get size of spending the change output\n+    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+    // as lower-bound to allow BnB to do it's thing\n+    if (change_spend_size == -1) {\n+        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+    } else {\n+        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n     }\n \n-    CMutableTransaction txNew;\n+    // Set discard feerate\n+    coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+\n+    // Get the fee rate to use effective values in coin selection\n     FeeCalculation feeCalc;\n-    TxSize tx_sizes;\n-    int nBytes;\n-    {\n-        std::set<CInputCoin> setCoins;\n-        LOCK(cs_wallet);\n-        txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n-        {\n-            std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n-            CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n-            coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n-\n-            // Create change script that will be used if we need change\n-            // TODO: pass in scriptChange instead of reservedest so\n-            // change transaction isn't always pay-to-bitcoin-address\n-            CScript scriptChange;\n-\n-            // coin control: send change to custom address\n-            if (!std::get_if<CNoDestination>(&coin_control.destChange)) {\n-                scriptChange = GetScriptForDestination(coin_control.destChange);\n-            } else { // no coin control: send change to newly generated address\n-                // Note: We use a new key here to keep it from being obvious which side is the change.\n-                //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                //  backup is restored, if the backup doesn't have the new private key for the change.\n-                //  If we reused the old key, it would be possible to add code to look for and\n-                //  rediscover unknown transactions that were written with keys of ours to recover\n-                //  post-backup change.\n-\n-                // Reserve a new key pair from key pool. If it fails, provide a dummy\n-                // destination in case we don't need change.\n-                CTxDestination dest;\n-                if (!reservedest.GetReservedDestination(dest, true)) {\n-                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n-                }\n-                scriptChange = GetScriptForDestination(dest);\n-                // A valid destination implies a change script (and\n-                // vice-versa). An empty change script will abort later, if the\n-                // change keypool ran out, but change is required.\n-                CHECK_NONFATAL(IsValidDestination(dest) != scriptChange.empty());\n-            }\n-            CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n-\n-            // Get size of spending the change output\n-            int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n-            // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n-            // as lower-bound to allow BnB to do it's thing\n-            if (change_spend_size == -1) {\n-                coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n-            } else {\n-                coin_selection_params.change_spend_size = (size_t)change_spend_size;\n-            }\n+    coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+    // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+    // provided one\n+    if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+        error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+        return false;\n+    }\n+    if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+        // eventually allow a fallback fee\n+        error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+        return false;\n+    }\n \n-            // Set discard feerate\n-            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n+    // Get long term estimate\n+    CCoinControl cc_temp;\n+    cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+    coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n \n-            // Get the fee rate to use effective values in coin selection\n-            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n-            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n-            // provided one\n-            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n-                return false;\n-            }\n-            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                // eventually allow a fallback fee\n-                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                return false;\n-            }\n+    // Calculate the cost of change\n+    // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n+    // For creating the change output now, we use the effective feerate.\n+    // For spending the change output in the future, we use the discard feerate for now.\n+    // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n+    coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n+    coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n \n-            // Get long term estimate\n-            CCoinControl cc_temp;\n-            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n-            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+    // vouts to the payees\n+    if (!coin_selection_params.m_subtract_fee_outputs) {\n+        coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+    }\n+    for (const auto& recipient : vecSend)\n+    {\n+        CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n \n-            // Calculate the cost of change\n-            // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n-            // For creating the change output now, we use the effective feerate.\n-            // For spending the change output in the future, we use the discard feerate for now.\n-            // So cost of change = (change output size * effective feerate) + (size of spending change output * discard feerate)\n-            coin_selection_params.m_change_fee = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n-            coin_selection_params.m_cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_change_fee;\n+        // Include the fee cost for outputs.\n+        if (!coin_selection_params.m_subtract_fee_outputs) {\n+            coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+        }\n \n-            coin_selection_params.m_subtract_fee_outputs = nSubtractFeeFromAmount != 0; // If we are doing subtract fee from recipient, don't use effective values\n+        if (IsDust(txout, chain().relayDustFee()))\n+        {\n+            error = _(\"Transaction amount too small\");\n+            return false;\n+        }\n+        txNew.vout.push_back(txout);\n+    }\n \n-            // vouts to the payees\n-            if (!coin_selection_params.m_subtract_fee_outputs) {\n-                coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n-            }\n-            for (const auto& recipient : vecSend)\n-            {\n-                CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+    // Include the fees for things that aren't inputs, excluding the change output\n+    const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n+    CAmount selection_target = recipients_sum + not_input_fees;\n \n-                // Include the fee cost for outputs.\n-                if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n-                }\n+    // Get available coins\n+    std::vector<COutput> vAvailableCoins;\n+    AvailableCoins(vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n-                if (IsDust(txout, chain().relayDustFee()))\n-                {\n-                    error = _(\"Transaction amount too small\");\n-                    return false;\n-                }\n-                txNew.vout.push_back(txout);\n-            }\n+    // Choose coins to use\n+    CAmount inputs_sum = 0;\n+    std::set<CInputCoin> setCoins;\n+    if (!SelectCoins(vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n+    {\n+        error = _(\"Insufficient funds\");\n+        return false;\n+    }\n \n-            // Include the fees for things that aren't inputs, excluding the change output\n-            const CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n-            CAmount nValueToSelect = nValue + not_input_fees;\n+    // Always make a change output\n+    // We will reduce the fee from this change output later, and remove the output if it is too small.\n+    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    assert(change_and_fee >= 0);\n+    CTxOut newTxOut(change_and_fee, scriptChange);\n \n-            // Choose coins to use\n-            CAmount inputs_sum = 0;\n-            setCoins.clear();\n-            if (!SelectCoins(vAvailableCoins, /* nTargetValue */ nValueToSelect, setCoins, inputs_sum, coin_control, coin_selection_params))\n-            {\n-                error = _(\"Insufficient funds\");\n-                return false;\n-            }\n+    if (nChangePosInOut == -1)\n+    {\n+        // Insert change txn at random position:\n+        nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n+    }\n+    else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n+    {\n+        error = _(\"Change index out of range\");\n+        return false;\n+    }\n \n-            // Always make a change output\n-            // We will reduce the fee from this change output later, and remove the output if it is too small.\n-            const CAmount change_and_fee = inputs_sum - nValue;\n-            assert(change_and_fee >= 0);\n-            CTxOut newTxOut(change_and_fee, scriptChange);\n+    assert(nChangePosInOut != -1);\n+    auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n-            if (nChangePosInOut == -1)\n-            {\n-                // Insert change txn at random position:\n-                nChangePosInOut = GetRandInt(txNew.vout.size()+1);\n-            }\n-            else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n-            {\n-                error = _(\"Change index out of range\");\n-                return false;\n-            }\n+    // Shuffle selected coins and fill in final vin\n+    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n+    Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n \n-            assert(nChangePosInOut != -1);\n-            auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n+    // Note how the sequence number is set to non-maxint so that\n+    // the nLockTime set above actually works.\n+    //\n+    // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n+    // we use the highest possible value in that range (maxint-2)\n+    // to avoid conflicting with other possible uses of nSequence,\n+    // and in the spirit of \"smallest possible change from prior\n+    // behavior.\"\n+    const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n+    for (const auto& coin : selected_coins) {\n+        txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n+    }\n+\n+    // Calculate the transaction fee\n+    TxSize tx_sizes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+    int nBytes = tx_sizes.vsize;\n+    if (nBytes < 0) {\n+        error = _(\"Signing transaction failed\");\n+        return false;\n+    }\n+    nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n \n-            // Dummy fill vin for maximum size estimation\n-            //\n-            for (const auto& coin : setCoins) {\n-                txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n-            }\n+    // Subtract fee from the change output if not subtrating it from recipient outputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703512",
      "id" : 641703512,
      "in_reply_to_id" : 641493935,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTcwMzUxMg==",
      "original_commit_id" : "c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602",
      "original_line" : 2979,
      "original_position" : 396,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 671507973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22008",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-28T17:22:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641703512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-30T11:54:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-850987725",
      "id" : 850987725,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22008",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1MDk4NzcyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-30T11:54:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/850987725",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
