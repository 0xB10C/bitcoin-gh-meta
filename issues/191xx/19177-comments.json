[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435976663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435976663"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 793aa7a2e74460bdb504e8f9e2c642b6e607015c:\r\n\r\nThe comment is incorrect. MAX_SIZE is not equal to VALID_DATA_LIMIT",
      "commit_id" : "271949980d9c1f1b3b47fa2cdcab29abed02b173",
      "created_at" : "2020-06-05T14:55:08Z",
      "diff_hunk" : "@@ -124,13 +124,9 @@ def test_checksum(self):\n     def test_size(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n         with self.nodes[0].assert_debug_log(['']):\n-            msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n-            cut_len = (\n-                4 +  # magic\n-                12  # msgtype\n-            )\n-            # modify len to MAX_SIZE + 1\n-            msg = msg[:cut_len] + struct.pack(\"<I\", 0x02000000 + 1) + msg[cut_len + 4:]\n+            # Create a message with PAYLOAD SIZE = MAX_SIZE + 1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435976663",
      "id" : 435976663,
      "line" : 114,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NjY2Mw==",
      "original_commit_id" : "793aa7a2e74460bdb504e8f9e2c642b6e607015c",
      "original_line" : 127,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : 146,
      "pull_request_review_id" : 425375215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-05T14:58:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435976663",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435977663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435977663"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 271949980d:\r\n\r\n```suggestion\r\n            conn.send_message(msg_at_size)\r\n```",
      "commit_id" : "271949980d9c1f1b3b47fa2cdcab29abed02b173",
      "created_at" : "2020-06-05T14:56:40Z",
      "diff_hunk" : "@@ -46,114 +48,34 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        \"\"\"\n-         . Test msg header\n-        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n-           that it isn't an effective DoS against the node.\n-\n-        1. Send an oversized (4MB+) message and check that we're disconnected.\n-\n-        2. Send a few messages with an incorrect data size in the header, ensure the\n-           messages are ignored.\n-        \"\"\"\n         self.test_magic_bytes()\n         self.test_checksum()\n         self.test_size()\n         self.test_msgtype()\n         self.test_large_inv()\n+        self.test_resource_exhaustion()\n \n-        node = self.nodes[0]\n-        self.node = node\n-        node.add_p2p_connection(P2PDataStore())\n-        conn2 = node.add_p2p_connection(P2PDataStore())\n-\n-        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n-        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n-\n-        #\n-        # 0.\n-        #\n-        # Send as large a message as is valid, ensure we aren't disconnected but\n-        # also can't exhaust resources.\n-        #\n-        msg_at_size = msg_unrecognized(str_data=\"b\" * valid_data_limit)\n-        assert len(msg_at_size.serialize()) == msg_limit\n+    def test_resource_exhaustion(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n+        assert len(msg_at_size.serialize()) == MSG_LIMIT\n \n         self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n \n         # Run a bunch of times to test for memory exhaustion.\n         for _ in range(80):\n-            node.p2p.send_message(msg_at_size)\n+            self.nodes[0].p2p.send_message(msg_at_size)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435977663",
      "id" : 435977663,
      "line" : 67,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NzY2Mw==",
      "original_commit_id" : "271949980d9c1f1b3b47fa2cdcab29abed02b173",
      "original_line" : 67,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : 56,
      "pull_request_review_id" : 425375215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-05T14:58:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435977663",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435978014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435978014"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        assert conn.p2p.is_connected\r\n```\r\n\r\nSame",
      "commit_id" : "271949980d9c1f1b3b47fa2cdcab29abed02b173",
      "created_at" : "2020-06-05T14:57:12Z",
      "diff_hunk" : "@@ -46,114 +48,34 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        \"\"\"\n-         . Test msg header\n-        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n-           that it isn't an effective DoS against the node.\n-\n-        1. Send an oversized (4MB+) message and check that we're disconnected.\n-\n-        2. Send a few messages with an incorrect data size in the header, ensure the\n-           messages are ignored.\n-        \"\"\"\n         self.test_magic_bytes()\n         self.test_checksum()\n         self.test_size()\n         self.test_msgtype()\n         self.test_large_inv()\n+        self.test_resource_exhaustion()\n \n-        node = self.nodes[0]\n-        self.node = node\n-        node.add_p2p_connection(P2PDataStore())\n-        conn2 = node.add_p2p_connection(P2PDataStore())\n-\n-        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n-        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n-\n-        #\n-        # 0.\n-        #\n-        # Send as large a message as is valid, ensure we aren't disconnected but\n-        # also can't exhaust resources.\n-        #\n-        msg_at_size = msg_unrecognized(str_data=\"b\" * valid_data_limit)\n-        assert len(msg_at_size.serialize()) == msg_limit\n+    def test_resource_exhaustion(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n+        assert len(msg_at_size.serialize()) == MSG_LIMIT\n \n         self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n \n         # Run a bunch of times to test for memory exhaustion.\n         for _ in range(80):\n-            node.p2p.send_message(msg_at_size)\n+            self.nodes[0].p2p.send_message(msg_at_size)\n \n         # Check that, even though the node is being hammered by nonsense from one\n         # connection, it can still service other peers in a timely way.\n         for _ in range(20):\n-            conn2.sync_with_ping(timeout=2)\n+            conn.sync_with_ping(timeout=2)\n \n-        # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n+        # Peer 1, despite being served up a bunch of nonsense, should still be connected.\n         self.log.info(\"Waiting for node to drop junk messages.\")\n-        node.p2p.sync_with_ping(timeout=400)\n-        assert node.p2p.is_connected\n-\n-        #\n-        # 1.\n-        #\n-        # Send an oversized message, ensure we're disconnected.\n-        #\n-        # Under macOS this test is skipped due to an unexpected error code\n-        # returned from the closing socket which python/asyncio does not\n-        # yet know how to handle.\n-        #\n-        if sys.platform != 'darwin':\n-            msg_over_size = msg_unrecognized(str_data=\"b\" * (valid_data_limit + 1))\n-            assert len(msg_over_size.serialize()) == (msg_limit + 1)\n-\n-            # An unknown message type (or *any* message type) over\n-            # MAX_PROTOCOL_MESSAGE_LENGTH should result in a disconnect.\n-            node.p2p.send_message(msg_over_size)\n-            node.p2p.wait_for_disconnect(timeout=4)\n-\n-            node.disconnect_p2ps()\n-            conn = node.add_p2p_connection(P2PDataStore())\n-            conn.wait_for_verack()\n-        else:\n-            self.log.info(\"Skipping test p2p_invalid_messages/1 (oversized message) under macOS\")\n-\n-        #\n-        # 2.\n-        #\n-        # Send messages with an incorrect data size in the header.\n-        #\n-        actual_size = 100\n-        msg = msg_unrecognized(str_data=\"b\" * actual_size)\n-\n-        # TODO: handle larger-than cases. I haven't been able to pin down what behavior to expect.\n-        for wrong_size in (2, 77, 78, 79):\n-            self.log.info(\"Sending a message with incorrect size of {}\".format(wrong_size))\n-\n-            # Unmodified message should submit okay.\n-            node.p2p.send_and_ping(msg)\n-\n-            # A message lying about its data size results in a disconnect when the incorrect\n-            # data size is less than the actual size.\n-            #\n-            # TODO: why does behavior change at 78 bytes?\n-            #\n-            node.p2p.send_raw_message(self._tweak_msg_data_size(msg, wrong_size))\n-\n-            # For some reason unknown to me, we sometimes have to push additional data to the\n-            # peer in order for it to realize a disconnect.\n-            try:\n-                node.p2p.send_message(msg_ping(nonce=123123))\n-            except IOError:\n-                pass\n-\n-            node.p2p.wait_for_disconnect(timeout=10)\n-            node.disconnect_p2ps()\n-            node.add_p2p_connection(P2PDataStore())\n-\n-        # Node is still up.\n-        conn = node.add_p2p_connection(P2PDataStore())\n+        conn.sync_with_ping(timeout=400)\n+        assert self.nodes[0].p2p.is_connected",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435978014",
      "id" : 435978014,
      "line" : 77,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3ODAxNA==",
      "original_commit_id" : "271949980d9c1f1b3b47fa2cdcab29abed02b173",
      "original_line" : 77,
      "original_position" : 130,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : 130,
      "pull_request_review_id" : 425375215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-05T14:58:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435978014",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
